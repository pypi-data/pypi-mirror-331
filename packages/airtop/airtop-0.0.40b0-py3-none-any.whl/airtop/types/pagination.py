# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing_extensions
from ..core.serialization import FieldMetadata
from ..core.pydantic_utilities import IS_PYDANTIC_V2
import typing
import pydantic


class Pagination(UniversalBaseModel):
    current_limit: typing_extensions.Annotated[int, FieldMetadata(alias="currentLimit")]
    current_page: typing_extensions.Annotated[int, FieldMetadata(alias="currentPage")]
    final_count: typing_extensions.Annotated[int, FieldMetadata(alias="finalCount")]
    has_more: typing_extensions.Annotated[bool, FieldMetadata(alias="hasMore")]
    initial_count: typing_extensions.Annotated[int, FieldMetadata(alias="initialCount")]
    next_offset: typing_extensions.Annotated[int, FieldMetadata(alias="nextOffset")]
    number_of_pages: typing_extensions.Annotated[int, FieldMetadata(alias="numberOfPages")]
    total_items: typing_extensions.Annotated[int, FieldMetadata(alias="totalItems")]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
