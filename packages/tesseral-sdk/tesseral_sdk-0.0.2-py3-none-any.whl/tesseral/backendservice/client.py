# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.list_organizations_response import ListOrganizationsResponse
from ..core.pydantic_utilities import parse_obj_as
from json.decoder import JSONDecodeError
from ..core.api_error import ApiError
import datetime as dt
from ..types.create_organization_response import CreateOrganizationResponse
from ..types.get_organization_response import GetOrganizationResponse
from ..core.jsonable_encoder import jsonable_encoder
from ..types.delete_organization_response import DeleteOrganizationResponse
from ..types.update_organization_response import UpdateOrganizationResponse
from ..types.get_organization_google_hosted_domains_response import GetOrganizationGoogleHostedDomainsResponse
from ..types.update_organization_google_hosted_domains_response import UpdateOrganizationGoogleHostedDomainsResponse
from ..types.get_organization_microsoft_tenant_i_ds_response import GetOrganizationMicrosoftTenantIDsResponse
from ..types.update_organization_microsoft_tenant_i_ds_response import UpdateOrganizationMicrosoftTenantIDsResponse
from ..types.list_passkeys_response import ListPasskeysResponse
from ..types.get_passkey_response import GetPasskeyResponse
from ..types.delete_passkey_response import DeletePasskeyResponse
from ..types.update_passkey_response import UpdatePasskeyResponse
from ..types.get_project_response import GetProjectResponse
from ..types.list_saml_connections_response import ListSamlConnectionsResponse
from ..types.create_saml_connection_response import CreateSamlConnectionResponse
from ..types.get_saml_connection_response import GetSamlConnectionResponse
from ..types.delete_saml_connection_response import DeleteSamlConnectionResponse
from ..types.update_saml_connection_response import UpdateSamlConnectionResponse
from ..types.list_scimapi_keys_response import ListScimapiKeysResponse
from ..types.create_scimapi_key_response import CreateScimapiKeyResponse
from ..types.get_scimapi_key_response import GetScimapiKeyResponse
from ..types.delete_scimapi_key_response import DeleteScimapiKeyResponse
from ..types.update_scimapi_key_response import UpdateScimapiKeyResponse
from ..types.revoke_scimapi_key_response import RevokeScimapiKeyResponse
from ..types.list_sessions_response import ListSessionsResponse
from ..types.get_session_response import GetSessionResponse
from ..types.list_user_invites_response import ListUserInvitesResponse
from ..types.create_user_invite_response import CreateUserInviteResponse
from ..types.get_user_invite_response import GetUserInviteResponse
from ..types.delete_user_invite_response import DeleteUserInviteResponse
from ..types.list_users_response import ListUsersResponse
from ..types.create_user_response import CreateUserResponse
from ..types.get_user_response import GetUserResponse
from ..types.delete_user_response import DeleteUserResponse
from ..types.update_user_response import UpdateUserResponse
from ..core.client_wrapper import AsyncClientWrapper

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class BackendserviceClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def listorganizations(
        self, *, page_token: typing.Optional[str] = None, request_options: typing.Optional[RequestOptions] = None
    ) -> ListOrganizationsResponse:
        """
        Parameters
        ----------
        page_token : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListOrganizationsResponse
            OK

        Examples
        --------
        from tesseral import tesseral

        client = tesseral(
            base_url="https://yourhost.com/path/to/api",
        )
        client.backendservice.listorganizations()
        """
        _response = self._client_wrapper.httpx_client.request(
            "backend/v1/organizations",
            method="GET",
            params={
                "pageToken": page_token,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ListOrganizationsResponse,
                    parse_obj_as(
                        type_=ListOrganizationsResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def createorganization(
        self,
        *,
        id: typing.Optional[str] = OMIT,
        display_name: typing.Optional[str] = OMIT,
        create_time: typing.Optional[dt.datetime] = OMIT,
        update_time: typing.Optional[dt.datetime] = OMIT,
        log_in_with_google: typing.Optional[bool] = OMIT,
        log_in_with_microsoft: typing.Optional[bool] = OMIT,
        log_in_with_email: typing.Optional[bool] = OMIT,
        log_in_with_password: typing.Optional[bool] = OMIT,
        log_in_with_saml: typing.Optional[bool] = OMIT,
        log_in_with_authenticator_app: typing.Optional[bool] = OMIT,
        log_in_with_passkey: typing.Optional[bool] = OMIT,
        require_mfa: typing.Optional[bool] = OMIT,
        scim_enabled: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CreateOrganizationResponse:
        """
        Parameters
        ----------
        id : typing.Optional[str]

        display_name : typing.Optional[str]

        create_time : typing.Optional[dt.datetime]

        update_time : typing.Optional[dt.datetime]

        log_in_with_google : typing.Optional[bool]

        log_in_with_microsoft : typing.Optional[bool]

        log_in_with_email : typing.Optional[bool]

        log_in_with_password : typing.Optional[bool]

        log_in_with_saml : typing.Optional[bool]

        log_in_with_authenticator_app : typing.Optional[bool]

        log_in_with_passkey : typing.Optional[bool]

        require_mfa : typing.Optional[bool]

        scim_enabled : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreateOrganizationResponse
            OK

        Examples
        --------
        from tesseral import tesseral

        client = tesseral(
            base_url="https://yourhost.com/path/to/api",
        )
        client.backendservice.createorganization()
        """
        _response = self._client_wrapper.httpx_client.request(
            "backend/v1/organizations",
            method="POST",
            json={
                "id": id,
                "displayName": display_name,
                "createTime": create_time,
                "updateTime": update_time,
                "logInWithGoogle": log_in_with_google,
                "logInWithMicrosoft": log_in_with_microsoft,
                "logInWithEmail": log_in_with_email,
                "logInWithPassword": log_in_with_password,
                "logInWithSaml": log_in_with_saml,
                "logInWithAuthenticatorApp": log_in_with_authenticator_app,
                "logInWithPasskey": log_in_with_passkey,
                "requireMfa": require_mfa,
                "scimEnabled": scim_enabled,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    CreateOrganizationResponse,
                    parse_obj_as(
                        type_=CreateOrganizationResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def getorganization(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetOrganizationResponse:
        """
        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetOrganizationResponse
            OK

        Examples
        --------
        from tesseral import tesseral

        client = tesseral(
            base_url="https://yourhost.com/path/to/api",
        )
        client.backendservice.getorganization(
            id="id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"backend/v1/organizations/{jsonable_encoder(id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    GetOrganizationResponse,
                    parse_obj_as(
                        type_=GetOrganizationResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def deleteorganization(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> DeleteOrganizationResponse:
        """
        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeleteOrganizationResponse
            OK

        Examples
        --------
        from tesseral import tesseral

        client = tesseral(
            base_url="https://yourhost.com/path/to/api",
        )
        client.backendservice.deleteorganization(
            id="id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"backend/v1/organizations/{jsonable_encoder(id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    DeleteOrganizationResponse,
                    parse_obj_as(
                        type_=DeleteOrganizationResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def updateorganization(
        self,
        id_: str,
        *,
        id: typing.Optional[str] = OMIT,
        display_name: typing.Optional[str] = OMIT,
        create_time: typing.Optional[dt.datetime] = OMIT,
        update_time: typing.Optional[dt.datetime] = OMIT,
        log_in_with_google: typing.Optional[bool] = OMIT,
        log_in_with_microsoft: typing.Optional[bool] = OMIT,
        log_in_with_email: typing.Optional[bool] = OMIT,
        log_in_with_password: typing.Optional[bool] = OMIT,
        log_in_with_saml: typing.Optional[bool] = OMIT,
        log_in_with_authenticator_app: typing.Optional[bool] = OMIT,
        log_in_with_passkey: typing.Optional[bool] = OMIT,
        require_mfa: typing.Optional[bool] = OMIT,
        scim_enabled: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UpdateOrganizationResponse:
        """
        Parameters
        ----------
        id_ : str

        id : typing.Optional[str]

        display_name : typing.Optional[str]

        create_time : typing.Optional[dt.datetime]

        update_time : typing.Optional[dt.datetime]

        log_in_with_google : typing.Optional[bool]

        log_in_with_microsoft : typing.Optional[bool]

        log_in_with_email : typing.Optional[bool]

        log_in_with_password : typing.Optional[bool]

        log_in_with_saml : typing.Optional[bool]

        log_in_with_authenticator_app : typing.Optional[bool]

        log_in_with_passkey : typing.Optional[bool]

        require_mfa : typing.Optional[bool]

        scim_enabled : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UpdateOrganizationResponse
            OK

        Examples
        --------
        from tesseral import tesseral

        client = tesseral(
            base_url="https://yourhost.com/path/to/api",
        )
        client.backendservice.updateorganization(
            id_="id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"backend/v1/organizations/{jsonable_encoder(id_)}",
            method="PATCH",
            json={
                "id": id,
                "displayName": display_name,
                "createTime": create_time,
                "updateTime": update_time,
                "logInWithGoogle": log_in_with_google,
                "logInWithMicrosoft": log_in_with_microsoft,
                "logInWithEmail": log_in_with_email,
                "logInWithPassword": log_in_with_password,
                "logInWithSaml": log_in_with_saml,
                "logInWithAuthenticatorApp": log_in_with_authenticator_app,
                "logInWithPasskey": log_in_with_passkey,
                "requireMfa": require_mfa,
                "scimEnabled": scim_enabled,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    UpdateOrganizationResponse,
                    parse_obj_as(
                        type_=UpdateOrganizationResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def getorganizationgooglehosteddomains(
        self, organization_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetOrganizationGoogleHostedDomainsResponse:
        """
        Parameters
        ----------
        organization_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetOrganizationGoogleHostedDomainsResponse
            OK

        Examples
        --------
        from tesseral import tesseral

        client = tesseral(
            base_url="https://yourhost.com/path/to/api",
        )
        client.backendservice.getorganizationgooglehosteddomains(
            organization_id="organizationId",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"backend/v1/organizations/{jsonable_encoder(organization_id)}/google-hosted-domains",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    GetOrganizationGoogleHostedDomainsResponse,
                    parse_obj_as(
                        type_=GetOrganizationGoogleHostedDomainsResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def updateorganizationgooglehosteddomains(
        self,
        organization_id_: str,
        *,
        organization_id: typing.Optional[str] = OMIT,
        google_hosted_domains: typing.Optional[typing.Sequence[str]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UpdateOrganizationGoogleHostedDomainsResponse:
        """
        Parameters
        ----------
        organization_id_ : str

        organization_id : typing.Optional[str]

        google_hosted_domains : typing.Optional[typing.Sequence[str]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UpdateOrganizationGoogleHostedDomainsResponse
            OK

        Examples
        --------
        from tesseral import tesseral

        client = tesseral(
            base_url="https://yourhost.com/path/to/api",
        )
        client.backendservice.updateorganizationgooglehosteddomains(
            organization_id_="organizationId",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"backend/v1/organizations/{jsonable_encoder(organization_id_)}/google-hosted-domains",
            method="PATCH",
            json={
                "organizationId": organization_id,
                "googleHostedDomains": google_hosted_domains,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    UpdateOrganizationGoogleHostedDomainsResponse,
                    parse_obj_as(
                        type_=UpdateOrganizationGoogleHostedDomainsResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def getorganizationmicrosofttenantids(
        self, organization_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetOrganizationMicrosoftTenantIDsResponse:
        """
        Parameters
        ----------
        organization_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetOrganizationMicrosoftTenantIDsResponse
            OK

        Examples
        --------
        from tesseral import tesseral

        client = tesseral(
            base_url="https://yourhost.com/path/to/api",
        )
        client.backendservice.getorganizationmicrosofttenantids(
            organization_id="organizationId",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"backend/v1/organizations/{jsonable_encoder(organization_id)}/microsoft-tenant-ids",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    GetOrganizationMicrosoftTenantIDsResponse,
                    parse_obj_as(
                        type_=GetOrganizationMicrosoftTenantIDsResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def updateorganizationmicrosofttenantids(
        self,
        organization_id_: str,
        *,
        organization_id: typing.Optional[str] = OMIT,
        microsoft_tenant_ids: typing.Optional[typing.Sequence[str]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UpdateOrganizationMicrosoftTenantIDsResponse:
        """
        Parameters
        ----------
        organization_id_ : str

        organization_id : typing.Optional[str]

        microsoft_tenant_ids : typing.Optional[typing.Sequence[str]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UpdateOrganizationMicrosoftTenantIDsResponse
            OK

        Examples
        --------
        from tesseral import tesseral

        client = tesseral(
            base_url="https://yourhost.com/path/to/api",
        )
        client.backendservice.updateorganizationmicrosofttenantids(
            organization_id_="organizationId",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"backend/v1/organizations/{jsonable_encoder(organization_id_)}/microsoft-tenant-ids",
            method="PATCH",
            json={
                "organizationId": organization_id,
                "microsoftTenantIds": microsoft_tenant_ids,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    UpdateOrganizationMicrosoftTenantIDsResponse,
                    parse_obj_as(
                        type_=UpdateOrganizationMicrosoftTenantIDsResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def listpasskeys(
        self,
        *,
        user_id: typing.Optional[str] = None,
        page_token: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListPasskeysResponse:
        """
        Parameters
        ----------
        user_id : typing.Optional[str]

        page_token : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListPasskeysResponse
            OK

        Examples
        --------
        from tesseral import tesseral

        client = tesseral(
            base_url="https://yourhost.com/path/to/api",
        )
        client.backendservice.listpasskeys()
        """
        _response = self._client_wrapper.httpx_client.request(
            "backend/v1/passkeys",
            method="GET",
            params={
                "userId": user_id,
                "pageToken": page_token,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ListPasskeysResponse,
                    parse_obj_as(
                        type_=ListPasskeysResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def getpasskey(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> GetPasskeyResponse:
        """
        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetPasskeyResponse
            OK

        Examples
        --------
        from tesseral import tesseral

        client = tesseral(
            base_url="https://yourhost.com/path/to/api",
        )
        client.backendservice.getpasskey(
            id="id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"backend/v1/passkeys/{jsonable_encoder(id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    GetPasskeyResponse,
                    parse_obj_as(
                        type_=GetPasskeyResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def deletepasskey(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> DeletePasskeyResponse:
        """
        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeletePasskeyResponse
            OK

        Examples
        --------
        from tesseral import tesseral

        client = tesseral(
            base_url="https://yourhost.com/path/to/api",
        )
        client.backendservice.deletepasskey(
            id="id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"backend/v1/passkeys/{jsonable_encoder(id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    DeletePasskeyResponse,
                    parse_obj_as(
                        type_=DeletePasskeyResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def updatepasskey(
        self,
        id_: str,
        *,
        id: typing.Optional[str] = OMIT,
        user_id: typing.Optional[str] = OMIT,
        create_time: typing.Optional[dt.datetime] = OMIT,
        update_time: typing.Optional[dt.datetime] = OMIT,
        disabled: typing.Optional[bool] = OMIT,
        credential_id: typing.Optional[str] = OMIT,
        public_key_pkix: typing.Optional[str] = OMIT,
        aaguid: typing.Optional[str] = OMIT,
        rp_id: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UpdatePasskeyResponse:
        """
        Parameters
        ----------
        id_ : str

        id : typing.Optional[str]

        user_id : typing.Optional[str]

        create_time : typing.Optional[dt.datetime]

        update_time : typing.Optional[dt.datetime]

        disabled : typing.Optional[bool]

        credential_id : typing.Optional[str]

        public_key_pkix : typing.Optional[str]

        aaguid : typing.Optional[str]

        rp_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UpdatePasskeyResponse
            OK

        Examples
        --------
        from tesseral import tesseral

        client = tesseral(
            base_url="https://yourhost.com/path/to/api",
        )
        client.backendservice.updatepasskey(
            id_="id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"backend/v1/passkeys/{jsonable_encoder(id_)}",
            method="PATCH",
            json={
                "id": id,
                "userId": user_id,
                "createTime": create_time,
                "updateTime": update_time,
                "disabled": disabled,
                "credentialId": credential_id,
                "publicKeyPkix": public_key_pkix,
                "aaguid": aaguid,
                "rpId": rp_id,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    UpdatePasskeyResponse,
                    parse_obj_as(
                        type_=UpdatePasskeyResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def getproject(self, *, request_options: typing.Optional[RequestOptions] = None) -> GetProjectResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetProjectResponse
            OK

        Examples
        --------
        from tesseral import tesseral

        client = tesseral(
            base_url="https://yourhost.com/path/to/api",
        )
        client.backendservice.getproject()
        """
        _response = self._client_wrapper.httpx_client.request(
            "backend/v1/project",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    GetProjectResponse,
                    parse_obj_as(
                        type_=GetProjectResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def listsamlconnections(
        self,
        *,
        organization_id: typing.Optional[str] = None,
        page_token: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListSamlConnectionsResponse:
        """
        Parameters
        ----------
        organization_id : typing.Optional[str]

        page_token : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListSamlConnectionsResponse
            OK

        Examples
        --------
        from tesseral import tesseral

        client = tesseral(
            base_url="https://yourhost.com/path/to/api",
        )
        client.backendservice.listsamlconnections()
        """
        _response = self._client_wrapper.httpx_client.request(
            "backend/v1/saml-connections",
            method="GET",
            params={
                "organizationId": organization_id,
                "pageToken": page_token,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ListSamlConnectionsResponse,
                    parse_obj_as(
                        type_=ListSamlConnectionsResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def createsamlconnection(
        self,
        *,
        id: typing.Optional[str] = OMIT,
        organization_id: typing.Optional[str] = OMIT,
        create_time: typing.Optional[dt.datetime] = OMIT,
        update_time: typing.Optional[dt.datetime] = OMIT,
        primary: typing.Optional[bool] = OMIT,
        sp_acs_url: typing.Optional[str] = OMIT,
        sp_entity_id: typing.Optional[str] = OMIT,
        idp_redirect_url: typing.Optional[str] = OMIT,
        idp_x_509_certificate: typing.Optional[str] = OMIT,
        idp_entity_id: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CreateSamlConnectionResponse:
        """
        Parameters
        ----------
        id : typing.Optional[str]

        organization_id : typing.Optional[str]

        create_time : typing.Optional[dt.datetime]

        update_time : typing.Optional[dt.datetime]

        primary : typing.Optional[bool]

        sp_acs_url : typing.Optional[str]

        sp_entity_id : typing.Optional[str]

        idp_redirect_url : typing.Optional[str]

        idp_x_509_certificate : typing.Optional[str]

        idp_entity_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreateSamlConnectionResponse
            OK

        Examples
        --------
        from tesseral import tesseral

        client = tesseral(
            base_url="https://yourhost.com/path/to/api",
        )
        client.backendservice.createsamlconnection()
        """
        _response = self._client_wrapper.httpx_client.request(
            "backend/v1/saml-connections",
            method="POST",
            json={
                "id": id,
                "organizationId": organization_id,
                "createTime": create_time,
                "updateTime": update_time,
                "primary": primary,
                "spAcsUrl": sp_acs_url,
                "spEntityId": sp_entity_id,
                "idpRedirectUrl": idp_redirect_url,
                "idpX509Certificate": idp_x_509_certificate,
                "idpEntityId": idp_entity_id,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    CreateSamlConnectionResponse,
                    parse_obj_as(
                        type_=CreateSamlConnectionResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def getsamlconnection(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetSamlConnectionResponse:
        """
        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetSamlConnectionResponse
            OK

        Examples
        --------
        from tesseral import tesseral

        client = tesseral(
            base_url="https://yourhost.com/path/to/api",
        )
        client.backendservice.getsamlconnection(
            id="id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"backend/v1/saml-connections/{jsonable_encoder(id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    GetSamlConnectionResponse,
                    parse_obj_as(
                        type_=GetSamlConnectionResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def deletesamlconnection(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> DeleteSamlConnectionResponse:
        """
        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeleteSamlConnectionResponse
            OK

        Examples
        --------
        from tesseral import tesseral

        client = tesseral(
            base_url="https://yourhost.com/path/to/api",
        )
        client.backendservice.deletesamlconnection(
            id="id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"backend/v1/saml-connections/{jsonable_encoder(id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    DeleteSamlConnectionResponse,
                    parse_obj_as(
                        type_=DeleteSamlConnectionResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def updatesamlconnection(
        self,
        id_: str,
        *,
        id: typing.Optional[str] = OMIT,
        organization_id: typing.Optional[str] = OMIT,
        create_time: typing.Optional[dt.datetime] = OMIT,
        update_time: typing.Optional[dt.datetime] = OMIT,
        primary: typing.Optional[bool] = OMIT,
        sp_acs_url: typing.Optional[str] = OMIT,
        sp_entity_id: typing.Optional[str] = OMIT,
        idp_redirect_url: typing.Optional[str] = OMIT,
        idp_x_509_certificate: typing.Optional[str] = OMIT,
        idp_entity_id: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UpdateSamlConnectionResponse:
        """
        Parameters
        ----------
        id_ : str

        id : typing.Optional[str]

        organization_id : typing.Optional[str]

        create_time : typing.Optional[dt.datetime]

        update_time : typing.Optional[dt.datetime]

        primary : typing.Optional[bool]

        sp_acs_url : typing.Optional[str]

        sp_entity_id : typing.Optional[str]

        idp_redirect_url : typing.Optional[str]

        idp_x_509_certificate : typing.Optional[str]

        idp_entity_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UpdateSamlConnectionResponse
            OK

        Examples
        --------
        from tesseral import tesseral

        client = tesseral(
            base_url="https://yourhost.com/path/to/api",
        )
        client.backendservice.updatesamlconnection(
            id_="id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"backend/v1/saml-connections/{jsonable_encoder(id_)}",
            method="PATCH",
            json={
                "id": id,
                "organizationId": organization_id,
                "createTime": create_time,
                "updateTime": update_time,
                "primary": primary,
                "spAcsUrl": sp_acs_url,
                "spEntityId": sp_entity_id,
                "idpRedirectUrl": idp_redirect_url,
                "idpX509Certificate": idp_x_509_certificate,
                "idpEntityId": idp_entity_id,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    UpdateSamlConnectionResponse,
                    parse_obj_as(
                        type_=UpdateSamlConnectionResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def listscimapikeys(
        self,
        *,
        organization_id: typing.Optional[str] = None,
        page_token: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListScimapiKeysResponse:
        """
        Parameters
        ----------
        organization_id : typing.Optional[str]

        page_token : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListScimapiKeysResponse
            OK

        Examples
        --------
        from tesseral import tesseral

        client = tesseral(
            base_url="https://yourhost.com/path/to/api",
        )
        client.backendservice.listscimapikeys()
        """
        _response = self._client_wrapper.httpx_client.request(
            "backend/v1/scim-api-keys",
            method="GET",
            params={
                "organizationId": organization_id,
                "pageToken": page_token,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ListScimapiKeysResponse,
                    parse_obj_as(
                        type_=ListScimapiKeysResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def createscimapikey(
        self,
        *,
        id: typing.Optional[str] = OMIT,
        organization_id: typing.Optional[str] = OMIT,
        create_time: typing.Optional[dt.datetime] = OMIT,
        update_time: typing.Optional[dt.datetime] = OMIT,
        display_name: typing.Optional[str] = OMIT,
        secret_token: typing.Optional[str] = OMIT,
        revoked: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CreateScimapiKeyResponse:
        """
        Parameters
        ----------
        id : typing.Optional[str]

        organization_id : typing.Optional[str]

        create_time : typing.Optional[dt.datetime]

        update_time : typing.Optional[dt.datetime]

        display_name : typing.Optional[str]

        secret_token : typing.Optional[str]

        revoked : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreateScimapiKeyResponse
            OK

        Examples
        --------
        from tesseral import tesseral

        client = tesseral(
            base_url="https://yourhost.com/path/to/api",
        )
        client.backendservice.createscimapikey()
        """
        _response = self._client_wrapper.httpx_client.request(
            "backend/v1/scim-api-keys",
            method="POST",
            json={
                "id": id,
                "organizationId": organization_id,
                "createTime": create_time,
                "updateTime": update_time,
                "displayName": display_name,
                "secretToken": secret_token,
                "revoked": revoked,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    CreateScimapiKeyResponse,
                    parse_obj_as(
                        type_=CreateScimapiKeyResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def getscimapikey(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetScimapiKeyResponse:
        """
        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetScimapiKeyResponse
            OK

        Examples
        --------
        from tesseral import tesseral

        client = tesseral(
            base_url="https://yourhost.com/path/to/api",
        )
        client.backendservice.getscimapikey(
            id="id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"backend/v1/scim-api-keys/{jsonable_encoder(id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    GetScimapiKeyResponse,
                    parse_obj_as(
                        type_=GetScimapiKeyResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def deletescimapikey(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> DeleteScimapiKeyResponse:
        """
        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeleteScimapiKeyResponse
            OK

        Examples
        --------
        from tesseral import tesseral

        client = tesseral(
            base_url="https://yourhost.com/path/to/api",
        )
        client.backendservice.deletescimapikey(
            id="id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"backend/v1/scim-api-keys/{jsonable_encoder(id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    DeleteScimapiKeyResponse,
                    parse_obj_as(
                        type_=DeleteScimapiKeyResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def updatescimapikey(
        self,
        id_: str,
        *,
        id: typing.Optional[str] = OMIT,
        organization_id: typing.Optional[str] = OMIT,
        create_time: typing.Optional[dt.datetime] = OMIT,
        update_time: typing.Optional[dt.datetime] = OMIT,
        display_name: typing.Optional[str] = OMIT,
        secret_token: typing.Optional[str] = OMIT,
        revoked: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UpdateScimapiKeyResponse:
        """
        Parameters
        ----------
        id_ : str

        id : typing.Optional[str]

        organization_id : typing.Optional[str]

        create_time : typing.Optional[dt.datetime]

        update_time : typing.Optional[dt.datetime]

        display_name : typing.Optional[str]

        secret_token : typing.Optional[str]

        revoked : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UpdateScimapiKeyResponse
            OK

        Examples
        --------
        from tesseral import tesseral

        client = tesseral(
            base_url="https://yourhost.com/path/to/api",
        )
        client.backendservice.updatescimapikey(
            id_="id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"backend/v1/scim-api-keys/{jsonable_encoder(id_)}",
            method="PATCH",
            json={
                "id": id,
                "organizationId": organization_id,
                "createTime": create_time,
                "updateTime": update_time,
                "displayName": display_name,
                "secretToken": secret_token,
                "revoked": revoked,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    UpdateScimapiKeyResponse,
                    parse_obj_as(
                        type_=UpdateScimapiKeyResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def revokescimapikey(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> RevokeScimapiKeyResponse:
        """
        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        RevokeScimapiKeyResponse
            OK

        Examples
        --------
        from tesseral import tesseral

        client = tesseral(
            base_url="https://yourhost.com/path/to/api",
        )
        client.backendservice.revokescimapikey(
            id="id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"backend/v1/scim-api-keys/{jsonable_encoder(id)}/revoke",
            method="POST",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    RevokeScimapiKeyResponse,
                    parse_obj_as(
                        type_=RevokeScimapiKeyResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def listsessions(
        self,
        *,
        user_id: typing.Optional[str] = None,
        page_token: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListSessionsResponse:
        """
        Parameters
        ----------
        user_id : typing.Optional[str]

        page_token : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListSessionsResponse
            OK

        Examples
        --------
        from tesseral import tesseral

        client = tesseral(
            base_url="https://yourhost.com/path/to/api",
        )
        client.backendservice.listsessions()
        """
        _response = self._client_wrapper.httpx_client.request(
            "backend/v1/sessions",
            method="GET",
            params={
                "userId": user_id,
                "pageToken": page_token,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ListSessionsResponse,
                    parse_obj_as(
                        type_=ListSessionsResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def getsession(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> GetSessionResponse:
        """
        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetSessionResponse
            OK

        Examples
        --------
        from tesseral import tesseral

        client = tesseral(
            base_url="https://yourhost.com/path/to/api",
        )
        client.backendservice.getsession(
            id="id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"backend/v1/sessions/{jsonable_encoder(id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    GetSessionResponse,
                    parse_obj_as(
                        type_=GetSessionResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def listuserinvites(
        self,
        *,
        organization_id: typing.Optional[str] = None,
        page_token: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListUserInvitesResponse:
        """
        Parameters
        ----------
        organization_id : typing.Optional[str]

        page_token : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListUserInvitesResponse
            OK

        Examples
        --------
        from tesseral import tesseral

        client = tesseral(
            base_url="https://yourhost.com/path/to/api",
        )
        client.backendservice.listuserinvites()
        """
        _response = self._client_wrapper.httpx_client.request(
            "backend/v1/user-invites",
            method="GET",
            params={
                "organizationId": organization_id,
                "pageToken": page_token,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ListUserInvitesResponse,
                    parse_obj_as(
                        type_=ListUserInvitesResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def createuserinvite(
        self,
        *,
        id: typing.Optional[str] = OMIT,
        organization_id: typing.Optional[str] = OMIT,
        create_time: typing.Optional[dt.datetime] = OMIT,
        update_time: typing.Optional[dt.datetime] = OMIT,
        email: typing.Optional[str] = OMIT,
        owner: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CreateUserInviteResponse:
        """
        Parameters
        ----------
        id : typing.Optional[str]

        organization_id : typing.Optional[str]

        create_time : typing.Optional[dt.datetime]

        update_time : typing.Optional[dt.datetime]

        email : typing.Optional[str]

        owner : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreateUserInviteResponse
            OK

        Examples
        --------
        from tesseral import tesseral

        client = tesseral(
            base_url="https://yourhost.com/path/to/api",
        )
        client.backendservice.createuserinvite()
        """
        _response = self._client_wrapper.httpx_client.request(
            "backend/v1/user-invites",
            method="POST",
            json={
                "id": id,
                "organizationId": organization_id,
                "createTime": create_time,
                "updateTime": update_time,
                "email": email,
                "owner": owner,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    CreateUserInviteResponse,
                    parse_obj_as(
                        type_=CreateUserInviteResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def getuserinvite(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetUserInviteResponse:
        """
        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetUserInviteResponse
            OK

        Examples
        --------
        from tesseral import tesseral

        client = tesseral(
            base_url="https://yourhost.com/path/to/api",
        )
        client.backendservice.getuserinvite(
            id="id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"backend/v1/user-invites/{jsonable_encoder(id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    GetUserInviteResponse,
                    parse_obj_as(
                        type_=GetUserInviteResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def deleteuserinvite(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> DeleteUserInviteResponse:
        """
        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeleteUserInviteResponse
            OK

        Examples
        --------
        from tesseral import tesseral

        client = tesseral(
            base_url="https://yourhost.com/path/to/api",
        )
        client.backendservice.deleteuserinvite(
            id="id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"backend/v1/user-invites/{jsonable_encoder(id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    DeleteUserInviteResponse,
                    parse_obj_as(
                        type_=DeleteUserInviteResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def listusers(
        self,
        *,
        organization_id: typing.Optional[str] = None,
        page_token: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListUsersResponse:
        """
        Parameters
        ----------
        organization_id : typing.Optional[str]

        page_token : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListUsersResponse
            OK

        Examples
        --------
        from tesseral import tesseral

        client = tesseral(
            base_url="https://yourhost.com/path/to/api",
        )
        client.backendservice.listusers()
        """
        _response = self._client_wrapper.httpx_client.request(
            "backend/v1/users",
            method="GET",
            params={
                "organizationId": organization_id,
                "pageToken": page_token,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ListUsersResponse,
                    parse_obj_as(
                        type_=ListUsersResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def createuser(
        self,
        *,
        id: typing.Optional[str] = OMIT,
        organization_id: typing.Optional[str] = OMIT,
        email: typing.Optional[str] = OMIT,
        create_time: typing.Optional[dt.datetime] = OMIT,
        update_time: typing.Optional[dt.datetime] = OMIT,
        owner: typing.Optional[bool] = OMIT,
        google_user_id: typing.Optional[str] = OMIT,
        microsoft_user_id: typing.Optional[str] = OMIT,
        has_authenticator_app: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CreateUserResponse:
        """
        Parameters
        ----------
        id : typing.Optional[str]

        organization_id : typing.Optional[str]

        email : typing.Optional[str]

        create_time : typing.Optional[dt.datetime]

        update_time : typing.Optional[dt.datetime]

        owner : typing.Optional[bool]

        google_user_id : typing.Optional[str]

        microsoft_user_id : typing.Optional[str]

        has_authenticator_app : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreateUserResponse
            OK

        Examples
        --------
        from tesseral import tesseral

        client = tesseral(
            base_url="https://yourhost.com/path/to/api",
        )
        client.backendservice.createuser()
        """
        _response = self._client_wrapper.httpx_client.request(
            "backend/v1/users",
            method="POST",
            json={
                "id": id,
                "organizationId": organization_id,
                "email": email,
                "createTime": create_time,
                "updateTime": update_time,
                "owner": owner,
                "googleUserId": google_user_id,
                "microsoftUserId": microsoft_user_id,
                "hasAuthenticatorApp": has_authenticator_app,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    CreateUserResponse,
                    parse_obj_as(
                        type_=CreateUserResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def getuser(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> GetUserResponse:
        """
        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetUserResponse
            OK

        Examples
        --------
        from tesseral import tesseral

        client = tesseral(
            base_url="https://yourhost.com/path/to/api",
        )
        client.backendservice.getuser(
            id="id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"backend/v1/users/{jsonable_encoder(id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    GetUserResponse,
                    parse_obj_as(
                        type_=GetUserResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def deleteuser(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> DeleteUserResponse:
        """
        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeleteUserResponse
            OK

        Examples
        --------
        from tesseral import tesseral

        client = tesseral(
            base_url="https://yourhost.com/path/to/api",
        )
        client.backendservice.deleteuser(
            id="id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"backend/v1/users/{jsonable_encoder(id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    DeleteUserResponse,
                    parse_obj_as(
                        type_=DeleteUserResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def updateuser(
        self,
        id_: str,
        *,
        id: typing.Optional[str] = OMIT,
        organization_id: typing.Optional[str] = OMIT,
        email: typing.Optional[str] = OMIT,
        create_time: typing.Optional[dt.datetime] = OMIT,
        update_time: typing.Optional[dt.datetime] = OMIT,
        owner: typing.Optional[bool] = OMIT,
        google_user_id: typing.Optional[str] = OMIT,
        microsoft_user_id: typing.Optional[str] = OMIT,
        has_authenticator_app: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UpdateUserResponse:
        """
        Parameters
        ----------
        id_ : str

        id : typing.Optional[str]

        organization_id : typing.Optional[str]

        email : typing.Optional[str]

        create_time : typing.Optional[dt.datetime]

        update_time : typing.Optional[dt.datetime]

        owner : typing.Optional[bool]

        google_user_id : typing.Optional[str]

        microsoft_user_id : typing.Optional[str]

        has_authenticator_app : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UpdateUserResponse
            OK

        Examples
        --------
        from tesseral import tesseral

        client = tesseral(
            base_url="https://yourhost.com/path/to/api",
        )
        client.backendservice.updateuser(
            id_="id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"backend/v1/users/{jsonable_encoder(id_)}",
            method="PATCH",
            json={
                "id": id,
                "organizationId": organization_id,
                "email": email,
                "createTime": create_time,
                "updateTime": update_time,
                "owner": owner,
                "googleUserId": google_user_id,
                "microsoftUserId": microsoft_user_id,
                "hasAuthenticatorApp": has_authenticator_app,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    UpdateUserResponse,
                    parse_obj_as(
                        type_=UpdateUserResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncBackendserviceClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def listorganizations(
        self, *, page_token: typing.Optional[str] = None, request_options: typing.Optional[RequestOptions] = None
    ) -> ListOrganizationsResponse:
        """
        Parameters
        ----------
        page_token : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListOrganizationsResponse
            OK

        Examples
        --------
        import asyncio

        from tesseral import Asynctesseral

        client = Asynctesseral(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.backendservice.listorganizations()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "backend/v1/organizations",
            method="GET",
            params={
                "pageToken": page_token,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ListOrganizationsResponse,
                    parse_obj_as(
                        type_=ListOrganizationsResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def createorganization(
        self,
        *,
        id: typing.Optional[str] = OMIT,
        display_name: typing.Optional[str] = OMIT,
        create_time: typing.Optional[dt.datetime] = OMIT,
        update_time: typing.Optional[dt.datetime] = OMIT,
        log_in_with_google: typing.Optional[bool] = OMIT,
        log_in_with_microsoft: typing.Optional[bool] = OMIT,
        log_in_with_email: typing.Optional[bool] = OMIT,
        log_in_with_password: typing.Optional[bool] = OMIT,
        log_in_with_saml: typing.Optional[bool] = OMIT,
        log_in_with_authenticator_app: typing.Optional[bool] = OMIT,
        log_in_with_passkey: typing.Optional[bool] = OMIT,
        require_mfa: typing.Optional[bool] = OMIT,
        scim_enabled: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CreateOrganizationResponse:
        """
        Parameters
        ----------
        id : typing.Optional[str]

        display_name : typing.Optional[str]

        create_time : typing.Optional[dt.datetime]

        update_time : typing.Optional[dt.datetime]

        log_in_with_google : typing.Optional[bool]

        log_in_with_microsoft : typing.Optional[bool]

        log_in_with_email : typing.Optional[bool]

        log_in_with_password : typing.Optional[bool]

        log_in_with_saml : typing.Optional[bool]

        log_in_with_authenticator_app : typing.Optional[bool]

        log_in_with_passkey : typing.Optional[bool]

        require_mfa : typing.Optional[bool]

        scim_enabled : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreateOrganizationResponse
            OK

        Examples
        --------
        import asyncio

        from tesseral import Asynctesseral

        client = Asynctesseral(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.backendservice.createorganization()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "backend/v1/organizations",
            method="POST",
            json={
                "id": id,
                "displayName": display_name,
                "createTime": create_time,
                "updateTime": update_time,
                "logInWithGoogle": log_in_with_google,
                "logInWithMicrosoft": log_in_with_microsoft,
                "logInWithEmail": log_in_with_email,
                "logInWithPassword": log_in_with_password,
                "logInWithSaml": log_in_with_saml,
                "logInWithAuthenticatorApp": log_in_with_authenticator_app,
                "logInWithPasskey": log_in_with_passkey,
                "requireMfa": require_mfa,
                "scimEnabled": scim_enabled,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    CreateOrganizationResponse,
                    parse_obj_as(
                        type_=CreateOrganizationResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def getorganization(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetOrganizationResponse:
        """
        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetOrganizationResponse
            OK

        Examples
        --------
        import asyncio

        from tesseral import Asynctesseral

        client = Asynctesseral(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.backendservice.getorganization(
                id="id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"backend/v1/organizations/{jsonable_encoder(id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    GetOrganizationResponse,
                    parse_obj_as(
                        type_=GetOrganizationResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def deleteorganization(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> DeleteOrganizationResponse:
        """
        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeleteOrganizationResponse
            OK

        Examples
        --------
        import asyncio

        from tesseral import Asynctesseral

        client = Asynctesseral(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.backendservice.deleteorganization(
                id="id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"backend/v1/organizations/{jsonable_encoder(id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    DeleteOrganizationResponse,
                    parse_obj_as(
                        type_=DeleteOrganizationResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def updateorganization(
        self,
        id_: str,
        *,
        id: typing.Optional[str] = OMIT,
        display_name: typing.Optional[str] = OMIT,
        create_time: typing.Optional[dt.datetime] = OMIT,
        update_time: typing.Optional[dt.datetime] = OMIT,
        log_in_with_google: typing.Optional[bool] = OMIT,
        log_in_with_microsoft: typing.Optional[bool] = OMIT,
        log_in_with_email: typing.Optional[bool] = OMIT,
        log_in_with_password: typing.Optional[bool] = OMIT,
        log_in_with_saml: typing.Optional[bool] = OMIT,
        log_in_with_authenticator_app: typing.Optional[bool] = OMIT,
        log_in_with_passkey: typing.Optional[bool] = OMIT,
        require_mfa: typing.Optional[bool] = OMIT,
        scim_enabled: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UpdateOrganizationResponse:
        """
        Parameters
        ----------
        id_ : str

        id : typing.Optional[str]

        display_name : typing.Optional[str]

        create_time : typing.Optional[dt.datetime]

        update_time : typing.Optional[dt.datetime]

        log_in_with_google : typing.Optional[bool]

        log_in_with_microsoft : typing.Optional[bool]

        log_in_with_email : typing.Optional[bool]

        log_in_with_password : typing.Optional[bool]

        log_in_with_saml : typing.Optional[bool]

        log_in_with_authenticator_app : typing.Optional[bool]

        log_in_with_passkey : typing.Optional[bool]

        require_mfa : typing.Optional[bool]

        scim_enabled : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UpdateOrganizationResponse
            OK

        Examples
        --------
        import asyncio

        from tesseral import Asynctesseral

        client = Asynctesseral(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.backendservice.updateorganization(
                id_="id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"backend/v1/organizations/{jsonable_encoder(id_)}",
            method="PATCH",
            json={
                "id": id,
                "displayName": display_name,
                "createTime": create_time,
                "updateTime": update_time,
                "logInWithGoogle": log_in_with_google,
                "logInWithMicrosoft": log_in_with_microsoft,
                "logInWithEmail": log_in_with_email,
                "logInWithPassword": log_in_with_password,
                "logInWithSaml": log_in_with_saml,
                "logInWithAuthenticatorApp": log_in_with_authenticator_app,
                "logInWithPasskey": log_in_with_passkey,
                "requireMfa": require_mfa,
                "scimEnabled": scim_enabled,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    UpdateOrganizationResponse,
                    parse_obj_as(
                        type_=UpdateOrganizationResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def getorganizationgooglehosteddomains(
        self, organization_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetOrganizationGoogleHostedDomainsResponse:
        """
        Parameters
        ----------
        organization_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetOrganizationGoogleHostedDomainsResponse
            OK

        Examples
        --------
        import asyncio

        from tesseral import Asynctesseral

        client = Asynctesseral(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.backendservice.getorganizationgooglehosteddomains(
                organization_id="organizationId",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"backend/v1/organizations/{jsonable_encoder(organization_id)}/google-hosted-domains",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    GetOrganizationGoogleHostedDomainsResponse,
                    parse_obj_as(
                        type_=GetOrganizationGoogleHostedDomainsResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def updateorganizationgooglehosteddomains(
        self,
        organization_id_: str,
        *,
        organization_id: typing.Optional[str] = OMIT,
        google_hosted_domains: typing.Optional[typing.Sequence[str]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UpdateOrganizationGoogleHostedDomainsResponse:
        """
        Parameters
        ----------
        organization_id_ : str

        organization_id : typing.Optional[str]

        google_hosted_domains : typing.Optional[typing.Sequence[str]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UpdateOrganizationGoogleHostedDomainsResponse
            OK

        Examples
        --------
        import asyncio

        from tesseral import Asynctesseral

        client = Asynctesseral(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.backendservice.updateorganizationgooglehosteddomains(
                organization_id_="organizationId",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"backend/v1/organizations/{jsonable_encoder(organization_id_)}/google-hosted-domains",
            method="PATCH",
            json={
                "organizationId": organization_id,
                "googleHostedDomains": google_hosted_domains,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    UpdateOrganizationGoogleHostedDomainsResponse,
                    parse_obj_as(
                        type_=UpdateOrganizationGoogleHostedDomainsResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def getorganizationmicrosofttenantids(
        self, organization_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetOrganizationMicrosoftTenantIDsResponse:
        """
        Parameters
        ----------
        organization_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetOrganizationMicrosoftTenantIDsResponse
            OK

        Examples
        --------
        import asyncio

        from tesseral import Asynctesseral

        client = Asynctesseral(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.backendservice.getorganizationmicrosofttenantids(
                organization_id="organizationId",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"backend/v1/organizations/{jsonable_encoder(organization_id)}/microsoft-tenant-ids",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    GetOrganizationMicrosoftTenantIDsResponse,
                    parse_obj_as(
                        type_=GetOrganizationMicrosoftTenantIDsResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def updateorganizationmicrosofttenantids(
        self,
        organization_id_: str,
        *,
        organization_id: typing.Optional[str] = OMIT,
        microsoft_tenant_ids: typing.Optional[typing.Sequence[str]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UpdateOrganizationMicrosoftTenantIDsResponse:
        """
        Parameters
        ----------
        organization_id_ : str

        organization_id : typing.Optional[str]

        microsoft_tenant_ids : typing.Optional[typing.Sequence[str]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UpdateOrganizationMicrosoftTenantIDsResponse
            OK

        Examples
        --------
        import asyncio

        from tesseral import Asynctesseral

        client = Asynctesseral(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.backendservice.updateorganizationmicrosofttenantids(
                organization_id_="organizationId",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"backend/v1/organizations/{jsonable_encoder(organization_id_)}/microsoft-tenant-ids",
            method="PATCH",
            json={
                "organizationId": organization_id,
                "microsoftTenantIds": microsoft_tenant_ids,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    UpdateOrganizationMicrosoftTenantIDsResponse,
                    parse_obj_as(
                        type_=UpdateOrganizationMicrosoftTenantIDsResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def listpasskeys(
        self,
        *,
        user_id: typing.Optional[str] = None,
        page_token: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListPasskeysResponse:
        """
        Parameters
        ----------
        user_id : typing.Optional[str]

        page_token : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListPasskeysResponse
            OK

        Examples
        --------
        import asyncio

        from tesseral import Asynctesseral

        client = Asynctesseral(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.backendservice.listpasskeys()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "backend/v1/passkeys",
            method="GET",
            params={
                "userId": user_id,
                "pageToken": page_token,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ListPasskeysResponse,
                    parse_obj_as(
                        type_=ListPasskeysResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def getpasskey(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetPasskeyResponse:
        """
        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetPasskeyResponse
            OK

        Examples
        --------
        import asyncio

        from tesseral import Asynctesseral

        client = Asynctesseral(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.backendservice.getpasskey(
                id="id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"backend/v1/passkeys/{jsonable_encoder(id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    GetPasskeyResponse,
                    parse_obj_as(
                        type_=GetPasskeyResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def deletepasskey(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> DeletePasskeyResponse:
        """
        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeletePasskeyResponse
            OK

        Examples
        --------
        import asyncio

        from tesseral import Asynctesseral

        client = Asynctesseral(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.backendservice.deletepasskey(
                id="id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"backend/v1/passkeys/{jsonable_encoder(id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    DeletePasskeyResponse,
                    parse_obj_as(
                        type_=DeletePasskeyResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def updatepasskey(
        self,
        id_: str,
        *,
        id: typing.Optional[str] = OMIT,
        user_id: typing.Optional[str] = OMIT,
        create_time: typing.Optional[dt.datetime] = OMIT,
        update_time: typing.Optional[dt.datetime] = OMIT,
        disabled: typing.Optional[bool] = OMIT,
        credential_id: typing.Optional[str] = OMIT,
        public_key_pkix: typing.Optional[str] = OMIT,
        aaguid: typing.Optional[str] = OMIT,
        rp_id: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UpdatePasskeyResponse:
        """
        Parameters
        ----------
        id_ : str

        id : typing.Optional[str]

        user_id : typing.Optional[str]

        create_time : typing.Optional[dt.datetime]

        update_time : typing.Optional[dt.datetime]

        disabled : typing.Optional[bool]

        credential_id : typing.Optional[str]

        public_key_pkix : typing.Optional[str]

        aaguid : typing.Optional[str]

        rp_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UpdatePasskeyResponse
            OK

        Examples
        --------
        import asyncio

        from tesseral import Asynctesseral

        client = Asynctesseral(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.backendservice.updatepasskey(
                id_="id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"backend/v1/passkeys/{jsonable_encoder(id_)}",
            method="PATCH",
            json={
                "id": id,
                "userId": user_id,
                "createTime": create_time,
                "updateTime": update_time,
                "disabled": disabled,
                "credentialId": credential_id,
                "publicKeyPkix": public_key_pkix,
                "aaguid": aaguid,
                "rpId": rp_id,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    UpdatePasskeyResponse,
                    parse_obj_as(
                        type_=UpdatePasskeyResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def getproject(self, *, request_options: typing.Optional[RequestOptions] = None) -> GetProjectResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetProjectResponse
            OK

        Examples
        --------
        import asyncio

        from tesseral import Asynctesseral

        client = Asynctesseral(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.backendservice.getproject()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "backend/v1/project",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    GetProjectResponse,
                    parse_obj_as(
                        type_=GetProjectResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def listsamlconnections(
        self,
        *,
        organization_id: typing.Optional[str] = None,
        page_token: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListSamlConnectionsResponse:
        """
        Parameters
        ----------
        organization_id : typing.Optional[str]

        page_token : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListSamlConnectionsResponse
            OK

        Examples
        --------
        import asyncio

        from tesseral import Asynctesseral

        client = Asynctesseral(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.backendservice.listsamlconnections()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "backend/v1/saml-connections",
            method="GET",
            params={
                "organizationId": organization_id,
                "pageToken": page_token,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ListSamlConnectionsResponse,
                    parse_obj_as(
                        type_=ListSamlConnectionsResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def createsamlconnection(
        self,
        *,
        id: typing.Optional[str] = OMIT,
        organization_id: typing.Optional[str] = OMIT,
        create_time: typing.Optional[dt.datetime] = OMIT,
        update_time: typing.Optional[dt.datetime] = OMIT,
        primary: typing.Optional[bool] = OMIT,
        sp_acs_url: typing.Optional[str] = OMIT,
        sp_entity_id: typing.Optional[str] = OMIT,
        idp_redirect_url: typing.Optional[str] = OMIT,
        idp_x_509_certificate: typing.Optional[str] = OMIT,
        idp_entity_id: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CreateSamlConnectionResponse:
        """
        Parameters
        ----------
        id : typing.Optional[str]

        organization_id : typing.Optional[str]

        create_time : typing.Optional[dt.datetime]

        update_time : typing.Optional[dt.datetime]

        primary : typing.Optional[bool]

        sp_acs_url : typing.Optional[str]

        sp_entity_id : typing.Optional[str]

        idp_redirect_url : typing.Optional[str]

        idp_x_509_certificate : typing.Optional[str]

        idp_entity_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreateSamlConnectionResponse
            OK

        Examples
        --------
        import asyncio

        from tesseral import Asynctesseral

        client = Asynctesseral(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.backendservice.createsamlconnection()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "backend/v1/saml-connections",
            method="POST",
            json={
                "id": id,
                "organizationId": organization_id,
                "createTime": create_time,
                "updateTime": update_time,
                "primary": primary,
                "spAcsUrl": sp_acs_url,
                "spEntityId": sp_entity_id,
                "idpRedirectUrl": idp_redirect_url,
                "idpX509Certificate": idp_x_509_certificate,
                "idpEntityId": idp_entity_id,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    CreateSamlConnectionResponse,
                    parse_obj_as(
                        type_=CreateSamlConnectionResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def getsamlconnection(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetSamlConnectionResponse:
        """
        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetSamlConnectionResponse
            OK

        Examples
        --------
        import asyncio

        from tesseral import Asynctesseral

        client = Asynctesseral(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.backendservice.getsamlconnection(
                id="id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"backend/v1/saml-connections/{jsonable_encoder(id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    GetSamlConnectionResponse,
                    parse_obj_as(
                        type_=GetSamlConnectionResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def deletesamlconnection(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> DeleteSamlConnectionResponse:
        """
        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeleteSamlConnectionResponse
            OK

        Examples
        --------
        import asyncio

        from tesseral import Asynctesseral

        client = Asynctesseral(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.backendservice.deletesamlconnection(
                id="id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"backend/v1/saml-connections/{jsonable_encoder(id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    DeleteSamlConnectionResponse,
                    parse_obj_as(
                        type_=DeleteSamlConnectionResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def updatesamlconnection(
        self,
        id_: str,
        *,
        id: typing.Optional[str] = OMIT,
        organization_id: typing.Optional[str] = OMIT,
        create_time: typing.Optional[dt.datetime] = OMIT,
        update_time: typing.Optional[dt.datetime] = OMIT,
        primary: typing.Optional[bool] = OMIT,
        sp_acs_url: typing.Optional[str] = OMIT,
        sp_entity_id: typing.Optional[str] = OMIT,
        idp_redirect_url: typing.Optional[str] = OMIT,
        idp_x_509_certificate: typing.Optional[str] = OMIT,
        idp_entity_id: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UpdateSamlConnectionResponse:
        """
        Parameters
        ----------
        id_ : str

        id : typing.Optional[str]

        organization_id : typing.Optional[str]

        create_time : typing.Optional[dt.datetime]

        update_time : typing.Optional[dt.datetime]

        primary : typing.Optional[bool]

        sp_acs_url : typing.Optional[str]

        sp_entity_id : typing.Optional[str]

        idp_redirect_url : typing.Optional[str]

        idp_x_509_certificate : typing.Optional[str]

        idp_entity_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UpdateSamlConnectionResponse
            OK

        Examples
        --------
        import asyncio

        from tesseral import Asynctesseral

        client = Asynctesseral(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.backendservice.updatesamlconnection(
                id_="id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"backend/v1/saml-connections/{jsonable_encoder(id_)}",
            method="PATCH",
            json={
                "id": id,
                "organizationId": organization_id,
                "createTime": create_time,
                "updateTime": update_time,
                "primary": primary,
                "spAcsUrl": sp_acs_url,
                "spEntityId": sp_entity_id,
                "idpRedirectUrl": idp_redirect_url,
                "idpX509Certificate": idp_x_509_certificate,
                "idpEntityId": idp_entity_id,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    UpdateSamlConnectionResponse,
                    parse_obj_as(
                        type_=UpdateSamlConnectionResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def listscimapikeys(
        self,
        *,
        organization_id: typing.Optional[str] = None,
        page_token: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListScimapiKeysResponse:
        """
        Parameters
        ----------
        organization_id : typing.Optional[str]

        page_token : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListScimapiKeysResponse
            OK

        Examples
        --------
        import asyncio

        from tesseral import Asynctesseral

        client = Asynctesseral(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.backendservice.listscimapikeys()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "backend/v1/scim-api-keys",
            method="GET",
            params={
                "organizationId": organization_id,
                "pageToken": page_token,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ListScimapiKeysResponse,
                    parse_obj_as(
                        type_=ListScimapiKeysResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def createscimapikey(
        self,
        *,
        id: typing.Optional[str] = OMIT,
        organization_id: typing.Optional[str] = OMIT,
        create_time: typing.Optional[dt.datetime] = OMIT,
        update_time: typing.Optional[dt.datetime] = OMIT,
        display_name: typing.Optional[str] = OMIT,
        secret_token: typing.Optional[str] = OMIT,
        revoked: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CreateScimapiKeyResponse:
        """
        Parameters
        ----------
        id : typing.Optional[str]

        organization_id : typing.Optional[str]

        create_time : typing.Optional[dt.datetime]

        update_time : typing.Optional[dt.datetime]

        display_name : typing.Optional[str]

        secret_token : typing.Optional[str]

        revoked : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreateScimapiKeyResponse
            OK

        Examples
        --------
        import asyncio

        from tesseral import Asynctesseral

        client = Asynctesseral(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.backendservice.createscimapikey()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "backend/v1/scim-api-keys",
            method="POST",
            json={
                "id": id,
                "organizationId": organization_id,
                "createTime": create_time,
                "updateTime": update_time,
                "displayName": display_name,
                "secretToken": secret_token,
                "revoked": revoked,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    CreateScimapiKeyResponse,
                    parse_obj_as(
                        type_=CreateScimapiKeyResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def getscimapikey(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetScimapiKeyResponse:
        """
        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetScimapiKeyResponse
            OK

        Examples
        --------
        import asyncio

        from tesseral import Asynctesseral

        client = Asynctesseral(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.backendservice.getscimapikey(
                id="id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"backend/v1/scim-api-keys/{jsonable_encoder(id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    GetScimapiKeyResponse,
                    parse_obj_as(
                        type_=GetScimapiKeyResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def deletescimapikey(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> DeleteScimapiKeyResponse:
        """
        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeleteScimapiKeyResponse
            OK

        Examples
        --------
        import asyncio

        from tesseral import Asynctesseral

        client = Asynctesseral(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.backendservice.deletescimapikey(
                id="id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"backend/v1/scim-api-keys/{jsonable_encoder(id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    DeleteScimapiKeyResponse,
                    parse_obj_as(
                        type_=DeleteScimapiKeyResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def updatescimapikey(
        self,
        id_: str,
        *,
        id: typing.Optional[str] = OMIT,
        organization_id: typing.Optional[str] = OMIT,
        create_time: typing.Optional[dt.datetime] = OMIT,
        update_time: typing.Optional[dt.datetime] = OMIT,
        display_name: typing.Optional[str] = OMIT,
        secret_token: typing.Optional[str] = OMIT,
        revoked: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UpdateScimapiKeyResponse:
        """
        Parameters
        ----------
        id_ : str

        id : typing.Optional[str]

        organization_id : typing.Optional[str]

        create_time : typing.Optional[dt.datetime]

        update_time : typing.Optional[dt.datetime]

        display_name : typing.Optional[str]

        secret_token : typing.Optional[str]

        revoked : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UpdateScimapiKeyResponse
            OK

        Examples
        --------
        import asyncio

        from tesseral import Asynctesseral

        client = Asynctesseral(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.backendservice.updatescimapikey(
                id_="id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"backend/v1/scim-api-keys/{jsonable_encoder(id_)}",
            method="PATCH",
            json={
                "id": id,
                "organizationId": organization_id,
                "createTime": create_time,
                "updateTime": update_time,
                "displayName": display_name,
                "secretToken": secret_token,
                "revoked": revoked,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    UpdateScimapiKeyResponse,
                    parse_obj_as(
                        type_=UpdateScimapiKeyResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def revokescimapikey(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> RevokeScimapiKeyResponse:
        """
        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        RevokeScimapiKeyResponse
            OK

        Examples
        --------
        import asyncio

        from tesseral import Asynctesseral

        client = Asynctesseral(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.backendservice.revokescimapikey(
                id="id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"backend/v1/scim-api-keys/{jsonable_encoder(id)}/revoke",
            method="POST",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    RevokeScimapiKeyResponse,
                    parse_obj_as(
                        type_=RevokeScimapiKeyResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def listsessions(
        self,
        *,
        user_id: typing.Optional[str] = None,
        page_token: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListSessionsResponse:
        """
        Parameters
        ----------
        user_id : typing.Optional[str]

        page_token : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListSessionsResponse
            OK

        Examples
        --------
        import asyncio

        from tesseral import Asynctesseral

        client = Asynctesseral(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.backendservice.listsessions()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "backend/v1/sessions",
            method="GET",
            params={
                "userId": user_id,
                "pageToken": page_token,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ListSessionsResponse,
                    parse_obj_as(
                        type_=ListSessionsResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def getsession(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetSessionResponse:
        """
        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetSessionResponse
            OK

        Examples
        --------
        import asyncio

        from tesseral import Asynctesseral

        client = Asynctesseral(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.backendservice.getsession(
                id="id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"backend/v1/sessions/{jsonable_encoder(id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    GetSessionResponse,
                    parse_obj_as(
                        type_=GetSessionResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def listuserinvites(
        self,
        *,
        organization_id: typing.Optional[str] = None,
        page_token: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListUserInvitesResponse:
        """
        Parameters
        ----------
        organization_id : typing.Optional[str]

        page_token : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListUserInvitesResponse
            OK

        Examples
        --------
        import asyncio

        from tesseral import Asynctesseral

        client = Asynctesseral(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.backendservice.listuserinvites()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "backend/v1/user-invites",
            method="GET",
            params={
                "organizationId": organization_id,
                "pageToken": page_token,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ListUserInvitesResponse,
                    parse_obj_as(
                        type_=ListUserInvitesResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def createuserinvite(
        self,
        *,
        id: typing.Optional[str] = OMIT,
        organization_id: typing.Optional[str] = OMIT,
        create_time: typing.Optional[dt.datetime] = OMIT,
        update_time: typing.Optional[dt.datetime] = OMIT,
        email: typing.Optional[str] = OMIT,
        owner: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CreateUserInviteResponse:
        """
        Parameters
        ----------
        id : typing.Optional[str]

        organization_id : typing.Optional[str]

        create_time : typing.Optional[dt.datetime]

        update_time : typing.Optional[dt.datetime]

        email : typing.Optional[str]

        owner : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreateUserInviteResponse
            OK

        Examples
        --------
        import asyncio

        from tesseral import Asynctesseral

        client = Asynctesseral(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.backendservice.createuserinvite()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "backend/v1/user-invites",
            method="POST",
            json={
                "id": id,
                "organizationId": organization_id,
                "createTime": create_time,
                "updateTime": update_time,
                "email": email,
                "owner": owner,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    CreateUserInviteResponse,
                    parse_obj_as(
                        type_=CreateUserInviteResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def getuserinvite(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetUserInviteResponse:
        """
        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetUserInviteResponse
            OK

        Examples
        --------
        import asyncio

        from tesseral import Asynctesseral

        client = Asynctesseral(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.backendservice.getuserinvite(
                id="id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"backend/v1/user-invites/{jsonable_encoder(id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    GetUserInviteResponse,
                    parse_obj_as(
                        type_=GetUserInviteResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def deleteuserinvite(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> DeleteUserInviteResponse:
        """
        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeleteUserInviteResponse
            OK

        Examples
        --------
        import asyncio

        from tesseral import Asynctesseral

        client = Asynctesseral(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.backendservice.deleteuserinvite(
                id="id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"backend/v1/user-invites/{jsonable_encoder(id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    DeleteUserInviteResponse,
                    parse_obj_as(
                        type_=DeleteUserInviteResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def listusers(
        self,
        *,
        organization_id: typing.Optional[str] = None,
        page_token: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListUsersResponse:
        """
        Parameters
        ----------
        organization_id : typing.Optional[str]

        page_token : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListUsersResponse
            OK

        Examples
        --------
        import asyncio

        from tesseral import Asynctesseral

        client = Asynctesseral(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.backendservice.listusers()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "backend/v1/users",
            method="GET",
            params={
                "organizationId": organization_id,
                "pageToken": page_token,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ListUsersResponse,
                    parse_obj_as(
                        type_=ListUsersResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def createuser(
        self,
        *,
        id: typing.Optional[str] = OMIT,
        organization_id: typing.Optional[str] = OMIT,
        email: typing.Optional[str] = OMIT,
        create_time: typing.Optional[dt.datetime] = OMIT,
        update_time: typing.Optional[dt.datetime] = OMIT,
        owner: typing.Optional[bool] = OMIT,
        google_user_id: typing.Optional[str] = OMIT,
        microsoft_user_id: typing.Optional[str] = OMIT,
        has_authenticator_app: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CreateUserResponse:
        """
        Parameters
        ----------
        id : typing.Optional[str]

        organization_id : typing.Optional[str]

        email : typing.Optional[str]

        create_time : typing.Optional[dt.datetime]

        update_time : typing.Optional[dt.datetime]

        owner : typing.Optional[bool]

        google_user_id : typing.Optional[str]

        microsoft_user_id : typing.Optional[str]

        has_authenticator_app : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreateUserResponse
            OK

        Examples
        --------
        import asyncio

        from tesseral import Asynctesseral

        client = Asynctesseral(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.backendservice.createuser()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "backend/v1/users",
            method="POST",
            json={
                "id": id,
                "organizationId": organization_id,
                "email": email,
                "createTime": create_time,
                "updateTime": update_time,
                "owner": owner,
                "googleUserId": google_user_id,
                "microsoftUserId": microsoft_user_id,
                "hasAuthenticatorApp": has_authenticator_app,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    CreateUserResponse,
                    parse_obj_as(
                        type_=CreateUserResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def getuser(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> GetUserResponse:
        """
        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetUserResponse
            OK

        Examples
        --------
        import asyncio

        from tesseral import Asynctesseral

        client = Asynctesseral(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.backendservice.getuser(
                id="id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"backend/v1/users/{jsonable_encoder(id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    GetUserResponse,
                    parse_obj_as(
                        type_=GetUserResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def deleteuser(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> DeleteUserResponse:
        """
        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeleteUserResponse
            OK

        Examples
        --------
        import asyncio

        from tesseral import Asynctesseral

        client = Asynctesseral(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.backendservice.deleteuser(
                id="id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"backend/v1/users/{jsonable_encoder(id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    DeleteUserResponse,
                    parse_obj_as(
                        type_=DeleteUserResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def updateuser(
        self,
        id_: str,
        *,
        id: typing.Optional[str] = OMIT,
        organization_id: typing.Optional[str] = OMIT,
        email: typing.Optional[str] = OMIT,
        create_time: typing.Optional[dt.datetime] = OMIT,
        update_time: typing.Optional[dt.datetime] = OMIT,
        owner: typing.Optional[bool] = OMIT,
        google_user_id: typing.Optional[str] = OMIT,
        microsoft_user_id: typing.Optional[str] = OMIT,
        has_authenticator_app: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UpdateUserResponse:
        """
        Parameters
        ----------
        id_ : str

        id : typing.Optional[str]

        organization_id : typing.Optional[str]

        email : typing.Optional[str]

        create_time : typing.Optional[dt.datetime]

        update_time : typing.Optional[dt.datetime]

        owner : typing.Optional[bool]

        google_user_id : typing.Optional[str]

        microsoft_user_id : typing.Optional[str]

        has_authenticator_app : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UpdateUserResponse
            OK

        Examples
        --------
        import asyncio

        from tesseral import Asynctesseral

        client = Asynctesseral(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.backendservice.updateuser(
                id_="id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"backend/v1/users/{jsonable_encoder(id_)}",
            method="PATCH",
            json={
                "id": id,
                "organizationId": organization_id,
                "email": email,
                "createTime": create_time,
                "updateTime": update_time,
                "owner": owner,
                "googleUserId": google_user_id,
                "microsoftUserId": microsoft_user_id,
                "hasAuthenticatorApp": has_authenticator_app,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    UpdateUserResponse,
                    parse_obj_as(
                        type_=UpdateUserResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
