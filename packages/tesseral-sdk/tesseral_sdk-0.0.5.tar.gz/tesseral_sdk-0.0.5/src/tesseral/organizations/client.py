# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.list_organizations_response import ListOrganizationsResponse
from ..core.pydantic_utilities import parse_obj_as
from ..errors.bad_request_error import BadRequestError
from ..types.api_error import ApiError as types_api_error_ApiError
from ..errors.unauthorized_error import UnauthorizedError
from ..errors.forbidden_error import ForbiddenError
from ..errors.not_found_error import NotFoundError
from json.decoder import JSONDecodeError
from ..core.api_error import ApiError as core_api_error_ApiError
import datetime as dt
from ..types.create_organization_response import CreateOrganizationResponse
from ..types.get_organization_response import GetOrganizationResponse
from ..core.jsonable_encoder import jsonable_encoder
from ..types.delete_organization_response import DeleteOrganizationResponse
from ..types.update_organization_response import UpdateOrganizationResponse
from ..types.get_organization_google_hosted_domains_response import GetOrganizationGoogleHostedDomainsResponse
from ..types.update_organization_google_hosted_domains_response import UpdateOrganizationGoogleHostedDomainsResponse
from ..types.get_organization_microsoft_tenant_i_ds_response import GetOrganizationMicrosoftTenantIDsResponse
from ..types.update_organization_microsoft_tenant_i_ds_response import UpdateOrganizationMicrosoftTenantIDsResponse
from ..core.client_wrapper import AsyncClientWrapper

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class OrganizationsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def list_organizations(
        self, *, page_token: typing.Optional[str] = None, request_options: typing.Optional[RequestOptions] = None
    ) -> ListOrganizationsResponse:
        """
        Parameters
        ----------
        page_token : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListOrganizationsResponse
            OK

        Examples
        --------
        from tesseral import Tesseral

        client = Tesseral(
            backend_api_key="YOUR_BACKEND_API_KEY",
        )
        client.organizations.list_organizations()
        """
        _response = self._client_wrapper.httpx_client.request(
            "v1/organizations",
            method="GET",
            params={
                "pageToken": page_token,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ListOrganizationsResponse,
                    parse_obj_as(
                        type_=ListOrganizationsResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise core_api_error_ApiError(status_code=_response.status_code, body=_response.text)
        raise core_api_error_ApiError(status_code=_response.status_code, body=_response_json)

    def create_organization(
        self,
        *,
        id: typing.Optional[str] = OMIT,
        display_name: typing.Optional[str] = OMIT,
        create_time: typing.Optional[dt.datetime] = OMIT,
        update_time: typing.Optional[dt.datetime] = OMIT,
        log_in_with_google: typing.Optional[bool] = OMIT,
        log_in_with_microsoft: typing.Optional[bool] = OMIT,
        log_in_with_email: typing.Optional[bool] = OMIT,
        log_in_with_password: typing.Optional[bool] = OMIT,
        log_in_with_saml: typing.Optional[bool] = OMIT,
        log_in_with_authenticator_app: typing.Optional[bool] = OMIT,
        log_in_with_passkey: typing.Optional[bool] = OMIT,
        require_mfa: typing.Optional[bool] = OMIT,
        scim_enabled: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CreateOrganizationResponse:
        """
        Parameters
        ----------
        id : typing.Optional[str]

        display_name : typing.Optional[str]

        create_time : typing.Optional[dt.datetime]

        update_time : typing.Optional[dt.datetime]

        log_in_with_google : typing.Optional[bool]

        log_in_with_microsoft : typing.Optional[bool]

        log_in_with_email : typing.Optional[bool]

        log_in_with_password : typing.Optional[bool]

        log_in_with_saml : typing.Optional[bool]

        log_in_with_authenticator_app : typing.Optional[bool]

        log_in_with_passkey : typing.Optional[bool]

        require_mfa : typing.Optional[bool]

        scim_enabled : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreateOrganizationResponse
            OK

        Examples
        --------
        from tesseral import Tesseral

        client = Tesseral(
            backend_api_key="YOUR_BACKEND_API_KEY",
        )
        client.organizations.create_organization()
        """
        _response = self._client_wrapper.httpx_client.request(
            "v1/organizations",
            method="POST",
            json={
                "id": id,
                "displayName": display_name,
                "createTime": create_time,
                "updateTime": update_time,
                "logInWithGoogle": log_in_with_google,
                "logInWithMicrosoft": log_in_with_microsoft,
                "logInWithEmail": log_in_with_email,
                "logInWithPassword": log_in_with_password,
                "logInWithSaml": log_in_with_saml,
                "logInWithAuthenticatorApp": log_in_with_authenticator_app,
                "logInWithPasskey": log_in_with_passkey,
                "requireMfa": require_mfa,
                "scimEnabled": scim_enabled,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    CreateOrganizationResponse,
                    parse_obj_as(
                        type_=CreateOrganizationResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise core_api_error_ApiError(status_code=_response.status_code, body=_response.text)
        raise core_api_error_ApiError(status_code=_response.status_code, body=_response_json)

    def get_organization(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetOrganizationResponse:
        """
        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetOrganizationResponse
            OK

        Examples
        --------
        from tesseral import Tesseral

        client = Tesseral(
            backend_api_key="YOUR_BACKEND_API_KEY",
        )
        client.organizations.get_organization(
            id="id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"v1/organizations/{jsonable_encoder(id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    GetOrganizationResponse,
                    parse_obj_as(
                        type_=GetOrganizationResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise core_api_error_ApiError(status_code=_response.status_code, body=_response.text)
        raise core_api_error_ApiError(status_code=_response.status_code, body=_response_json)

    def delete_organization(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> DeleteOrganizationResponse:
        """
        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeleteOrganizationResponse
            OK

        Examples
        --------
        from tesseral import Tesseral

        client = Tesseral(
            backend_api_key="YOUR_BACKEND_API_KEY",
        )
        client.organizations.delete_organization(
            id="id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"v1/organizations/{jsonable_encoder(id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    DeleteOrganizationResponse,
                    parse_obj_as(
                        type_=DeleteOrganizationResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise core_api_error_ApiError(status_code=_response.status_code, body=_response.text)
        raise core_api_error_ApiError(status_code=_response.status_code, body=_response_json)

    def update_organization(
        self,
        id_: str,
        *,
        id: typing.Optional[str] = OMIT,
        display_name: typing.Optional[str] = OMIT,
        create_time: typing.Optional[dt.datetime] = OMIT,
        update_time: typing.Optional[dt.datetime] = OMIT,
        log_in_with_google: typing.Optional[bool] = OMIT,
        log_in_with_microsoft: typing.Optional[bool] = OMIT,
        log_in_with_email: typing.Optional[bool] = OMIT,
        log_in_with_password: typing.Optional[bool] = OMIT,
        log_in_with_saml: typing.Optional[bool] = OMIT,
        log_in_with_authenticator_app: typing.Optional[bool] = OMIT,
        log_in_with_passkey: typing.Optional[bool] = OMIT,
        require_mfa: typing.Optional[bool] = OMIT,
        scim_enabled: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UpdateOrganizationResponse:
        """
        Parameters
        ----------
        id_ : str

        id : typing.Optional[str]

        display_name : typing.Optional[str]

        create_time : typing.Optional[dt.datetime]

        update_time : typing.Optional[dt.datetime]

        log_in_with_google : typing.Optional[bool]

        log_in_with_microsoft : typing.Optional[bool]

        log_in_with_email : typing.Optional[bool]

        log_in_with_password : typing.Optional[bool]

        log_in_with_saml : typing.Optional[bool]

        log_in_with_authenticator_app : typing.Optional[bool]

        log_in_with_passkey : typing.Optional[bool]

        require_mfa : typing.Optional[bool]

        scim_enabled : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UpdateOrganizationResponse
            OK

        Examples
        --------
        from tesseral import Tesseral

        client = Tesseral(
            backend_api_key="YOUR_BACKEND_API_KEY",
        )
        client.organizations.update_organization(
            id_="id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"v1/organizations/{jsonable_encoder(id_)}",
            method="PATCH",
            json={
                "id": id,
                "displayName": display_name,
                "createTime": create_time,
                "updateTime": update_time,
                "logInWithGoogle": log_in_with_google,
                "logInWithMicrosoft": log_in_with_microsoft,
                "logInWithEmail": log_in_with_email,
                "logInWithPassword": log_in_with_password,
                "logInWithSaml": log_in_with_saml,
                "logInWithAuthenticatorApp": log_in_with_authenticator_app,
                "logInWithPasskey": log_in_with_passkey,
                "requireMfa": require_mfa,
                "scimEnabled": scim_enabled,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    UpdateOrganizationResponse,
                    parse_obj_as(
                        type_=UpdateOrganizationResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise core_api_error_ApiError(status_code=_response.status_code, body=_response.text)
        raise core_api_error_ApiError(status_code=_response.status_code, body=_response_json)

    def get_organization_google_hosted_domains(
        self, organization_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetOrganizationGoogleHostedDomainsResponse:
        """
        Parameters
        ----------
        organization_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetOrganizationGoogleHostedDomainsResponse
            OK

        Examples
        --------
        from tesseral import Tesseral

        client = Tesseral(
            backend_api_key="YOUR_BACKEND_API_KEY",
        )
        client.organizations.get_organization_google_hosted_domains(
            organization_id="organizationId",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"v1/organizations/{jsonable_encoder(organization_id)}/google-hosted-domains",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    GetOrganizationGoogleHostedDomainsResponse,
                    parse_obj_as(
                        type_=GetOrganizationGoogleHostedDomainsResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise core_api_error_ApiError(status_code=_response.status_code, body=_response.text)
        raise core_api_error_ApiError(status_code=_response.status_code, body=_response_json)

    def update_organization_google_hosted_domains(
        self,
        organization_id_: str,
        *,
        organization_id: typing.Optional[str] = OMIT,
        google_hosted_domains: typing.Optional[typing.Sequence[str]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UpdateOrganizationGoogleHostedDomainsResponse:
        """
        Parameters
        ----------
        organization_id_ : str

        organization_id : typing.Optional[str]

        google_hosted_domains : typing.Optional[typing.Sequence[str]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UpdateOrganizationGoogleHostedDomainsResponse
            OK

        Examples
        --------
        from tesseral import Tesseral

        client = Tesseral(
            backend_api_key="YOUR_BACKEND_API_KEY",
        )
        client.organizations.update_organization_google_hosted_domains(
            organization_id_="organizationId",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"v1/organizations/{jsonable_encoder(organization_id_)}/google-hosted-domains",
            method="PATCH",
            json={
                "organizationId": organization_id,
                "googleHostedDomains": google_hosted_domains,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    UpdateOrganizationGoogleHostedDomainsResponse,
                    parse_obj_as(
                        type_=UpdateOrganizationGoogleHostedDomainsResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise core_api_error_ApiError(status_code=_response.status_code, body=_response.text)
        raise core_api_error_ApiError(status_code=_response.status_code, body=_response_json)

    def get_organization_microsoft_tenant_i_ds(
        self, organization_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetOrganizationMicrosoftTenantIDsResponse:
        """
        Parameters
        ----------
        organization_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetOrganizationMicrosoftTenantIDsResponse
            OK

        Examples
        --------
        from tesseral import Tesseral

        client = Tesseral(
            backend_api_key="YOUR_BACKEND_API_KEY",
        )
        client.organizations.get_organization_microsoft_tenant_i_ds(
            organization_id="organizationId",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"v1/organizations/{jsonable_encoder(organization_id)}/microsoft-tenant-ids",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    GetOrganizationMicrosoftTenantIDsResponse,
                    parse_obj_as(
                        type_=GetOrganizationMicrosoftTenantIDsResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise core_api_error_ApiError(status_code=_response.status_code, body=_response.text)
        raise core_api_error_ApiError(status_code=_response.status_code, body=_response_json)

    def update_organization_microsoft_tenant_i_ds(
        self,
        organization_id_: str,
        *,
        organization_id: typing.Optional[str] = OMIT,
        microsoft_tenant_ids: typing.Optional[typing.Sequence[str]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UpdateOrganizationMicrosoftTenantIDsResponse:
        """
        Parameters
        ----------
        organization_id_ : str

        organization_id : typing.Optional[str]

        microsoft_tenant_ids : typing.Optional[typing.Sequence[str]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UpdateOrganizationMicrosoftTenantIDsResponse
            OK

        Examples
        --------
        from tesseral import Tesseral

        client = Tesseral(
            backend_api_key="YOUR_BACKEND_API_KEY",
        )
        client.organizations.update_organization_microsoft_tenant_i_ds(
            organization_id_="organizationId",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"v1/organizations/{jsonable_encoder(organization_id_)}/microsoft-tenant-ids",
            method="PATCH",
            json={
                "organizationId": organization_id,
                "microsoftTenantIds": microsoft_tenant_ids,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    UpdateOrganizationMicrosoftTenantIDsResponse,
                    parse_obj_as(
                        type_=UpdateOrganizationMicrosoftTenantIDsResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise core_api_error_ApiError(status_code=_response.status_code, body=_response.text)
        raise core_api_error_ApiError(status_code=_response.status_code, body=_response_json)


class AsyncOrganizationsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def list_organizations(
        self, *, page_token: typing.Optional[str] = None, request_options: typing.Optional[RequestOptions] = None
    ) -> ListOrganizationsResponse:
        """
        Parameters
        ----------
        page_token : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListOrganizationsResponse
            OK

        Examples
        --------
        import asyncio

        from tesseral import AsyncTesseral

        client = AsyncTesseral(
            backend_api_key="YOUR_BACKEND_API_KEY",
        )


        async def main() -> None:
            await client.organizations.list_organizations()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v1/organizations",
            method="GET",
            params={
                "pageToken": page_token,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ListOrganizationsResponse,
                    parse_obj_as(
                        type_=ListOrganizationsResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise core_api_error_ApiError(status_code=_response.status_code, body=_response.text)
        raise core_api_error_ApiError(status_code=_response.status_code, body=_response_json)

    async def create_organization(
        self,
        *,
        id: typing.Optional[str] = OMIT,
        display_name: typing.Optional[str] = OMIT,
        create_time: typing.Optional[dt.datetime] = OMIT,
        update_time: typing.Optional[dt.datetime] = OMIT,
        log_in_with_google: typing.Optional[bool] = OMIT,
        log_in_with_microsoft: typing.Optional[bool] = OMIT,
        log_in_with_email: typing.Optional[bool] = OMIT,
        log_in_with_password: typing.Optional[bool] = OMIT,
        log_in_with_saml: typing.Optional[bool] = OMIT,
        log_in_with_authenticator_app: typing.Optional[bool] = OMIT,
        log_in_with_passkey: typing.Optional[bool] = OMIT,
        require_mfa: typing.Optional[bool] = OMIT,
        scim_enabled: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CreateOrganizationResponse:
        """
        Parameters
        ----------
        id : typing.Optional[str]

        display_name : typing.Optional[str]

        create_time : typing.Optional[dt.datetime]

        update_time : typing.Optional[dt.datetime]

        log_in_with_google : typing.Optional[bool]

        log_in_with_microsoft : typing.Optional[bool]

        log_in_with_email : typing.Optional[bool]

        log_in_with_password : typing.Optional[bool]

        log_in_with_saml : typing.Optional[bool]

        log_in_with_authenticator_app : typing.Optional[bool]

        log_in_with_passkey : typing.Optional[bool]

        require_mfa : typing.Optional[bool]

        scim_enabled : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreateOrganizationResponse
            OK

        Examples
        --------
        import asyncio

        from tesseral import AsyncTesseral

        client = AsyncTesseral(
            backend_api_key="YOUR_BACKEND_API_KEY",
        )


        async def main() -> None:
            await client.organizations.create_organization()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v1/organizations",
            method="POST",
            json={
                "id": id,
                "displayName": display_name,
                "createTime": create_time,
                "updateTime": update_time,
                "logInWithGoogle": log_in_with_google,
                "logInWithMicrosoft": log_in_with_microsoft,
                "logInWithEmail": log_in_with_email,
                "logInWithPassword": log_in_with_password,
                "logInWithSaml": log_in_with_saml,
                "logInWithAuthenticatorApp": log_in_with_authenticator_app,
                "logInWithPasskey": log_in_with_passkey,
                "requireMfa": require_mfa,
                "scimEnabled": scim_enabled,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    CreateOrganizationResponse,
                    parse_obj_as(
                        type_=CreateOrganizationResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise core_api_error_ApiError(status_code=_response.status_code, body=_response.text)
        raise core_api_error_ApiError(status_code=_response.status_code, body=_response_json)

    async def get_organization(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetOrganizationResponse:
        """
        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetOrganizationResponse
            OK

        Examples
        --------
        import asyncio

        from tesseral import AsyncTesseral

        client = AsyncTesseral(
            backend_api_key="YOUR_BACKEND_API_KEY",
        )


        async def main() -> None:
            await client.organizations.get_organization(
                id="id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"v1/organizations/{jsonable_encoder(id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    GetOrganizationResponse,
                    parse_obj_as(
                        type_=GetOrganizationResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise core_api_error_ApiError(status_code=_response.status_code, body=_response.text)
        raise core_api_error_ApiError(status_code=_response.status_code, body=_response_json)

    async def delete_organization(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> DeleteOrganizationResponse:
        """
        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeleteOrganizationResponse
            OK

        Examples
        --------
        import asyncio

        from tesseral import AsyncTesseral

        client = AsyncTesseral(
            backend_api_key="YOUR_BACKEND_API_KEY",
        )


        async def main() -> None:
            await client.organizations.delete_organization(
                id="id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"v1/organizations/{jsonable_encoder(id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    DeleteOrganizationResponse,
                    parse_obj_as(
                        type_=DeleteOrganizationResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise core_api_error_ApiError(status_code=_response.status_code, body=_response.text)
        raise core_api_error_ApiError(status_code=_response.status_code, body=_response_json)

    async def update_organization(
        self,
        id_: str,
        *,
        id: typing.Optional[str] = OMIT,
        display_name: typing.Optional[str] = OMIT,
        create_time: typing.Optional[dt.datetime] = OMIT,
        update_time: typing.Optional[dt.datetime] = OMIT,
        log_in_with_google: typing.Optional[bool] = OMIT,
        log_in_with_microsoft: typing.Optional[bool] = OMIT,
        log_in_with_email: typing.Optional[bool] = OMIT,
        log_in_with_password: typing.Optional[bool] = OMIT,
        log_in_with_saml: typing.Optional[bool] = OMIT,
        log_in_with_authenticator_app: typing.Optional[bool] = OMIT,
        log_in_with_passkey: typing.Optional[bool] = OMIT,
        require_mfa: typing.Optional[bool] = OMIT,
        scim_enabled: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UpdateOrganizationResponse:
        """
        Parameters
        ----------
        id_ : str

        id : typing.Optional[str]

        display_name : typing.Optional[str]

        create_time : typing.Optional[dt.datetime]

        update_time : typing.Optional[dt.datetime]

        log_in_with_google : typing.Optional[bool]

        log_in_with_microsoft : typing.Optional[bool]

        log_in_with_email : typing.Optional[bool]

        log_in_with_password : typing.Optional[bool]

        log_in_with_saml : typing.Optional[bool]

        log_in_with_authenticator_app : typing.Optional[bool]

        log_in_with_passkey : typing.Optional[bool]

        require_mfa : typing.Optional[bool]

        scim_enabled : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UpdateOrganizationResponse
            OK

        Examples
        --------
        import asyncio

        from tesseral import AsyncTesseral

        client = AsyncTesseral(
            backend_api_key="YOUR_BACKEND_API_KEY",
        )


        async def main() -> None:
            await client.organizations.update_organization(
                id_="id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"v1/organizations/{jsonable_encoder(id_)}",
            method="PATCH",
            json={
                "id": id,
                "displayName": display_name,
                "createTime": create_time,
                "updateTime": update_time,
                "logInWithGoogle": log_in_with_google,
                "logInWithMicrosoft": log_in_with_microsoft,
                "logInWithEmail": log_in_with_email,
                "logInWithPassword": log_in_with_password,
                "logInWithSaml": log_in_with_saml,
                "logInWithAuthenticatorApp": log_in_with_authenticator_app,
                "logInWithPasskey": log_in_with_passkey,
                "requireMfa": require_mfa,
                "scimEnabled": scim_enabled,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    UpdateOrganizationResponse,
                    parse_obj_as(
                        type_=UpdateOrganizationResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise core_api_error_ApiError(status_code=_response.status_code, body=_response.text)
        raise core_api_error_ApiError(status_code=_response.status_code, body=_response_json)

    async def get_organization_google_hosted_domains(
        self, organization_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetOrganizationGoogleHostedDomainsResponse:
        """
        Parameters
        ----------
        organization_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetOrganizationGoogleHostedDomainsResponse
            OK

        Examples
        --------
        import asyncio

        from tesseral import AsyncTesseral

        client = AsyncTesseral(
            backend_api_key="YOUR_BACKEND_API_KEY",
        )


        async def main() -> None:
            await client.organizations.get_organization_google_hosted_domains(
                organization_id="organizationId",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"v1/organizations/{jsonable_encoder(organization_id)}/google-hosted-domains",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    GetOrganizationGoogleHostedDomainsResponse,
                    parse_obj_as(
                        type_=GetOrganizationGoogleHostedDomainsResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise core_api_error_ApiError(status_code=_response.status_code, body=_response.text)
        raise core_api_error_ApiError(status_code=_response.status_code, body=_response_json)

    async def update_organization_google_hosted_domains(
        self,
        organization_id_: str,
        *,
        organization_id: typing.Optional[str] = OMIT,
        google_hosted_domains: typing.Optional[typing.Sequence[str]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UpdateOrganizationGoogleHostedDomainsResponse:
        """
        Parameters
        ----------
        organization_id_ : str

        organization_id : typing.Optional[str]

        google_hosted_domains : typing.Optional[typing.Sequence[str]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UpdateOrganizationGoogleHostedDomainsResponse
            OK

        Examples
        --------
        import asyncio

        from tesseral import AsyncTesseral

        client = AsyncTesseral(
            backend_api_key="YOUR_BACKEND_API_KEY",
        )


        async def main() -> None:
            await client.organizations.update_organization_google_hosted_domains(
                organization_id_="organizationId",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"v1/organizations/{jsonable_encoder(organization_id_)}/google-hosted-domains",
            method="PATCH",
            json={
                "organizationId": organization_id,
                "googleHostedDomains": google_hosted_domains,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    UpdateOrganizationGoogleHostedDomainsResponse,
                    parse_obj_as(
                        type_=UpdateOrganizationGoogleHostedDomainsResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise core_api_error_ApiError(status_code=_response.status_code, body=_response.text)
        raise core_api_error_ApiError(status_code=_response.status_code, body=_response_json)

    async def get_organization_microsoft_tenant_i_ds(
        self, organization_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetOrganizationMicrosoftTenantIDsResponse:
        """
        Parameters
        ----------
        organization_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetOrganizationMicrosoftTenantIDsResponse
            OK

        Examples
        --------
        import asyncio

        from tesseral import AsyncTesseral

        client = AsyncTesseral(
            backend_api_key="YOUR_BACKEND_API_KEY",
        )


        async def main() -> None:
            await client.organizations.get_organization_microsoft_tenant_i_ds(
                organization_id="organizationId",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"v1/organizations/{jsonable_encoder(organization_id)}/microsoft-tenant-ids",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    GetOrganizationMicrosoftTenantIDsResponse,
                    parse_obj_as(
                        type_=GetOrganizationMicrosoftTenantIDsResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise core_api_error_ApiError(status_code=_response.status_code, body=_response.text)
        raise core_api_error_ApiError(status_code=_response.status_code, body=_response_json)

    async def update_organization_microsoft_tenant_i_ds(
        self,
        organization_id_: str,
        *,
        organization_id: typing.Optional[str] = OMIT,
        microsoft_tenant_ids: typing.Optional[typing.Sequence[str]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UpdateOrganizationMicrosoftTenantIDsResponse:
        """
        Parameters
        ----------
        organization_id_ : str

        organization_id : typing.Optional[str]

        microsoft_tenant_ids : typing.Optional[typing.Sequence[str]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UpdateOrganizationMicrosoftTenantIDsResponse
            OK

        Examples
        --------
        import asyncio

        from tesseral import AsyncTesseral

        client = AsyncTesseral(
            backend_api_key="YOUR_BACKEND_API_KEY",
        )


        async def main() -> None:
            await client.organizations.update_organization_microsoft_tenant_i_ds(
                organization_id_="organizationId",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"v1/organizations/{jsonable_encoder(organization_id_)}/microsoft-tenant-ids",
            method="PATCH",
            json={
                "organizationId": organization_id,
                "microsoftTenantIds": microsoft_tenant_ids,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    UpdateOrganizationMicrosoftTenantIDsResponse,
                    parse_obj_as(
                        type_=UpdateOrganizationMicrosoftTenantIDsResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise core_api_error_ApiError(status_code=_response.status_code, body=_response.text)
        raise core_api_error_ApiError(status_code=_response.status_code, body=_response_json)
