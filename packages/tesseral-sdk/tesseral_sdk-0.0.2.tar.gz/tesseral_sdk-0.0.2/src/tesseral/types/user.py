# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing
import typing_extensions
from ..core.serialization import FieldMetadata
import datetime as dt
from ..core.pydantic_utilities import IS_PYDANTIC_V2
import pydantic


class User(UniversalBaseModel):
    id: typing.Optional[str] = None
    organization_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="organizationId")] = None
    email: typing.Optional[str] = None
    create_time: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="createTime")] = None
    update_time: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="updateTime")] = None
    owner: typing.Optional[bool] = None
    google_user_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="googleUserId")] = None
    microsoft_user_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="microsoftUserId")] = None
    has_authenticator_app: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="hasAuthenticatorApp")
    ] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
