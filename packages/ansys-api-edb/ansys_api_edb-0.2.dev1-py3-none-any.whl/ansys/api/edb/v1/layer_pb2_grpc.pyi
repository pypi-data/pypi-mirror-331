"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import ansys.api.edb.v1.edb_messages_pb2
import ansys.api.edb.v1.layer_pb2
import google.protobuf.empty_pb2
import google.protobuf.wrappers_pb2
import grpc

class LayerServiceStub:
    """Layer service definition"""
    def __init__(self, channel: grpc.Channel) -> None: ...
    Create: grpc.UnaryUnaryMultiCallable[
        ansys.api.edb.v1.layer_pb2.LayerCreationMessage,
        ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage] = ...
    """Create a non-stackup layer"""

    GetLayerType: grpc.UnaryUnaryMultiCallable[
        ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage,
        ansys.api.edb.v1.layer_pb2.LayerTypeMessage] = ...
    """Get the layer type of the layer"""

    SetLayerType: grpc.UnaryUnaryMultiCallable[
        ansys.api.edb.v1.layer_pb2.SetLayerTypeMessage,
        google.protobuf.empty_pb2.Empty] = ...
    """Set the layer type of the layer"""

    IsViaLayer: grpc.UnaryUnaryMultiCallable[
        ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage,
        google.protobuf.wrappers_pb2.BoolValue] = ...
    """Check whether or not this layer is a via layer"""

    GetName: grpc.UnaryUnaryMultiCallable[
        ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage,
        google.protobuf.wrappers_pb2.StringValue] = ...
    """Get the name of this layer"""

    SetName: grpc.UnaryUnaryMultiCallable[
        ansys.api.edb.v1.layer_pb2.SetNameMessage,
        google.protobuf.empty_pb2.Empty] = ...
    """Set the name of this layer"""

    Clone: grpc.UnaryUnaryMultiCallable[
        ansys.api.edb.v1.layer_pb2.CloneMessage,
        ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage] = ...
    """Create a clone of this layer"""

    GetLayerId: grpc.UnaryUnaryMultiCallable[
        ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage,
        google.protobuf.wrappers_pb2.Int64Value] = ...
    """Get the layer id of this layer"""

    GetTopBottomAssociation: grpc.UnaryUnaryMultiCallable[
        ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage,
        ansys.api.edb.v1.layer_pb2.TopBottomAssociationMessage] = ...
    """Get the top bottom association of this layer"""

    SetTopBottomAssociation: grpc.UnaryUnaryMultiCallable[
        ansys.api.edb.v1.layer_pb2.SetTopBottomAssociationMessage,
        google.protobuf.empty_pb2.Empty] = ...
    """Set the top bottom association of this layer"""

    GetColor: grpc.UnaryUnaryMultiCallable[
        ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage,
        google.protobuf.wrappers_pb2.UInt64Value] = ...
    """Get the color of this layer"""

    SetColor: grpc.UnaryUnaryMultiCallable[
        ansys.api.edb.v1.layer_pb2.SetColorMessage,
        google.protobuf.empty_pb2.Empty] = ...
    """Set the color of this layer"""

    GetVisibilityMask: grpc.UnaryUnaryMultiCallable[
        ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage,
        google.protobuf.wrappers_pb2.UInt64Value] = ...
    """Get the visibility mask of this layer"""

    SetVisibilityMask: grpc.UnaryUnaryMultiCallable[
        ansys.api.edb.v1.layer_pb2.SetVisibilityMaskMessage,
        google.protobuf.empty_pb2.Empty] = ...
    """Set the visibility mask of this layer"""

    GetLocked: grpc.UnaryUnaryMultiCallable[
        ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage,
        google.protobuf.wrappers_pb2.BoolValue] = ...
    """Get the layer's locked status"""

    SetLocked: grpc.UnaryUnaryMultiCallable[
        ansys.api.edb.v1.layer_pb2.SetLockedMessage,
        google.protobuf.empty_pb2.Empty] = ...
    """Set the layer's locked status"""

    GetTransparency: grpc.UnaryUnaryMultiCallable[
        ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage,
        google.protobuf.wrappers_pb2.UInt64Value] = ...
    """Get the layer's transparency value"""

    SetTransparency: grpc.UnaryUnaryMultiCallable[
        ansys.api.edb.v1.layer_pb2.SetTransparencyMessage,
        google.protobuf.empty_pb2.Empty] = ...
    """Set the layer's transparency status"""

    GetDrawOverride: grpc.UnaryUnaryMultiCallable[
        ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage,
        ansys.api.edb.v1.layer_pb2.DrawOverrideMessage] = ...
    """Get the layer's draw override type"""

    SetDrawOverride: grpc.UnaryUnaryMultiCallable[
        ansys.api.edb.v1.layer_pb2.SetDrawOverrideMessage,
        google.protobuf.empty_pb2.Empty] = ...
    """Set the layer's draw override type"""

    GetProductProperty: grpc.UnaryUnaryMultiCallable[
        ansys.api.edb.v1.edb_messages_pb2.GetProductPropertyMessage,
        google.protobuf.wrappers_pb2.StringValue] = ...
    """Get the layer's product property corresponding to the given product and attribute ids"""

    SetProductProperty: grpc.UnaryUnaryMultiCallable[
        ansys.api.edb.v1.edb_messages_pb2.SetProductPropertyMessage,
        google.protobuf.empty_pb2.Empty] = ...
    """Set the layer's product property corresponding to the given product and attribute ids"""

    GetProductPropertyIds: grpc.UnaryUnaryMultiCallable[
        ansys.api.edb.v1.edb_messages_pb2.GetProductPropertyIdsMessage,
        ansys.api.edb.v1.edb_messages_pb2.ProductPropertyIdsMessage] = ...
    """Get a list of property ids associated with the layer for the given product."""

    IsInZone: grpc.UnaryUnaryMultiCallable[
        ansys.api.edb.v1.layer_pb2.ZoneMessage,
        google.protobuf.wrappers_pb2.BoolValue] = ...
    """Get whether this layer is in the specified zone"""

    SetIsInZone: grpc.UnaryUnaryMultiCallable[
        ansys.api.edb.v1.layer_pb2.SetIsInZoneMessage,
        google.protobuf.empty_pb2.Empty] = ...
    """Set whether this layer is in the specified zone"""

    GetZones: grpc.UnaryUnaryMultiCallable[
        ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage,
        ansys.api.edb.v1.layer_pb2.ZonesMessage] = ...
    """Get the zone ids of all zones containing this layer"""

    GetZone: grpc.UnaryUnaryMultiCallable[
        ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage,
        google.protobuf.wrappers_pb2.Int64Value] = ...
    """Get the zone index asociated with the layer's owning layer collection (if owner is invalid index is 0, if owner is multizone index is -1)"""


class LayerServiceServicer(metaclass=abc.ABCMeta):
    """Layer service definition"""
    @abc.abstractmethod
    def Create(self,
        request: ansys.api.edb.v1.layer_pb2.LayerCreationMessage,
        context: grpc.ServicerContext,
    ) -> ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage:
        """Create a non-stackup layer"""
        pass

    @abc.abstractmethod
    def GetLayerType(self,
        request: ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage,
        context: grpc.ServicerContext,
    ) -> ansys.api.edb.v1.layer_pb2.LayerTypeMessage:
        """Get the layer type of the layer"""
        pass

    @abc.abstractmethod
    def SetLayerType(self,
        request: ansys.api.edb.v1.layer_pb2.SetLayerTypeMessage,
        context: grpc.ServicerContext,
    ) -> google.protobuf.empty_pb2.Empty:
        """Set the layer type of the layer"""
        pass

    @abc.abstractmethod
    def IsViaLayer(self,
        request: ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage,
        context: grpc.ServicerContext,
    ) -> google.protobuf.wrappers_pb2.BoolValue:
        """Check whether or not this layer is a via layer"""
        pass

    @abc.abstractmethod
    def GetName(self,
        request: ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage,
        context: grpc.ServicerContext,
    ) -> google.protobuf.wrappers_pb2.StringValue:
        """Get the name of this layer"""
        pass

    @abc.abstractmethod
    def SetName(self,
        request: ansys.api.edb.v1.layer_pb2.SetNameMessage,
        context: grpc.ServicerContext,
    ) -> google.protobuf.empty_pb2.Empty:
        """Set the name of this layer"""
        pass

    @abc.abstractmethod
    def Clone(self,
        request: ansys.api.edb.v1.layer_pb2.CloneMessage,
        context: grpc.ServicerContext,
    ) -> ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage:
        """Create a clone of this layer"""
        pass

    @abc.abstractmethod
    def GetLayerId(self,
        request: ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage,
        context: grpc.ServicerContext,
    ) -> google.protobuf.wrappers_pb2.Int64Value:
        """Get the layer id of this layer"""
        pass

    @abc.abstractmethod
    def GetTopBottomAssociation(self,
        request: ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage,
        context: grpc.ServicerContext,
    ) -> ansys.api.edb.v1.layer_pb2.TopBottomAssociationMessage:
        """Get the top bottom association of this layer"""
        pass

    @abc.abstractmethod
    def SetTopBottomAssociation(self,
        request: ansys.api.edb.v1.layer_pb2.SetTopBottomAssociationMessage,
        context: grpc.ServicerContext,
    ) -> google.protobuf.empty_pb2.Empty:
        """Set the top bottom association of this layer"""
        pass

    @abc.abstractmethod
    def GetColor(self,
        request: ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage,
        context: grpc.ServicerContext,
    ) -> google.protobuf.wrappers_pb2.UInt64Value:
        """Get the color of this layer"""
        pass

    @abc.abstractmethod
    def SetColor(self,
        request: ansys.api.edb.v1.layer_pb2.SetColorMessage,
        context: grpc.ServicerContext,
    ) -> google.protobuf.empty_pb2.Empty:
        """Set the color of this layer"""
        pass

    @abc.abstractmethod
    def GetVisibilityMask(self,
        request: ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage,
        context: grpc.ServicerContext,
    ) -> google.protobuf.wrappers_pb2.UInt64Value:
        """Get the visibility mask of this layer"""
        pass

    @abc.abstractmethod
    def SetVisibilityMask(self,
        request: ansys.api.edb.v1.layer_pb2.SetVisibilityMaskMessage,
        context: grpc.ServicerContext,
    ) -> google.protobuf.empty_pb2.Empty:
        """Set the visibility mask of this layer"""
        pass

    @abc.abstractmethod
    def GetLocked(self,
        request: ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage,
        context: grpc.ServicerContext,
    ) -> google.protobuf.wrappers_pb2.BoolValue:
        """Get the layer's locked status"""
        pass

    @abc.abstractmethod
    def SetLocked(self,
        request: ansys.api.edb.v1.layer_pb2.SetLockedMessage,
        context: grpc.ServicerContext,
    ) -> google.protobuf.empty_pb2.Empty:
        """Set the layer's locked status"""
        pass

    @abc.abstractmethod
    def GetTransparency(self,
        request: ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage,
        context: grpc.ServicerContext,
    ) -> google.protobuf.wrappers_pb2.UInt64Value:
        """Get the layer's transparency value"""
        pass

    @abc.abstractmethod
    def SetTransparency(self,
        request: ansys.api.edb.v1.layer_pb2.SetTransparencyMessage,
        context: grpc.ServicerContext,
    ) -> google.protobuf.empty_pb2.Empty:
        """Set the layer's transparency status"""
        pass

    @abc.abstractmethod
    def GetDrawOverride(self,
        request: ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage,
        context: grpc.ServicerContext,
    ) -> ansys.api.edb.v1.layer_pb2.DrawOverrideMessage:
        """Get the layer's draw override type"""
        pass

    @abc.abstractmethod
    def SetDrawOverride(self,
        request: ansys.api.edb.v1.layer_pb2.SetDrawOverrideMessage,
        context: grpc.ServicerContext,
    ) -> google.protobuf.empty_pb2.Empty:
        """Set the layer's draw override type"""
        pass

    @abc.abstractmethod
    def GetProductProperty(self,
        request: ansys.api.edb.v1.edb_messages_pb2.GetProductPropertyMessage,
        context: grpc.ServicerContext,
    ) -> google.protobuf.wrappers_pb2.StringValue:
        """Get the layer's product property corresponding to the given product and attribute ids"""
        pass

    @abc.abstractmethod
    def SetProductProperty(self,
        request: ansys.api.edb.v1.edb_messages_pb2.SetProductPropertyMessage,
        context: grpc.ServicerContext,
    ) -> google.protobuf.empty_pb2.Empty:
        """Set the layer's product property corresponding to the given product and attribute ids"""
        pass

    @abc.abstractmethod
    def GetProductPropertyIds(self,
        request: ansys.api.edb.v1.edb_messages_pb2.GetProductPropertyIdsMessage,
        context: grpc.ServicerContext,
    ) -> ansys.api.edb.v1.edb_messages_pb2.ProductPropertyIdsMessage:
        """Get a list of property ids associated with the layer for the given product."""
        pass

    @abc.abstractmethod
    def IsInZone(self,
        request: ansys.api.edb.v1.layer_pb2.ZoneMessage,
        context: grpc.ServicerContext,
    ) -> google.protobuf.wrappers_pb2.BoolValue:
        """Get whether this layer is in the specified zone"""
        pass

    @abc.abstractmethod
    def SetIsInZone(self,
        request: ansys.api.edb.v1.layer_pb2.SetIsInZoneMessage,
        context: grpc.ServicerContext,
    ) -> google.protobuf.empty_pb2.Empty:
        """Set whether this layer is in the specified zone"""
        pass

    @abc.abstractmethod
    def GetZones(self,
        request: ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage,
        context: grpc.ServicerContext,
    ) -> ansys.api.edb.v1.layer_pb2.ZonesMessage:
        """Get the zone ids of all zones containing this layer"""
        pass

    @abc.abstractmethod
    def GetZone(self,
        request: ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage,
        context: grpc.ServicerContext,
    ) -> google.protobuf.wrappers_pb2.Int64Value:
        """Get the zone index asociated with the layer's owning layer collection (if owner is invalid index is 0, if owner is multizone index is -1)"""
        pass


def add_LayerServiceServicer_to_server(servicer: LayerServiceServicer, server: grpc.Server) -> None: ...
