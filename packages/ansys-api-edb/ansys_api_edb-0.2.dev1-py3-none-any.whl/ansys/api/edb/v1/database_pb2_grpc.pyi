"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import ansys.api.edb.v1.database_pb2
import ansys.api.edb.v1.edb_messages_pb2
import google.protobuf.empty_pb2
import google.protobuf.wrappers_pb2
import grpc
import typing

class DatabaseServiceStub:
    def __init__(self, channel: grpc.Channel) -> None: ...
    Create: grpc.UnaryUnaryMultiCallable[
        google.protobuf.wrappers_pb2.StringValue,
        ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage] = ...
    """Creates a database"""

    Open: grpc.UnaryUnaryMultiCallable[
        ansys.api.edb.v1.database_pb2.OpenDatabaseMessage,
        ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage] = ...
    """Opens a database"""

    Delete: grpc.UnaryUnaryMultiCallable[
        google.protobuf.wrappers_pb2.StringValue,
        google.protobuf.empty_pb2.Empty] = ...
    """Deletes a database"""

    Save: grpc.UnaryUnaryMultiCallable[
        ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage,
        google.protobuf.empty_pb2.Empty] = ...
    """Saves a database"""

    Close: grpc.UnaryUnaryMultiCallable[
        ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage,
        google.protobuf.empty_pb2.Empty] = ...
    """Closes a database"""

    IsReadOnly: grpc.UnaryUnaryMultiCallable[
        ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage,
        google.protobuf.wrappers_pb2.BoolValue] = ...
    """Determines whether the database is read only"""

    GetTopCircuits: grpc.UnaryUnaryMultiCallable[
        ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage,
        ansys.api.edb.v1.edb_messages_pb2.EDBObjCollectionMessage] = ...
    """Gets the top circuits in a database"""

    StreamTopCircuits: grpc.UnaryStreamMultiCallable[
        ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage,
        ansys.api.edb.v1.edb_messages_pb2.EDBObjCollectionMessage] = ...

    GetId: grpc.UnaryUnaryMultiCallable[
        ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage,
        google.protobuf.wrappers_pb2.Int64Value] = ...
    """Gets the id of a database"""

    FindById: grpc.UnaryUnaryMultiCallable[
        google.protobuf.wrappers_pb2.Int64Value,
        ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage] = ...
    """Finds a database with the provided id"""

    SaveAs: grpc.UnaryUnaryMultiCallable[
        ansys.api.edb.v1.database_pb2.SaveAsDatabaseMessage,
        google.protobuf.empty_pb2.Empty] = ...
    """Save the database to new location and optionaly to older edb version"""

    GetVersionByRelease: grpc.UnaryUnaryMultiCallable[
        google.protobuf.wrappers_pb2.StringValue,
        google.protobuf.wrappers_pb2.StringValue] = ...
    """Get EDB version by release name"""

    GetDirectory: grpc.UnaryUnaryMultiCallable[
        ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage,
        google.protobuf.wrappers_pb2.StringValue] = ...
    """Get the directory of the Database"""

    GetProductProperty: grpc.UnaryUnaryMultiCallable[
        ansys.api.edb.v1.edb_messages_pb2.GetProductPropertyMessage,
        google.protobuf.wrappers_pb2.StringValue] = ...

    SetProductProperty: grpc.UnaryUnaryMultiCallable[
        ansys.api.edb.v1.edb_messages_pb2.SetProductPropertyMessage,
        google.protobuf.empty_pb2.Empty] = ...

    GetProductPropertyIds: grpc.UnaryUnaryMultiCallable[
        ansys.api.edb.v1.edb_messages_pb2.GetProductPropertyIdsMessage,
        ansys.api.edb.v1.edb_messages_pb2.ProductPropertyIdsMessage] = ...

    ImportMaterialFromControlFile: grpc.UnaryUnaryMultiCallable[
        ansys.api.edb.v1.database_pb2.ImportMaterialFromControlFileMessage,
        google.protobuf.empty_pb2.Empty] = ...

    GetVersion: grpc.UnaryUnaryMultiCallable[
        ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage,
        ansys.api.edb.v1.database_pb2.GetVersionMessage] = ...

    Scale: grpc.UnaryUnaryMultiCallable[
        ansys.api.edb.v1.edb_messages_pb2.DoublePropertyMessage,
        google.protobuf.empty_pb2.Empty] = ...

    GetSource: grpc.UnaryUnaryMultiCallable[
        ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage,
        google.protobuf.wrappers_pb2.StringValue] = ...

    SetSource: grpc.UnaryUnaryMultiCallable[
        ansys.api.edb.v1.edb_messages_pb2.EDBObjNameMessage,
        google.protobuf.empty_pb2.Empty] = ...

    GetSourceVersion: grpc.UnaryUnaryMultiCallable[
        ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage,
        google.protobuf.wrappers_pb2.StringValue] = ...

    SetSourceVersion: grpc.UnaryUnaryMultiCallable[
        ansys.api.edb.v1.edb_messages_pb2.EDBObjNameMessage,
        google.protobuf.empty_pb2.Empty] = ...

    CopyCells: grpc.UnaryUnaryMultiCallable[
        ansys.api.edb.v1.database_pb2.CopyCellsMessage,
        ansys.api.edb.v1.edb_messages_pb2.EDBObjCollectionMessage] = ...
    """copy cells"""

    GetDefinitionObjs: grpc.UnaryUnaryMultiCallable[
        ansys.api.edb.v1.database_pb2.GetDefinitionObjsMessage,
        ansys.api.edb.v1.edb_messages_pb2.EDBObjCollectionMessage] = ...
    """Get defs"""

    StreamDefinitionObjs: grpc.UnaryStreamMultiCallable[
        ansys.api.edb.v1.database_pb2.GetDefinitionObjsMessage,
        ansys.api.edb.v1.edb_messages_pb2.EDBObjCollectionMessage] = ...

    TopCircuitCells: grpc.UnaryUnaryMultiCallable[
        ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage,
        ansys.api.edb.v1.edb_messages_pb2.EDBObjCollectionMessage] = ...
    """get cells"""

    GetCircuits: grpc.UnaryUnaryMultiCallable[
        ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage,
        ansys.api.edb.v1.edb_messages_pb2.EDBObjCollectionMessage] = ...

    StreamCircuits: grpc.UnaryStreamMultiCallable[
        ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage,
        ansys.api.edb.v1.edb_messages_pb2.EDBObjCollectionMessage] = ...

    GetFootprints: grpc.UnaryUnaryMultiCallable[
        ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage,
        ansys.api.edb.v1.edb_messages_pb2.EDBObjCollectionMessage] = ...

    StreamFootprints: grpc.UnaryStreamMultiCallable[
        ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage,
        ansys.api.edb.v1.edb_messages_pb2.EDBObjCollectionMessage] = ...


class DatabaseServiceServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def Create(self,
        request: google.protobuf.wrappers_pb2.StringValue,
        context: grpc.ServicerContext,
    ) -> ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage:
        """Creates a database"""
        pass

    @abc.abstractmethod
    def Open(self,
        request: ansys.api.edb.v1.database_pb2.OpenDatabaseMessage,
        context: grpc.ServicerContext,
    ) -> ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage:
        """Opens a database"""
        pass

    @abc.abstractmethod
    def Delete(self,
        request: google.protobuf.wrappers_pb2.StringValue,
        context: grpc.ServicerContext,
    ) -> google.protobuf.empty_pb2.Empty:
        """Deletes a database"""
        pass

    @abc.abstractmethod
    def Save(self,
        request: ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage,
        context: grpc.ServicerContext,
    ) -> google.protobuf.empty_pb2.Empty:
        """Saves a database"""
        pass

    @abc.abstractmethod
    def Close(self,
        request: ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage,
        context: grpc.ServicerContext,
    ) -> google.protobuf.empty_pb2.Empty:
        """Closes a database"""
        pass

    @abc.abstractmethod
    def IsReadOnly(self,
        request: ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage,
        context: grpc.ServicerContext,
    ) -> google.protobuf.wrappers_pb2.BoolValue:
        """Determines whether the database is read only"""
        pass

    @abc.abstractmethod
    def GetTopCircuits(self,
        request: ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage,
        context: grpc.ServicerContext,
    ) -> ansys.api.edb.v1.edb_messages_pb2.EDBObjCollectionMessage:
        """Gets the top circuits in a database"""
        pass

    @abc.abstractmethod
    def StreamTopCircuits(self,
        request: ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage,
        context: grpc.ServicerContext,
    ) -> typing.Iterator[ansys.api.edb.v1.edb_messages_pb2.EDBObjCollectionMessage]: ...

    @abc.abstractmethod
    def GetId(self,
        request: ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage,
        context: grpc.ServicerContext,
    ) -> google.protobuf.wrappers_pb2.Int64Value:
        """Gets the id of a database"""
        pass

    @abc.abstractmethod
    def FindById(self,
        request: google.protobuf.wrappers_pb2.Int64Value,
        context: grpc.ServicerContext,
    ) -> ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage:
        """Finds a database with the provided id"""
        pass

    @abc.abstractmethod
    def SaveAs(self,
        request: ansys.api.edb.v1.database_pb2.SaveAsDatabaseMessage,
        context: grpc.ServicerContext,
    ) -> google.protobuf.empty_pb2.Empty:
        """Save the database to new location and optionaly to older edb version"""
        pass

    @abc.abstractmethod
    def GetVersionByRelease(self,
        request: google.protobuf.wrappers_pb2.StringValue,
        context: grpc.ServicerContext,
    ) -> google.protobuf.wrappers_pb2.StringValue:
        """Get EDB version by release name"""
        pass

    @abc.abstractmethod
    def GetDirectory(self,
        request: ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage,
        context: grpc.ServicerContext,
    ) -> google.protobuf.wrappers_pb2.StringValue:
        """Get the directory of the Database"""
        pass

    @abc.abstractmethod
    def GetProductProperty(self,
        request: ansys.api.edb.v1.edb_messages_pb2.GetProductPropertyMessage,
        context: grpc.ServicerContext,
    ) -> google.protobuf.wrappers_pb2.StringValue: ...

    @abc.abstractmethod
    def SetProductProperty(self,
        request: ansys.api.edb.v1.edb_messages_pb2.SetProductPropertyMessage,
        context: grpc.ServicerContext,
    ) -> google.protobuf.empty_pb2.Empty: ...

    @abc.abstractmethod
    def GetProductPropertyIds(self,
        request: ansys.api.edb.v1.edb_messages_pb2.GetProductPropertyIdsMessage,
        context: grpc.ServicerContext,
    ) -> ansys.api.edb.v1.edb_messages_pb2.ProductPropertyIdsMessage: ...

    @abc.abstractmethod
    def ImportMaterialFromControlFile(self,
        request: ansys.api.edb.v1.database_pb2.ImportMaterialFromControlFileMessage,
        context: grpc.ServicerContext,
    ) -> google.protobuf.empty_pb2.Empty: ...

    @abc.abstractmethod
    def GetVersion(self,
        request: ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage,
        context: grpc.ServicerContext,
    ) -> ansys.api.edb.v1.database_pb2.GetVersionMessage: ...

    @abc.abstractmethod
    def Scale(self,
        request: ansys.api.edb.v1.edb_messages_pb2.DoublePropertyMessage,
        context: grpc.ServicerContext,
    ) -> google.protobuf.empty_pb2.Empty: ...

    @abc.abstractmethod
    def GetSource(self,
        request: ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage,
        context: grpc.ServicerContext,
    ) -> google.protobuf.wrappers_pb2.StringValue: ...

    @abc.abstractmethod
    def SetSource(self,
        request: ansys.api.edb.v1.edb_messages_pb2.EDBObjNameMessage,
        context: grpc.ServicerContext,
    ) -> google.protobuf.empty_pb2.Empty: ...

    @abc.abstractmethod
    def GetSourceVersion(self,
        request: ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage,
        context: grpc.ServicerContext,
    ) -> google.protobuf.wrappers_pb2.StringValue: ...

    @abc.abstractmethod
    def SetSourceVersion(self,
        request: ansys.api.edb.v1.edb_messages_pb2.EDBObjNameMessage,
        context: grpc.ServicerContext,
    ) -> google.protobuf.empty_pb2.Empty: ...

    @abc.abstractmethod
    def CopyCells(self,
        request: ansys.api.edb.v1.database_pb2.CopyCellsMessage,
        context: grpc.ServicerContext,
    ) -> ansys.api.edb.v1.edb_messages_pb2.EDBObjCollectionMessage:
        """copy cells"""
        pass

    @abc.abstractmethod
    def GetDefinitionObjs(self,
        request: ansys.api.edb.v1.database_pb2.GetDefinitionObjsMessage,
        context: grpc.ServicerContext,
    ) -> ansys.api.edb.v1.edb_messages_pb2.EDBObjCollectionMessage:
        """Get defs"""
        pass

    @abc.abstractmethod
    def StreamDefinitionObjs(self,
        request: ansys.api.edb.v1.database_pb2.GetDefinitionObjsMessage,
        context: grpc.ServicerContext,
    ) -> typing.Iterator[ansys.api.edb.v1.edb_messages_pb2.EDBObjCollectionMessage]: ...

    @abc.abstractmethod
    def TopCircuitCells(self,
        request: ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage,
        context: grpc.ServicerContext,
    ) -> ansys.api.edb.v1.edb_messages_pb2.EDBObjCollectionMessage:
        """get cells"""
        pass

    @abc.abstractmethod
    def GetCircuits(self,
        request: ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage,
        context: grpc.ServicerContext,
    ) -> ansys.api.edb.v1.edb_messages_pb2.EDBObjCollectionMessage: ...

    @abc.abstractmethod
    def StreamCircuits(self,
        request: ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage,
        context: grpc.ServicerContext,
    ) -> typing.Iterator[ansys.api.edb.v1.edb_messages_pb2.EDBObjCollectionMessage]: ...

    @abc.abstractmethod
    def GetFootprints(self,
        request: ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage,
        context: grpc.ServicerContext,
    ) -> ansys.api.edb.v1.edb_messages_pb2.EDBObjCollectionMessage: ...

    @abc.abstractmethod
    def StreamFootprints(self,
        request: ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage,
        context: grpc.ServicerContext,
    ) -> typing.Iterator[ansys.api.edb.v1.edb_messages_pb2.EDBObjCollectionMessage]: ...


def add_DatabaseServiceServicer_to_server(servicer: DatabaseServiceServicer, server: grpc.Server) -> None: ...
