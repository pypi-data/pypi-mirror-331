"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import ansys.api.edb.v1.edb_messages_pb2
import ansys.api.edb.v1.layer_collection_pb2
import ansys.api.edb.v1.layer_pb2
import google.protobuf.empty_pb2
import google.protobuf.wrappers_pb2
import grpc
import typing

class LayerCollectionServiceStub:
    def __init__(self, channel: grpc.Channel) -> None: ...
    Create: grpc.UnaryUnaryMultiCallable[
        ansys.api.edb.v1.layer_collection_pb2.LayerCollectionModeMessage,
        ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage] = ...
    """Creates an empty LayerCollection"""

    Clone: grpc.UnaryUnaryMultiCallable[
        ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage,
        ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage] = ...
    """Clone an existing LayerCollection"""

    GetMode: grpc.UnaryUnaryMultiCallable[
        ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage,
        ansys.api.edb.v1.layer_collection_pb2.LayerCollectionModeMessage] = ...
    """Get the LayerCollection mode"""

    SetMode: grpc.UnaryUnaryMultiCallable[
        ansys.api.edb.v1.layer_collection_pb2.SetLayerCollectionModeMessage,
        google.protobuf.empty_pb2.Empty] = ...
    """Set the LayerCollection mode"""

    AddLayers: grpc.UnaryUnaryMultiCallable[
        ansys.api.edb.v1.layer_collection_pb2.AddLayersMessage,
        google.protobuf.empty_pb2.Empty] = ...
    """Adds the provided layers to the LayerCollection"""

    ImportFromControlFile: grpc.UnaryUnaryMultiCallable[
        ansys.api.edb.v1.layer_collection_pb2.ImportFromControlFileMessage,
        google.protobuf.empty_pb2.Empty] = ...
    """Import a LayerCollection from a control file"""

    AddLayer: grpc.UnaryUnaryMultiCallable[
        ansys.api.edb.v1.layer_collection_pb2.AddLayerMessage,
        ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage] = ...
    """Add a new layer to the LayerCollection"""

    IsValid: grpc.UnaryUnaryMultiCallable[
        ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage,
        google.protobuf.wrappers_pb2.BoolValue] = ...
    """Check whether there is layer overlapping or gap for laminate stackup.
    Check whether there is dielectric layer overlapping or gap for overlapping stackup.
    """

    FindByName: grpc.UnaryUnaryMultiCallable[
        ansys.api.edb.v1.layer_collection_pb2.FindLayerByNameMessage,
        ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage] = ...
    """Finds a layer with the given name in the layer collection"""

    GetTopBottomStackupLayers: grpc.UnaryUnaryMultiCallable[
        ansys.api.edb.v1.layer_collection_pb2.GetTopBottomStackupLayersMessage,
        ansys.api.edb.v1.layer_collection_pb2.TopBottomStackupLayersMessage] = ...
    """Get top bottom stackup layers of specific type"""

    GetLayers: grpc.UnaryUnaryMultiCallable[
        ansys.api.edb.v1.layer_collection_pb2.GetLayersMessage,
        ansys.api.edb.v1.edb_messages_pb2.EDBObjCollectionMessage] = ...
    """Get a list of layers in the LayerCollection filtered by the given layer filter"""

    StreamLayers: grpc.UnaryStreamMultiCallable[
        ansys.api.edb.v1.layer_collection_pb2.GetLayersMessage,
        ansys.api.edb.v1.edb_messages_pb2.EDBObjCollectionMessage] = ...

    GetProductProperty: grpc.UnaryUnaryMultiCallable[
        ansys.api.edb.v1.edb_messages_pb2.GetProductPropertyMessage,
        google.protobuf.wrappers_pb2.StringValue] = ...
    """Get the layer's product property corresponding to the given product and attribute ids"""

    SetProductProperty: grpc.UnaryUnaryMultiCallable[
        ansys.api.edb.v1.edb_messages_pb2.SetProductPropertyMessage,
        google.protobuf.empty_pb2.Empty] = ...
    """Set the layer's product property corresponding to the given product and attribute ids"""

    GetProductPropertyIds: grpc.UnaryUnaryMultiCallable[
        ansys.api.edb.v1.edb_messages_pb2.GetProductPropertyIdsMessage,
        ansys.api.edb.v1.edb_messages_pb2.ProductPropertyIdsMessage] = ...
    """Get a list of property ids associated with the layer for the given product"""

    MergeDielectrics: grpc.UnaryUnaryMultiCallable[
        ansys.api.edb.v1.layer_collection_pb2.MergeDielectricsMessage,
        ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage] = ...
    """Merges the dielectric layers in a range of layers into one large dielectric layer that spans the elevation range of all merged dielectric layers"""

    GetZoneIds: grpc.UnaryUnaryMultiCallable[
        ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage,
        ansys.api.edb.v1.layer_pb2.ZonesMessage] = ...
    """Retrieves a list of all zones in the LayerCollection"""

    GetZoneName: grpc.UnaryUnaryMultiCallable[
        ansys.api.edb.v1.layer_collection_pb2.LayerCollectionZoneMessage,
        google.protobuf.wrappers_pb2.StringValue] = ...
    """Retrieves the name corresponding to the specified zone"""

    SetZoneName: grpc.UnaryUnaryMultiCallable[
        ansys.api.edb.v1.layer_collection_pb2.SetZoneNameMessage,
        google.protobuf.empty_pb2.Empty] = ...
    """Set the name corresponding to the specified zone"""

    InsertZone: grpc.UnaryUnaryMultiCallable[
        ansys.api.edb.v1.layer_collection_pb2.InsertZoneMessage,
        google.protobuf.wrappers_pb2.Int64Value] = ...
    """Inserts a new zone"""

    RemoveZone: grpc.UnaryUnaryMultiCallable[
        ansys.api.edb.v1.layer_collection_pb2.LayerCollectionZoneMessage,
        google.protobuf.empty_pb2.Empty] = ...
    """Removes a zone"""

    SimplifyDielectricsForPhi: grpc.UnaryUnaryMultiCallable[
        ansys.api.edb.v1.layer_collection_pb2.SimplifyDielectricsForPhiMessage,
        ansys.api.edb.v1.edb_messages_pb2.EDBObjCollectionMessage] = ...
    """Simplifies dielectric layers by splitting them at the boundaries of signal layers and merging them"""

    AddZoneToLayer: grpc.UnaryUnaryMultiCallable[
        ansys.api.edb.v1.layer_collection_pb2.AddZoneToLayerMessage,
        google.protobuf.empty_pb2.Empty] = ...
    """Sets the zone to the layer and updates the layer in the collection"""


class LayerCollectionServiceServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def Create(self,
        request: ansys.api.edb.v1.layer_collection_pb2.LayerCollectionModeMessage,
        context: grpc.ServicerContext,
    ) -> ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage:
        """Creates an empty LayerCollection"""
        pass

    @abc.abstractmethod
    def Clone(self,
        request: ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage,
        context: grpc.ServicerContext,
    ) -> ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage:
        """Clone an existing LayerCollection"""
        pass

    @abc.abstractmethod
    def GetMode(self,
        request: ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage,
        context: grpc.ServicerContext,
    ) -> ansys.api.edb.v1.layer_collection_pb2.LayerCollectionModeMessage:
        """Get the LayerCollection mode"""
        pass

    @abc.abstractmethod
    def SetMode(self,
        request: ansys.api.edb.v1.layer_collection_pb2.SetLayerCollectionModeMessage,
        context: grpc.ServicerContext,
    ) -> google.protobuf.empty_pb2.Empty:
        """Set the LayerCollection mode"""
        pass

    @abc.abstractmethod
    def AddLayers(self,
        request: ansys.api.edb.v1.layer_collection_pb2.AddLayersMessage,
        context: grpc.ServicerContext,
    ) -> google.protobuf.empty_pb2.Empty:
        """Adds the provided layers to the LayerCollection"""
        pass

    @abc.abstractmethod
    def ImportFromControlFile(self,
        request: ansys.api.edb.v1.layer_collection_pb2.ImportFromControlFileMessage,
        context: grpc.ServicerContext,
    ) -> google.protobuf.empty_pb2.Empty:
        """Import a LayerCollection from a control file"""
        pass

    @abc.abstractmethod
    def AddLayer(self,
        request: ansys.api.edb.v1.layer_collection_pb2.AddLayerMessage,
        context: grpc.ServicerContext,
    ) -> ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage:
        """Add a new layer to the LayerCollection"""
        pass

    @abc.abstractmethod
    def IsValid(self,
        request: ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage,
        context: grpc.ServicerContext,
    ) -> google.protobuf.wrappers_pb2.BoolValue:
        """Check whether there is layer overlapping or gap for laminate stackup.
        Check whether there is dielectric layer overlapping or gap for overlapping stackup.
        """
        pass

    @abc.abstractmethod
    def FindByName(self,
        request: ansys.api.edb.v1.layer_collection_pb2.FindLayerByNameMessage,
        context: grpc.ServicerContext,
    ) -> ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage:
        """Finds a layer with the given name in the layer collection"""
        pass

    @abc.abstractmethod
    def GetTopBottomStackupLayers(self,
        request: ansys.api.edb.v1.layer_collection_pb2.GetTopBottomStackupLayersMessage,
        context: grpc.ServicerContext,
    ) -> ansys.api.edb.v1.layer_collection_pb2.TopBottomStackupLayersMessage:
        """Get top bottom stackup layers of specific type"""
        pass

    @abc.abstractmethod
    def GetLayers(self,
        request: ansys.api.edb.v1.layer_collection_pb2.GetLayersMessage,
        context: grpc.ServicerContext,
    ) -> ansys.api.edb.v1.edb_messages_pb2.EDBObjCollectionMessage:
        """Get a list of layers in the LayerCollection filtered by the given layer filter"""
        pass

    @abc.abstractmethod
    def StreamLayers(self,
        request: ansys.api.edb.v1.layer_collection_pb2.GetLayersMessage,
        context: grpc.ServicerContext,
    ) -> typing.Iterator[ansys.api.edb.v1.edb_messages_pb2.EDBObjCollectionMessage]: ...

    @abc.abstractmethod
    def GetProductProperty(self,
        request: ansys.api.edb.v1.edb_messages_pb2.GetProductPropertyMessage,
        context: grpc.ServicerContext,
    ) -> google.protobuf.wrappers_pb2.StringValue:
        """Get the layer's product property corresponding to the given product and attribute ids"""
        pass

    @abc.abstractmethod
    def SetProductProperty(self,
        request: ansys.api.edb.v1.edb_messages_pb2.SetProductPropertyMessage,
        context: grpc.ServicerContext,
    ) -> google.protobuf.empty_pb2.Empty:
        """Set the layer's product property corresponding to the given product and attribute ids"""
        pass

    @abc.abstractmethod
    def GetProductPropertyIds(self,
        request: ansys.api.edb.v1.edb_messages_pb2.GetProductPropertyIdsMessage,
        context: grpc.ServicerContext,
    ) -> ansys.api.edb.v1.edb_messages_pb2.ProductPropertyIdsMessage:
        """Get a list of property ids associated with the layer for the given product"""
        pass

    @abc.abstractmethod
    def MergeDielectrics(self,
        request: ansys.api.edb.v1.layer_collection_pb2.MergeDielectricsMessage,
        context: grpc.ServicerContext,
    ) -> ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage:
        """Merges the dielectric layers in a range of layers into one large dielectric layer that spans the elevation range of all merged dielectric layers"""
        pass

    @abc.abstractmethod
    def GetZoneIds(self,
        request: ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage,
        context: grpc.ServicerContext,
    ) -> ansys.api.edb.v1.layer_pb2.ZonesMessage:
        """Retrieves a list of all zones in the LayerCollection"""
        pass

    @abc.abstractmethod
    def GetZoneName(self,
        request: ansys.api.edb.v1.layer_collection_pb2.LayerCollectionZoneMessage,
        context: grpc.ServicerContext,
    ) -> google.protobuf.wrappers_pb2.StringValue:
        """Retrieves the name corresponding to the specified zone"""
        pass

    @abc.abstractmethod
    def SetZoneName(self,
        request: ansys.api.edb.v1.layer_collection_pb2.SetZoneNameMessage,
        context: grpc.ServicerContext,
    ) -> google.protobuf.empty_pb2.Empty:
        """Set the name corresponding to the specified zone"""
        pass

    @abc.abstractmethod
    def InsertZone(self,
        request: ansys.api.edb.v1.layer_collection_pb2.InsertZoneMessage,
        context: grpc.ServicerContext,
    ) -> google.protobuf.wrappers_pb2.Int64Value:
        """Inserts a new zone"""
        pass

    @abc.abstractmethod
    def RemoveZone(self,
        request: ansys.api.edb.v1.layer_collection_pb2.LayerCollectionZoneMessage,
        context: grpc.ServicerContext,
    ) -> google.protobuf.empty_pb2.Empty:
        """Removes a zone"""
        pass

    @abc.abstractmethod
    def SimplifyDielectricsForPhi(self,
        request: ansys.api.edb.v1.layer_collection_pb2.SimplifyDielectricsForPhiMessage,
        context: grpc.ServicerContext,
    ) -> ansys.api.edb.v1.edb_messages_pb2.EDBObjCollectionMessage:
        """Simplifies dielectric layers by splitting them at the boundaries of signal layers and merging them"""
        pass

    @abc.abstractmethod
    def AddZoneToLayer(self,
        request: ansys.api.edb.v1.layer_collection_pb2.AddZoneToLayerMessage,
        context: grpc.ServicerContext,
    ) -> google.protobuf.empty_pb2.Empty:
        """Sets the zone to the layer and updates the layer in the collection"""
        pass


def add_LayerCollectionServiceServicer_to_server(servicer: LayerCollectionServiceServicer, server: grpc.Server) -> None: ...
