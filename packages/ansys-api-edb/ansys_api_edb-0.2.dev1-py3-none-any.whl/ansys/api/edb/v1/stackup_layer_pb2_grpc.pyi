"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import ansys.api.edb.v1.edb_messages_pb2
import ansys.api.edb.v1.stackup_layer_pb2
import google.protobuf.empty_pb2
import google.protobuf.wrappers_pb2
import grpc

class StackupLayerServiceStub:
    """Stackup layer service definition"""
    def __init__(self, channel: grpc.Channel) -> None: ...
    Create: grpc.UnaryUnaryMultiCallable[
        ansys.api.edb.v1.stackup_layer_pb2.StackupLayerCreationMessage,
        ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage] = ...
    """Creates a stackup layer"""

    GetNegative: grpc.UnaryUnaryMultiCallable[
        ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage,
        google.protobuf.wrappers_pb2.BoolValue] = ...
    """Get the negative property of the stackup layer"""

    SetNegative: grpc.UnaryUnaryMultiCallable[
        ansys.api.edb.v1.stackup_layer_pb2.SetNegativeMessage,
        google.protobuf.empty_pb2.Empty] = ...
    """Set the negative property of the stackup layer"""

    GetThickness: grpc.UnaryUnaryMultiCallable[
        ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage,
        ansys.api.edb.v1.edb_messages_pb2.ValueMessage] = ...
    """Get the thickness of the layer"""

    SetThickness: grpc.UnaryUnaryMultiCallable[
        ansys.api.edb.v1.stackup_layer_pb2.StackupLayerValueMessage,
        google.protobuf.empty_pb2.Empty] = ...
    """Set the thickness of the layer"""

    GetLowerElevation: grpc.UnaryUnaryMultiCallable[
        ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage,
        ansys.api.edb.v1.edb_messages_pb2.ValueMessage] = ...
    """Get the lower elevation of the layer"""

    SetLowerElevation: grpc.UnaryUnaryMultiCallable[
        ansys.api.edb.v1.stackup_layer_pb2.StackupLayerValueMessage,
        google.protobuf.empty_pb2.Empty] = ...
    """Set the lower elevation of the layer"""

    GetUpperElevation: grpc.UnaryUnaryMultiCallable[
        ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage,
        ansys.api.edb.v1.edb_messages_pb2.ValueMessage] = ...
    """Get the upper elevation of the layer"""

    GetMaterial: grpc.UnaryUnaryMultiCallable[
        ansys.api.edb.v1.stackup_layer_pb2.GetLayerMaterialMessage,
        google.protobuf.wrappers_pb2.StringValue] = ...
    """Get the material of the layer"""

    SetMaterial: grpc.UnaryUnaryMultiCallable[
        ansys.api.edb.v1.stackup_layer_pb2.SetLayerMaterialMessage,
        google.protobuf.empty_pb2.Empty] = ...
    """Set the material of the layer"""

    GetFillMaterial: grpc.UnaryUnaryMultiCallable[
        ansys.api.edb.v1.stackup_layer_pb2.GetLayerMaterialMessage,
        google.protobuf.wrappers_pb2.StringValue] = ...
    """Get the fill material of the layer"""

    SetFillMaterial: grpc.UnaryUnaryMultiCallable[
        ansys.api.edb.v1.stackup_layer_pb2.SetLayerMaterialMessage,
        google.protobuf.empty_pb2.Empty] = ...
    """Set the fill material of the layer"""

    SetRoughnessEnabled: grpc.UnaryUnaryMultiCallable[
        ansys.api.edb.v1.stackup_layer_pb2.SetLayerPropEnabledMessage,
        google.protobuf.empty_pb2.Empty] = ...
    """Enable/Disable surface roughness for the layer"""

    IsRoughnessEnabled: grpc.UnaryUnaryMultiCallable[
        ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage,
        google.protobuf.wrappers_pb2.BoolValue] = ...
    """Check if surface roughness is enabled for the layer"""

    GetRoughnessModel: grpc.UnaryUnaryMultiCallable[
        ansys.api.edb.v1.stackup_layer_pb2.LayerRoughnessRegionMessage,
        ansys.api.edb.v1.stackup_layer_pb2.RoughnessModelMessage] = ...
    """Get the roughness model of the layer"""

    SetRoughnessModel: grpc.UnaryUnaryMultiCallable[
        ansys.api.edb.v1.stackup_layer_pb2.SetRoughnessModelMessage,
        google.protobuf.empty_pb2.Empty] = ...
    """Set the roughness model of the layer"""

    IsEtchFactorEnabled: grpc.UnaryUnaryMultiCallable[
        ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage,
        google.protobuf.wrappers_pb2.BoolValue] = ...
    """Check if etch factor is enabled for the layer"""

    SetEtchFactorEnabled: grpc.UnaryUnaryMultiCallable[
        ansys.api.edb.v1.stackup_layer_pb2.SetLayerPropEnabledMessage,
        google.protobuf.empty_pb2.Empty] = ...
    """Enable/Disable etch factor for the layer"""

    SetEtchFactor: grpc.UnaryUnaryMultiCallable[
        ansys.api.edb.v1.stackup_layer_pb2.StackupLayerValueMessage,
        google.protobuf.empty_pb2.Empty] = ...
    """Set the etch factor of the layer"""

    GetEtchFactor: grpc.UnaryUnaryMultiCallable[
        ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage,
        ansys.api.edb.v1.edb_messages_pb2.ValueMessage] = ...
    """Get the etch factor of the layer"""

    GetUseSolverProperties: grpc.UnaryUnaryMultiCallable[
        ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage,
        google.protobuf.wrappers_pb2.BoolValue] = ...
    """Check if solver properties are enabled for the layer"""

    SetUseSolverProperties: grpc.UnaryUnaryMultiCallable[
        ansys.api.edb.v1.stackup_layer_pb2.SetLayerPropEnabledMessage,
        google.protobuf.empty_pb2.Empty] = ...
    """Enable/Disable solver properties for the layer"""

    GetHFSSSolverProperties: grpc.UnaryUnaryMultiCallable[
        ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage,
        ansys.api.edb.v1.stackup_layer_pb2.HFSSSolverPropertiesMessage] = ...
    """Get the HFSS solver-specific properties of the layer"""

    SetHFSSSolverProperties: grpc.UnaryUnaryMultiCallable[
        ansys.api.edb.v1.stackup_layer_pb2.SetHFSSSolverPropertiesMessage,
        google.protobuf.empty_pb2.Empty] = ...
    """Set the HFSS solver-specific properties of the layer"""

    GetReferencingViaLayerIds: grpc.UnaryUnaryMultiCallable[
        ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage,
        ansys.api.edb.v1.stackup_layer_pb2.ViaLayerIdsMessage] = ...
    """Retrieves the layer ids of all via layers referencing the layer."""


class StackupLayerServiceServicer(metaclass=abc.ABCMeta):
    """Stackup layer service definition"""
    @abc.abstractmethod
    def Create(self,
        request: ansys.api.edb.v1.stackup_layer_pb2.StackupLayerCreationMessage,
        context: grpc.ServicerContext,
    ) -> ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage:
        """Creates a stackup layer"""
        pass

    @abc.abstractmethod
    def GetNegative(self,
        request: ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage,
        context: grpc.ServicerContext,
    ) -> google.protobuf.wrappers_pb2.BoolValue:
        """Get the negative property of the stackup layer"""
        pass

    @abc.abstractmethod
    def SetNegative(self,
        request: ansys.api.edb.v1.stackup_layer_pb2.SetNegativeMessage,
        context: grpc.ServicerContext,
    ) -> google.protobuf.empty_pb2.Empty:
        """Set the negative property of the stackup layer"""
        pass

    @abc.abstractmethod
    def GetThickness(self,
        request: ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage,
        context: grpc.ServicerContext,
    ) -> ansys.api.edb.v1.edb_messages_pb2.ValueMessage:
        """Get the thickness of the layer"""
        pass

    @abc.abstractmethod
    def SetThickness(self,
        request: ansys.api.edb.v1.stackup_layer_pb2.StackupLayerValueMessage,
        context: grpc.ServicerContext,
    ) -> google.protobuf.empty_pb2.Empty:
        """Set the thickness of the layer"""
        pass

    @abc.abstractmethod
    def GetLowerElevation(self,
        request: ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage,
        context: grpc.ServicerContext,
    ) -> ansys.api.edb.v1.edb_messages_pb2.ValueMessage:
        """Get the lower elevation of the layer"""
        pass

    @abc.abstractmethod
    def SetLowerElevation(self,
        request: ansys.api.edb.v1.stackup_layer_pb2.StackupLayerValueMessage,
        context: grpc.ServicerContext,
    ) -> google.protobuf.empty_pb2.Empty:
        """Set the lower elevation of the layer"""
        pass

    @abc.abstractmethod
    def GetUpperElevation(self,
        request: ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage,
        context: grpc.ServicerContext,
    ) -> ansys.api.edb.v1.edb_messages_pb2.ValueMessage:
        """Get the upper elevation of the layer"""
        pass

    @abc.abstractmethod
    def GetMaterial(self,
        request: ansys.api.edb.v1.stackup_layer_pb2.GetLayerMaterialMessage,
        context: grpc.ServicerContext,
    ) -> google.protobuf.wrappers_pb2.StringValue:
        """Get the material of the layer"""
        pass

    @abc.abstractmethod
    def SetMaterial(self,
        request: ansys.api.edb.v1.stackup_layer_pb2.SetLayerMaterialMessage,
        context: grpc.ServicerContext,
    ) -> google.protobuf.empty_pb2.Empty:
        """Set the material of the layer"""
        pass

    @abc.abstractmethod
    def GetFillMaterial(self,
        request: ansys.api.edb.v1.stackup_layer_pb2.GetLayerMaterialMessage,
        context: grpc.ServicerContext,
    ) -> google.protobuf.wrappers_pb2.StringValue:
        """Get the fill material of the layer"""
        pass

    @abc.abstractmethod
    def SetFillMaterial(self,
        request: ansys.api.edb.v1.stackup_layer_pb2.SetLayerMaterialMessage,
        context: grpc.ServicerContext,
    ) -> google.protobuf.empty_pb2.Empty:
        """Set the fill material of the layer"""
        pass

    @abc.abstractmethod
    def SetRoughnessEnabled(self,
        request: ansys.api.edb.v1.stackup_layer_pb2.SetLayerPropEnabledMessage,
        context: grpc.ServicerContext,
    ) -> google.protobuf.empty_pb2.Empty:
        """Enable/Disable surface roughness for the layer"""
        pass

    @abc.abstractmethod
    def IsRoughnessEnabled(self,
        request: ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage,
        context: grpc.ServicerContext,
    ) -> google.protobuf.wrappers_pb2.BoolValue:
        """Check if surface roughness is enabled for the layer"""
        pass

    @abc.abstractmethod
    def GetRoughnessModel(self,
        request: ansys.api.edb.v1.stackup_layer_pb2.LayerRoughnessRegionMessage,
        context: grpc.ServicerContext,
    ) -> ansys.api.edb.v1.stackup_layer_pb2.RoughnessModelMessage:
        """Get the roughness model of the layer"""
        pass

    @abc.abstractmethod
    def SetRoughnessModel(self,
        request: ansys.api.edb.v1.stackup_layer_pb2.SetRoughnessModelMessage,
        context: grpc.ServicerContext,
    ) -> google.protobuf.empty_pb2.Empty:
        """Set the roughness model of the layer"""
        pass

    @abc.abstractmethod
    def IsEtchFactorEnabled(self,
        request: ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage,
        context: grpc.ServicerContext,
    ) -> google.protobuf.wrappers_pb2.BoolValue:
        """Check if etch factor is enabled for the layer"""
        pass

    @abc.abstractmethod
    def SetEtchFactorEnabled(self,
        request: ansys.api.edb.v1.stackup_layer_pb2.SetLayerPropEnabledMessage,
        context: grpc.ServicerContext,
    ) -> google.protobuf.empty_pb2.Empty:
        """Enable/Disable etch factor for the layer"""
        pass

    @abc.abstractmethod
    def SetEtchFactor(self,
        request: ansys.api.edb.v1.stackup_layer_pb2.StackupLayerValueMessage,
        context: grpc.ServicerContext,
    ) -> google.protobuf.empty_pb2.Empty:
        """Set the etch factor of the layer"""
        pass

    @abc.abstractmethod
    def GetEtchFactor(self,
        request: ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage,
        context: grpc.ServicerContext,
    ) -> ansys.api.edb.v1.edb_messages_pb2.ValueMessage:
        """Get the etch factor of the layer"""
        pass

    @abc.abstractmethod
    def GetUseSolverProperties(self,
        request: ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage,
        context: grpc.ServicerContext,
    ) -> google.protobuf.wrappers_pb2.BoolValue:
        """Check if solver properties are enabled for the layer"""
        pass

    @abc.abstractmethod
    def SetUseSolverProperties(self,
        request: ansys.api.edb.v1.stackup_layer_pb2.SetLayerPropEnabledMessage,
        context: grpc.ServicerContext,
    ) -> google.protobuf.empty_pb2.Empty:
        """Enable/Disable solver properties for the layer"""
        pass

    @abc.abstractmethod
    def GetHFSSSolverProperties(self,
        request: ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage,
        context: grpc.ServicerContext,
    ) -> ansys.api.edb.v1.stackup_layer_pb2.HFSSSolverPropertiesMessage:
        """Get the HFSS solver-specific properties of the layer"""
        pass

    @abc.abstractmethod
    def SetHFSSSolverProperties(self,
        request: ansys.api.edb.v1.stackup_layer_pb2.SetHFSSSolverPropertiesMessage,
        context: grpc.ServicerContext,
    ) -> google.protobuf.empty_pb2.Empty:
        """Set the HFSS solver-specific properties of the layer"""
        pass

    @abc.abstractmethod
    def GetReferencingViaLayerIds(self,
        request: ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage,
        context: grpc.ServicerContext,
    ) -> ansys.api.edb.v1.stackup_layer_pb2.ViaLayerIdsMessage:
        """Retrieves the layer ids of all via layers referencing the layer."""
        pass


def add_StackupLayerServiceServicer_to_server(servicer: StackupLayerServiceServicer, server: grpc.Server) -> None: ...
