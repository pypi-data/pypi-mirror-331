"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import ansys.api.edb.v1.edb_messages_pb2
import ansys.api.edb.v1.primitive_pb2
import google.protobuf.empty_pb2
import google.protobuf.wrappers_pb2
import grpc
import typing

class PrimitiveServiceStub:
    """Primitive service definition"""
    def __init__(self, channel: grpc.Channel) -> None: ...
    GetPrimitiveType: grpc.UnaryUnaryMultiCallable[
        ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage,
        ansys.api.edb.v1.primitive_pb2.PrimitiveTypeMessage] = ...
    """Gets the primitive type of this primitive"""

    AddVoid: grpc.UnaryUnaryMultiCallable[
        ansys.api.edb.v1.primitive_pb2.PrimitiveVoidCreationMessage,
        google.protobuf.empty_pb2.Empty] = ...
    """Adds a void"""

    SetHfssProp: grpc.UnaryUnaryMultiCallable[
        ansys.api.edb.v1.primitive_pb2.PrimitiveHfssPropMessage,
        google.protobuf.empty_pb2.Empty] = ...
    """Sets HFSS Properties"""

    GetLayer: grpc.UnaryUnaryMultiCallable[
        ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage,
        ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage] = ...
    """Get Layer"""

    SetLayer: grpc.UnaryUnaryMultiCallable[
        ansys.api.edb.v1.primitive_pb2.SetLayerMessage,
        google.protobuf.empty_pb2.Empty] = ...
    """Set Layer"""

    GetIsNegative: grpc.UnaryUnaryMultiCallable[
        ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage,
        google.protobuf.wrappers_pb2.BoolValue] = ...
    """Get IsNegative"""

    SetIsNegative: grpc.UnaryUnaryMultiCallable[
        ansys.api.edb.v1.primitive_pb2.SetIsNegativeMessage,
        google.protobuf.empty_pb2.Empty] = ...
    """Set IsNegative"""

    IsVoid: grpc.UnaryUnaryMultiCallable[
        ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage,
        google.protobuf.wrappers_pb2.BoolValue] = ...
    """Get isVoid"""

    HasVoids: grpc.UnaryUnaryMultiCallable[
        ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage,
        google.protobuf.wrappers_pb2.BoolValue] = ...
    """Get HasVoids"""

    Voids: grpc.UnaryUnaryMultiCallable[
        ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage,
        ansys.api.edb.v1.edb_messages_pb2.EDBObjCollectionMessage] = ...
    """Gets an iterator of the voids in the Primitive"""

    StreamVoids: grpc.UnaryStreamMultiCallable[
        ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage,
        ansys.api.edb.v1.edb_messages_pb2.EDBObjCollectionMessage] = ...

    GetOwner: grpc.UnaryUnaryMultiCallable[
        ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage,
        ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage] = ...
    """Get Owner"""

    IsParameterized: grpc.UnaryUnaryMultiCallable[
        ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage,
        google.protobuf.wrappers_pb2.BoolValue] = ...
    """Get isParametrized"""

    GetHfssProp: grpc.UnaryUnaryMultiCallable[
        ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage,
        ansys.api.edb.v1.primitive_pb2.GetPrimitiveHfssPropMessage] = ...
    """Get HFSS Properties"""

    RemoveHfssProp: grpc.UnaryUnaryMultiCallable[
        ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage,
        google.protobuf.empty_pb2.Empty] = ...
    """Remove HFSS Properties"""

    IsZonePrimitive: grpc.UnaryUnaryMultiCallable[
        ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage,
        google.protobuf.wrappers_pb2.BoolValue] = ...
    """Get Is Zone Primitive"""

    MakeZonePrimitive: grpc.UnaryUnaryMultiCallable[
        ansys.api.edb.v1.edb_messages_pb2.IntPropertyMessage,
        google.protobuf.empty_pb2.Empty] = ...
    """Make primitive a zone primitive in the specified zone"""


class PrimitiveServiceServicer(metaclass=abc.ABCMeta):
    """Primitive service definition"""
    @abc.abstractmethod
    def GetPrimitiveType(self,
        request: ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage,
        context: grpc.ServicerContext,
    ) -> ansys.api.edb.v1.primitive_pb2.PrimitiveTypeMessage:
        """Gets the primitive type of this primitive"""
        pass

    @abc.abstractmethod
    def AddVoid(self,
        request: ansys.api.edb.v1.primitive_pb2.PrimitiveVoidCreationMessage,
        context: grpc.ServicerContext,
    ) -> google.protobuf.empty_pb2.Empty:
        """Adds a void"""
        pass

    @abc.abstractmethod
    def SetHfssProp(self,
        request: ansys.api.edb.v1.primitive_pb2.PrimitiveHfssPropMessage,
        context: grpc.ServicerContext,
    ) -> google.protobuf.empty_pb2.Empty:
        """Sets HFSS Properties"""
        pass

    @abc.abstractmethod
    def GetLayer(self,
        request: ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage,
        context: grpc.ServicerContext,
    ) -> ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage:
        """Get Layer"""
        pass

    @abc.abstractmethod
    def SetLayer(self,
        request: ansys.api.edb.v1.primitive_pb2.SetLayerMessage,
        context: grpc.ServicerContext,
    ) -> google.protobuf.empty_pb2.Empty:
        """Set Layer"""
        pass

    @abc.abstractmethod
    def GetIsNegative(self,
        request: ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage,
        context: grpc.ServicerContext,
    ) -> google.protobuf.wrappers_pb2.BoolValue:
        """Get IsNegative"""
        pass

    @abc.abstractmethod
    def SetIsNegative(self,
        request: ansys.api.edb.v1.primitive_pb2.SetIsNegativeMessage,
        context: grpc.ServicerContext,
    ) -> google.protobuf.empty_pb2.Empty:
        """Set IsNegative"""
        pass

    @abc.abstractmethod
    def IsVoid(self,
        request: ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage,
        context: grpc.ServicerContext,
    ) -> google.protobuf.wrappers_pb2.BoolValue:
        """Get isVoid"""
        pass

    @abc.abstractmethod
    def HasVoids(self,
        request: ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage,
        context: grpc.ServicerContext,
    ) -> google.protobuf.wrappers_pb2.BoolValue:
        """Get HasVoids"""
        pass

    @abc.abstractmethod
    def Voids(self,
        request: ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage,
        context: grpc.ServicerContext,
    ) -> ansys.api.edb.v1.edb_messages_pb2.EDBObjCollectionMessage:
        """Gets an iterator of the voids in the Primitive"""
        pass

    @abc.abstractmethod
    def StreamVoids(self,
        request: ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage,
        context: grpc.ServicerContext,
    ) -> typing.Iterator[ansys.api.edb.v1.edb_messages_pb2.EDBObjCollectionMessage]: ...

    @abc.abstractmethod
    def GetOwner(self,
        request: ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage,
        context: grpc.ServicerContext,
    ) -> ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage:
        """Get Owner"""
        pass

    @abc.abstractmethod
    def IsParameterized(self,
        request: ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage,
        context: grpc.ServicerContext,
    ) -> google.protobuf.wrappers_pb2.BoolValue:
        """Get isParametrized"""
        pass

    @abc.abstractmethod
    def GetHfssProp(self,
        request: ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage,
        context: grpc.ServicerContext,
    ) -> ansys.api.edb.v1.primitive_pb2.GetPrimitiveHfssPropMessage:
        """Get HFSS Properties"""
        pass

    @abc.abstractmethod
    def RemoveHfssProp(self,
        request: ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage,
        context: grpc.ServicerContext,
    ) -> google.protobuf.empty_pb2.Empty:
        """Remove HFSS Properties"""
        pass

    @abc.abstractmethod
    def IsZonePrimitive(self,
        request: ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage,
        context: grpc.ServicerContext,
    ) -> google.protobuf.wrappers_pb2.BoolValue:
        """Get Is Zone Primitive"""
        pass

    @abc.abstractmethod
    def MakeZonePrimitive(self,
        request: ansys.api.edb.v1.edb_messages_pb2.IntPropertyMessage,
        context: grpc.ServicerContext,
    ) -> google.protobuf.empty_pb2.Empty:
        """Make primitive a zone primitive in the specified zone"""
        pass


def add_PrimitiveServiceServicer_to_server(servicer: PrimitiveServiceServicer, server: grpc.Server) -> None: ...
