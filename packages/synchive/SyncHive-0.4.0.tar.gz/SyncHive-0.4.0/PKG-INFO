Metadata-Version: 2.1
Name: SyncHive
Version: 0.4.0
Summary: Automated file backup and synchronization over SSH within a shared network for seamless data management.
Home-page: UNKNOWN
Author: Harsh Mistry
Author-email: hmistry864@gmail.com
License: UNKNOWN
Platform: UNKNOWN
Description-Content-Type: text/markdown

# ðŸš€ Setting Up OpenSSH on Windows and Linux

Follow this step-by-step guide to install and configure OpenSSH on your system, whether you're using Windows or Linux.

---

# ðŸ”¹ Announcement

ðŸ“¢ **Synchronization among the network shared devices will be released soon.**

---

# ðŸ”¹ Installing OpenSSH

## **Windows Installation**

### **Step 1: Install OpenSSH**
1. Open **Settings** and search for **"Add Optional Features"**.
2. Click **Add Features**.
3. Install **OpenSSH Server** and **OpenSSH Client**.

### **Step 2: Start OpenSSH Services**
Run the following commands in **PowerShell (Admin Mode)**:
```powershell
Start-Service sshd
Set-Service -Name sshd -StartupType 'Automatic'
```

### **Step 3: Customize the SSH Port (Optional)**
1. Open the SSH configuration file:
   ```
   C:\ProgramData\ssh\sshd_config
   ```
2. Locate the line `#Port 22`.
3. Remove `#` and change `22` to your preferred port:
   ```
   Port <your_custom_port>
   ```

### **Step 4: Restart OpenSSH Service**
Run the following in **PowerShell (Admin Mode)**:
```powershell
net stop sshd
net start sshd
```

### **Step 5: Restart OpenSSH via Services (Alternative Method)**
1. Press `Win + R`, type `services.msc`, and press **Enter**.
2. Find **OpenSSH Server**, right-click it, and select **Restart**.

ðŸŽ‰ **Success!** OpenSSH is now set up and running on Windows. You can start connecting via SSH!

---

## **Linux Installation**

### **Step 1: Check if OpenSSH is Installed**
Run the following command:
```bash
sudo systemctl status ssh
```
If OpenSSH is not installed, install it with:
```bash
sudo apt install openssh-server
```

### **Step 2: Allow SSH in the Firewall (Default Port: 22)**
```bash
sudo ufw allow 22/tcp
```

### **Step 3: Verify Open Ports**
Check if SSH is listening on the correct port:
```bash
sudo netstat -tulnp
```

ðŸŽ‰ **You're All Set!** Your Linux system is now ready to accept SSH connections.

---

# ðŸ”¹ Using SyncHive for Automated Backups

## **Step 1: Install SyncHive**
```bash
pip install SyncHive
```

## **Step 2: Configure SyncHive**
Edit the `config.json` file to specify your backup settings.

## **Step 3: Import and Use SyncHive**
```python
from synchive import create_backup

create_backup()  # Call the function to start the backup
```

ðŸš€ **SyncHive is now set up and ready to automate your backups!**

