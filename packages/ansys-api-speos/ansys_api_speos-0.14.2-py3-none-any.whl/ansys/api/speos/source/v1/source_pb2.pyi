"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import ansys.api.speos.common.v1.data_pb2
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class SourceTemplate(google.protobuf.message.Message):
    """Source template with its basic characteristics"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class MetadataEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text = ...
        value: typing.Text = ...
        def __init__(self,
            *,
            key : typing.Text = ...,
            value : typing.Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    class FromIntensityFile(google.protobuf.message.Message):
        """Take flux from intensity file provided"""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        def __init__(self,
            ) -> None: ...

    class Luminous(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        LUMINOUS_VALUE_FIELD_NUMBER: builtins.int
        luminous_value: builtins.float = ...
        """Luminous flux in lumens"""

        def __init__(self,
            *,
            luminous_value : builtins.float = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["luminous_value",b"luminous_value"]) -> None: ...

    class Radiant(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        RADIANT_VALUE_FIELD_NUMBER: builtins.int
        radiant_value: builtins.float = ...
        """Radiant flux in watts"""

        def __init__(self,
            *,
            radiant_value : builtins.float = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["radiant_value",b"radiant_value"]) -> None: ...

    class LuminousIntensity(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        LUMINOUS_INTENSITY_VALUE_FIELD_NUMBER: builtins.int
        luminous_intensity_value: builtins.float = ...
        """Luminous intensity in candelas"""

        def __init__(self,
            *,
            luminous_intensity_value : builtins.float = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["luminous_intensity_value",b"luminous_intensity_value"]) -> None: ...

    class FromRayFile(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        def __init__(self,
            ) -> None: ...

    class Surface(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        class ExitanceVariable(google.protobuf.message.Message):
            """Exitance messages"""
            DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
            EXITANCE_XMP_FILE_URI_FIELD_NUMBER: builtins.int
            exitance_xmp_file_uri: typing.Text = ...
            """XMP file describing exitance, if spectral, spectrum is not needed in source definition"""

            def __init__(self,
                *,
                exitance_xmp_file_uri : typing.Text = ...,
                ) -> None: ...
            def ClearField(self, field_name: typing_extensions.Literal["exitance_xmp_file_uri",b"exitance_xmp_file_uri"]) -> None: ...

        class ExitanceConstant(google.protobuf.message.Message):
            DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
            def __init__(self,
                ) -> None: ...

        class SpectrumFromXMPFile(google.protobuf.message.Message):
            """Take spectrum from xmp file provided"""
            DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
            def __init__(self,
                ) -> None: ...

        FLUX_FROM_INTENSITY_FILE_FIELD_NUMBER: builtins.int
        LUMINOUS_FLUX_FIELD_NUMBER: builtins.int
        RADIANT_FLUX_FIELD_NUMBER: builtins.int
        LUMINOUS_INTENSITY_FLUX_FIELD_NUMBER: builtins.int
        INTENSITY_GUID_FIELD_NUMBER: builtins.int
        EXITANCE_CONSTANT_FIELD_NUMBER: builtins.int
        EXITANCE_VARIABLE_FIELD_NUMBER: builtins.int
        SPECTRUM_FROM_XMP_FILE_FIELD_NUMBER: builtins.int
        SPECTRUM_GUID_FIELD_NUMBER: builtins.int
        @property
        def flux_from_intensity_file(self) -> global___SourceTemplate.FromIntensityFile:
            """Take flux from intensity file provided"""
            pass
        @property
        def luminous_flux(self) -> global___SourceTemplate.Luminous:
            """Luminous flux in lumens"""
            pass
        @property
        def radiant_flux(self) -> global___SourceTemplate.Radiant:
            """Radiant flux in watts"""
            pass
        @property
        def luminous_intensity_flux(self) -> global___SourceTemplate.LuminousIntensity:
            """Luminous intensity in candelas"""
            pass
        intensity_guid: typing.Text = ...
        """Intensity guid in intensity manager"""

        @property
        def exitance_constant(self) -> global___SourceTemplate.Surface.ExitanceConstant:
            """Constant"""
            pass
        @property
        def exitance_variable(self) -> global___SourceTemplate.Surface.ExitanceVariable:
            """Taken from XMP map"""
            pass
        @property
        def spectrum_from_xmp_file(self) -> global___SourceTemplate.Surface.SpectrumFromXMPFile:
            """Take spectrum from xmp file provided"""
            pass
        spectrum_guid: typing.Text = ...
        """Spectrum guid in spectrum manager"""

        def __init__(self,
            *,
            flux_from_intensity_file : typing.Optional[global___SourceTemplate.FromIntensityFile] = ...,
            luminous_flux : typing.Optional[global___SourceTemplate.Luminous] = ...,
            radiant_flux : typing.Optional[global___SourceTemplate.Radiant] = ...,
            luminous_intensity_flux : typing.Optional[global___SourceTemplate.LuminousIntensity] = ...,
            intensity_guid : typing.Text = ...,
            exitance_constant : typing.Optional[global___SourceTemplate.Surface.ExitanceConstant] = ...,
            exitance_variable : typing.Optional[global___SourceTemplate.Surface.ExitanceVariable] = ...,
            spectrum_from_xmp_file : typing.Optional[global___SourceTemplate.Surface.SpectrumFromXMPFile] = ...,
            spectrum_guid : typing.Text = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["exitance",b"exitance","exitance_constant",b"exitance_constant","exitance_variable",b"exitance_variable","flux",b"flux","flux_from_intensity_file",b"flux_from_intensity_file","luminous_flux",b"luminous_flux","luminous_intensity_flux",b"luminous_intensity_flux","radiant_flux",b"radiant_flux","spectrum",b"spectrum","spectrum_from_xmp_file",b"spectrum_from_xmp_file","spectrum_guid",b"spectrum_guid"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["exitance",b"exitance","exitance_constant",b"exitance_constant","exitance_variable",b"exitance_variable","flux",b"flux","flux_from_intensity_file",b"flux_from_intensity_file","intensity_guid",b"intensity_guid","luminous_flux",b"luminous_flux","luminous_intensity_flux",b"luminous_intensity_flux","radiant_flux",b"radiant_flux","spectrum",b"spectrum","spectrum_from_xmp_file",b"spectrum_from_xmp_file","spectrum_guid",b"spectrum_guid"]) -> None: ...
        @typing.overload
        def WhichOneof(self, oneof_group: typing_extensions.Literal["exitance",b"exitance"]) -> typing.Optional[typing_extensions.Literal["exitance_constant","exitance_variable"]]: ...
        @typing.overload
        def WhichOneof(self, oneof_group: typing_extensions.Literal["flux",b"flux"]) -> typing.Optional[typing_extensions.Literal["flux_from_intensity_file","luminous_flux","radiant_flux","luminous_intensity_flux"]]: ...
        @typing.overload
        def WhichOneof(self, oneof_group: typing_extensions.Literal["spectrum",b"spectrum"]) -> typing.Optional[typing_extensions.Literal["spectrum_from_xmp_file","spectrum_guid"]]: ...

    class Luminaire(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        FLUX_FROM_INTENSITY_FILE_FIELD_NUMBER: builtins.int
        LUMINOUS_FLUX_FIELD_NUMBER: builtins.int
        RADIANT_FLUX_FIELD_NUMBER: builtins.int
        INTENSITY_FILE_URI_FIELD_NUMBER: builtins.int
        SPECTRUM_GUID_FIELD_NUMBER: builtins.int
        @property
        def flux_from_intensity_file(self) -> global___SourceTemplate.FromIntensityFile:
            """Take flux from intensity file provided"""
            pass
        @property
        def luminous_flux(self) -> global___SourceTemplate.Luminous:
            """Luminous flux in lumens, value >=0"""
            pass
        @property
        def radiant_flux(self) -> global___SourceTemplate.Radiant:
            """Radiant flux in watts, value >=0"""
            pass
        intensity_file_uri: typing.Text = ...
        """IES or EULUMDAT format file uri"""

        spectrum_guid: typing.Text = ...
        """Spectrum guid in spectrum manager"""

        def __init__(self,
            *,
            flux_from_intensity_file : typing.Optional[global___SourceTemplate.FromIntensityFile] = ...,
            luminous_flux : typing.Optional[global___SourceTemplate.Luminous] = ...,
            radiant_flux : typing.Optional[global___SourceTemplate.Radiant] = ...,
            intensity_file_uri : typing.Text = ...,
            spectrum_guid : typing.Text = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["flux",b"flux","flux_from_intensity_file",b"flux_from_intensity_file","luminous_flux",b"luminous_flux","radiant_flux",b"radiant_flux"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["flux",b"flux","flux_from_intensity_file",b"flux_from_intensity_file","intensity_file_uri",b"intensity_file_uri","luminous_flux",b"luminous_flux","radiant_flux",b"radiant_flux","spectrum_guid",b"spectrum_guid"]) -> None: ...
        def WhichOneof(self, oneof_group: typing_extensions.Literal["flux",b"flux"]) -> typing.Optional[typing_extensions.Literal["flux_from_intensity_file","luminous_flux","radiant_flux"]]: ...

    class RayFile(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        class SpectrumFromRayFile(google.protobuf.message.Message):
            """Spectrum messages"""
            DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
            def __init__(self,
                ) -> None: ...

        RAY_FILE_URI_FIELD_NUMBER: builtins.int
        FLUX_FROM_RAY_FILE_FIELD_NUMBER: builtins.int
        LUMINOUS_FLUX_FIELD_NUMBER: builtins.int
        RADIANT_FLUX_FIELD_NUMBER: builtins.int
        SPECTRUM_FROM_RAY_FILE_FIELD_NUMBER: builtins.int
        SPECTRUM_GUID_FIELD_NUMBER: builtins.int
        ray_file_uri: typing.Text = ...
        """Rayfile format file uri (.ray or .tm25ray files expected)"""

        @property
        def flux_from_ray_file(self) -> global___SourceTemplate.FromRayFile:
            """Take flux from ray file provided"""
            pass
        @property
        def luminous_flux(self) -> global___SourceTemplate.Luminous:
            """Luminous flux in lumens, value >=0"""
            pass
        @property
        def radiant_flux(self) -> global___SourceTemplate.Radiant:
            """Radiant flux in watts, value >=0"""
            pass
        @property
        def spectrum_from_ray_file(self) -> global___SourceTemplate.RayFile.SpectrumFromRayFile:
            """Take spectrum from ray file provided"""
            pass
        spectrum_guid: typing.Text = ...
        """Spectrum guid in spectrum manager"""

        def __init__(self,
            *,
            ray_file_uri : typing.Text = ...,
            flux_from_ray_file : typing.Optional[global___SourceTemplate.FromRayFile] = ...,
            luminous_flux : typing.Optional[global___SourceTemplate.Luminous] = ...,
            radiant_flux : typing.Optional[global___SourceTemplate.Radiant] = ...,
            spectrum_from_ray_file : typing.Optional[global___SourceTemplate.RayFile.SpectrumFromRayFile] = ...,
            spectrum_guid : typing.Text = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["flux",b"flux","flux_from_ray_file",b"flux_from_ray_file","luminous_flux",b"luminous_flux","radiant_flux",b"radiant_flux","spectrum",b"spectrum","spectrum_from_ray_file",b"spectrum_from_ray_file","spectrum_guid",b"spectrum_guid"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["flux",b"flux","flux_from_ray_file",b"flux_from_ray_file","luminous_flux",b"luminous_flux","radiant_flux",b"radiant_flux","ray_file_uri",b"ray_file_uri","spectrum",b"spectrum","spectrum_from_ray_file",b"spectrum_from_ray_file","spectrum_guid",b"spectrum_guid"]) -> None: ...
        @typing.overload
        def WhichOneof(self, oneof_group: typing_extensions.Literal["flux",b"flux"]) -> typing.Optional[typing_extensions.Literal["flux_from_ray_file","luminous_flux","radiant_flux"]]: ...
        @typing.overload
        def WhichOneof(self, oneof_group: typing_extensions.Literal["spectrum",b"spectrum"]) -> typing.Optional[typing_extensions.Literal["spectrum_from_ray_file","spectrum_guid"]]: ...

    NAME_FIELD_NUMBER: builtins.int
    DESCRIPTION_FIELD_NUMBER: builtins.int
    METADATA_FIELD_NUMBER: builtins.int
    LUMINAIRE_FIELD_NUMBER: builtins.int
    SURFACE_FIELD_NUMBER: builtins.int
    RAYFILE_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """SourceTemplate name"""

    description: typing.Text = ...
    """SourceTemplate description"""

    @property
    def metadata(self) -> google.protobuf.internal.containers.ScalarMap[typing.Text, typing.Text]:
        """User defined metadata"""
        pass
    @property
    def luminaire(self) -> global___SourceTemplate.Luminaire: ...
    @property
    def surface(self) -> global___SourceTemplate.Surface: ...
    @property
    def rayfile(self) -> global___SourceTemplate.RayFile: ...
    def __init__(self,
        *,
        name : typing.Text = ...,
        description : typing.Text = ...,
        metadata : typing.Optional[typing.Mapping[typing.Text, typing.Text]] = ...,
        luminaire : typing.Optional[global___SourceTemplate.Luminaire] = ...,
        surface : typing.Optional[global___SourceTemplate.Surface] = ...,
        rayfile : typing.Optional[global___SourceTemplate.RayFile] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["luminaire",b"luminaire","rayfile",b"rayfile","source",b"source","surface",b"surface"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["description",b"description","luminaire",b"luminaire","metadata",b"metadata","name",b"name","rayfile",b"rayfile","source",b"source","surface",b"surface"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["source",b"source"]) -> typing.Optional[typing_extensions.Literal["luminaire","surface","rayfile"]]: ...
global___SourceTemplate = SourceTemplate

class Create_Request(google.protobuf.message.Message):
    """Request to create a SourceTemplate in SourceTemplatesManager"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    SOURCE_TEMPLATE_FIELD_NUMBER: builtins.int
    @property
    def source_template(self) -> global___SourceTemplate:
        """SourceTemplate containing its basic characteristics"""
        pass
    def __init__(self,
        *,
        source_template : typing.Optional[global___SourceTemplate] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["source_template",b"source_template"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["source_template",b"source_template"]) -> None: ...
global___Create_Request = Create_Request

class Create_Response(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    GUID_FIELD_NUMBER: builtins.int
    guid: typing.Text = ...
    """Guid of the SourceTemplate created in SourceTemplatesManager"""

    def __init__(self,
        *,
        guid : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["guid",b"guid"]) -> None: ...
global___Create_Response = Create_Response

class Read_Request(google.protobuf.message.Message):
    """Request to read a SourceTemplate in SourceTemplatesManager"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    GUID_FIELD_NUMBER: builtins.int
    guid: typing.Text = ...
    """Guid of the SourceTemplate to be read"""

    def __init__(self,
        *,
        guid : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["guid",b"guid"]) -> None: ...
global___Read_Request = Read_Request

class Read_Response(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    SOURCE_TEMPLATE_FIELD_NUMBER: builtins.int
    @property
    def source_template(self) -> global___SourceTemplate:
        """SourceTemplate corresponding to the guid given in Read_Request"""
        pass
    def __init__(self,
        *,
        source_template : typing.Optional[global___SourceTemplate] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["source_template",b"source_template"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["source_template",b"source_template"]) -> None: ...
global___Read_Response = Read_Response

class Update_Request(google.protobuf.message.Message):
    """Request to update a SourceTemplate in SourceTemplatesManager"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    GUID_FIELD_NUMBER: builtins.int
    SOURCE_TEMPLATE_FIELD_NUMBER: builtins.int
    guid: typing.Text = ...
    """Guid of the SourceTemplate to be updated"""

    @property
    def source_template(self) -> global___SourceTemplate:
        """SourceTemplate that will be used for the update"""
        pass
    def __init__(self,
        *,
        guid : typing.Text = ...,
        source_template : typing.Optional[global___SourceTemplate] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["source_template",b"source_template"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["guid",b"guid","source_template",b"source_template"]) -> None: ...
global___Update_Request = Update_Request

class Update_Response(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    def __init__(self,
        ) -> None: ...
global___Update_Response = Update_Response

class Delete_Request(google.protobuf.message.Message):
    """Request to delete a SourceTemplate in SourceTemplatesManager"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    GUID_FIELD_NUMBER: builtins.int
    guid: typing.Text = ...
    """Guid of the SourceTemplate to be deleted"""

    def __init__(self,
        *,
        guid : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["guid",b"guid"]) -> None: ...
global___Delete_Request = Delete_Request

class Delete_Response(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    def __init__(self,
        ) -> None: ...
global___Delete_Response = Delete_Response

class List_Request(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    def __init__(self,
        ) -> None: ...
global___List_Request = List_Request

class List_Response(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    GUIDS_FIELD_NUMBER: builtins.int
    @property
    def guids(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """Guids of the SourceTemplates in SourceTemplatesManager"""
        pass
    def __init__(self,
        *,
        guids : typing.Optional[typing.Iterable[typing.Text]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["guids",b"guids"]) -> None: ...
global___List_Response = List_Response

class GetRayFileInfo_Request(google.protobuf.message.Message):
    """Request of GetRayFileInfo"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    GUID_FIELD_NUMBER: builtins.int
    guid: typing.Text = ...
    """Guid of the SourceTemplate to get information about ray file (example: flux). Only for SourceTemplate of type RayFile."""

    def __init__(self,
        *,
        guid : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["guid",b"guid"]) -> None: ...
global___GetRayFileInfo_Request = GetRayFileInfo_Request

class GetRayFileInfo_Response(google.protobuf.message.Message):
    """Response of GetRayFileInfo"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    FLUX_FIELD_NUMBER: builtins.int
    @property
    def flux(self) -> ansys.api.speos.common.v1.data_pb2.DataDoubles:
        """Flux of the ray file"""
        pass
    def __init__(self,
        *,
        flux : typing.Optional[ansys.api.speos.common.v1.data_pb2.DataDoubles] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["flux",b"flux"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["flux",b"flux"]) -> None: ...
global___GetRayFileInfo_Response = GetRayFileInfo_Response
