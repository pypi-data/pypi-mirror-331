"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class IlluminanceTypePlanar(google.protobuf.message.Message):
    """Integration made orthogonally with the sensor plane."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    def __init__(self,
        ) -> None: ...
global___IlluminanceTypePlanar = IlluminanceTypePlanar

class IlluminanceTypeRadial(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    def __init__(self,
        ) -> None: ...
global___IlluminanceTypeRadial = IlluminanceTypeRadial

class IlluminanceTypeHemispherical(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    def __init__(self,
        ) -> None: ...
global___IlluminanceTypeHemispherical = IlluminanceTypeHemispherical

class IlluminanceTypeCylindrical(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    def __init__(self,
        ) -> None: ...
global___IlluminanceTypeCylindrical = IlluminanceTypeCylindrical

class IlluminanceTypeSemiCylindrical(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    def __init__(self,
        ) -> None: ...
global___IlluminanceTypeSemiCylindrical = IlluminanceTypeSemiCylindrical

class WavelengthsRange(google.protobuf.message.Message):
    """Spectral excursion to use for simulation"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    W_START_FIELD_NUMBER: builtins.int
    W_END_FIELD_NUMBER: builtins.int
    W_SAMPLING_FIELD_NUMBER: builtins.int
    w_start: builtins.float = ...
    """Defines the minimum wavelength. (nm)"""

    w_end: builtins.float = ...
    """Defines the maximum wavelength. (nm)"""

    w_sampling: builtins.int = ...
    """Defines the number of wavelengths to be taken into account between the minimum and maximum wavelengths set."""

    def __init__(self,
        *,
        w_start : builtins.float = ...,
        w_end : builtins.float = ...,
        w_sampling : builtins.int = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["w_end",b"w_end","w_sampling",b"w_sampling","w_start",b"w_start"]) -> None: ...
global___WavelengthsRange = WavelengthsRange

class SensorDimensions(google.protobuf.message.Message):
    """Dimensions of the sensor"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    X_START_FIELD_NUMBER: builtins.int
    X_END_FIELD_NUMBER: builtins.int
    X_SAMPLING_FIELD_NUMBER: builtins.int
    Y_START_FIELD_NUMBER: builtins.int
    Y_END_FIELD_NUMBER: builtins.int
    Y_SAMPLING_FIELD_NUMBER: builtins.int
    x_start: builtins.float = ...
    """(mm)"""

    x_end: builtins.float = ...
    """(mm)"""

    x_sampling: builtins.int = ...
    """Corresponds to the number of pixels of the XMP map."""

    y_start: builtins.float = ...
    """(mm)"""

    y_end: builtins.float = ...
    """(mm)"""

    y_sampling: builtins.int = ...
    """Corresponds to the number of pixels of the XMP map."""

    def __init__(self,
        *,
        x_start : builtins.float = ...,
        x_end : builtins.float = ...,
        x_sampling : builtins.int = ...,
        y_start : builtins.float = ...,
        y_end : builtins.float = ...,
        y_sampling : builtins.int = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["x_end",b"x_end","x_sampling",b"x_sampling","x_start",b"x_start","y_end",b"y_end","y_sampling",b"y_sampling","y_start",b"y_start"]) -> None: ...
global___SensorDimensions = SensorDimensions

class SensorTypePhotometric(google.protobuf.message.Message):
    """The sensor considers the visible spectrum and gets the results."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    def __init__(self,
        ) -> None: ...
global___SensorTypePhotometric = SensorTypePhotometric

class SensorTypeColorimetric(google.protobuf.message.Message):
    """Color results without any spectral data or layer separation."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    WAVELENGTHS_RANGE_FIELD_NUMBER: builtins.int
    @property
    def wavelengths_range(self) -> global___WavelengthsRange:
        """Spectral excursion to use for simulation"""
        pass
    def __init__(self,
        *,
        wavelengths_range : typing.Optional[global___WavelengthsRange] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["wavelengths_range",b"wavelengths_range"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["wavelengths_range",b"wavelengths_range"]) -> None: ...
global___SensorTypeColorimetric = SensorTypeColorimetric

class SensorTypeRadiometric(google.protobuf.message.Message):
    """The sensor considers the entire spectrum and gets the results."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    def __init__(self,
        ) -> None: ...
global___SensorTypeRadiometric = SensorTypeRadiometric

class SensorTypeSpectral(google.protobuf.message.Message):
    """Color results and spectral data separated by wavelength."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    WAVELENGTHS_RANGE_FIELD_NUMBER: builtins.int
    @property
    def wavelengths_range(self) -> global___WavelengthsRange:
        """Spectral excursion to use for simulation"""
        pass
    def __init__(self,
        *,
        wavelengths_range : typing.Optional[global___WavelengthsRange] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["wavelengths_range",b"wavelengths_range"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["wavelengths_range",b"wavelengths_range"]) -> None: ...
global___SensorTypeSpectral = SensorTypeSpectral
