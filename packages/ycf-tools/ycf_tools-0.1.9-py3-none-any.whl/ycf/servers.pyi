from _typeshed import Incomplete
from typing import Any
from ycf.exceptions import MultiBaseException as MultiBaseException
from ycf.types import AliceSkillRequest as AliceSkillRequest, Context as Context, HttpRequest as HttpRequest, HttpResponse as HttpResponse, MessagesQueueRequest as MessagesQueueRequest

logger: Incomplete

class YcfServer:
    def __init__(self) -> None: ...
    async def init(self) -> None: ...
    async def parsing(self, event: dict[str, Any], context: object) -> tuple[Context, HttpRequest | AliceSkillRequest | MessagesQueueRequest]: ...
    async def http_request_processing(self, context: Context, request: HttpRequest) -> dict[str, Any]: ...
    async def alice_skill_processing(self, context: Context, request: AliceSkillRequest) -> Any: ...
    async def queue_messages_processing(self, context: Context, request: MessagesQueueRequest) -> Any: ...
    async def processing(self, context_object: Context, request_object: HttpRequest | AliceSkillRequest | MessagesQueueRequest) -> Any | None: ...
    async def call(self, event: dict[str, Any], context: object) -> Any: ...
    async def __call__(self, event: dict[str, Any], context: object) -> Any: ...
    async def http_request_handler(self, context: Context, request: HttpRequest) -> str | dict[str, Any] | None: ...
    async def alice_skill_handler(self, context: Context, request: AliceSkillRequest) -> str | dict[str, Any] | None: ...
    async def queue_messages_handler(self, context: Context, request: MessagesQueueRequest) -> str | dict[str, Any] | None: ...
