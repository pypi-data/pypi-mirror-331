# Generated from ./PythonParser.g4 by ANTLR 4.13.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

if "." in __name__:
    from .PythonParserBase import PythonParserBase
else:
    from PythonParserBase import PythonParserBase

def serializedATN():
    return [
        4,1,97,2187,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,7,136,
        2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,2,142,
        7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
        2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,
        7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
        2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,
        7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,
        2,170,7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,
        7,175,2,176,7,176,2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,
        2,181,7,181,2,182,7,182,2,183,7,183,2,184,7,184,2,185,7,185,2,186,
        7,186,2,187,7,187,2,188,7,188,2,189,7,189,2,190,7,190,2,191,7,191,
        2,192,7,192,2,193,7,193,2,194,7,194,2,195,7,195,2,196,7,196,2,197,
        7,197,1,0,3,0,398,8,0,1,0,1,0,1,1,1,1,1,2,1,2,5,2,406,8,2,10,2,12,
        2,409,9,2,1,2,1,2,1,3,1,3,3,3,415,8,3,1,3,1,3,1,3,1,3,5,3,421,8,
        3,10,3,12,3,424,9,3,1,3,1,3,1,4,1,4,1,5,4,5,431,8,5,11,5,12,5,432,
        1,6,1,6,3,6,437,8,6,1,7,1,7,1,7,1,7,1,7,1,7,3,7,445,8,7,1,8,1,8,
        1,8,5,8,450,8,8,10,8,12,8,453,9,8,1,8,3,8,456,8,8,1,8,1,8,1,9,1,
        9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,3,9,474,8,9,1,
        10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,3,10,484,8,10,1,11,1,11,1,
        11,1,11,1,11,3,11,491,8,11,1,11,1,11,1,11,1,11,1,11,3,11,498,8,11,
        1,11,1,11,1,11,1,11,3,11,504,8,11,1,11,1,11,1,11,4,11,509,8,11,11,
        11,12,11,510,1,11,1,11,3,11,515,8,11,1,11,3,11,518,8,11,1,11,1,11,
        1,11,1,11,3,11,524,8,11,3,11,526,8,11,1,12,1,12,3,12,530,8,12,1,
        13,1,13,1,14,1,14,3,14,536,8,14,1,15,1,15,1,15,1,15,3,15,542,8,15,
        3,15,544,8,15,1,16,1,16,1,16,1,16,5,16,550,8,16,10,16,12,16,553,
        9,16,1,17,1,17,1,17,1,17,5,17,559,8,17,10,17,12,17,562,9,17,1,18,
        1,18,1,18,1,19,1,19,1,20,1,20,1,20,1,20,3,20,573,8,20,1,21,1,21,
        3,21,577,8,21,1,22,1,22,1,22,1,23,1,23,5,23,584,8,23,10,23,12,23,
        587,9,23,1,23,1,23,1,23,1,23,1,23,1,23,4,23,595,8,23,11,23,12,23,
        596,1,23,1,23,3,23,601,8,23,1,24,1,24,1,24,3,24,606,8,24,1,24,1,
        24,1,24,1,24,3,24,612,8,24,1,25,1,25,1,25,5,25,617,8,25,10,25,12,
        25,620,9,25,1,26,1,26,1,26,3,26,625,8,26,1,27,1,27,1,27,5,27,630,
        8,27,10,27,12,27,633,9,27,1,28,1,28,1,28,3,28,638,8,28,1,29,1,29,
        1,29,1,29,1,29,1,29,5,29,646,8,29,10,29,12,29,649,9,29,1,30,1,30,
        1,30,1,30,1,30,1,30,3,30,657,8,30,1,31,1,31,1,31,1,31,4,31,663,8,
        31,11,31,12,31,664,1,32,1,32,1,32,1,32,3,32,671,8,32,1,33,1,33,1,
        33,3,33,676,8,33,1,33,1,33,3,33,680,8,33,1,33,3,33,683,8,33,1,33,
        1,33,1,33,1,34,1,34,1,34,1,34,3,34,692,8,34,1,35,1,35,1,35,3,35,
        697,8,35,1,35,1,35,3,35,701,8,35,1,35,1,35,1,35,3,35,706,8,35,1,
        35,1,35,3,35,710,8,35,1,35,1,35,1,35,1,35,1,35,3,35,717,8,35,1,35,
        1,35,3,35,721,8,35,1,35,1,35,1,35,3,35,726,8,35,1,35,1,35,3,35,730,
        8,35,1,35,3,35,733,8,35,1,36,1,36,1,37,1,37,5,37,739,8,37,10,37,
        12,37,742,9,37,1,37,5,37,745,8,37,10,37,12,37,748,9,37,1,37,3,37,
        751,8,37,1,37,1,37,5,37,755,8,37,10,37,12,37,758,9,37,1,37,3,37,
        761,8,37,1,37,4,37,764,8,37,11,37,12,37,765,1,37,5,37,769,8,37,10,
        37,12,37,772,9,37,1,37,3,37,775,8,37,1,37,4,37,778,8,37,11,37,12,
        37,779,1,37,3,37,783,8,37,1,37,3,37,786,8,37,1,38,4,38,789,8,38,
        11,38,12,38,790,1,38,1,38,3,38,795,8,38,1,39,5,39,798,8,39,10,39,
        12,39,801,9,39,1,39,4,39,804,8,39,11,39,12,39,805,1,39,1,39,3,39,
        810,8,39,1,40,1,40,1,40,5,40,815,8,40,10,40,12,40,818,9,40,1,40,
        3,40,821,8,40,1,40,1,40,1,40,5,40,826,8,40,10,40,12,40,829,9,40,
        1,40,3,40,832,8,40,1,40,1,40,1,40,4,40,837,8,40,11,40,12,40,838,
        1,40,3,40,842,8,40,1,40,3,40,845,8,40,1,41,1,41,1,41,1,42,1,42,3,
        42,852,8,42,1,42,3,42,855,8,42,1,43,1,43,3,43,859,8,43,1,43,3,43,
        862,8,43,1,44,1,44,1,44,3,44,867,8,44,1,44,3,44,870,8,44,1,45,1,
        45,3,45,874,8,45,1,45,3,45,877,8,45,1,45,3,45,880,8,45,1,46,1,46,
        3,46,884,8,46,1,47,1,47,1,47,1,48,1,48,1,48,1,49,1,49,1,49,1,50,
        1,50,1,50,1,51,1,51,1,51,1,51,1,51,1,51,3,51,904,8,51,3,51,906,8,
        51,1,52,1,52,1,52,1,52,1,52,1,52,3,52,914,8,52,3,52,916,8,52,1,53,
        1,53,1,53,1,53,1,54,1,54,1,54,1,54,1,54,3,54,927,8,54,1,55,3,55,
        930,8,55,1,55,1,55,1,55,1,55,1,55,1,55,3,55,938,8,55,1,55,1,55,3,
        55,942,8,55,1,56,3,56,945,8,56,1,56,1,56,1,56,1,56,1,56,5,56,952,
        8,56,10,56,12,56,955,9,56,1,56,3,56,958,8,56,1,56,1,56,1,56,1,56,
        1,56,1,56,5,56,966,8,56,10,56,12,56,969,9,56,1,56,1,56,3,56,973,
        8,56,3,56,975,8,56,1,56,1,56,1,57,1,57,1,57,3,57,982,8,57,1,58,1,
        58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,4,58,993,8,58,11,58,12,58,
        994,1,58,3,58,998,8,58,1,58,3,58,1001,8,58,1,58,1,58,1,58,1,58,4,
        58,1007,8,58,11,58,12,58,1008,1,58,3,58,1012,8,58,1,58,3,58,1015,
        8,58,3,58,1017,8,58,1,59,1,59,1,59,1,59,3,59,1023,8,59,3,59,1025,
        8,59,1,59,1,59,1,59,1,60,1,60,1,60,1,60,1,60,3,60,1035,8,60,1,60,
        1,60,1,60,1,61,1,61,1,61,1,61,1,62,1,62,1,62,1,62,1,62,1,62,4,62,
        1050,8,62,11,62,12,62,1051,1,62,1,62,1,63,1,63,1,63,3,63,1059,8,
        63,1,63,3,63,1062,8,63,1,64,1,64,1,64,3,64,1067,8,64,1,64,1,64,1,
        64,1,65,1,65,1,65,1,66,1,66,3,66,1077,8,66,1,67,1,67,3,67,1081,8,
        67,1,68,1,68,1,68,1,68,1,69,1,69,1,69,5,69,1090,8,69,10,69,12,69,
        1093,9,69,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,3,70,1103,8,70,
        1,71,1,71,1,71,1,71,1,71,1,71,3,71,1111,8,71,1,72,1,72,1,72,1,72,
        1,72,1,72,3,72,1119,8,72,1,73,1,73,1,73,1,73,1,74,3,74,1126,8,74,
        1,74,1,74,1,75,3,75,1131,8,75,1,75,1,75,1,76,1,76,1,77,1,77,1,78,
        1,78,1,79,1,79,1,80,1,80,1,81,1,81,1,82,1,82,1,82,4,82,1150,8,82,
        11,82,12,82,1151,1,83,1,83,1,83,5,83,1157,8,83,10,83,12,83,1160,
        9,83,1,84,1,84,1,84,1,84,1,85,1,85,3,85,1168,8,85,1,85,1,85,1,85,
        3,85,1173,8,85,1,85,3,85,1176,8,85,1,86,1,86,1,86,3,86,1181,8,86,
        1,87,1,87,1,87,5,87,1186,8,87,10,87,12,87,1189,9,87,1,87,3,87,1192,
        8,87,1,88,1,88,3,88,1196,8,88,1,89,1,89,1,89,1,89,3,89,1202,8,89,
        1,90,1,90,1,90,1,90,1,90,3,90,1209,8,90,1,90,1,90,1,90,1,90,1,90,
        1,90,3,90,1217,8,90,1,90,3,90,1220,8,90,1,90,1,90,3,90,1224,8,90,
        1,91,1,91,1,91,5,91,1229,8,91,10,91,12,91,1232,9,91,1,92,1,92,3,
        92,1236,8,92,1,92,1,92,1,92,1,93,1,93,1,93,1,94,1,94,1,94,1,94,1,
        94,3,94,1249,8,94,1,94,3,94,1252,8,94,1,94,3,94,1255,8,94,3,94,1257,
        8,94,1,94,1,94,1,95,1,95,1,95,5,95,1264,8,95,10,95,12,95,1267,9,
        95,1,96,1,96,1,96,5,96,1272,8,96,10,96,12,96,1275,9,96,1,97,1,97,
        1,97,1,97,1,98,1,98,1,98,3,98,1284,8,98,1,98,1,98,1,98,1,99,1,99,
        1,99,1,99,1,100,1,100,1,100,5,100,1296,8,100,10,100,12,100,1299,
        9,100,1,100,3,100,1302,8,100,1,101,1,101,3,101,1306,8,101,1,101,
        1,101,1,101,1,101,3,101,1312,8,101,1,101,1,101,1,101,1,101,3,101,
        1318,8,101,3,101,1320,8,101,1,102,1,102,1,102,1,103,1,103,1,103,
        5,103,1328,8,103,10,103,12,103,1331,9,103,1,103,3,103,1334,8,103,
        1,104,1,104,1,104,1,104,1,104,1,104,3,104,1342,8,104,1,104,3,104,
        1345,8,104,1,105,1,105,1,105,1,105,3,105,1351,8,105,3,105,1353,8,
        105,1,106,1,106,1,106,5,106,1358,8,106,10,106,12,106,1361,9,106,
        1,106,3,106,1364,8,106,1,107,1,107,1,107,3,107,1369,8,107,1,108,
        1,108,1,108,5,108,1374,8,108,10,108,12,108,1377,9,108,1,108,3,108,
        1380,8,108,1,109,1,109,1,109,3,109,1385,8,109,1,110,1,110,1,110,
        1,110,1,111,1,111,3,111,1393,8,111,1,112,1,112,1,112,5,112,1398,
        8,112,10,112,12,112,1401,9,112,1,113,1,113,1,113,5,113,1406,8,113,
        10,113,12,113,1409,9,113,1,114,1,114,1,114,3,114,1414,8,114,1,115,
        1,115,5,115,1418,8,115,10,115,12,115,1421,9,115,1,116,1,116,1,116,
        1,116,1,116,1,116,1,116,1,116,1,116,1,116,3,116,1433,8,116,1,117,
        1,117,1,117,1,118,1,118,1,118,1,119,1,119,1,119,1,120,1,120,1,120,
        1,121,1,121,1,121,1,122,1,122,1,122,1,123,1,123,1,123,1,123,1,124,
        1,124,1,124,1,125,1,125,1,125,1,125,1,126,1,126,1,126,1,127,1,127,
        1,127,1,127,1,127,1,127,5,127,1473,8,127,10,127,12,127,1476,9,127,
        1,128,1,128,1,128,1,128,1,128,1,128,5,128,1484,8,128,10,128,12,128,
        1487,9,128,1,129,1,129,1,129,1,129,1,129,1,129,5,129,1495,8,129,
        10,129,12,129,1498,9,129,1,130,1,130,1,130,1,130,1,130,1,130,5,130,
        1506,8,130,10,130,12,130,1509,9,130,1,131,1,131,1,131,1,131,1,131,
        1,131,5,131,1517,8,131,10,131,12,131,1520,9,131,1,132,1,132,1,132,
        1,132,1,132,1,132,5,132,1528,8,132,10,132,12,132,1531,9,132,1,133,
        1,133,1,133,1,133,1,133,1,133,1,133,3,133,1540,8,133,1,134,1,134,
        1,134,3,134,1545,8,134,1,135,1,135,1,135,3,135,1550,8,135,1,136,
        1,136,1,136,1,136,1,136,1,136,1,136,1,136,1,136,3,136,1561,8,136,
        1,136,1,136,1,136,1,136,1,136,3,136,1568,8,136,5,136,1570,8,136,
        10,136,12,136,1573,9,136,1,137,1,137,1,137,3,137,1578,8,137,1,137,
        1,137,1,137,3,137,1583,8,137,5,137,1585,8,137,10,137,12,137,1588,
        9,137,1,137,3,137,1591,8,137,3,137,1593,8,137,1,138,3,138,1596,8,
        138,1,138,1,138,3,138,1600,8,138,1,138,1,138,3,138,1604,8,138,3,
        138,1606,8,138,1,138,3,138,1609,8,138,1,139,1,139,1,139,1,139,1,
        139,1,139,1,139,1,139,1,139,3,139,1620,8,139,1,139,1,139,3,139,1624,
        8,139,1,139,1,139,1,139,1,139,3,139,1630,8,139,1,139,3,139,1633,
        8,139,1,140,1,140,1,140,3,140,1638,8,140,1,140,1,140,1,141,1,141,
        3,141,1644,8,141,1,141,1,141,1,141,1,142,1,142,1,143,1,143,5,143,
        1653,8,143,10,143,12,143,1656,9,143,1,143,5,143,1659,8,143,10,143,
        12,143,1662,9,143,1,143,3,143,1665,8,143,1,143,1,143,5,143,1669,
        8,143,10,143,12,143,1672,9,143,1,143,3,143,1675,8,143,1,143,4,143,
        1678,8,143,11,143,12,143,1679,1,143,5,143,1683,8,143,10,143,12,143,
        1686,9,143,1,143,3,143,1689,8,143,1,143,4,143,1692,8,143,11,143,
        12,143,1693,1,143,3,143,1697,8,143,1,143,3,143,1700,8,143,1,144,
        4,144,1703,8,144,11,144,12,144,1704,1,144,1,144,3,144,1709,8,144,
        1,145,5,145,1712,8,145,10,145,12,145,1715,9,145,1,145,4,145,1718,
        8,145,11,145,12,145,1719,1,145,1,145,3,145,1724,8,145,1,146,1,146,
        1,146,5,146,1729,8,146,10,146,12,146,1732,9,146,1,146,3,146,1735,
        8,146,1,146,1,146,1,146,4,146,1740,8,146,11,146,12,146,1741,1,146,
        3,146,1745,8,146,1,146,3,146,1748,8,146,1,147,1,147,1,147,1,148,
        1,148,3,148,1755,8,148,1,149,1,149,1,149,3,149,1760,8,149,1,150,
        1,150,3,150,1764,8,150,1,150,3,150,1767,8,150,1,151,1,151,1,152,
        1,152,3,152,1773,8,152,1,153,1,153,1,153,3,153,1778,8,153,1,153,
        3,153,1781,8,153,1,153,3,153,1784,8,153,1,153,3,153,1787,8,153,1,
        153,1,153,1,154,1,154,1,154,1,155,1,155,5,155,1796,8,155,10,155,
        12,155,1799,9,155,1,156,1,156,3,156,1803,8,156,1,157,1,157,5,157,
        1807,8,157,10,157,12,157,1810,9,157,1,157,1,157,1,158,1,158,1,159,
        1,159,4,159,1818,8,159,11,159,12,159,1819,1,160,1,160,3,160,1824,
        8,160,1,160,1,160,1,161,1,161,1,161,1,161,3,161,1832,8,161,3,161,
        1834,8,161,1,161,1,161,1,162,1,162,1,162,1,162,1,163,1,163,3,163,
        1844,8,163,1,163,1,163,1,164,1,164,1,164,5,164,1851,8,164,10,164,
        12,164,1854,9,164,1,164,3,164,1857,8,164,1,165,1,165,1,165,3,165,
        1862,8,165,1,166,1,166,1,166,1,166,1,167,4,167,1869,8,167,11,167,
        12,167,1870,1,168,3,168,1874,8,168,1,168,1,168,1,168,1,168,1,168,
        1,168,5,168,1882,8,168,10,168,12,168,1885,9,168,1,169,1,169,1,169,
        1,169,1,169,1,170,1,170,1,170,1,170,1,170,1,171,1,171,1,171,3,171,
        1900,8,171,1,171,1,171,1,171,1,172,1,172,1,172,1,172,1,172,1,173,
        1,173,3,173,1912,8,173,1,174,1,174,1,174,3,174,1917,8,174,3,174,
        1919,8,174,1,174,1,174,1,174,1,174,3,174,1925,8,174,3,174,1927,8,
        174,5,174,1929,8,174,10,174,12,174,1932,9,174,1,174,1,174,3,174,
        1936,8,174,1,174,3,174,1939,8,174,1,175,1,175,1,175,5,175,1944,8,
        175,10,175,12,175,1947,9,175,1,175,1,175,1,175,1,175,5,175,1953,
        8,175,10,175,12,175,1956,9,175,3,175,1958,8,175,1,175,1,175,1,175,
        5,175,1963,8,175,10,175,12,175,1966,9,175,3,175,1968,8,175,1,176,
        1,176,1,176,1,177,1,177,1,177,1,177,3,177,1977,8,177,1,178,1,178,
        1,178,1,178,1,178,3,178,1984,8,178,1,179,1,179,1,179,5,179,1989,
        8,179,10,179,12,179,1992,9,179,1,179,3,179,1995,8,179,1,180,1,180,
        1,180,4,180,2000,8,180,11,180,12,180,2001,1,180,3,180,2005,8,180,
        1,181,1,181,1,181,1,181,4,181,2011,8,181,11,181,12,181,2012,1,181,
        3,181,2016,8,181,3,181,2018,8,181,1,182,1,182,1,182,3,182,2023,8,
        182,1,183,1,183,1,183,1,183,1,183,1,183,1,183,3,183,2032,8,183,1,
        183,3,183,2035,8,183,1,184,1,184,1,184,1,184,1,184,1,184,1,184,3,
        184,2044,8,184,1,184,1,184,1,184,3,184,2049,8,184,1,184,3,184,2052,
        8,184,1,185,1,185,1,185,1,185,1,185,1,185,3,185,2060,8,185,1,186,
        1,186,1,186,1,186,1,186,1,186,1,186,3,186,2069,8,186,1,187,1,187,
        1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,
        3,187,2084,8,187,1,187,3,187,2087,8,187,5,187,2089,8,187,10,187,
        12,187,2092,9,187,1,188,1,188,1,188,5,188,2097,8,188,10,188,12,188,
        2100,9,188,1,188,3,188,2103,8,188,1,189,1,189,1,189,1,189,1,189,
        1,189,1,189,3,189,2112,8,189,1,189,3,189,2115,8,189,1,190,1,190,
        1,190,1,190,1,190,1,190,1,190,3,190,2124,8,190,1,190,1,190,1,190,
        3,190,2129,8,190,1,190,3,190,2132,8,190,1,191,1,191,1,191,5,191,
        2137,8,191,10,191,12,191,2140,9,191,1,191,1,191,1,191,1,191,1,191,
        1,191,3,191,2148,8,191,1,191,1,191,3,191,2152,8,191,3,191,2154,8,
        191,1,191,1,191,1,191,1,191,1,191,3,191,2161,8,191,1,191,1,191,3,
        191,2165,8,191,1,192,1,192,1,192,3,192,2170,8,192,1,193,1,193,1,
        193,1,194,1,194,1,194,1,195,1,195,1,195,1,196,1,196,1,196,1,197,
        1,197,1,197,1,197,0,9,58,254,256,258,260,262,264,272,374,198,0,2,
        4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,
        50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,
        94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,
        128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,
        160,162,164,166,168,170,172,174,176,178,180,182,184,186,188,190,
        192,194,196,198,200,202,204,206,208,210,212,214,216,218,220,222,
        224,226,228,230,232,234,236,238,240,242,244,246,248,250,252,254,
        256,258,260,262,264,266,268,270,272,274,276,278,280,282,284,286,
        288,290,292,294,296,298,300,302,304,306,308,310,312,314,316,318,
        320,322,324,326,328,330,332,334,336,338,340,342,344,346,348,350,
        352,354,356,358,360,362,364,366,368,370,372,374,376,378,380,382,
        384,386,388,390,392,394,0,5,3,0,70,80,82,82,84,84,2,0,47,47,86,86,
        1,0,51,52,1,0,67,68,4,0,53,54,60,60,81,81,83,83,2359,0,397,1,0,0,
        0,2,401,1,0,0,0,4,403,1,0,0,0,6,412,1,0,0,0,8,427,1,0,0,0,10,430,
        1,0,0,0,12,436,1,0,0,0,14,444,1,0,0,0,16,446,1,0,0,0,18,473,1,0,
        0,0,20,483,1,0,0,0,22,525,1,0,0,0,24,529,1,0,0,0,26,531,1,0,0,0,
        28,533,1,0,0,0,30,537,1,0,0,0,32,545,1,0,0,0,34,554,1,0,0,0,36,563,
        1,0,0,0,38,566,1,0,0,0,40,568,1,0,0,0,42,576,1,0,0,0,44,578,1,0,
        0,0,46,600,1,0,0,0,48,611,1,0,0,0,50,613,1,0,0,0,52,621,1,0,0,0,
        54,626,1,0,0,0,56,634,1,0,0,0,58,639,1,0,0,0,60,656,1,0,0,0,62,662,
        1,0,0,0,64,670,1,0,0,0,66,672,1,0,0,0,68,691,1,0,0,0,70,732,1,0,
        0,0,72,734,1,0,0,0,74,785,1,0,0,0,76,788,1,0,0,0,78,799,1,0,0,0,
        80,844,1,0,0,0,82,846,1,0,0,0,84,849,1,0,0,0,86,856,1,0,0,0,88,863,
        1,0,0,0,90,871,1,0,0,0,92,881,1,0,0,0,94,885,1,0,0,0,96,888,1,0,
        0,0,98,891,1,0,0,0,100,894,1,0,0,0,102,897,1,0,0,0,104,907,1,0,0,
        0,106,917,1,0,0,0,108,921,1,0,0,0,110,929,1,0,0,0,112,944,1,0,0,
        0,114,978,1,0,0,0,116,1016,1,0,0,0,118,1018,1,0,0,0,120,1029,1,0,
        0,0,122,1039,1,0,0,0,124,1043,1,0,0,0,126,1061,1,0,0,0,128,1063,
        1,0,0,0,130,1071,1,0,0,0,132,1076,1,0,0,0,134,1080,1,0,0,0,136,1082,
        1,0,0,0,138,1086,1,0,0,0,140,1102,1,0,0,0,142,1110,1,0,0,0,144,1118,
        1,0,0,0,146,1120,1,0,0,0,148,1125,1,0,0,0,150,1130,1,0,0,0,152,1134,
        1,0,0,0,154,1136,1,0,0,0,156,1138,1,0,0,0,158,1140,1,0,0,0,160,1142,
        1,0,0,0,162,1144,1,0,0,0,164,1146,1,0,0,0,166,1153,1,0,0,0,168,1161,
        1,0,0,0,170,1175,1,0,0,0,172,1177,1,0,0,0,174,1182,1,0,0,0,176,1195,
        1,0,0,0,178,1201,1,0,0,0,180,1223,1,0,0,0,182,1225,1,0,0,0,184,1235,
        1,0,0,0,186,1240,1,0,0,0,188,1243,1,0,0,0,190,1260,1,0,0,0,192,1268,
        1,0,0,0,194,1276,1,0,0,0,196,1280,1,0,0,0,198,1288,1,0,0,0,200,1292,
        1,0,0,0,202,1319,1,0,0,0,204,1321,1,0,0,0,206,1324,1,0,0,0,208,1344,
        1,0,0,0,210,1346,1,0,0,0,212,1354,1,0,0,0,214,1368,1,0,0,0,216,1370,
        1,0,0,0,218,1384,1,0,0,0,220,1386,1,0,0,0,222,1392,1,0,0,0,224,1394,
        1,0,0,0,226,1402,1,0,0,0,228,1413,1,0,0,0,230,1415,1,0,0,0,232,1432,
        1,0,0,0,234,1434,1,0,0,0,236,1437,1,0,0,0,238,1440,1,0,0,0,240,1443,
        1,0,0,0,242,1446,1,0,0,0,244,1449,1,0,0,0,246,1452,1,0,0,0,248,1456,
        1,0,0,0,250,1459,1,0,0,0,252,1463,1,0,0,0,254,1466,1,0,0,0,256,1477,
        1,0,0,0,258,1488,1,0,0,0,260,1499,1,0,0,0,262,1510,1,0,0,0,264,1521,
        1,0,0,0,266,1539,1,0,0,0,268,1541,1,0,0,0,270,1549,1,0,0,0,272,1551,
        1,0,0,0,274,1592,1,0,0,0,276,1608,1,0,0,0,278,1632,1,0,0,0,280,1634,
        1,0,0,0,282,1641,1,0,0,0,284,1648,1,0,0,0,286,1699,1,0,0,0,288,1702,
        1,0,0,0,290,1713,1,0,0,0,292,1747,1,0,0,0,294,1749,1,0,0,0,296,1752,
        1,0,0,0,298,1756,1,0,0,0,300,1761,1,0,0,0,302,1768,1,0,0,0,304,1772,
        1,0,0,0,306,1774,1,0,0,0,308,1790,1,0,0,0,310,1793,1,0,0,0,312,1802,
        1,0,0,0,314,1804,1,0,0,0,316,1813,1,0,0,0,318,1817,1,0,0,0,320,1821,
        1,0,0,0,322,1827,1,0,0,0,324,1837,1,0,0,0,326,1841,1,0,0,0,328,1847,
        1,0,0,0,330,1861,1,0,0,0,332,1863,1,0,0,0,334,1868,1,0,0,0,336,1873,
        1,0,0,0,338,1886,1,0,0,0,340,1891,1,0,0,0,342,1896,1,0,0,0,344,1904,
        1,0,0,0,346,1909,1,0,0,0,348,1938,1,0,0,0,350,1967,1,0,0,0,352,1969,
        1,0,0,0,354,1976,1,0,0,0,356,1983,1,0,0,0,358,1985,1,0,0,0,360,1996,
        1,0,0,0,362,2006,1,0,0,0,364,2022,1,0,0,0,366,2034,1,0,0,0,368,2051,
        1,0,0,0,370,2059,1,0,0,0,372,2061,1,0,0,0,374,2070,1,0,0,0,376,2093,
        1,0,0,0,378,2114,1,0,0,0,380,2131,1,0,0,0,382,2164,1,0,0,0,384,2169,
        1,0,0,0,386,2171,1,0,0,0,388,2174,1,0,0,0,390,2177,1,0,0,0,392,2180,
        1,0,0,0,394,2183,1,0,0,0,396,398,3,10,5,0,397,396,1,0,0,0,397,398,
        1,0,0,0,398,399,1,0,0,0,399,400,5,0,0,1,400,1,1,0,0,0,401,402,3,
        14,7,0,402,3,1,0,0,0,403,407,3,206,103,0,404,406,5,92,0,0,405,404,
        1,0,0,0,406,409,1,0,0,0,407,405,1,0,0,0,407,408,1,0,0,0,408,410,
        1,0,0,0,409,407,1,0,0,0,410,411,5,0,0,1,411,5,1,0,0,0,412,414,5,
        41,0,0,413,415,3,382,191,0,414,413,1,0,0,0,414,415,1,0,0,0,415,416,
        1,0,0,0,416,417,5,44,0,0,417,418,5,85,0,0,418,422,3,208,104,0,419,
        421,5,92,0,0,420,419,1,0,0,0,421,424,1,0,0,0,422,420,1,0,0,0,422,
        423,1,0,0,0,423,425,1,0,0,0,424,422,1,0,0,0,425,426,5,0,0,1,426,
        7,1,0,0,0,427,428,3,212,106,0,428,9,1,0,0,0,429,431,3,12,6,0,430,
        429,1,0,0,0,431,432,1,0,0,0,432,430,1,0,0,0,432,433,1,0,0,0,433,
        11,1,0,0,0,434,437,3,20,10,0,435,437,3,16,8,0,436,434,1,0,0,0,436,
        435,1,0,0,0,437,13,1,0,0,0,438,439,3,20,10,0,439,440,5,92,0,0,440,
        445,1,0,0,0,441,445,3,16,8,0,442,445,5,92,0,0,443,445,5,0,0,1,444,
        438,1,0,0,0,444,441,1,0,0,0,444,442,1,0,0,0,444,443,1,0,0,0,445,
        15,1,0,0,0,446,451,3,18,9,0,447,448,5,50,0,0,448,450,3,18,9,0,449,
        447,1,0,0,0,450,453,1,0,0,0,451,449,1,0,0,0,451,452,1,0,0,0,452,
        455,1,0,0,0,453,451,1,0,0,0,454,456,5,50,0,0,455,454,1,0,0,0,455,
        456,1,0,0,0,456,457,1,0,0,0,457,458,5,92,0,0,458,17,1,0,0,0,459,
        474,3,22,11,0,460,474,3,196,98,0,461,474,3,212,106,0,462,474,3,28,
        14,0,463,474,3,42,21,0,464,474,3,30,15,0,465,474,5,10,0,0,466,474,
        3,36,18,0,467,474,3,38,19,0,468,474,3,40,20,0,469,474,5,12,0,0,470,
        474,5,22,0,0,471,474,3,32,16,0,472,474,3,34,17,0,473,459,1,0,0,0,
        473,460,1,0,0,0,473,461,1,0,0,0,473,462,1,0,0,0,473,463,1,0,0,0,
        473,464,1,0,0,0,473,465,1,0,0,0,473,466,1,0,0,0,473,467,1,0,0,0,
        473,468,1,0,0,0,473,469,1,0,0,0,473,470,1,0,0,0,473,471,1,0,0,0,
        473,472,1,0,0,0,474,19,1,0,0,0,475,484,3,68,34,0,476,484,3,102,51,
        0,477,484,3,64,32,0,478,484,3,112,56,0,479,484,3,110,55,0,480,484,
        3,116,58,0,481,484,3,108,54,0,482,484,3,124,62,0,483,475,1,0,0,0,
        483,476,1,0,0,0,483,477,1,0,0,0,483,478,1,0,0,0,483,479,1,0,0,0,
        483,480,1,0,0,0,483,481,1,0,0,0,483,482,1,0,0,0,484,21,1,0,0,0,485,
        486,5,89,0,0,486,487,5,48,0,0,487,490,3,208,104,0,488,489,5,59,0,
        0,489,491,3,24,12,0,490,488,1,0,0,0,490,491,1,0,0,0,491,526,1,0,
        0,0,492,493,5,41,0,0,493,494,3,370,185,0,494,495,5,44,0,0,495,498,
        1,0,0,0,496,498,3,372,186,0,497,492,1,0,0,0,497,496,1,0,0,0,498,
        499,1,0,0,0,499,500,5,48,0,0,500,503,3,208,104,0,501,502,5,59,0,
        0,502,504,3,24,12,0,503,501,1,0,0,0,503,504,1,0,0,0,504,526,1,0,
        0,0,505,506,3,358,179,0,506,507,5,59,0,0,507,509,1,0,0,0,508,505,
        1,0,0,0,509,510,1,0,0,0,510,508,1,0,0,0,510,511,1,0,0,0,511,514,
        1,0,0,0,512,515,3,210,105,0,513,515,3,212,106,0,514,512,1,0,0,0,
        514,513,1,0,0,0,515,517,1,0,0,0,516,518,5,93,0,0,517,516,1,0,0,0,
        517,518,1,0,0,0,518,526,1,0,0,0,519,520,3,370,185,0,520,523,3,26,
        13,0,521,524,3,210,105,0,522,524,3,212,106,0,523,521,1,0,0,0,523,
        522,1,0,0,0,524,526,1,0,0,0,525,485,1,0,0,0,525,497,1,0,0,0,525,
        508,1,0,0,0,525,519,1,0,0,0,526,23,1,0,0,0,527,530,3,210,105,0,528,
        530,3,212,106,0,529,527,1,0,0,0,529,528,1,0,0,0,530,25,1,0,0,0,531,
        532,7,0,0,0,532,27,1,0,0,0,533,535,5,20,0,0,534,536,3,212,106,0,
        535,534,1,0,0,0,535,536,1,0,0,0,536,29,1,0,0,0,537,543,5,15,0,0,
        538,541,3,208,104,0,539,540,5,28,0,0,540,542,3,208,104,0,541,539,
        1,0,0,0,541,542,1,0,0,0,542,544,1,0,0,0,543,538,1,0,0,0,543,544,
        1,0,0,0,544,31,1,0,0,0,545,546,5,33,0,0,546,551,5,89,0,0,547,548,
        5,49,0,0,548,550,5,89,0,0,549,547,1,0,0,0,550,553,1,0,0,0,551,549,
        1,0,0,0,551,552,1,0,0,0,552,33,1,0,0,0,553,551,1,0,0,0,554,555,5,
        29,0,0,555,560,5,89,0,0,556,557,5,49,0,0,557,559,5,89,0,0,558,556,
        1,0,0,0,559,562,1,0,0,0,560,558,1,0,0,0,560,561,1,0,0,0,561,35,1,
        0,0,0,562,560,1,0,0,0,563,564,5,32,0,0,564,565,3,376,188,0,565,37,
        1,0,0,0,566,567,3,210,105,0,567,39,1,0,0,0,568,569,5,31,0,0,569,
        572,3,208,104,0,570,571,5,49,0,0,571,573,3,208,104,0,572,570,1,0,
        0,0,572,573,1,0,0,0,573,41,1,0,0,0,574,577,3,44,22,0,575,577,3,46,
        23,0,576,574,1,0,0,0,576,575,1,0,0,0,577,43,1,0,0,0,578,579,5,9,
        0,0,579,580,3,54,27,0,580,45,1,0,0,0,581,585,5,28,0,0,582,584,7,
        1,0,0,583,582,1,0,0,0,584,587,1,0,0,0,585,583,1,0,0,0,585,586,1,
        0,0,0,586,588,1,0,0,0,587,585,1,0,0,0,588,589,3,58,29,0,589,590,
        5,9,0,0,590,591,3,48,24,0,591,601,1,0,0,0,592,594,5,28,0,0,593,595,
        7,1,0,0,594,593,1,0,0,0,595,596,1,0,0,0,596,594,1,0,0,0,596,597,
        1,0,0,0,597,598,1,0,0,0,598,599,5,9,0,0,599,601,3,48,24,0,600,581,
        1,0,0,0,600,592,1,0,0,0,601,47,1,0,0,0,602,603,5,41,0,0,603,605,
        3,50,25,0,604,606,5,49,0,0,605,604,1,0,0,0,605,606,1,0,0,0,606,607,
        1,0,0,0,607,608,5,44,0,0,608,612,1,0,0,0,609,612,3,50,25,0,610,612,
        5,53,0,0,611,602,1,0,0,0,611,609,1,0,0,0,611,610,1,0,0,0,612,49,
        1,0,0,0,613,618,3,52,26,0,614,615,5,49,0,0,615,617,3,52,26,0,616,
        614,1,0,0,0,617,620,1,0,0,0,618,616,1,0,0,0,618,619,1,0,0,0,619,
        51,1,0,0,0,620,618,1,0,0,0,621,624,5,89,0,0,622,623,5,26,0,0,623,
        625,5,89,0,0,624,622,1,0,0,0,624,625,1,0,0,0,625,53,1,0,0,0,626,
        631,3,56,28,0,627,628,5,49,0,0,628,630,3,56,28,0,629,627,1,0,0,0,
        630,633,1,0,0,0,631,629,1,0,0,0,631,632,1,0,0,0,632,55,1,0,0,0,633,
        631,1,0,0,0,634,637,3,58,29,0,635,636,5,26,0,0,636,638,5,89,0,0,
        637,635,1,0,0,0,637,638,1,0,0,0,638,57,1,0,0,0,639,640,6,29,-1,0,
        640,641,5,89,0,0,641,647,1,0,0,0,642,643,10,2,0,0,643,644,5,47,0,
        0,644,646,5,89,0,0,645,642,1,0,0,0,646,649,1,0,0,0,647,645,1,0,0,
        0,647,648,1,0,0,0,648,59,1,0,0,0,649,647,1,0,0,0,650,651,5,92,0,
        0,651,652,5,1,0,0,652,653,3,10,5,0,653,654,5,2,0,0,654,657,1,0,0,
        0,655,657,3,16,8,0,656,650,1,0,0,0,656,655,1,0,0,0,657,61,1,0,0,
        0,658,659,5,83,0,0,659,660,3,222,111,0,660,661,5,92,0,0,661,663,
        1,0,0,0,662,658,1,0,0,0,663,664,1,0,0,0,664,662,1,0,0,0,664,665,
        1,0,0,0,665,63,1,0,0,0,666,667,3,62,31,0,667,668,3,66,33,0,668,671,
        1,0,0,0,669,671,3,66,33,0,670,666,1,0,0,0,670,669,1,0,0,0,671,65,
        1,0,0,0,672,673,5,17,0,0,673,675,5,89,0,0,674,676,3,198,99,0,675,
        674,1,0,0,0,675,676,1,0,0,0,676,682,1,0,0,0,677,679,5,41,0,0,678,
        680,3,346,173,0,679,678,1,0,0,0,679,680,1,0,0,0,680,681,1,0,0,0,
        681,683,5,44,0,0,682,677,1,0,0,0,682,683,1,0,0,0,683,684,1,0,0,0,
        684,685,5,48,0,0,685,686,3,60,30,0,686,67,1,0,0,0,687,688,3,62,31,
        0,688,689,3,70,35,0,689,692,1,0,0,0,690,692,3,70,35,0,691,687,1,
        0,0,0,691,690,1,0,0,0,692,69,1,0,0,0,693,694,5,27,0,0,694,696,5,
        89,0,0,695,697,3,198,99,0,696,695,1,0,0,0,696,697,1,0,0,0,697,698,
        1,0,0,0,698,700,5,41,0,0,699,701,3,72,36,0,700,699,1,0,0,0,700,701,
        1,0,0,0,701,702,1,0,0,0,702,705,5,44,0,0,703,704,5,85,0,0,704,706,
        3,208,104,0,705,703,1,0,0,0,705,706,1,0,0,0,706,707,1,0,0,0,707,
        709,5,48,0,0,708,710,3,384,192,0,709,708,1,0,0,0,709,710,1,0,0,0,
        710,711,1,0,0,0,711,733,3,60,30,0,712,713,5,36,0,0,713,714,5,27,
        0,0,714,716,5,89,0,0,715,717,3,198,99,0,716,715,1,0,0,0,716,717,
        1,0,0,0,717,718,1,0,0,0,718,720,5,41,0,0,719,721,3,72,36,0,720,719,
        1,0,0,0,720,721,1,0,0,0,721,722,1,0,0,0,722,725,5,44,0,0,723,724,
        5,85,0,0,724,726,3,208,104,0,725,723,1,0,0,0,725,726,1,0,0,0,726,
        727,1,0,0,0,727,729,5,48,0,0,728,730,3,384,192,0,729,728,1,0,0,0,
        729,730,1,0,0,0,730,731,1,0,0,0,731,733,3,60,30,0,732,693,1,0,0,
        0,732,712,1,0,0,0,733,71,1,0,0,0,734,735,3,74,37,0,735,73,1,0,0,
        0,736,740,3,76,38,0,737,739,3,84,42,0,738,737,1,0,0,0,739,742,1,
        0,0,0,740,738,1,0,0,0,740,741,1,0,0,0,741,746,1,0,0,0,742,740,1,
        0,0,0,743,745,3,88,44,0,744,743,1,0,0,0,745,748,1,0,0,0,746,744,
        1,0,0,0,746,747,1,0,0,0,747,750,1,0,0,0,748,746,1,0,0,0,749,751,
        3,80,40,0,750,749,1,0,0,0,750,751,1,0,0,0,751,786,1,0,0,0,752,756,
        3,78,39,0,753,755,3,88,44,0,754,753,1,0,0,0,755,758,1,0,0,0,756,
        754,1,0,0,0,756,757,1,0,0,0,757,760,1,0,0,0,758,756,1,0,0,0,759,
        761,3,80,40,0,760,759,1,0,0,0,760,761,1,0,0,0,761,786,1,0,0,0,762,
        764,3,84,42,0,763,762,1,0,0,0,764,765,1,0,0,0,765,763,1,0,0,0,765,
        766,1,0,0,0,766,770,1,0,0,0,767,769,3,88,44,0,768,767,1,0,0,0,769,
        772,1,0,0,0,770,768,1,0,0,0,770,771,1,0,0,0,771,774,1,0,0,0,772,
        770,1,0,0,0,773,775,3,80,40,0,774,773,1,0,0,0,774,775,1,0,0,0,775,
        786,1,0,0,0,776,778,3,88,44,0,777,776,1,0,0,0,778,779,1,0,0,0,779,
        777,1,0,0,0,779,780,1,0,0,0,780,782,1,0,0,0,781,783,3,80,40,0,782,
        781,1,0,0,0,782,783,1,0,0,0,783,786,1,0,0,0,784,786,3,80,40,0,785,
        736,1,0,0,0,785,752,1,0,0,0,785,763,1,0,0,0,785,777,1,0,0,0,785,
        784,1,0,0,0,786,75,1,0,0,0,787,789,3,84,42,0,788,787,1,0,0,0,789,
        790,1,0,0,0,790,788,1,0,0,0,790,791,1,0,0,0,791,792,1,0,0,0,792,
        794,5,54,0,0,793,795,5,49,0,0,794,793,1,0,0,0,794,795,1,0,0,0,795,
        77,1,0,0,0,796,798,3,84,42,0,797,796,1,0,0,0,798,801,1,0,0,0,799,
        797,1,0,0,0,799,800,1,0,0,0,800,803,1,0,0,0,801,799,1,0,0,0,802,
        804,3,88,44,0,803,802,1,0,0,0,804,805,1,0,0,0,805,803,1,0,0,0,805,
        806,1,0,0,0,806,807,1,0,0,0,807,809,5,54,0,0,808,810,5,49,0,0,809,
        808,1,0,0,0,809,810,1,0,0,0,810,79,1,0,0,0,811,812,5,53,0,0,812,
        816,3,84,42,0,813,815,3,90,45,0,814,813,1,0,0,0,815,818,1,0,0,0,
        816,814,1,0,0,0,816,817,1,0,0,0,817,820,1,0,0,0,818,816,1,0,0,0,
        819,821,3,82,41,0,820,819,1,0,0,0,820,821,1,0,0,0,821,845,1,0,0,
        0,822,823,5,53,0,0,823,827,3,86,43,0,824,826,3,90,45,0,825,824,1,
        0,0,0,826,829,1,0,0,0,827,825,1,0,0,0,827,828,1,0,0,0,828,831,1,
        0,0,0,829,827,1,0,0,0,830,832,3,82,41,0,831,830,1,0,0,0,831,832,
        1,0,0,0,832,845,1,0,0,0,833,834,5,53,0,0,834,836,5,49,0,0,835,837,
        3,90,45,0,836,835,1,0,0,0,837,838,1,0,0,0,838,836,1,0,0,0,838,839,
        1,0,0,0,839,841,1,0,0,0,840,842,3,82,41,0,841,840,1,0,0,0,841,842,
        1,0,0,0,842,845,1,0,0,0,843,845,3,82,41,0,844,811,1,0,0,0,844,822,
        1,0,0,0,844,833,1,0,0,0,844,843,1,0,0,0,845,81,1,0,0,0,846,847,5,
        69,0,0,847,848,3,84,42,0,848,83,1,0,0,0,849,851,3,92,46,0,850,852,
        5,49,0,0,851,850,1,0,0,0,851,852,1,0,0,0,852,854,1,0,0,0,853,855,
        5,93,0,0,854,853,1,0,0,0,854,855,1,0,0,0,855,85,1,0,0,0,856,858,
        3,94,47,0,857,859,5,49,0,0,858,857,1,0,0,0,858,859,1,0,0,0,859,861,
        1,0,0,0,860,862,5,93,0,0,861,860,1,0,0,0,861,862,1,0,0,0,862,87,
        1,0,0,0,863,864,3,92,46,0,864,866,3,100,50,0,865,867,5,49,0,0,866,
        865,1,0,0,0,866,867,1,0,0,0,867,869,1,0,0,0,868,870,5,93,0,0,869,
        868,1,0,0,0,869,870,1,0,0,0,870,89,1,0,0,0,871,873,3,92,46,0,872,
        874,3,100,50,0,873,872,1,0,0,0,873,874,1,0,0,0,874,876,1,0,0,0,875,
        877,5,49,0,0,876,875,1,0,0,0,876,877,1,0,0,0,877,879,1,0,0,0,878,
        880,5,93,0,0,879,878,1,0,0,0,879,880,1,0,0,0,880,91,1,0,0,0,881,
        883,5,89,0,0,882,884,3,96,48,0,883,882,1,0,0,0,883,884,1,0,0,0,884,
        93,1,0,0,0,885,886,5,89,0,0,886,887,3,98,49,0,887,95,1,0,0,0,888,
        889,5,48,0,0,889,890,3,208,104,0,890,97,1,0,0,0,891,892,5,48,0,0,
        892,893,3,214,107,0,893,99,1,0,0,0,894,895,5,59,0,0,895,896,3,208,
        104,0,896,101,1,0,0,0,897,898,5,38,0,0,898,899,3,222,111,0,899,900,
        5,48,0,0,900,905,3,60,30,0,901,906,3,104,52,0,902,904,3,106,53,0,
        903,902,1,0,0,0,903,904,1,0,0,0,904,906,1,0,0,0,905,901,1,0,0,0,
        905,903,1,0,0,0,906,103,1,0,0,0,907,908,5,37,0,0,908,909,3,222,111,
        0,909,910,5,48,0,0,910,915,3,60,30,0,911,916,3,104,52,0,912,914,
        3,106,53,0,913,912,1,0,0,0,913,914,1,0,0,0,914,916,1,0,0,0,915,911,
        1,0,0,0,915,913,1,0,0,0,916,105,1,0,0,0,917,918,5,8,0,0,918,919,
        5,48,0,0,919,920,3,60,30,0,920,107,1,0,0,0,921,922,5,30,0,0,922,
        923,3,222,111,0,923,924,5,48,0,0,924,926,3,60,30,0,925,927,3,106,
        53,0,926,925,1,0,0,0,926,927,1,0,0,0,927,109,1,0,0,0,928,930,5,36,
        0,0,929,928,1,0,0,0,929,930,1,0,0,0,930,931,1,0,0,0,931,932,5,23,
        0,0,932,933,3,358,179,0,933,934,5,14,0,0,934,935,3,212,106,0,935,
        937,5,48,0,0,936,938,5,93,0,0,937,936,1,0,0,0,937,938,1,0,0,0,938,
        939,1,0,0,0,939,941,3,60,30,0,940,942,3,106,53,0,941,940,1,0,0,0,
        941,942,1,0,0,0,942,111,1,0,0,0,943,945,5,36,0,0,944,943,1,0,0,0,
        944,945,1,0,0,0,945,946,1,0,0,0,946,974,5,35,0,0,947,948,5,41,0,
        0,948,953,3,114,57,0,949,950,5,49,0,0,950,952,3,114,57,0,951,949,
        1,0,0,0,952,955,1,0,0,0,953,951,1,0,0,0,953,954,1,0,0,0,954,957,
        1,0,0,0,955,953,1,0,0,0,956,958,5,49,0,0,957,956,1,0,0,0,957,958,
        1,0,0,0,958,959,1,0,0,0,959,960,5,44,0,0,960,961,5,48,0,0,961,975,
        1,0,0,0,962,967,3,114,57,0,963,964,5,49,0,0,964,966,3,114,57,0,965,
        963,1,0,0,0,966,969,1,0,0,0,967,965,1,0,0,0,967,968,1,0,0,0,968,
        970,1,0,0,0,969,967,1,0,0,0,970,972,5,48,0,0,971,973,5,93,0,0,972,
        971,1,0,0,0,972,973,1,0,0,0,973,975,1,0,0,0,974,947,1,0,0,0,974,
        962,1,0,0,0,975,976,1,0,0,0,976,977,3,60,30,0,977,113,1,0,0,0,978,
        981,3,208,104,0,979,980,5,26,0,0,980,982,3,364,182,0,981,979,1,0,
        0,0,981,982,1,0,0,0,982,115,1,0,0,0,983,984,5,25,0,0,984,985,5,48,
        0,0,985,986,3,60,30,0,986,987,3,122,61,0,987,1017,1,0,0,0,988,989,
        5,25,0,0,989,990,5,48,0,0,990,992,3,60,30,0,991,993,3,118,59,0,992,
        991,1,0,0,0,993,994,1,0,0,0,994,992,1,0,0,0,994,995,1,0,0,0,995,
        997,1,0,0,0,996,998,3,106,53,0,997,996,1,0,0,0,997,998,1,0,0,0,998,
        1000,1,0,0,0,999,1001,3,122,61,0,1000,999,1,0,0,0,1000,1001,1,0,
        0,0,1001,1017,1,0,0,0,1002,1003,5,25,0,0,1003,1004,5,48,0,0,1004,
        1006,3,60,30,0,1005,1007,3,120,60,0,1006,1005,1,0,0,0,1007,1008,
        1,0,0,0,1008,1006,1,0,0,0,1008,1009,1,0,0,0,1009,1011,1,0,0,0,1010,
        1012,3,106,53,0,1011,1010,1,0,0,0,1011,1012,1,0,0,0,1012,1014,1,
        0,0,0,1013,1015,3,122,61,0,1014,1013,1,0,0,0,1014,1015,1,0,0,0,1015,
        1017,1,0,0,0,1016,983,1,0,0,0,1016,988,1,0,0,0,1016,1002,1,0,0,0,
        1017,117,1,0,0,0,1018,1024,5,13,0,0,1019,1022,3,208,104,0,1020,1021,
        5,26,0,0,1021,1023,5,89,0,0,1022,1020,1,0,0,0,1022,1023,1,0,0,0,
        1023,1025,1,0,0,0,1024,1019,1,0,0,0,1024,1025,1,0,0,0,1025,1026,
        1,0,0,0,1026,1027,5,48,0,0,1027,1028,3,60,30,0,1028,119,1,0,0,0,
        1029,1030,5,13,0,0,1030,1031,5,53,0,0,1031,1034,3,208,104,0,1032,
        1033,5,26,0,0,1033,1035,5,89,0,0,1034,1032,1,0,0,0,1034,1035,1,0,
        0,0,1035,1036,1,0,0,0,1036,1037,5,48,0,0,1037,1038,3,60,30,0,1038,
        121,1,0,0,0,1039,1040,5,18,0,0,1040,1041,5,48,0,0,1041,1042,3,60,
        30,0,1042,123,1,0,0,0,1043,1044,3,388,194,0,1044,1045,3,126,63,0,
        1045,1046,5,48,0,0,1046,1047,5,92,0,0,1047,1049,5,1,0,0,1048,1050,
        3,128,64,0,1049,1048,1,0,0,0,1050,1051,1,0,0,0,1051,1049,1,0,0,0,
        1051,1052,1,0,0,0,1052,1053,1,0,0,0,1053,1054,5,2,0,0,1054,125,1,
        0,0,0,1055,1056,3,218,109,0,1056,1058,5,49,0,0,1057,1059,3,216,108,
        0,1058,1057,1,0,0,0,1058,1059,1,0,0,0,1059,1062,1,0,0,0,1060,1062,
        3,222,111,0,1061,1055,1,0,0,0,1061,1060,1,0,0,0,1062,127,1,0,0,0,
        1063,1064,3,390,195,0,1064,1066,3,132,66,0,1065,1067,3,130,65,0,
        1066,1065,1,0,0,0,1066,1067,1,0,0,0,1067,1068,1,0,0,0,1068,1069,
        5,48,0,0,1069,1070,3,60,30,0,1070,129,1,0,0,0,1071,1072,5,38,0,0,
        1072,1073,3,222,111,0,1073,131,1,0,0,0,1074,1077,3,172,86,0,1075,
        1077,3,134,67,0,1076,1074,1,0,0,0,1076,1075,1,0,0,0,1077,133,1,0,
        0,0,1078,1081,3,136,68,0,1079,1081,3,138,69,0,1080,1078,1,0,0,0,
        1080,1079,1,0,0,0,1081,135,1,0,0,0,1082,1083,3,138,69,0,1083,1084,
        5,26,0,0,1084,1085,3,158,79,0,1085,137,1,0,0,0,1086,1091,3,140,70,
        0,1087,1088,5,55,0,0,1088,1090,3,140,70,0,1089,1087,1,0,0,0,1090,
        1093,1,0,0,0,1091,1089,1,0,0,0,1091,1092,1,0,0,0,1092,139,1,0,0,
        0,1093,1091,1,0,0,0,1094,1103,3,142,71,0,1095,1103,3,156,78,0,1096,
        1103,3,160,80,0,1097,1103,3,162,81,0,1098,1103,3,168,84,0,1099,1103,
        3,170,85,0,1100,1103,3,180,90,0,1101,1103,3,188,94,0,1102,1094,1,
        0,0,0,1102,1095,1,0,0,0,1102,1096,1,0,0,0,1102,1097,1,0,0,0,1102,
        1098,1,0,0,0,1102,1099,1,0,0,0,1102,1100,1,0,0,0,1102,1101,1,0,0,
        0,1103,141,1,0,0,0,1104,1111,3,148,74,0,1105,1111,3,146,73,0,1106,
        1111,3,318,159,0,1107,1111,5,11,0,0,1108,1111,5,16,0,0,1109,1111,
        5,6,0,0,1110,1104,1,0,0,0,1110,1105,1,0,0,0,1110,1106,1,0,0,0,1110,
        1107,1,0,0,0,1110,1108,1,0,0,0,1110,1109,1,0,0,0,1111,143,1,0,0,
        0,1112,1119,3,148,74,0,1113,1119,3,146,73,0,1114,1119,3,318,159,
        0,1115,1119,5,11,0,0,1116,1119,5,16,0,0,1117,1119,5,6,0,0,1118,1112,
        1,0,0,0,1118,1113,1,0,0,0,1118,1114,1,0,0,0,1118,1115,1,0,0,0,1118,
        1116,1,0,0,0,1118,1117,1,0,0,0,1119,145,1,0,0,0,1120,1121,3,150,
        75,0,1121,1122,7,2,0,0,1122,1123,3,154,77,0,1123,147,1,0,0,0,1124,
        1126,5,52,0,0,1125,1124,1,0,0,0,1125,1126,1,0,0,0,1126,1127,1,0,
        0,0,1127,1128,5,90,0,0,1128,149,1,0,0,0,1129,1131,5,52,0,0,1130,
        1129,1,0,0,0,1130,1131,1,0,0,0,1131,1132,1,0,0,0,1132,1133,3,152,
        76,0,1133,151,1,0,0,0,1134,1135,5,90,0,0,1135,153,1,0,0,0,1136,1137,
        5,90,0,0,1137,155,1,0,0,0,1138,1139,3,158,79,0,1139,157,1,0,0,0,
        1140,1141,3,394,197,0,1141,159,1,0,0,0,1142,1143,3,392,196,0,1143,
        161,1,0,0,0,1144,1145,3,164,82,0,1145,163,1,0,0,0,1146,1149,5,89,
        0,0,1147,1148,5,47,0,0,1148,1150,5,89,0,0,1149,1147,1,0,0,0,1150,
        1151,1,0,0,0,1151,1149,1,0,0,0,1151,1152,1,0,0,0,1152,165,1,0,0,
        0,1153,1158,5,89,0,0,1154,1155,5,47,0,0,1155,1157,5,89,0,0,1156,
        1154,1,0,0,0,1157,1160,1,0,0,0,1158,1156,1,0,0,0,1158,1159,1,0,0,
        0,1159,167,1,0,0,0,1160,1158,1,0,0,0,1161,1162,5,41,0,0,1162,1163,
        3,134,67,0,1163,1164,5,44,0,0,1164,169,1,0,0,0,1165,1167,5,42,0,
        0,1166,1168,3,174,87,0,1167,1166,1,0,0,0,1167,1168,1,0,0,0,1168,
        1169,1,0,0,0,1169,1176,5,45,0,0,1170,1172,5,41,0,0,1171,1173,3,172,
        86,0,1172,1171,1,0,0,0,1172,1173,1,0,0,0,1173,1174,1,0,0,0,1174,
        1176,5,44,0,0,1175,1165,1,0,0,0,1175,1170,1,0,0,0,1176,171,1,0,0,
        0,1177,1178,3,176,88,0,1178,1180,5,49,0,0,1179,1181,3,174,87,0,1180,
        1179,1,0,0,0,1180,1181,1,0,0,0,1181,173,1,0,0,0,1182,1187,3,176,
        88,0,1183,1184,5,49,0,0,1184,1186,3,176,88,0,1185,1183,1,0,0,0,1186,
        1189,1,0,0,0,1187,1185,1,0,0,0,1187,1188,1,0,0,0,1188,1191,1,0,0,
        0,1189,1187,1,0,0,0,1190,1192,5,49,0,0,1191,1190,1,0,0,0,1191,1192,
        1,0,0,0,1192,175,1,0,0,0,1193,1196,3,178,89,0,1194,1196,3,134,67,
        0,1195,1193,1,0,0,0,1195,1194,1,0,0,0,1196,177,1,0,0,0,1197,1198,
        5,53,0,0,1198,1202,3,158,79,0,1199,1200,5,53,0,0,1200,1202,3,160,
        80,0,1201,1197,1,0,0,0,1201,1199,1,0,0,0,1202,179,1,0,0,0,1203,1204,
        5,43,0,0,1204,1224,5,46,0,0,1205,1206,5,43,0,0,1206,1208,3,186,93,
        0,1207,1209,5,49,0,0,1208,1207,1,0,0,0,1208,1209,1,0,0,0,1209,1210,
        1,0,0,0,1210,1211,5,46,0,0,1211,1224,1,0,0,0,1212,1213,5,43,0,0,
        1213,1216,3,182,91,0,1214,1215,5,49,0,0,1215,1217,3,186,93,0,1216,
        1214,1,0,0,0,1216,1217,1,0,0,0,1217,1219,1,0,0,0,1218,1220,5,49,
        0,0,1219,1218,1,0,0,0,1219,1220,1,0,0,0,1220,1221,1,0,0,0,1221,1222,
        5,46,0,0,1222,1224,1,0,0,0,1223,1203,1,0,0,0,1223,1205,1,0,0,0,1223,
        1212,1,0,0,0,1224,181,1,0,0,0,1225,1230,3,184,92,0,1226,1227,5,49,
        0,0,1227,1229,3,184,92,0,1228,1226,1,0,0,0,1229,1232,1,0,0,0,1230,
        1228,1,0,0,0,1230,1231,1,0,0,0,1231,183,1,0,0,0,1232,1230,1,0,0,
        0,1233,1236,3,144,72,0,1234,1236,3,164,82,0,1235,1233,1,0,0,0,1235,
        1234,1,0,0,0,1236,1237,1,0,0,0,1237,1238,5,48,0,0,1238,1239,3,134,
        67,0,1239,185,1,0,0,0,1240,1241,5,69,0,0,1241,1242,3,158,79,0,1242,
        187,1,0,0,0,1243,1244,3,166,83,0,1244,1256,5,41,0,0,1245,1248,3,
        190,95,0,1246,1247,5,49,0,0,1247,1249,3,192,96,0,1248,1246,1,0,0,
        0,1248,1249,1,0,0,0,1249,1252,1,0,0,0,1250,1252,3,192,96,0,1251,
        1245,1,0,0,0,1251,1250,1,0,0,0,1252,1254,1,0,0,0,1253,1255,5,49,
        0,0,1254,1253,1,0,0,0,1254,1255,1,0,0,0,1255,1257,1,0,0,0,1256,1251,
        1,0,0,0,1256,1257,1,0,0,0,1257,1258,1,0,0,0,1258,1259,5,44,0,0,1259,
        189,1,0,0,0,1260,1265,3,134,67,0,1261,1262,5,49,0,0,1262,1264,3,
        134,67,0,1263,1261,1,0,0,0,1264,1267,1,0,0,0,1265,1263,1,0,0,0,1265,
        1266,1,0,0,0,1266,191,1,0,0,0,1267,1265,1,0,0,0,1268,1273,3,194,
        97,0,1269,1270,5,49,0,0,1270,1272,3,194,97,0,1271,1269,1,0,0,0,1272,
        1275,1,0,0,0,1273,1271,1,0,0,0,1273,1274,1,0,0,0,1274,193,1,0,0,
        0,1275,1273,1,0,0,0,1276,1277,5,89,0,0,1277,1278,5,59,0,0,1278,1279,
        3,134,67,0,1279,195,1,0,0,0,1280,1281,3,386,193,0,1281,1283,5,89,
        0,0,1282,1284,3,198,99,0,1283,1282,1,0,0,0,1283,1284,1,0,0,0,1284,
        1285,1,0,0,0,1285,1286,5,59,0,0,1286,1287,3,208,104,0,1287,197,1,
        0,0,0,1288,1289,5,42,0,0,1289,1290,3,200,100,0,1290,1291,5,45,0,
        0,1291,199,1,0,0,0,1292,1297,3,202,101,0,1293,1294,5,49,0,0,1294,
        1296,3,202,101,0,1295,1293,1,0,0,0,1296,1299,1,0,0,0,1297,1295,1,
        0,0,0,1297,1298,1,0,0,0,1298,1301,1,0,0,0,1299,1297,1,0,0,0,1300,
        1302,5,49,0,0,1301,1300,1,0,0,0,1301,1302,1,0,0,0,1302,201,1,0,0,
        0,1303,1305,5,89,0,0,1304,1306,3,204,102,0,1305,1304,1,0,0,0,1305,
        1306,1,0,0,0,1306,1320,1,0,0,0,1307,1308,5,53,0,0,1308,1311,5,89,
        0,0,1309,1310,5,48,0,0,1310,1312,3,208,104,0,1311,1309,1,0,0,0,1311,
        1312,1,0,0,0,1312,1320,1,0,0,0,1313,1314,5,69,0,0,1314,1317,5,89,
        0,0,1315,1316,5,48,0,0,1316,1318,3,208,104,0,1317,1315,1,0,0,0,1317,
        1318,1,0,0,0,1318,1320,1,0,0,0,1319,1303,1,0,0,0,1319,1307,1,0,0,
        0,1319,1313,1,0,0,0,1320,203,1,0,0,0,1321,1322,5,48,0,0,1322,1323,
        3,208,104,0,1323,205,1,0,0,0,1324,1329,3,208,104,0,1325,1326,5,49,
        0,0,1326,1328,3,208,104,0,1327,1325,1,0,0,0,1328,1331,1,0,0,0,1329,
        1327,1,0,0,0,1329,1330,1,0,0,0,1330,1333,1,0,0,0,1331,1329,1,0,0,
        0,1332,1334,5,49,0,0,1333,1332,1,0,0,0,1333,1334,1,0,0,0,1334,207,
        1,0,0,0,1335,1341,3,224,112,0,1336,1337,5,38,0,0,1337,1338,3,224,
        112,0,1338,1339,5,8,0,0,1339,1340,3,208,104,0,1340,1342,1,0,0,0,
        1341,1336,1,0,0,0,1341,1342,1,0,0,0,1342,1345,1,0,0,0,1343,1345,
        3,282,141,0,1344,1335,1,0,0,0,1344,1343,1,0,0,0,1345,209,1,0,0,0,
        1346,1352,5,40,0,0,1347,1348,5,28,0,0,1348,1353,3,208,104,0,1349,
        1351,3,212,106,0,1350,1349,1,0,0,0,1350,1351,1,0,0,0,1351,1353,1,
        0,0,0,1352,1347,1,0,0,0,1352,1350,1,0,0,0,1353,211,1,0,0,0,1354,
        1359,3,214,107,0,1355,1356,5,49,0,0,1356,1358,3,214,107,0,1357,1355,
        1,0,0,0,1358,1361,1,0,0,0,1359,1357,1,0,0,0,1359,1360,1,0,0,0,1360,
        1363,1,0,0,0,1361,1359,1,0,0,0,1362,1364,5,49,0,0,1363,1362,1,0,
        0,0,1363,1364,1,0,0,0,1364,213,1,0,0,0,1365,1366,5,53,0,0,1366,1369,
        3,254,127,0,1367,1369,3,208,104,0,1368,1365,1,0,0,0,1368,1367,1,
        0,0,0,1369,215,1,0,0,0,1370,1375,3,218,109,0,1371,1372,5,49,0,0,
        1372,1374,3,218,109,0,1373,1371,1,0,0,0,1374,1377,1,0,0,0,1375,1373,
        1,0,0,0,1375,1376,1,0,0,0,1376,1379,1,0,0,0,1377,1375,1,0,0,0,1378,
        1380,5,49,0,0,1379,1378,1,0,0,0,1379,1380,1,0,0,0,1380,217,1,0,0,
        0,1381,1382,5,53,0,0,1382,1385,3,254,127,0,1383,1385,3,222,111,0,
        1384,1381,1,0,0,0,1384,1383,1,0,0,0,1385,219,1,0,0,0,1386,1387,5,
        89,0,0,1387,1388,5,87,0,0,1388,1389,3,208,104,0,1389,221,1,0,0,0,
        1390,1393,3,220,110,0,1391,1393,3,208,104,0,1392,1390,1,0,0,0,1392,
        1391,1,0,0,0,1393,223,1,0,0,0,1394,1399,3,226,113,0,1395,1396,5,
        39,0,0,1396,1398,3,226,113,0,1397,1395,1,0,0,0,1398,1401,1,0,0,0,
        1399,1397,1,0,0,0,1399,1400,1,0,0,0,1400,225,1,0,0,0,1401,1399,1,
        0,0,0,1402,1407,3,228,114,0,1403,1404,5,21,0,0,1404,1406,3,228,114,
        0,1405,1403,1,0,0,0,1406,1409,1,0,0,0,1407,1405,1,0,0,0,1407,1408,
        1,0,0,0,1408,227,1,0,0,0,1409,1407,1,0,0,0,1410,1411,5,34,0,0,1411,
        1414,3,228,114,0,1412,1414,3,230,115,0,1413,1410,1,0,0,0,1413,1412,
        1,0,0,0,1414,229,1,0,0,0,1415,1419,3,254,127,0,1416,1418,3,232,116,
        0,1417,1416,1,0,0,0,1418,1421,1,0,0,0,1419,1417,1,0,0,0,1419,1420,
        1,0,0,0,1420,231,1,0,0,0,1421,1419,1,0,0,0,1422,1433,3,234,117,0,
        1423,1433,3,236,118,0,1424,1433,3,238,119,0,1425,1433,3,240,120,
        0,1426,1433,3,242,121,0,1427,1433,3,244,122,0,1428,1433,3,246,123,
        0,1429,1433,3,248,124,0,1430,1433,3,250,125,0,1431,1433,3,252,126,
        0,1432,1422,1,0,0,0,1432,1423,1,0,0,0,1432,1424,1,0,0,0,1432,1425,
        1,0,0,0,1432,1426,1,0,0,0,1432,1427,1,0,0,0,1432,1428,1,0,0,0,1432,
        1429,1,0,0,0,1432,1430,1,0,0,0,1432,1431,1,0,0,0,1433,233,1,0,0,
        0,1434,1435,5,61,0,0,1435,1436,3,254,127,0,1436,235,1,0,0,0,1437,
        1438,5,62,0,0,1438,1439,3,254,127,0,1439,237,1,0,0,0,1440,1441,5,
        63,0,0,1441,1442,3,254,127,0,1442,239,1,0,0,0,1443,1444,5,57,0,0,
        1444,1445,3,254,127,0,1445,241,1,0,0,0,1446,1447,5,64,0,0,1447,1448,
        3,254,127,0,1448,243,1,0,0,0,1449,1450,5,58,0,0,1450,1451,3,254,
        127,0,1451,245,1,0,0,0,1452,1453,5,34,0,0,1453,1454,5,14,0,0,1454,
        1455,3,254,127,0,1455,247,1,0,0,0,1456,1457,5,14,0,0,1457,1458,3,
        254,127,0,1458,249,1,0,0,0,1459,1460,5,19,0,0,1460,1461,5,34,0,0,
        1461,1462,3,254,127,0,1462,251,1,0,0,0,1463,1464,5,19,0,0,1464,1465,
        3,254,127,0,1465,253,1,0,0,0,1466,1467,6,127,-1,0,1467,1468,3,256,
        128,0,1468,1474,1,0,0,0,1469,1470,10,2,0,0,1470,1471,5,55,0,0,1471,
        1473,3,256,128,0,1472,1469,1,0,0,0,1473,1476,1,0,0,0,1474,1472,1,
        0,0,0,1474,1475,1,0,0,0,1475,255,1,0,0,0,1476,1474,1,0,0,0,1477,
        1478,6,128,-1,0,1478,1479,3,258,129,0,1479,1485,1,0,0,0,1480,1481,
        10,2,0,0,1481,1482,5,66,0,0,1482,1484,3,258,129,0,1483,1480,1,0,
        0,0,1484,1487,1,0,0,0,1485,1483,1,0,0,0,1485,1486,1,0,0,0,1486,257,
        1,0,0,0,1487,1485,1,0,0,0,1488,1489,6,129,-1,0,1489,1490,3,260,130,
        0,1490,1496,1,0,0,0,1491,1492,10,2,0,0,1492,1493,5,56,0,0,1493,1495,
        3,260,130,0,1494,1491,1,0,0,0,1495,1498,1,0,0,0,1496,1494,1,0,0,
        0,1496,1497,1,0,0,0,1497,259,1,0,0,0,1498,1496,1,0,0,0,1499,1500,
        6,130,-1,0,1500,1501,3,262,131,0,1501,1507,1,0,0,0,1502,1503,10,
        2,0,0,1503,1504,7,3,0,0,1504,1506,3,262,131,0,1505,1502,1,0,0,0,
        1506,1509,1,0,0,0,1507,1505,1,0,0,0,1507,1508,1,0,0,0,1508,261,1,
        0,0,0,1509,1507,1,0,0,0,1510,1511,6,131,-1,0,1511,1512,3,264,132,
        0,1512,1518,1,0,0,0,1513,1514,10,2,0,0,1514,1515,7,2,0,0,1515,1517,
        3,264,132,0,1516,1513,1,0,0,0,1517,1520,1,0,0,0,1518,1516,1,0,0,
        0,1518,1519,1,0,0,0,1519,263,1,0,0,0,1520,1518,1,0,0,0,1521,1522,
        6,132,-1,0,1522,1523,3,266,133,0,1523,1529,1,0,0,0,1524,1525,10,
        2,0,0,1525,1526,7,4,0,0,1526,1528,3,266,133,0,1527,1524,1,0,0,0,
        1528,1531,1,0,0,0,1529,1527,1,0,0,0,1529,1530,1,0,0,0,1530,265,1,
        0,0,0,1531,1529,1,0,0,0,1532,1533,5,51,0,0,1533,1540,3,266,133,0,
        1534,1535,5,52,0,0,1535,1540,3,266,133,0,1536,1537,5,65,0,0,1537,
        1540,3,266,133,0,1538,1540,3,268,134,0,1539,1532,1,0,0,0,1539,1534,
        1,0,0,0,1539,1536,1,0,0,0,1539,1538,1,0,0,0,1540,267,1,0,0,0,1541,
        1544,3,270,135,0,1542,1543,5,69,0,0,1543,1545,3,266,133,0,1544,1542,
        1,0,0,0,1544,1545,1,0,0,0,1545,269,1,0,0,0,1546,1547,5,7,0,0,1547,
        1550,3,272,136,0,1548,1550,3,272,136,0,1549,1546,1,0,0,0,1549,1548,
        1,0,0,0,1550,271,1,0,0,0,1551,1552,6,136,-1,0,1552,1553,3,278,139,
        0,1553,1571,1,0,0,0,1554,1567,10,2,0,0,1555,1556,5,47,0,0,1556,1568,
        5,89,0,0,1557,1568,3,342,171,0,1558,1560,5,41,0,0,1559,1561,3,346,
        173,0,1560,1559,1,0,0,0,1560,1561,1,0,0,0,1561,1562,1,0,0,0,1562,
        1568,5,44,0,0,1563,1564,5,42,0,0,1564,1565,3,274,137,0,1565,1566,
        5,45,0,0,1566,1568,1,0,0,0,1567,1555,1,0,0,0,1567,1557,1,0,0,0,1567,
        1558,1,0,0,0,1567,1563,1,0,0,0,1568,1570,1,0,0,0,1569,1554,1,0,0,
        0,1570,1573,1,0,0,0,1571,1569,1,0,0,0,1571,1572,1,0,0,0,1572,273,
        1,0,0,0,1573,1571,1,0,0,0,1574,1593,3,276,138,0,1575,1578,3,276,
        138,0,1576,1578,3,352,176,0,1577,1575,1,0,0,0,1577,1576,1,0,0,0,
        1578,1586,1,0,0,0,1579,1582,5,49,0,0,1580,1583,3,276,138,0,1581,
        1583,3,352,176,0,1582,1580,1,0,0,0,1582,1581,1,0,0,0,1583,1585,1,
        0,0,0,1584,1579,1,0,0,0,1585,1588,1,0,0,0,1586,1584,1,0,0,0,1586,
        1587,1,0,0,0,1587,1590,1,0,0,0,1588,1586,1,0,0,0,1589,1591,5,49,
        0,0,1590,1589,1,0,0,0,1590,1591,1,0,0,0,1591,1593,1,0,0,0,1592,1574,
        1,0,0,0,1592,1577,1,0,0,0,1593,275,1,0,0,0,1594,1596,3,208,104,0,
        1595,1594,1,0,0,0,1595,1596,1,0,0,0,1596,1597,1,0,0,0,1597,1599,
        5,48,0,0,1598,1600,3,208,104,0,1599,1598,1,0,0,0,1599,1600,1,0,0,
        0,1600,1605,1,0,0,0,1601,1603,5,48,0,0,1602,1604,3,208,104,0,1603,
        1602,1,0,0,0,1603,1604,1,0,0,0,1604,1606,1,0,0,0,1605,1601,1,0,0,
        0,1605,1606,1,0,0,0,1606,1609,1,0,0,0,1607,1609,3,222,111,0,1608,
        1595,1,0,0,0,1608,1607,1,0,0,0,1609,277,1,0,0,0,1610,1633,5,89,0,
        0,1611,1633,5,16,0,0,1612,1633,5,6,0,0,1613,1633,5,11,0,0,1614,1633,
        3,318,159,0,1615,1633,5,90,0,0,1616,1620,3,322,161,0,1617,1620,3,
        280,140,0,1618,1620,3,342,171,0,1619,1616,1,0,0,0,1619,1617,1,0,
        0,0,1619,1618,1,0,0,0,1620,1633,1,0,0,0,1621,1624,3,320,160,0,1622,
        1624,3,338,169,0,1623,1621,1,0,0,0,1623,1622,1,0,0,0,1624,1633,1,
        0,0,0,1625,1630,3,326,163,0,1626,1630,3,324,162,0,1627,1630,3,344,
        172,0,1628,1630,3,340,170,0,1629,1625,1,0,0,0,1629,1626,1,0,0,0,
        1629,1627,1,0,0,0,1629,1628,1,0,0,0,1630,1633,1,0,0,0,1631,1633,
        5,86,0,0,1632,1610,1,0,0,0,1632,1611,1,0,0,0,1632,1612,1,0,0,0,1632,
        1613,1,0,0,0,1632,1614,1,0,0,0,1632,1615,1,0,0,0,1632,1619,1,0,0,
        0,1632,1623,1,0,0,0,1632,1629,1,0,0,0,1632,1631,1,0,0,0,1633,279,
        1,0,0,0,1634,1637,5,41,0,0,1635,1638,3,210,105,0,1636,1638,3,222,
        111,0,1637,1635,1,0,0,0,1637,1636,1,0,0,0,1638,1639,1,0,0,0,1639,
        1640,5,44,0,0,1640,281,1,0,0,0,1641,1643,5,24,0,0,1642,1644,3,284,
        142,0,1643,1642,1,0,0,0,1643,1644,1,0,0,0,1644,1645,1,0,0,0,1645,
        1646,5,48,0,0,1646,1647,3,208,104,0,1647,283,1,0,0,0,1648,1649,3,
        286,143,0,1649,285,1,0,0,0,1650,1654,3,288,144,0,1651,1653,3,296,
        148,0,1652,1651,1,0,0,0,1653,1656,1,0,0,0,1654,1652,1,0,0,0,1654,
        1655,1,0,0,0,1655,1660,1,0,0,0,1656,1654,1,0,0,0,1657,1659,3,298,
        149,0,1658,1657,1,0,0,0,1659,1662,1,0,0,0,1660,1658,1,0,0,0,1660,
        1661,1,0,0,0,1661,1664,1,0,0,0,1662,1660,1,0,0,0,1663,1665,3,292,
        146,0,1664,1663,1,0,0,0,1664,1665,1,0,0,0,1665,1700,1,0,0,0,1666,
        1670,3,290,145,0,1667,1669,3,298,149,0,1668,1667,1,0,0,0,1669,1672,
        1,0,0,0,1670,1668,1,0,0,0,1670,1671,1,0,0,0,1671,1674,1,0,0,0,1672,
        1670,1,0,0,0,1673,1675,3,292,146,0,1674,1673,1,0,0,0,1674,1675,1,
        0,0,0,1675,1700,1,0,0,0,1676,1678,3,296,148,0,1677,1676,1,0,0,0,
        1678,1679,1,0,0,0,1679,1677,1,0,0,0,1679,1680,1,0,0,0,1680,1684,
        1,0,0,0,1681,1683,3,298,149,0,1682,1681,1,0,0,0,1683,1686,1,0,0,
        0,1684,1682,1,0,0,0,1684,1685,1,0,0,0,1685,1688,1,0,0,0,1686,1684,
        1,0,0,0,1687,1689,3,292,146,0,1688,1687,1,0,0,0,1688,1689,1,0,0,
        0,1689,1700,1,0,0,0,1690,1692,3,298,149,0,1691,1690,1,0,0,0,1692,
        1693,1,0,0,0,1693,1691,1,0,0,0,1693,1694,1,0,0,0,1694,1696,1,0,0,
        0,1695,1697,3,292,146,0,1696,1695,1,0,0,0,1696,1697,1,0,0,0,1697,
        1700,1,0,0,0,1698,1700,3,292,146,0,1699,1650,1,0,0,0,1699,1666,1,
        0,0,0,1699,1677,1,0,0,0,1699,1691,1,0,0,0,1699,1698,1,0,0,0,1700,
        287,1,0,0,0,1701,1703,3,296,148,0,1702,1701,1,0,0,0,1703,1704,1,
        0,0,0,1704,1702,1,0,0,0,1704,1705,1,0,0,0,1705,1706,1,0,0,0,1706,
        1708,5,54,0,0,1707,1709,5,49,0,0,1708,1707,1,0,0,0,1708,1709,1,0,
        0,0,1709,289,1,0,0,0,1710,1712,3,296,148,0,1711,1710,1,0,0,0,1712,
        1715,1,0,0,0,1713,1711,1,0,0,0,1713,1714,1,0,0,0,1714,1717,1,0,0,
        0,1715,1713,1,0,0,0,1716,1718,3,298,149,0,1717,1716,1,0,0,0,1718,
        1719,1,0,0,0,1719,1717,1,0,0,0,1719,1720,1,0,0,0,1720,1721,1,0,0,
        0,1721,1723,5,54,0,0,1722,1724,5,49,0,0,1723,1722,1,0,0,0,1723,1724,
        1,0,0,0,1724,291,1,0,0,0,1725,1726,5,53,0,0,1726,1730,3,296,148,
        0,1727,1729,3,300,150,0,1728,1727,1,0,0,0,1729,1732,1,0,0,0,1730,
        1728,1,0,0,0,1730,1731,1,0,0,0,1731,1734,1,0,0,0,1732,1730,1,0,0,
        0,1733,1735,3,294,147,0,1734,1733,1,0,0,0,1734,1735,1,0,0,0,1735,
        1748,1,0,0,0,1736,1737,5,53,0,0,1737,1739,5,49,0,0,1738,1740,3,300,
        150,0,1739,1738,1,0,0,0,1740,1741,1,0,0,0,1741,1739,1,0,0,0,1741,
        1742,1,0,0,0,1742,1744,1,0,0,0,1743,1745,3,294,147,0,1744,1743,1,
        0,0,0,1744,1745,1,0,0,0,1745,1748,1,0,0,0,1746,1748,3,294,147,0,
        1747,1725,1,0,0,0,1747,1736,1,0,0,0,1747,1746,1,0,0,0,1748,293,1,
        0,0,0,1749,1750,5,69,0,0,1750,1751,3,296,148,0,1751,295,1,0,0,0,
        1752,1754,3,302,151,0,1753,1755,5,49,0,0,1754,1753,1,0,0,0,1754,
        1755,1,0,0,0,1755,297,1,0,0,0,1756,1757,3,302,151,0,1757,1759,3,
        100,50,0,1758,1760,5,49,0,0,1759,1758,1,0,0,0,1759,1760,1,0,0,0,
        1760,299,1,0,0,0,1761,1763,3,302,151,0,1762,1764,3,100,50,0,1763,
        1762,1,0,0,0,1763,1764,1,0,0,0,1764,1766,1,0,0,0,1765,1767,5,49,
        0,0,1766,1765,1,0,0,0,1766,1767,1,0,0,0,1767,301,1,0,0,0,1768,1769,
        5,89,0,0,1769,303,1,0,0,0,1770,1773,3,306,153,0,1771,1773,5,4,0,
        0,1772,1770,1,0,0,0,1772,1771,1,0,0,0,1773,305,1,0,0,0,1774,1777,
        5,43,0,0,1775,1778,3,210,105,0,1776,1778,3,212,106,0,1777,1775,1,
        0,0,0,1777,1776,1,0,0,0,1778,1780,1,0,0,0,1779,1781,5,59,0,0,1780,
        1779,1,0,0,0,1780,1781,1,0,0,0,1781,1783,1,0,0,0,1782,1784,3,308,
        154,0,1783,1782,1,0,0,0,1783,1784,1,0,0,0,1784,1786,1,0,0,0,1785,
        1787,3,310,155,0,1786,1785,1,0,0,0,1786,1787,1,0,0,0,1787,1788,1,
        0,0,0,1788,1789,5,46,0,0,1789,307,1,0,0,0,1790,1791,5,88,0,0,1791,
        1792,5,89,0,0,1792,309,1,0,0,0,1793,1797,5,48,0,0,1794,1796,3,312,
        156,0,1795,1794,1,0,0,0,1796,1799,1,0,0,0,1797,1795,1,0,0,0,1797,
        1798,1,0,0,0,1798,311,1,0,0,0,1799,1797,1,0,0,0,1800,1803,5,4,0,
        0,1801,1803,3,306,153,0,1802,1800,1,0,0,0,1802,1801,1,0,0,0,1803,
        313,1,0,0,0,1804,1808,5,3,0,0,1805,1807,3,304,152,0,1806,1805,1,
        0,0,0,1807,1810,1,0,0,0,1808,1806,1,0,0,0,1808,1809,1,0,0,0,1809,
        1811,1,0,0,0,1810,1808,1,0,0,0,1811,1812,5,5,0,0,1812,315,1,0,0,
        0,1813,1814,5,91,0,0,1814,317,1,0,0,0,1815,1818,3,314,157,0,1816,
        1818,3,316,158,0,1817,1815,1,0,0,0,1817,1816,1,0,0,0,1818,1819,1,
        0,0,0,1819,1817,1,0,0,0,1819,1820,1,0,0,0,1820,319,1,0,0,0,1821,
        1823,5,42,0,0,1822,1824,3,216,108,0,1823,1822,1,0,0,0,1823,1824,
        1,0,0,0,1824,1825,1,0,0,0,1825,1826,5,45,0,0,1826,321,1,0,0,0,1827,
        1833,5,41,0,0,1828,1829,3,218,109,0,1829,1831,5,49,0,0,1830,1832,
        3,216,108,0,1831,1830,1,0,0,0,1831,1832,1,0,0,0,1832,1834,1,0,0,
        0,1833,1828,1,0,0,0,1833,1834,1,0,0,0,1834,1835,1,0,0,0,1835,1836,
        5,44,0,0,1836,323,1,0,0,0,1837,1838,5,43,0,0,1838,1839,3,216,108,
        0,1839,1840,5,46,0,0,1840,325,1,0,0,0,1841,1843,5,43,0,0,1842,1844,
        3,328,164,0,1843,1842,1,0,0,0,1843,1844,1,0,0,0,1844,1845,1,0,0,
        0,1845,1846,5,46,0,0,1846,327,1,0,0,0,1847,1852,3,330,165,0,1848,
        1849,5,49,0,0,1849,1851,3,330,165,0,1850,1848,1,0,0,0,1851,1854,
        1,0,0,0,1852,1850,1,0,0,0,1852,1853,1,0,0,0,1853,1856,1,0,0,0,1854,
        1852,1,0,0,0,1855,1857,5,49,0,0,1856,1855,1,0,0,0,1856,1857,1,0,
        0,0,1857,329,1,0,0,0,1858,1859,5,69,0,0,1859,1862,3,254,127,0,1860,
        1862,3,332,166,0,1861,1858,1,0,0,0,1861,1860,1,0,0,0,1862,331,1,
        0,0,0,1863,1864,3,208,104,0,1864,1865,5,48,0,0,1865,1866,3,208,104,
        0,1866,333,1,0,0,0,1867,1869,3,336,168,0,1868,1867,1,0,0,0,1869,
        1870,1,0,0,0,1870,1868,1,0,0,0,1870,1871,1,0,0,0,1871,335,1,0,0,
        0,1872,1874,5,36,0,0,1873,1872,1,0,0,0,1873,1874,1,0,0,0,1874,1875,
        1,0,0,0,1875,1876,5,23,0,0,1876,1877,3,358,179,0,1877,1878,5,14,
        0,0,1878,1883,3,224,112,0,1879,1880,5,38,0,0,1880,1882,3,224,112,
        0,1881,1879,1,0,0,0,1882,1885,1,0,0,0,1883,1881,1,0,0,0,1883,1884,
        1,0,0,0,1884,337,1,0,0,0,1885,1883,1,0,0,0,1886,1887,5,42,0,0,1887,
        1888,3,222,111,0,1888,1889,3,334,167,0,1889,1890,5,45,0,0,1890,339,
        1,0,0,0,1891,1892,5,43,0,0,1892,1893,3,222,111,0,1893,1894,3,334,
        167,0,1894,1895,5,46,0,0,1895,341,1,0,0,0,1896,1899,5,41,0,0,1897,
        1900,3,220,110,0,1898,1900,3,208,104,0,1899,1897,1,0,0,0,1899,1898,
        1,0,0,0,1900,1901,1,0,0,0,1901,1902,3,334,167,0,1902,1903,5,44,0,
        0,1903,343,1,0,0,0,1904,1905,5,43,0,0,1905,1906,3,332,166,0,1906,
        1907,3,334,167,0,1907,1908,5,46,0,0,1908,345,1,0,0,0,1909,1911,3,
        348,174,0,1910,1912,5,49,0,0,1911,1910,1,0,0,0,1911,1912,1,0,0,0,
        1912,347,1,0,0,0,1913,1919,3,352,176,0,1914,1917,3,220,110,0,1915,
        1917,3,208,104,0,1916,1914,1,0,0,0,1916,1915,1,0,0,0,1917,1919,1,
        0,0,0,1918,1913,1,0,0,0,1918,1916,1,0,0,0,1919,1930,1,0,0,0,1920,
        1926,5,49,0,0,1921,1927,3,352,176,0,1922,1925,3,220,110,0,1923,1925,
        3,208,104,0,1924,1922,1,0,0,0,1924,1923,1,0,0,0,1925,1927,1,0,0,
        0,1926,1921,1,0,0,0,1926,1924,1,0,0,0,1927,1929,1,0,0,0,1928,1920,
        1,0,0,0,1929,1932,1,0,0,0,1930,1928,1,0,0,0,1930,1931,1,0,0,0,1931,
        1935,1,0,0,0,1932,1930,1,0,0,0,1933,1934,5,49,0,0,1934,1936,3,350,
        175,0,1935,1933,1,0,0,0,1935,1936,1,0,0,0,1936,1939,1,0,0,0,1937,
        1939,3,350,175,0,1938,1918,1,0,0,0,1938,1937,1,0,0,0,1939,349,1,
        0,0,0,1940,1945,3,354,177,0,1941,1942,5,49,0,0,1942,1944,3,354,177,
        0,1943,1941,1,0,0,0,1944,1947,1,0,0,0,1945,1943,1,0,0,0,1945,1946,
        1,0,0,0,1946,1957,1,0,0,0,1947,1945,1,0,0,0,1948,1949,5,49,0,0,1949,
        1954,3,356,178,0,1950,1951,5,49,0,0,1951,1953,3,356,178,0,1952,1950,
        1,0,0,0,1953,1956,1,0,0,0,1954,1952,1,0,0,0,1954,1955,1,0,0,0,1955,
        1958,1,0,0,0,1956,1954,1,0,0,0,1957,1948,1,0,0,0,1957,1958,1,0,0,
        0,1958,1968,1,0,0,0,1959,1964,3,356,178,0,1960,1961,5,49,0,0,1961,
        1963,3,356,178,0,1962,1960,1,0,0,0,1963,1966,1,0,0,0,1964,1962,1,
        0,0,0,1964,1965,1,0,0,0,1965,1968,1,0,0,0,1966,1964,1,0,0,0,1967,
        1940,1,0,0,0,1967,1959,1,0,0,0,1968,351,1,0,0,0,1969,1970,5,53,0,
        0,1970,1971,3,208,104,0,1971,353,1,0,0,0,1972,1973,5,89,0,0,1973,
        1974,5,59,0,0,1974,1977,3,208,104,0,1975,1977,3,352,176,0,1976,1972,
        1,0,0,0,1976,1975,1,0,0,0,1977,355,1,0,0,0,1978,1979,5,89,0,0,1979,
        1980,5,59,0,0,1980,1984,3,208,104,0,1981,1982,5,69,0,0,1982,1984,
        3,208,104,0,1983,1978,1,0,0,0,1983,1981,1,0,0,0,1984,357,1,0,0,0,
        1985,1990,3,364,182,0,1986,1987,5,49,0,0,1987,1989,3,364,182,0,1988,
        1986,1,0,0,0,1989,1992,1,0,0,0,1990,1988,1,0,0,0,1990,1991,1,0,0,
        0,1991,1994,1,0,0,0,1992,1990,1,0,0,0,1993,1995,5,49,0,0,1994,1993,
        1,0,0,0,1994,1995,1,0,0,0,1995,359,1,0,0,0,1996,1999,3,364,182,0,
        1997,1998,5,49,0,0,1998,2000,3,364,182,0,1999,1997,1,0,0,0,2000,
        2001,1,0,0,0,2001,1999,1,0,0,0,2001,2002,1,0,0,0,2002,2004,1,0,0,
        0,2003,2005,5,49,0,0,2004,2003,1,0,0,0,2004,2005,1,0,0,0,2005,361,
        1,0,0,0,2006,2017,3,364,182,0,2007,2018,5,49,0,0,2008,2009,5,49,
        0,0,2009,2011,3,364,182,0,2010,2008,1,0,0,0,2011,2012,1,0,0,0,2012,
        2010,1,0,0,0,2012,2013,1,0,0,0,2013,2015,1,0,0,0,2014,2016,5,49,
        0,0,2015,2014,1,0,0,0,2015,2016,1,0,0,0,2016,2018,1,0,0,0,2017,2007,
        1,0,0,0,2017,2010,1,0,0,0,2018,363,1,0,0,0,2019,2020,5,53,0,0,2020,
        2023,3,364,182,0,2021,2023,3,366,183,0,2022,2019,1,0,0,0,2022,2021,
        1,0,0,0,2023,365,1,0,0,0,2024,2031,3,374,187,0,2025,2026,5,47,0,
        0,2026,2032,5,89,0,0,2027,2028,5,42,0,0,2028,2029,3,274,137,0,2029,
        2030,5,45,0,0,2030,2032,1,0,0,0,2031,2025,1,0,0,0,2031,2027,1,0,
        0,0,2032,2035,1,0,0,0,2033,2035,3,368,184,0,2034,2024,1,0,0,0,2034,
        2033,1,0,0,0,2035,367,1,0,0,0,2036,2052,5,89,0,0,2037,2038,5,41,
        0,0,2038,2039,3,366,183,0,2039,2040,5,44,0,0,2040,2052,1,0,0,0,2041,
        2043,5,41,0,0,2042,2044,3,362,181,0,2043,2042,1,0,0,0,2043,2044,
        1,0,0,0,2044,2045,1,0,0,0,2045,2052,5,44,0,0,2046,2048,5,42,0,0,
        2047,2049,3,360,180,0,2048,2047,1,0,0,0,2048,2049,1,0,0,0,2049,2050,
        1,0,0,0,2050,2052,5,45,0,0,2051,2036,1,0,0,0,2051,2037,1,0,0,0,2051,
        2041,1,0,0,0,2051,2046,1,0,0,0,2052,369,1,0,0,0,2053,2060,3,372,
        186,0,2054,2060,5,89,0,0,2055,2056,5,41,0,0,2056,2057,3,370,185,
        0,2057,2058,5,44,0,0,2058,2060,1,0,0,0,2059,2053,1,0,0,0,2059,2054,
        1,0,0,0,2059,2055,1,0,0,0,2060,371,1,0,0,0,2061,2068,3,374,187,0,
        2062,2063,5,47,0,0,2063,2069,5,89,0,0,2064,2065,5,42,0,0,2065,2066,
        3,274,137,0,2066,2067,5,45,0,0,2067,2069,1,0,0,0,2068,2062,1,0,0,
        0,2068,2064,1,0,0,0,2069,373,1,0,0,0,2070,2071,6,187,-1,0,2071,2072,
        3,278,139,0,2072,2090,1,0,0,0,2073,2086,10,2,0,0,2074,2075,5,47,
        0,0,2075,2087,5,89,0,0,2076,2077,5,42,0,0,2077,2078,3,274,137,0,
        2078,2079,5,45,0,0,2079,2087,1,0,0,0,2080,2087,3,342,171,0,2081,
        2083,5,41,0,0,2082,2084,3,346,173,0,2083,2082,1,0,0,0,2083,2084,
        1,0,0,0,2084,2085,1,0,0,0,2085,2087,5,44,0,0,2086,2074,1,0,0,0,2086,
        2076,1,0,0,0,2086,2080,1,0,0,0,2086,2081,1,0,0,0,2087,2089,1,0,0,
        0,2088,2073,1,0,0,0,2089,2092,1,0,0,0,2090,2088,1,0,0,0,2090,2091,
        1,0,0,0,2091,375,1,0,0,0,2092,2090,1,0,0,0,2093,2098,3,378,189,0,
        2094,2095,5,49,0,0,2095,2097,3,378,189,0,2096,2094,1,0,0,0,2097,
        2100,1,0,0,0,2098,2096,1,0,0,0,2098,2099,1,0,0,0,2099,2102,1,0,0,
        0,2100,2098,1,0,0,0,2101,2103,5,49,0,0,2102,2101,1,0,0,0,2102,2103,
        1,0,0,0,2103,377,1,0,0,0,2104,2111,3,374,187,0,2105,2106,5,47,0,
        0,2106,2112,5,89,0,0,2107,2108,5,42,0,0,2108,2109,3,274,137,0,2109,
        2110,5,45,0,0,2110,2112,1,0,0,0,2111,2105,1,0,0,0,2111,2107,1,0,
        0,0,2112,2115,1,0,0,0,2113,2115,3,380,190,0,2114,2104,1,0,0,0,2114,
        2113,1,0,0,0,2115,379,1,0,0,0,2116,2132,5,89,0,0,2117,2118,5,41,
        0,0,2118,2119,3,378,189,0,2119,2120,5,44,0,0,2120,2132,1,0,0,0,2121,
        2123,5,41,0,0,2122,2124,3,376,188,0,2123,2122,1,0,0,0,2123,2124,
        1,0,0,0,2124,2125,1,0,0,0,2125,2132,5,44,0,0,2126,2128,5,42,0,0,
        2127,2129,3,376,188,0,2128,2127,1,0,0,0,2128,2129,1,0,0,0,2129,2130,
        1,0,0,0,2130,2132,5,45,0,0,2131,2116,1,0,0,0,2131,2117,1,0,0,0,2131,
        2121,1,0,0,0,2131,2126,1,0,0,0,2132,381,1,0,0,0,2133,2138,3,208,
        104,0,2134,2135,5,49,0,0,2135,2137,3,208,104,0,2136,2134,1,0,0,0,
        2137,2140,1,0,0,0,2138,2136,1,0,0,0,2138,2139,1,0,0,0,2139,2153,
        1,0,0,0,2140,2138,1,0,0,0,2141,2151,5,49,0,0,2142,2143,5,53,0,0,
        2143,2147,3,208,104,0,2144,2145,5,49,0,0,2145,2146,5,69,0,0,2146,
        2148,3,208,104,0,2147,2144,1,0,0,0,2147,2148,1,0,0,0,2148,2152,1,
        0,0,0,2149,2150,5,69,0,0,2150,2152,3,208,104,0,2151,2142,1,0,0,0,
        2151,2149,1,0,0,0,2152,2154,1,0,0,0,2153,2141,1,0,0,0,2153,2154,
        1,0,0,0,2154,2165,1,0,0,0,2155,2156,5,53,0,0,2156,2160,3,208,104,
        0,2157,2158,5,49,0,0,2158,2159,5,69,0,0,2159,2161,3,208,104,0,2160,
        2157,1,0,0,0,2160,2161,1,0,0,0,2161,2165,1,0,0,0,2162,2163,5,69,
        0,0,2163,2165,3,208,104,0,2164,2133,1,0,0,0,2164,2155,1,0,0,0,2164,
        2162,1,0,0,0,2165,383,1,0,0,0,2166,2167,5,92,0,0,2167,2170,5,93,
        0,0,2168,2170,5,93,0,0,2169,2166,1,0,0,0,2169,2168,1,0,0,0,2170,
        385,1,0,0,0,2171,2172,4,193,9,0,2172,2173,5,89,0,0,2173,387,1,0,
        0,0,2174,2175,4,194,10,0,2175,2176,5,89,0,0,2176,389,1,0,0,0,2177,
        2178,4,195,11,0,2178,2179,5,89,0,0,2179,391,1,0,0,0,2180,2181,4,
        196,12,0,2181,2182,5,89,0,0,2182,393,1,0,0,0,2183,2184,4,197,13,
        0,2184,2185,5,89,0,0,2185,395,1,0,0,0,291,397,407,414,422,432,436,
        444,451,455,473,483,490,497,503,510,514,517,523,525,529,535,541,
        543,551,560,572,576,585,596,600,605,611,618,624,631,637,647,656,
        664,670,675,679,682,691,696,700,705,709,716,720,725,729,732,740,
        746,750,756,760,765,770,774,779,782,785,790,794,799,805,809,816,
        820,827,831,838,841,844,851,854,858,861,866,869,873,876,879,883,
        903,905,913,915,926,929,937,941,944,953,957,967,972,974,981,994,
        997,1000,1008,1011,1014,1016,1022,1024,1034,1051,1058,1061,1066,
        1076,1080,1091,1102,1110,1118,1125,1130,1151,1158,1167,1172,1175,
        1180,1187,1191,1195,1201,1208,1216,1219,1223,1230,1235,1248,1251,
        1254,1256,1265,1273,1283,1297,1301,1305,1311,1317,1319,1329,1333,
        1341,1344,1350,1352,1359,1363,1368,1375,1379,1384,1392,1399,1407,
        1413,1419,1432,1474,1485,1496,1507,1518,1529,1539,1544,1549,1560,
        1567,1571,1577,1582,1586,1590,1592,1595,1599,1603,1605,1608,1619,
        1623,1629,1632,1637,1643,1654,1660,1664,1670,1674,1679,1684,1688,
        1693,1696,1699,1704,1708,1713,1719,1723,1730,1734,1741,1744,1747,
        1754,1759,1763,1766,1772,1777,1780,1783,1786,1797,1802,1808,1817,
        1819,1823,1831,1833,1843,1852,1856,1861,1870,1873,1883,1899,1911,
        1916,1918,1924,1926,1930,1935,1938,1945,1954,1957,1964,1967,1976,
        1983,1990,1994,2001,2004,2012,2015,2017,2022,2031,2034,2043,2048,
        2051,2059,2068,2083,2086,2090,2098,2102,2111,2114,2123,2128,2131,
        2138,2147,2151,2153,2160,2164,2169
    ]

class PythonParser ( PythonParserBase ):

    grammarFileName = "PythonParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'False'", "'await'", "'else'", 
                     "'import'", "'pass'", "'None'", "'break'", "'except'", 
                     "'in'", "'raise'", "'True'", "'class'", "'finally'", 
                     "'is'", "'return'", "'and'", "'continue'", "'for'", 
                     "'lambda'", "'try'", "'as'", "'def'", "'from'", "'nonlocal'", 
                     "'while'", "'assert'", "'del'", "'global'", "'not'", 
                     "'with'", "'async'", "'elif'", "'if'", "'or'", "'yield'", 
                     "'('", "'['", "<INVALID>", "')'", "']'", "<INVALID>", 
                     "'.'", "':'", "','", "';'", "'+'", "'-'", "'*'", "'/'", 
                     "'|'", "'&'", "'<'", "'>'", "'='", "'%'", "'=='", "'!='", 
                     "'<='", "'>='", "'~'", "'^'", "'<<'", "'>>'", "'**'", 
                     "'+='", "'-='", "'*='", "'/='", "'%='", "'&='", "'|='", 
                     "'^='", "'<<='", "'>>='", "'**='", "'//'", "'//='", 
                     "'@'", "'@='", "'->'", "'...'", "':='", "'!'" ]

    symbolicNames = [ "<INVALID>", "INDENT", "DEDENT", "FSTRING_START", 
                      "FSTRING_MIDDLE", "FSTRING_END", "FALSE", "AWAIT", 
                      "ELSE", "IMPORT", "PASS", "NONE", "BREAK", "EXCEPT", 
                      "IN", "RAISE", "TRUE", "CLASS", "FINALLY", "IS", "RETURN", 
                      "AND", "CONTINUE", "FOR", "LAMBDA", "TRY", "AS", "DEF", 
                      "FROM", "NONLOCAL", "WHILE", "ASSERT", "DEL", "GLOBAL", 
                      "NOT", "WITH", "ASYNC", "ELIF", "IF", "OR", "YIELD", 
                      "LPAR", "LSQB", "LBRACE", "RPAR", "RSQB", "RBRACE", 
                      "DOT", "COLON", "COMMA", "SEMI", "PLUS", "MINUS", 
                      "STAR", "SLASH", "VBAR", "AMPER", "LESS", "GREATER", 
                      "EQUAL", "PERCENT", "EQEQUAL", "NOTEQUAL", "LESSEQUAL", 
                      "GREATEREQUAL", "TILDE", "CIRCUMFLEX", "LEFTSHIFT", 
                      "RIGHTSHIFT", "DOUBLESTAR", "PLUSEQUAL", "MINEQUAL", 
                      "STAREQUAL", "SLASHEQUAL", "PERCENTEQUAL", "AMPEREQUAL", 
                      "VBAREQUAL", "CIRCUMFLEXEQUAL", "LEFTSHIFTEQUAL", 
                      "RIGHTSHIFTEQUAL", "DOUBLESTAREQUAL", "DOUBLESLASH", 
                      "DOUBLESLASHEQUAL", "AT", "ATEQUAL", "RARROW", "ELLIPSIS", 
                      "COLONEQUAL", "EXCLAMATION", "NAME", "NUMBER", "STRING", 
                      "NEWLINE", "TYPE_COMMENT", "COMMENT", "WS", "EXPLICIT_LINE_JOINING", 
                      "ERROR_TOKEN" ]

    RULE_file_input = 0
    RULE_interactive = 1
    RULE_eval = 2
    RULE_func_type = 3
    RULE_fstring_input = 4
    RULE_statements = 5
    RULE_statement = 6
    RULE_statement_newline = 7
    RULE_simple_stmts = 8
    RULE_simple_stmt = 9
    RULE_compound_stmt = 10
    RULE_assignment = 11
    RULE_annotated_rhs = 12
    RULE_augassign = 13
    RULE_return_stmt = 14
    RULE_raise_stmt = 15
    RULE_global_stmt = 16
    RULE_nonlocal_stmt = 17
    RULE_del_stmt = 18
    RULE_yield_stmt = 19
    RULE_assert_stmt = 20
    RULE_import_stmt = 21
    RULE_import_name = 22
    RULE_import_from = 23
    RULE_import_from_targets = 24
    RULE_import_from_as_names = 25
    RULE_import_from_as_name = 26
    RULE_dotted_as_names = 27
    RULE_dotted_as_name = 28
    RULE_dotted_name = 29
    RULE_block = 30
    RULE_decorators = 31
    RULE_class_def = 32
    RULE_class_def_raw = 33
    RULE_function_def = 34
    RULE_function_def_raw = 35
    RULE_params = 36
    RULE_parameters = 37
    RULE_slash_no_default = 38
    RULE_slash_with_default = 39
    RULE_star_etc = 40
    RULE_kwds = 41
    RULE_param_no_default = 42
    RULE_param_no_default_star_annotation = 43
    RULE_param_with_default = 44
    RULE_param_maybe_default = 45
    RULE_param = 46
    RULE_param_star_annotation = 47
    RULE_annotation = 48
    RULE_star_annotation = 49
    RULE_default_assignment = 50
    RULE_if_stmt = 51
    RULE_elif_stmt = 52
    RULE_else_block = 53
    RULE_while_stmt = 54
    RULE_for_stmt = 55
    RULE_with_stmt = 56
    RULE_with_item = 57
    RULE_try_stmt = 58
    RULE_except_block = 59
    RULE_except_star_block = 60
    RULE_finally_block = 61
    RULE_match_stmt = 62
    RULE_subject_expr = 63
    RULE_case_block = 64
    RULE_guard = 65
    RULE_patterns = 66
    RULE_pattern = 67
    RULE_as_pattern = 68
    RULE_or_pattern = 69
    RULE_closed_pattern = 70
    RULE_literal_pattern = 71
    RULE_literal_expr = 72
    RULE_complex_number = 73
    RULE_signed_number = 74
    RULE_signed_real_number = 75
    RULE_real_number = 76
    RULE_imaginary_number = 77
    RULE_capture_pattern = 78
    RULE_pattern_capture_target = 79
    RULE_wildcard_pattern = 80
    RULE_value_pattern = 81
    RULE_attr = 82
    RULE_name_or_attr = 83
    RULE_group_pattern = 84
    RULE_sequence_pattern = 85
    RULE_open_sequence_pattern = 86
    RULE_maybe_sequence_pattern = 87
    RULE_maybe_star_pattern = 88
    RULE_star_pattern = 89
    RULE_mapping_pattern = 90
    RULE_items_pattern = 91
    RULE_key_value_pattern = 92
    RULE_double_star_pattern = 93
    RULE_class_pattern = 94
    RULE_positional_patterns = 95
    RULE_keyword_patterns = 96
    RULE_keyword_pattern = 97
    RULE_type_alias = 98
    RULE_type_params = 99
    RULE_type_param_seq = 100
    RULE_type_param = 101
    RULE_type_param_bound = 102
    RULE_expressions = 103
    RULE_expression = 104
    RULE_yield_expr = 105
    RULE_star_expressions = 106
    RULE_star_expression = 107
    RULE_star_named_expressions = 108
    RULE_star_named_expression = 109
    RULE_assignment_expression = 110
    RULE_named_expression = 111
    RULE_disjunction = 112
    RULE_conjunction = 113
    RULE_inversion = 114
    RULE_comparison = 115
    RULE_compare_op_bitwise_or_pair = 116
    RULE_eq_bitwise_or = 117
    RULE_noteq_bitwise_or = 118
    RULE_lte_bitwise_or = 119
    RULE_lt_bitwise_or = 120
    RULE_gte_bitwise_or = 121
    RULE_gt_bitwise_or = 122
    RULE_notin_bitwise_or = 123
    RULE_in_bitwise_or = 124
    RULE_isnot_bitwise_or = 125
    RULE_is_bitwise_or = 126
    RULE_bitwise_or = 127
    RULE_bitwise_xor = 128
    RULE_bitwise_and = 129
    RULE_shift_expr = 130
    RULE_sum = 131
    RULE_term = 132
    RULE_factor = 133
    RULE_power = 134
    RULE_await_primary = 135
    RULE_primary = 136
    RULE_slices = 137
    RULE_slice = 138
    RULE_atom = 139
    RULE_group = 140
    RULE_lambdef = 141
    RULE_lambda_params = 142
    RULE_lambda_parameters = 143
    RULE_lambda_slash_no_default = 144
    RULE_lambda_slash_with_default = 145
    RULE_lambda_star_etc = 146
    RULE_lambda_kwds = 147
    RULE_lambda_param_no_default = 148
    RULE_lambda_param_with_default = 149
    RULE_lambda_param_maybe_default = 150
    RULE_lambda_param = 151
    RULE_fstring_middle = 152
    RULE_fstring_replacement_field = 153
    RULE_fstring_conversion = 154
    RULE_fstring_full_format_spec = 155
    RULE_fstring_format_spec = 156
    RULE_fstring = 157
    RULE_string = 158
    RULE_strings = 159
    RULE_list = 160
    RULE_tuple = 161
    RULE_set = 162
    RULE_dict = 163
    RULE_double_starred_kvpairs = 164
    RULE_double_starred_kvpair = 165
    RULE_kvpair = 166
    RULE_for_if_clauses = 167
    RULE_for_if_clause = 168
    RULE_listcomp = 169
    RULE_setcomp = 170
    RULE_genexp = 171
    RULE_dictcomp = 172
    RULE_arguments = 173
    RULE_args = 174
    RULE_kwargs = 175
    RULE_starred_expression = 176
    RULE_kwarg_or_starred = 177
    RULE_kwarg_or_double_starred = 178
    RULE_star_targets = 179
    RULE_star_targets_list_seq = 180
    RULE_star_targets_tuple_seq = 181
    RULE_star_target = 182
    RULE_target_with_star_atom = 183
    RULE_star_atom = 184
    RULE_single_target = 185
    RULE_single_subscript_attribute_target = 186
    RULE_t_primary = 187
    RULE_del_targets = 188
    RULE_del_target = 189
    RULE_del_t_atom = 190
    RULE_type_expressions = 191
    RULE_func_type_comment = 192
    RULE_soft_kw_type = 193
    RULE_soft_kw_match = 194
    RULE_soft_kw_case = 195
    RULE_soft_kw_wildcard = 196
    RULE_soft_kw__not__wildcard = 197

    ruleNames =  [ "file_input", "interactive", "eval", "func_type", "fstring_input", 
                   "statements", "statement", "statement_newline", "simple_stmts", 
                   "simple_stmt", "compound_stmt", "assignment", "annotated_rhs", 
                   "augassign", "return_stmt", "raise_stmt", "global_stmt", 
                   "nonlocal_stmt", "del_stmt", "yield_stmt", "assert_stmt", 
                   "import_stmt", "import_name", "import_from", "import_from_targets", 
                   "import_from_as_names", "import_from_as_name", "dotted_as_names", 
                   "dotted_as_name", "dotted_name", "block", "decorators", 
                   "class_def", "class_def_raw", "function_def", "function_def_raw", 
                   "params", "parameters", "slash_no_default", "slash_with_default", 
                   "star_etc", "kwds", "param_no_default", "param_no_default_star_annotation", 
                   "param_with_default", "param_maybe_default", "param", 
                   "param_star_annotation", "annotation", "star_annotation", 
                   "default_assignment", "if_stmt", "elif_stmt", "else_block", 
                   "while_stmt", "for_stmt", "with_stmt", "with_item", "try_stmt", 
                   "except_block", "except_star_block", "finally_block", 
                   "match_stmt", "subject_expr", "case_block", "guard", 
                   "patterns", "pattern", "as_pattern", "or_pattern", "closed_pattern", 
                   "literal_pattern", "literal_expr", "complex_number", 
                   "signed_number", "signed_real_number", "real_number", 
                   "imaginary_number", "capture_pattern", "pattern_capture_target", 
                   "wildcard_pattern", "value_pattern", "attr", "name_or_attr", 
                   "group_pattern", "sequence_pattern", "open_sequence_pattern", 
                   "maybe_sequence_pattern", "maybe_star_pattern", "star_pattern", 
                   "mapping_pattern", "items_pattern", "key_value_pattern", 
                   "double_star_pattern", "class_pattern", "positional_patterns", 
                   "keyword_patterns", "keyword_pattern", "type_alias", 
                   "type_params", "type_param_seq", "type_param", "type_param_bound", 
                   "expressions", "expression", "yield_expr", "star_expressions", 
                   "star_expression", "star_named_expressions", "star_named_expression", 
                   "assignment_expression", "named_expression", "disjunction", 
                   "conjunction", "inversion", "comparison", "compare_op_bitwise_or_pair", 
                   "eq_bitwise_or", "noteq_bitwise_or", "lte_bitwise_or", 
                   "lt_bitwise_or", "gte_bitwise_or", "gt_bitwise_or", "notin_bitwise_or", 
                   "in_bitwise_or", "isnot_bitwise_or", "is_bitwise_or", 
                   "bitwise_or", "bitwise_xor", "bitwise_and", "shift_expr", 
                   "sum", "term", "factor", "power", "await_primary", "primary", 
                   "slices", "slice", "atom", "group", "lambdef", "lambda_params", 
                   "lambda_parameters", "lambda_slash_no_default", "lambda_slash_with_default", 
                   "lambda_star_etc", "lambda_kwds", "lambda_param_no_default", 
                   "lambda_param_with_default", "lambda_param_maybe_default", 
                   "lambda_param", "fstring_middle", "fstring_replacement_field", 
                   "fstring_conversion", "fstring_full_format_spec", "fstring_format_spec", 
                   "fstring", "string", "strings", "list", "tuple", "set", 
                   "dict", "double_starred_kvpairs", "double_starred_kvpair", 
                   "kvpair", "for_if_clauses", "for_if_clause", "listcomp", 
                   "setcomp", "genexp", "dictcomp", "arguments", "args", 
                   "kwargs", "starred_expression", "kwarg_or_starred", "kwarg_or_double_starred", 
                   "star_targets", "star_targets_list_seq", "star_targets_tuple_seq", 
                   "star_target", "target_with_star_atom", "star_atom", 
                   "single_target", "single_subscript_attribute_target", 
                   "t_primary", "del_targets", "del_target", "del_t_atom", 
                   "type_expressions", "func_type_comment", "soft_kw_type", 
                   "soft_kw_match", "soft_kw_case", "soft_kw_wildcard", 
                   "soft_kw__not__wildcard" ]

    EOF = Token.EOF
    INDENT=1
    DEDENT=2
    FSTRING_START=3
    FSTRING_MIDDLE=4
    FSTRING_END=5
    FALSE=6
    AWAIT=7
    ELSE=8
    IMPORT=9
    PASS=10
    NONE=11
    BREAK=12
    EXCEPT=13
    IN=14
    RAISE=15
    TRUE=16
    CLASS=17
    FINALLY=18
    IS=19
    RETURN=20
    AND=21
    CONTINUE=22
    FOR=23
    LAMBDA=24
    TRY=25
    AS=26
    DEF=27
    FROM=28
    NONLOCAL=29
    WHILE=30
    ASSERT=31
    DEL=32
    GLOBAL=33
    NOT=34
    WITH=35
    ASYNC=36
    ELIF=37
    IF=38
    OR=39
    YIELD=40
    LPAR=41
    LSQB=42
    LBRACE=43
    RPAR=44
    RSQB=45
    RBRACE=46
    DOT=47
    COLON=48
    COMMA=49
    SEMI=50
    PLUS=51
    MINUS=52
    STAR=53
    SLASH=54
    VBAR=55
    AMPER=56
    LESS=57
    GREATER=58
    EQUAL=59
    PERCENT=60
    EQEQUAL=61
    NOTEQUAL=62
    LESSEQUAL=63
    GREATEREQUAL=64
    TILDE=65
    CIRCUMFLEX=66
    LEFTSHIFT=67
    RIGHTSHIFT=68
    DOUBLESTAR=69
    PLUSEQUAL=70
    MINEQUAL=71
    STAREQUAL=72
    SLASHEQUAL=73
    PERCENTEQUAL=74
    AMPEREQUAL=75
    VBAREQUAL=76
    CIRCUMFLEXEQUAL=77
    LEFTSHIFTEQUAL=78
    RIGHTSHIFTEQUAL=79
    DOUBLESTAREQUAL=80
    DOUBLESLASH=81
    DOUBLESLASHEQUAL=82
    AT=83
    ATEQUAL=84
    RARROW=85
    ELLIPSIS=86
    COLONEQUAL=87
    EXCLAMATION=88
    NAME=89
    NUMBER=90
    STRING=91
    NEWLINE=92
    TYPE_COMMENT=93
    COMMENT=94
    WS=95
    EXPLICIT_LINE_JOINING=96
    ERROR_TOKEN=97

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class File_inputContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(PythonParser.EOF, 0)

        def statements(self):
            return self.getTypedRuleContext(PythonParser.StatementsContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_file_input

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFile_input" ):
                return visitor.visitFile_input(self)
            else:
                return visitor.visitChildren(self)




    def file_input(self):

        localctx = PythonParser.File_inputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_file_input)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 397
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
            if la_ == 1:
                self.state = 396
                self.statements()


            self.state = 399
            self.match(PythonParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InteractiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement_newline(self):
            return self.getTypedRuleContext(PythonParser.Statement_newlineContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_interactive

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInteractive" ):
                return visitor.visitInteractive(self)
            else:
                return visitor.visitChildren(self)




    def interactive(self):

        localctx = PythonParser.InteractiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_interactive)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 401
            self.statement_newline()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EvalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressions(self):
            return self.getTypedRuleContext(PythonParser.ExpressionsContext,0)


        def EOF(self):
            return self.getToken(PythonParser.EOF, 0)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.NEWLINE)
            else:
                return self.getToken(PythonParser.NEWLINE, i)

        def getRuleIndex(self):
            return PythonParser.RULE_eval

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEval" ):
                return visitor.visitEval(self)
            else:
                return visitor.visitChildren(self)




    def eval_(self):

        localctx = PythonParser.EvalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_eval)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 403
            self.expressions()
            self.state = 407
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==92:
                self.state = 404
                self.match(PythonParser.NEWLINE)
                self.state = 409
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 410
            self.match(PythonParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAR(self):
            return self.getToken(PythonParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(PythonParser.RPAR, 0)

        def RARROW(self):
            return self.getToken(PythonParser.RARROW, 0)

        def expression(self):
            return self.getTypedRuleContext(PythonParser.ExpressionContext,0)


        def EOF(self):
            return self.getToken(PythonParser.EOF, 0)

        def type_expressions(self):
            return self.getTypedRuleContext(PythonParser.Type_expressionsContext,0)


        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.NEWLINE)
            else:
                return self.getToken(PythonParser.NEWLINE, i)

        def getRuleIndex(self):
            return PythonParser.RULE_func_type

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunc_type" ):
                return visitor.visitFunc_type(self)
            else:
                return visitor.visitChildren(self)




    def func_type(self):

        localctx = PythonParser.Func_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_func_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 412
            self.match(PythonParser.LPAR)
            self.state = 414
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 15778009055299784) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 119537681) != 0):
                self.state = 413
                self.type_expressions()


            self.state = 416
            self.match(PythonParser.RPAR)
            self.state = 417
            self.match(PythonParser.RARROW)
            self.state = 418
            self.expression()
            self.state = 422
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==92:
                self.state = 419
                self.match(PythonParser.NEWLINE)
                self.state = 424
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 425
            self.match(PythonParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fstring_inputContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def star_expressions(self):
            return self.getTypedRuleContext(PythonParser.Star_expressionsContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_fstring_input

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFstring_input" ):
                return visitor.visitFstring_input(self)
            else:
                return visitor.visitChildren(self)




    def fstring_input(self):

        localctx = PythonParser.Fstring_inputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_fstring_input)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 427
            self.star_expressions()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.StatementContext)
            else:
                return self.getTypedRuleContext(PythonParser.StatementContext,i)


        def getRuleIndex(self):
            return PythonParser.RULE_statements

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatements" ):
                return visitor.visitStatements(self)
            else:
                return visitor.visitChildren(self)




    def statements(self):

        localctx = PythonParser.StatementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_statements)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 430 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 429
                    self.statement()

                else:
                    raise NoViableAltException(self)
                self.state = 432 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,4,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def compound_stmt(self):
            return self.getTypedRuleContext(PythonParser.Compound_stmtContext,0)


        def simple_stmts(self):
            return self.getTypedRuleContext(PythonParser.Simple_stmtsContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_statement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement" ):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)




    def statement(self):

        localctx = PythonParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_statement)
        try:
            self.state = 436
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 434
                self.compound_stmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 435
                self.simple_stmts()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Statement_newlineContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def compound_stmt(self):
            return self.getTypedRuleContext(PythonParser.Compound_stmtContext,0)


        def NEWLINE(self):
            return self.getToken(PythonParser.NEWLINE, 0)

        def simple_stmts(self):
            return self.getTypedRuleContext(PythonParser.Simple_stmtsContext,0)


        def EOF(self):
            return self.getToken(PythonParser.EOF, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_statement_newline

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement_newline" ):
                return visitor.visitStatement_newline(self)
            else:
                return visitor.visitChildren(self)




    def statement_newline(self):

        localctx = PythonParser.Statement_newlineContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_statement_newline)
        try:
            self.state = 444
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 438
                self.compound_stmt()
                self.state = 439
                self.match(PythonParser.NEWLINE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 441
                self.simple_stmts()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 442
                self.match(PythonParser.NEWLINE)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 443
                self.match(PythonParser.EOF)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_stmtsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Simple_stmtContext)
            else:
                return self.getTypedRuleContext(PythonParser.Simple_stmtContext,i)


        def NEWLINE(self):
            return self.getToken(PythonParser.NEWLINE, 0)

        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.SEMI)
            else:
                return self.getToken(PythonParser.SEMI, i)

        def getRuleIndex(self):
            return PythonParser.RULE_simple_stmts

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimple_stmts" ):
                return visitor.visitSimple_stmts(self)
            else:
                return visitor.visitChildren(self)




    def simple_stmts(self):

        localctx = PythonParser.Simple_stmtsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_simple_stmts)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 446
            self.simple_stmt()
            self.state = 451
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,7,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 447
                    self.match(PythonParser.SEMI)
                    self.state = 448
                    self.simple_stmt() 
                self.state = 453
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,7,self._ctx)

            self.state = 455
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==50:
                self.state = 454
                self.match(PythonParser.SEMI)


            self.state = 457
            self.match(PythonParser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignment(self):
            return self.getTypedRuleContext(PythonParser.AssignmentContext,0)


        def type_alias(self):
            return self.getTypedRuleContext(PythonParser.Type_aliasContext,0)


        def star_expressions(self):
            return self.getTypedRuleContext(PythonParser.Star_expressionsContext,0)


        def return_stmt(self):
            return self.getTypedRuleContext(PythonParser.Return_stmtContext,0)


        def import_stmt(self):
            return self.getTypedRuleContext(PythonParser.Import_stmtContext,0)


        def raise_stmt(self):
            return self.getTypedRuleContext(PythonParser.Raise_stmtContext,0)


        def PASS(self):
            return self.getToken(PythonParser.PASS, 0)

        def del_stmt(self):
            return self.getTypedRuleContext(PythonParser.Del_stmtContext,0)


        def yield_stmt(self):
            return self.getTypedRuleContext(PythonParser.Yield_stmtContext,0)


        def assert_stmt(self):
            return self.getTypedRuleContext(PythonParser.Assert_stmtContext,0)


        def BREAK(self):
            return self.getToken(PythonParser.BREAK, 0)

        def CONTINUE(self):
            return self.getToken(PythonParser.CONTINUE, 0)

        def global_stmt(self):
            return self.getTypedRuleContext(PythonParser.Global_stmtContext,0)


        def nonlocal_stmt(self):
            return self.getTypedRuleContext(PythonParser.Nonlocal_stmtContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_simple_stmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimple_stmt" ):
                return visitor.visitSimple_stmt(self)
            else:
                return visitor.visitChildren(self)




    def simple_stmt(self):

        localctx = PythonParser.Simple_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_simple_stmt)
        try:
            self.state = 473
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 459
                self.assignment()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 460
                self.type_alias()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 461
                self.star_expressions()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 462
                self.return_stmt()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 463
                self.import_stmt()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 464
                self.raise_stmt()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 465
                self.match(PythonParser.PASS)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 466
                self.del_stmt()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 467
                self.yield_stmt()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 468
                self.assert_stmt()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 469
                self.match(PythonParser.BREAK)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 470
                self.match(PythonParser.CONTINUE)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 471
                self.global_stmt()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 472
                self.nonlocal_stmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Compound_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def function_def(self):
            return self.getTypedRuleContext(PythonParser.Function_defContext,0)


        def if_stmt(self):
            return self.getTypedRuleContext(PythonParser.If_stmtContext,0)


        def class_def(self):
            return self.getTypedRuleContext(PythonParser.Class_defContext,0)


        def with_stmt(self):
            return self.getTypedRuleContext(PythonParser.With_stmtContext,0)


        def for_stmt(self):
            return self.getTypedRuleContext(PythonParser.For_stmtContext,0)


        def try_stmt(self):
            return self.getTypedRuleContext(PythonParser.Try_stmtContext,0)


        def while_stmt(self):
            return self.getTypedRuleContext(PythonParser.While_stmtContext,0)


        def match_stmt(self):
            return self.getTypedRuleContext(PythonParser.Match_stmtContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_compound_stmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompound_stmt" ):
                return visitor.visitCompound_stmt(self)
            else:
                return visitor.visitChildren(self)




    def compound_stmt(self):

        localctx = PythonParser.Compound_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_compound_stmt)
        try:
            self.state = 483
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 475
                self.function_def()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 476
                self.if_stmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 477
                self.class_def()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 478
                self.with_stmt()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 479
                self.for_stmt()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 480
                self.try_stmt()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 481
                self.while_stmt()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 482
                self.match_stmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)

        def expression(self):
            return self.getTypedRuleContext(PythonParser.ExpressionContext,0)


        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.EQUAL)
            else:
                return self.getToken(PythonParser.EQUAL, i)

        def annotated_rhs(self):
            return self.getTypedRuleContext(PythonParser.Annotated_rhsContext,0)


        def LPAR(self):
            return self.getToken(PythonParser.LPAR, 0)

        def single_target(self):
            return self.getTypedRuleContext(PythonParser.Single_targetContext,0)


        def RPAR(self):
            return self.getToken(PythonParser.RPAR, 0)

        def single_subscript_attribute_target(self):
            return self.getTypedRuleContext(PythonParser.Single_subscript_attribute_targetContext,0)


        def yield_expr(self):
            return self.getTypedRuleContext(PythonParser.Yield_exprContext,0)


        def star_expressions(self):
            return self.getTypedRuleContext(PythonParser.Star_expressionsContext,0)


        def star_targets(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Star_targetsContext)
            else:
                return self.getTypedRuleContext(PythonParser.Star_targetsContext,i)


        def TYPE_COMMENT(self):
            return self.getToken(PythonParser.TYPE_COMMENT, 0)

        def augassign(self):
            return self.getTypedRuleContext(PythonParser.AugassignContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_assignment

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignment" ):
                return visitor.visitAssignment(self)
            else:
                return visitor.visitChildren(self)




    def assignment(self):

        localctx = PythonParser.AssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_assignment)
        self._la = 0 # Token type
        try:
            self.state = 525
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 485
                self.match(PythonParser.NAME)
                self.state = 486
                self.match(PythonParser.COLON)
                self.state = 487
                self.expression()
                self.state = 490
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==59:
                    self.state = 488
                    self.match(PythonParser.EQUAL)
                    self.state = 489
                    self.annotated_rhs()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 497
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
                if la_ == 1:
                    self.state = 492
                    self.match(PythonParser.LPAR)
                    self.state = 493
                    self.single_target()
                    self.state = 494
                    self.match(PythonParser.RPAR)
                    pass

                elif la_ == 2:
                    self.state = 496
                    self.single_subscript_attribute_target()
                    pass


                self.state = 499
                self.match(PythonParser.COLON)
                self.state = 500
                self.expression()
                self.state = 503
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==59:
                    self.state = 501
                    self.match(PythonParser.EQUAL)
                    self.state = 502
                    self.annotated_rhs()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 508 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 505
                        self.star_targets()
                        self.state = 506
                        self.match(PythonParser.EQUAL)

                    else:
                        raise NoViableAltException(self)
                    self.state = 510 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,14,self._ctx)

                self.state = 514
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [40]:
                    self.state = 512
                    self.yield_expr()
                    pass
                elif token in [3, 6, 7, 11, 16, 24, 34, 41, 42, 43, 51, 52, 53, 65, 86, 89, 90, 91]:
                    self.state = 513
                    self.star_expressions()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 517
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==93:
                    self.state = 516
                    self.match(PythonParser.TYPE_COMMENT)


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 519
                self.single_target()
                self.state = 520
                self.augassign()
                self.state = 523
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [40]:
                    self.state = 521
                    self.yield_expr()
                    pass
                elif token in [3, 6, 7, 11, 16, 24, 34, 41, 42, 43, 51, 52, 53, 65, 86, 89, 90, 91]:
                    self.state = 522
                    self.star_expressions()
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Annotated_rhsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def yield_expr(self):
            return self.getTypedRuleContext(PythonParser.Yield_exprContext,0)


        def star_expressions(self):
            return self.getTypedRuleContext(PythonParser.Star_expressionsContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_annotated_rhs

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnnotated_rhs" ):
                return visitor.visitAnnotated_rhs(self)
            else:
                return visitor.visitChildren(self)




    def annotated_rhs(self):

        localctx = PythonParser.Annotated_rhsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_annotated_rhs)
        try:
            self.state = 529
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [40]:
                self.enterOuterAlt(localctx, 1)
                self.state = 527
                self.yield_expr()
                pass
            elif token in [3, 6, 7, 11, 16, 24, 34, 41, 42, 43, 51, 52, 53, 65, 86, 89, 90, 91]:
                self.enterOuterAlt(localctx, 2)
                self.state = 528
                self.star_expressions()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AugassignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLUSEQUAL(self):
            return self.getToken(PythonParser.PLUSEQUAL, 0)

        def MINEQUAL(self):
            return self.getToken(PythonParser.MINEQUAL, 0)

        def STAREQUAL(self):
            return self.getToken(PythonParser.STAREQUAL, 0)

        def ATEQUAL(self):
            return self.getToken(PythonParser.ATEQUAL, 0)

        def SLASHEQUAL(self):
            return self.getToken(PythonParser.SLASHEQUAL, 0)

        def PERCENTEQUAL(self):
            return self.getToken(PythonParser.PERCENTEQUAL, 0)

        def AMPEREQUAL(self):
            return self.getToken(PythonParser.AMPEREQUAL, 0)

        def VBAREQUAL(self):
            return self.getToken(PythonParser.VBAREQUAL, 0)

        def CIRCUMFLEXEQUAL(self):
            return self.getToken(PythonParser.CIRCUMFLEXEQUAL, 0)

        def LEFTSHIFTEQUAL(self):
            return self.getToken(PythonParser.LEFTSHIFTEQUAL, 0)

        def RIGHTSHIFTEQUAL(self):
            return self.getToken(PythonParser.RIGHTSHIFTEQUAL, 0)

        def DOUBLESTAREQUAL(self):
            return self.getToken(PythonParser.DOUBLESTAREQUAL, 0)

        def DOUBLESLASHEQUAL(self):
            return self.getToken(PythonParser.DOUBLESLASHEQUAL, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_augassign

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAugassign" ):
                return visitor.visitAugassign(self)
            else:
                return visitor.visitChildren(self)




    def augassign(self):

        localctx = PythonParser.AugassignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_augassign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 531
            _la = self._input.LA(1)
            if not(((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & 22527) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Return_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(PythonParser.RETURN, 0)

        def star_expressions(self):
            return self.getTypedRuleContext(PythonParser.Star_expressionsContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_return_stmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturn_stmt" ):
                return visitor.visitReturn_stmt(self)
            else:
                return visitor.visitChildren(self)




    def return_stmt(self):

        localctx = PythonParser.Return_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_return_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 533
            self.match(PythonParser.RETURN)
            self.state = 535
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 15778009055299784) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 119537665) != 0):
                self.state = 534
                self.star_expressions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Raise_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RAISE(self):
            return self.getToken(PythonParser.RAISE, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PythonParser.ExpressionContext,i)


        def FROM(self):
            return self.getToken(PythonParser.FROM, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_raise_stmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRaise_stmt" ):
                return visitor.visitRaise_stmt(self)
            else:
                return visitor.visitChildren(self)




    def raise_stmt(self):

        localctx = PythonParser.Raise_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_raise_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 537
            self.match(PythonParser.RAISE)
            self.state = 543
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 6770809800558792) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 119537665) != 0):
                self.state = 538
                self.expression()
                self.state = 541
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==28:
                    self.state = 539
                    self.match(PythonParser.FROM)
                    self.state = 540
                    self.expression()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Global_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GLOBAL(self):
            return self.getToken(PythonParser.GLOBAL, 0)

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.NAME)
            else:
                return self.getToken(PythonParser.NAME, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def getRuleIndex(self):
            return PythonParser.RULE_global_stmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGlobal_stmt" ):
                return visitor.visitGlobal_stmt(self)
            else:
                return visitor.visitChildren(self)




    def global_stmt(self):

        localctx = PythonParser.Global_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_global_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 545
            self.match(PythonParser.GLOBAL)
            self.state = 546
            self.match(PythonParser.NAME)
            self.state = 551
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==49:
                self.state = 547
                self.match(PythonParser.COMMA)
                self.state = 548
                self.match(PythonParser.NAME)
                self.state = 553
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Nonlocal_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NONLOCAL(self):
            return self.getToken(PythonParser.NONLOCAL, 0)

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.NAME)
            else:
                return self.getToken(PythonParser.NAME, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def getRuleIndex(self):
            return PythonParser.RULE_nonlocal_stmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNonlocal_stmt" ):
                return visitor.visitNonlocal_stmt(self)
            else:
                return visitor.visitChildren(self)




    def nonlocal_stmt(self):

        localctx = PythonParser.Nonlocal_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_nonlocal_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 554
            self.match(PythonParser.NONLOCAL)
            self.state = 555
            self.match(PythonParser.NAME)
            self.state = 560
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==49:
                self.state = 556
                self.match(PythonParser.COMMA)
                self.state = 557
                self.match(PythonParser.NAME)
                self.state = 562
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Del_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEL(self):
            return self.getToken(PythonParser.DEL, 0)

        def del_targets(self):
            return self.getTypedRuleContext(PythonParser.Del_targetsContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_del_stmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDel_stmt" ):
                return visitor.visitDel_stmt(self)
            else:
                return visitor.visitChildren(self)




    def del_stmt(self):

        localctx = PythonParser.Del_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_del_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 563
            self.match(PythonParser.DEL)
            self.state = 564
            self.del_targets()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Yield_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def yield_expr(self):
            return self.getTypedRuleContext(PythonParser.Yield_exprContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_yield_stmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYield_stmt" ):
                return visitor.visitYield_stmt(self)
            else:
                return visitor.visitChildren(self)




    def yield_stmt(self):

        localctx = PythonParser.Yield_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_yield_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 566
            self.yield_expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Assert_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSERT(self):
            return self.getToken(PythonParser.ASSERT, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PythonParser.ExpressionContext,i)


        def COMMA(self):
            return self.getToken(PythonParser.COMMA, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_assert_stmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssert_stmt" ):
                return visitor.visitAssert_stmt(self)
            else:
                return visitor.visitChildren(self)




    def assert_stmt(self):

        localctx = PythonParser.Assert_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_assert_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 568
            self.match(PythonParser.ASSERT)
            self.state = 569
            self.expression()
            self.state = 572
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==49:
                self.state = 570
                self.match(PythonParser.COMMA)
                self.state = 571
                self.expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def import_name(self):
            return self.getTypedRuleContext(PythonParser.Import_nameContext,0)


        def import_from(self):
            return self.getTypedRuleContext(PythonParser.Import_fromContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_import_stmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_stmt" ):
                return visitor.visitImport_stmt(self)
            else:
                return visitor.visitChildren(self)




    def import_stmt(self):

        localctx = PythonParser.Import_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_import_stmt)
        try:
            self.state = 576
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [9]:
                self.enterOuterAlt(localctx, 1)
                self.state = 574
                self.import_name()
                pass
            elif token in [28]:
                self.enterOuterAlt(localctx, 2)
                self.state = 575
                self.import_from()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPORT(self):
            return self.getToken(PythonParser.IMPORT, 0)

        def dotted_as_names(self):
            return self.getTypedRuleContext(PythonParser.Dotted_as_namesContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_import_name

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_name" ):
                return visitor.visitImport_name(self)
            else:
                return visitor.visitChildren(self)




    def import_name(self):

        localctx = PythonParser.Import_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_import_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 578
            self.match(PythonParser.IMPORT)
            self.state = 579
            self.dotted_as_names()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_fromContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(PythonParser.FROM, 0)

        def dotted_name(self):
            return self.getTypedRuleContext(PythonParser.Dotted_nameContext,0)


        def IMPORT(self):
            return self.getToken(PythonParser.IMPORT, 0)

        def import_from_targets(self):
            return self.getTypedRuleContext(PythonParser.Import_from_targetsContext,0)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.DOT)
            else:
                return self.getToken(PythonParser.DOT, i)

        def ELLIPSIS(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.ELLIPSIS)
            else:
                return self.getToken(PythonParser.ELLIPSIS, i)

        def getRuleIndex(self):
            return PythonParser.RULE_import_from

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_from" ):
                return visitor.visitImport_from(self)
            else:
                return visitor.visitChildren(self)




    def import_from(self):

        localctx = PythonParser.Import_fromContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_import_from)
        self._la = 0 # Token type
        try:
            self.state = 600
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 581
                self.match(PythonParser.FROM)
                self.state = 585
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==47 or _la==86:
                    self.state = 582
                    _la = self._input.LA(1)
                    if not(_la==47 or _la==86):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 587
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 588
                self.dotted_name(0)
                self.state = 589
                self.match(PythonParser.IMPORT)
                self.state = 590
                self.import_from_targets()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 592
                self.match(PythonParser.FROM)
                self.state = 594 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 593
                    _la = self._input.LA(1)
                    if not(_la==47 or _la==86):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 596 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==47 or _la==86):
                        break

                self.state = 598
                self.match(PythonParser.IMPORT)
                self.state = 599
                self.import_from_targets()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_from_targetsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAR(self):
            return self.getToken(PythonParser.LPAR, 0)

        def import_from_as_names(self):
            return self.getTypedRuleContext(PythonParser.Import_from_as_namesContext,0)


        def RPAR(self):
            return self.getToken(PythonParser.RPAR, 0)

        def COMMA(self):
            return self.getToken(PythonParser.COMMA, 0)

        def STAR(self):
            return self.getToken(PythonParser.STAR, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_import_from_targets

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_from_targets" ):
                return visitor.visitImport_from_targets(self)
            else:
                return visitor.visitChildren(self)




    def import_from_targets(self):

        localctx = PythonParser.Import_from_targetsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_import_from_targets)
        self._la = 0 # Token type
        try:
            self.state = 611
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [41]:
                self.enterOuterAlt(localctx, 1)
                self.state = 602
                self.match(PythonParser.LPAR)
                self.state = 603
                self.import_from_as_names()
                self.state = 605
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==49:
                    self.state = 604
                    self.match(PythonParser.COMMA)


                self.state = 607
                self.match(PythonParser.RPAR)
                pass
            elif token in [89]:
                self.enterOuterAlt(localctx, 2)
                self.state = 609
                self.import_from_as_names()
                pass
            elif token in [53]:
                self.enterOuterAlt(localctx, 3)
                self.state = 610
                self.match(PythonParser.STAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_from_as_namesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def import_from_as_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Import_from_as_nameContext)
            else:
                return self.getTypedRuleContext(PythonParser.Import_from_as_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def getRuleIndex(self):
            return PythonParser.RULE_import_from_as_names

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_from_as_names" ):
                return visitor.visitImport_from_as_names(self)
            else:
                return visitor.visitChildren(self)




    def import_from_as_names(self):

        localctx = PythonParser.Import_from_as_namesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_import_from_as_names)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 613
            self.import_from_as_name()
            self.state = 618
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,32,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 614
                    self.match(PythonParser.COMMA)
                    self.state = 615
                    self.import_from_as_name() 
                self.state = 620
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,32,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_from_as_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.NAME)
            else:
                return self.getToken(PythonParser.NAME, i)

        def AS(self):
            return self.getToken(PythonParser.AS, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_import_from_as_name

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_from_as_name" ):
                return visitor.visitImport_from_as_name(self)
            else:
                return visitor.visitChildren(self)




    def import_from_as_name(self):

        localctx = PythonParser.Import_from_as_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_import_from_as_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 621
            self.match(PythonParser.NAME)
            self.state = 624
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==26:
                self.state = 622
                self.match(PythonParser.AS)
                self.state = 623
                self.match(PythonParser.NAME)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dotted_as_namesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dotted_as_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Dotted_as_nameContext)
            else:
                return self.getTypedRuleContext(PythonParser.Dotted_as_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def getRuleIndex(self):
            return PythonParser.RULE_dotted_as_names

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDotted_as_names" ):
                return visitor.visitDotted_as_names(self)
            else:
                return visitor.visitChildren(self)




    def dotted_as_names(self):

        localctx = PythonParser.Dotted_as_namesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_dotted_as_names)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 626
            self.dotted_as_name()
            self.state = 631
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==49:
                self.state = 627
                self.match(PythonParser.COMMA)
                self.state = 628
                self.dotted_as_name()
                self.state = 633
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dotted_as_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dotted_name(self):
            return self.getTypedRuleContext(PythonParser.Dotted_nameContext,0)


        def AS(self):
            return self.getToken(PythonParser.AS, 0)

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_dotted_as_name

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDotted_as_name" ):
                return visitor.visitDotted_as_name(self)
            else:
                return visitor.visitChildren(self)




    def dotted_as_name(self):

        localctx = PythonParser.Dotted_as_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_dotted_as_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 634
            self.dotted_name(0)
            self.state = 637
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==26:
                self.state = 635
                self.match(PythonParser.AS)
                self.state = 636
                self.match(PythonParser.NAME)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dotted_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def dotted_name(self):
            return self.getTypedRuleContext(PythonParser.Dotted_nameContext,0)


        def DOT(self):
            return self.getToken(PythonParser.DOT, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_dotted_name

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDotted_name" ):
                return visitor.visitDotted_name(self)
            else:
                return visitor.visitChildren(self)



    def dotted_name(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PythonParser.Dotted_nameContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 58
        self.enterRecursionRule(localctx, 58, self.RULE_dotted_name, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 640
            self.match(PythonParser.NAME)
            self._ctx.stop = self._input.LT(-1)
            self.state = 647
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,36,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PythonParser.Dotted_nameContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_dotted_name)
                    self.state = 642
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 643
                    self.match(PythonParser.DOT)
                    self.state = 644
                    self.match(PythonParser.NAME) 
                self.state = 649
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,36,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEWLINE(self):
            return self.getToken(PythonParser.NEWLINE, 0)

        def INDENT(self):
            return self.getToken(PythonParser.INDENT, 0)

        def statements(self):
            return self.getTypedRuleContext(PythonParser.StatementsContext,0)


        def DEDENT(self):
            return self.getToken(PythonParser.DEDENT, 0)

        def simple_stmts(self):
            return self.getTypedRuleContext(PythonParser.Simple_stmtsContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_block

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlock" ):
                return visitor.visitBlock(self)
            else:
                return visitor.visitChildren(self)




    def block(self):

        localctx = PythonParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_block)
        try:
            self.state = 656
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,37,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 650
                self.match(PythonParser.NEWLINE)
                self.state = 651
                self.match(PythonParser.INDENT)
                self.state = 652
                self.statements()
                self.state = 653
                self.match(PythonParser.DEDENT)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 655
                self.simple_stmts()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DecoratorsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.AT)
            else:
                return self.getToken(PythonParser.AT, i)

        def named_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Named_expressionContext)
            else:
                return self.getTypedRuleContext(PythonParser.Named_expressionContext,i)


        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.NEWLINE)
            else:
                return self.getToken(PythonParser.NEWLINE, i)

        def getRuleIndex(self):
            return PythonParser.RULE_decorators

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecorators" ):
                return visitor.visitDecorators(self)
            else:
                return visitor.visitChildren(self)




    def decorators(self):

        localctx = PythonParser.DecoratorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_decorators)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 662 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 658
                self.match(PythonParser.AT)
                self.state = 659
                self.named_expression()
                self.state = 660
                self.match(PythonParser.NEWLINE)
                self.state = 664 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==83):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_defContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def decorators(self):
            return self.getTypedRuleContext(PythonParser.DecoratorsContext,0)


        def class_def_raw(self):
            return self.getTypedRuleContext(PythonParser.Class_def_rawContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_class_def

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClass_def" ):
                return visitor.visitClass_def(self)
            else:
                return visitor.visitChildren(self)




    def class_def(self):

        localctx = PythonParser.Class_defContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_class_def)
        try:
            self.state = 670
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [83]:
                self.enterOuterAlt(localctx, 1)
                self.state = 666
                self.decorators()
                self.state = 667
                self.class_def_raw()
                pass
            elif token in [17]:
                self.enterOuterAlt(localctx, 2)
                self.state = 669
                self.class_def_raw()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_def_rawContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLASS(self):
            return self.getToken(PythonParser.CLASS, 0)

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)

        def block(self):
            return self.getTypedRuleContext(PythonParser.BlockContext,0)


        def type_params(self):
            return self.getTypedRuleContext(PythonParser.Type_paramsContext,0)


        def LPAR(self):
            return self.getToken(PythonParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(PythonParser.RPAR, 0)

        def arguments(self):
            return self.getTypedRuleContext(PythonParser.ArgumentsContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_class_def_raw

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClass_def_raw" ):
                return visitor.visitClass_def_raw(self)
            else:
                return visitor.visitChildren(self)




    def class_def_raw(self):

        localctx = PythonParser.Class_def_rawContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_class_def_raw)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 672
            self.match(PythonParser.CLASS)
            self.state = 673
            self.match(PythonParser.NAME)
            self.state = 675
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==42:
                self.state = 674
                self.type_params()


            self.state = 682
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==41:
                self.state = 677
                self.match(PythonParser.LPAR)
                self.state = 679
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 15778009055299784) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 119537681) != 0):
                    self.state = 678
                    self.arguments()


                self.state = 681
                self.match(PythonParser.RPAR)


            self.state = 684
            self.match(PythonParser.COLON)
            self.state = 685
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_defContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def decorators(self):
            return self.getTypedRuleContext(PythonParser.DecoratorsContext,0)


        def function_def_raw(self):
            return self.getTypedRuleContext(PythonParser.Function_def_rawContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_function_def

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_def" ):
                return visitor.visitFunction_def(self)
            else:
                return visitor.visitChildren(self)




    def function_def(self):

        localctx = PythonParser.Function_defContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_function_def)
        try:
            self.state = 691
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [83]:
                self.enterOuterAlt(localctx, 1)
                self.state = 687
                self.decorators()
                self.state = 688
                self.function_def_raw()
                pass
            elif token in [27, 36]:
                self.enterOuterAlt(localctx, 2)
                self.state = 690
                self.function_def_raw()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_def_rawContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEF(self):
            return self.getToken(PythonParser.DEF, 0)

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def LPAR(self):
            return self.getToken(PythonParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(PythonParser.RPAR, 0)

        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)

        def block(self):
            return self.getTypedRuleContext(PythonParser.BlockContext,0)


        def type_params(self):
            return self.getTypedRuleContext(PythonParser.Type_paramsContext,0)


        def params(self):
            return self.getTypedRuleContext(PythonParser.ParamsContext,0)


        def RARROW(self):
            return self.getToken(PythonParser.RARROW, 0)

        def expression(self):
            return self.getTypedRuleContext(PythonParser.ExpressionContext,0)


        def func_type_comment(self):
            return self.getTypedRuleContext(PythonParser.Func_type_commentContext,0)


        def ASYNC(self):
            return self.getToken(PythonParser.ASYNC, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_function_def_raw

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_def_raw" ):
                return visitor.visitFunction_def_raw(self)
            else:
                return visitor.visitChildren(self)




    def function_def_raw(self):

        localctx = PythonParser.Function_def_rawContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_function_def_raw)
        self._la = 0 # Token type
        try:
            self.state = 732
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [27]:
                self.enterOuterAlt(localctx, 1)
                self.state = 693
                self.match(PythonParser.DEF)
                self.state = 694
                self.match(PythonParser.NAME)
                self.state = 696
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==42:
                    self.state = 695
                    self.type_params()


                self.state = 698
                self.match(PythonParser.LPAR)
                self.state = 700
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 53)) & ~0x3f) == 0 and ((1 << (_la - 53)) & 68719542273) != 0):
                    self.state = 699
                    self.params()


                self.state = 702
                self.match(PythonParser.RPAR)
                self.state = 705
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==85:
                    self.state = 703
                    self.match(PythonParser.RARROW)
                    self.state = 704
                    self.expression()


                self.state = 707
                self.match(PythonParser.COLON)
                self.state = 709
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
                if la_ == 1:
                    self.state = 708
                    self.func_type_comment()


                self.state = 711
                self.block()
                pass
            elif token in [36]:
                self.enterOuterAlt(localctx, 2)
                self.state = 712
                self.match(PythonParser.ASYNC)
                self.state = 713
                self.match(PythonParser.DEF)
                self.state = 714
                self.match(PythonParser.NAME)
                self.state = 716
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==42:
                    self.state = 715
                    self.type_params()


                self.state = 718
                self.match(PythonParser.LPAR)
                self.state = 720
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 53)) & ~0x3f) == 0 and ((1 << (_la - 53)) & 68719542273) != 0):
                    self.state = 719
                    self.params()


                self.state = 722
                self.match(PythonParser.RPAR)
                self.state = 725
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==85:
                    self.state = 723
                    self.match(PythonParser.RARROW)
                    self.state = 724
                    self.expression()


                self.state = 727
                self.match(PythonParser.COLON)
                self.state = 729
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
                if la_ == 1:
                    self.state = 728
                    self.func_type_comment()


                self.state = 731
                self.block()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParamsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameters(self):
            return self.getTypedRuleContext(PythonParser.ParametersContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_params

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParams" ):
                return visitor.visitParams(self)
            else:
                return visitor.visitChildren(self)




    def params(self):

        localctx = PythonParser.ParamsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_params)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 734
            self.parameters()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def slash_no_default(self):
            return self.getTypedRuleContext(PythonParser.Slash_no_defaultContext,0)


        def param_no_default(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Param_no_defaultContext)
            else:
                return self.getTypedRuleContext(PythonParser.Param_no_defaultContext,i)


        def param_with_default(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Param_with_defaultContext)
            else:
                return self.getTypedRuleContext(PythonParser.Param_with_defaultContext,i)


        def star_etc(self):
            return self.getTypedRuleContext(PythonParser.Star_etcContext,0)


        def slash_with_default(self):
            return self.getTypedRuleContext(PythonParser.Slash_with_defaultContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_parameters

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameters" ):
                return visitor.visitParameters(self)
            else:
                return visitor.visitChildren(self)




    def parameters(self):

        localctx = PythonParser.ParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_parameters)
        self._la = 0 # Token type
        try:
            self.state = 785
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 736
                self.slash_no_default()
                self.state = 740
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,53,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 737
                        self.param_no_default() 
                    self.state = 742
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,53,self._ctx)

                self.state = 746
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==89:
                    self.state = 743
                    self.param_with_default()
                    self.state = 748
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 750
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==53 or _la==69:
                    self.state = 749
                    self.star_etc()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 752
                self.slash_with_default()
                self.state = 756
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==89:
                    self.state = 753
                    self.param_with_default()
                    self.state = 758
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 760
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==53 or _la==69:
                    self.state = 759
                    self.star_etc()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 763 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 762
                        self.param_no_default()

                    else:
                        raise NoViableAltException(self)
                    self.state = 765 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,58,self._ctx)

                self.state = 770
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==89:
                    self.state = 767
                    self.param_with_default()
                    self.state = 772
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 774
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==53 or _la==69:
                    self.state = 773
                    self.star_etc()


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 777 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 776
                    self.param_with_default()
                    self.state = 779 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==89):
                        break

                self.state = 782
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==53 or _la==69:
                    self.state = 781
                    self.star_etc()


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 784
                self.star_etc()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Slash_no_defaultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SLASH(self):
            return self.getToken(PythonParser.SLASH, 0)

        def param_no_default(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Param_no_defaultContext)
            else:
                return self.getTypedRuleContext(PythonParser.Param_no_defaultContext,i)


        def COMMA(self):
            return self.getToken(PythonParser.COMMA, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_slash_no_default

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSlash_no_default" ):
                return visitor.visitSlash_no_default(self)
            else:
                return visitor.visitChildren(self)




    def slash_no_default(self):

        localctx = PythonParser.Slash_no_defaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_slash_no_default)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 788 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 787
                self.param_no_default()
                self.state = 790 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==89):
                    break

            self.state = 792
            self.match(PythonParser.SLASH)
            self.state = 794
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==49:
                self.state = 793
                self.match(PythonParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Slash_with_defaultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SLASH(self):
            return self.getToken(PythonParser.SLASH, 0)

        def param_no_default(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Param_no_defaultContext)
            else:
                return self.getTypedRuleContext(PythonParser.Param_no_defaultContext,i)


        def param_with_default(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Param_with_defaultContext)
            else:
                return self.getTypedRuleContext(PythonParser.Param_with_defaultContext,i)


        def COMMA(self):
            return self.getToken(PythonParser.COMMA, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_slash_with_default

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSlash_with_default" ):
                return visitor.visitSlash_with_default(self)
            else:
                return visitor.visitChildren(self)




    def slash_with_default(self):

        localctx = PythonParser.Slash_with_defaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_slash_with_default)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 799
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,66,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 796
                    self.param_no_default() 
                self.state = 801
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,66,self._ctx)

            self.state = 803 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 802
                self.param_with_default()
                self.state = 805 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==89):
                    break

            self.state = 807
            self.match(PythonParser.SLASH)
            self.state = 809
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==49:
                self.state = 808
                self.match(PythonParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Star_etcContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(PythonParser.STAR, 0)

        def param_no_default(self):
            return self.getTypedRuleContext(PythonParser.Param_no_defaultContext,0)


        def param_maybe_default(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Param_maybe_defaultContext)
            else:
                return self.getTypedRuleContext(PythonParser.Param_maybe_defaultContext,i)


        def kwds(self):
            return self.getTypedRuleContext(PythonParser.KwdsContext,0)


        def param_no_default_star_annotation(self):
            return self.getTypedRuleContext(PythonParser.Param_no_default_star_annotationContext,0)


        def COMMA(self):
            return self.getToken(PythonParser.COMMA, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_star_etc

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStar_etc" ):
                return visitor.visitStar_etc(self)
            else:
                return visitor.visitChildren(self)




    def star_etc(self):

        localctx = PythonParser.Star_etcContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_star_etc)
        self._la = 0 # Token type
        try:
            self.state = 844
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 811
                self.match(PythonParser.STAR)
                self.state = 812
                self.param_no_default()
                self.state = 816
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==89:
                    self.state = 813
                    self.param_maybe_default()
                    self.state = 818
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 820
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==69:
                    self.state = 819
                    self.kwds()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 822
                self.match(PythonParser.STAR)
                self.state = 823
                self.param_no_default_star_annotation()
                self.state = 827
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==89:
                    self.state = 824
                    self.param_maybe_default()
                    self.state = 829
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 831
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==69:
                    self.state = 830
                    self.kwds()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 833
                self.match(PythonParser.STAR)
                self.state = 834
                self.match(PythonParser.COMMA)
                self.state = 836 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 835
                    self.param_maybe_default()
                    self.state = 838 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==89):
                        break

                self.state = 841
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==69:
                    self.state = 840
                    self.kwds()


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 843
                self.kwds()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KwdsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOUBLESTAR(self):
            return self.getToken(PythonParser.DOUBLESTAR, 0)

        def param_no_default(self):
            return self.getTypedRuleContext(PythonParser.Param_no_defaultContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_kwds

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKwds" ):
                return visitor.visitKwds(self)
            else:
                return visitor.visitChildren(self)




    def kwds(self):

        localctx = PythonParser.KwdsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_kwds)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 846
            self.match(PythonParser.DOUBLESTAR)
            self.state = 847
            self.param_no_default()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Param_no_defaultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def param(self):
            return self.getTypedRuleContext(PythonParser.ParamContext,0)


        def COMMA(self):
            return self.getToken(PythonParser.COMMA, 0)

        def TYPE_COMMENT(self):
            return self.getToken(PythonParser.TYPE_COMMENT, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_param_no_default

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParam_no_default" ):
                return visitor.visitParam_no_default(self)
            else:
                return visitor.visitChildren(self)




    def param_no_default(self):

        localctx = PythonParser.Param_no_defaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_param_no_default)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 849
            self.param()
            self.state = 851
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==49:
                self.state = 850
                self.match(PythonParser.COMMA)


            self.state = 854
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==93:
                self.state = 853
                self.match(PythonParser.TYPE_COMMENT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Param_no_default_star_annotationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def param_star_annotation(self):
            return self.getTypedRuleContext(PythonParser.Param_star_annotationContext,0)


        def COMMA(self):
            return self.getToken(PythonParser.COMMA, 0)

        def TYPE_COMMENT(self):
            return self.getToken(PythonParser.TYPE_COMMENT, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_param_no_default_star_annotation

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParam_no_default_star_annotation" ):
                return visitor.visitParam_no_default_star_annotation(self)
            else:
                return visitor.visitChildren(self)




    def param_no_default_star_annotation(self):

        localctx = PythonParser.Param_no_default_star_annotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_param_no_default_star_annotation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 856
            self.param_star_annotation()
            self.state = 858
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==49:
                self.state = 857
                self.match(PythonParser.COMMA)


            self.state = 861
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==93:
                self.state = 860
                self.match(PythonParser.TYPE_COMMENT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Param_with_defaultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def param(self):
            return self.getTypedRuleContext(PythonParser.ParamContext,0)


        def default_assignment(self):
            return self.getTypedRuleContext(PythonParser.Default_assignmentContext,0)


        def COMMA(self):
            return self.getToken(PythonParser.COMMA, 0)

        def TYPE_COMMENT(self):
            return self.getToken(PythonParser.TYPE_COMMENT, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_param_with_default

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParam_with_default" ):
                return visitor.visitParam_with_default(self)
            else:
                return visitor.visitChildren(self)




    def param_with_default(self):

        localctx = PythonParser.Param_with_defaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_param_with_default)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 863
            self.param()
            self.state = 864
            self.default_assignment()
            self.state = 866
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==49:
                self.state = 865
                self.match(PythonParser.COMMA)


            self.state = 869
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==93:
                self.state = 868
                self.match(PythonParser.TYPE_COMMENT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Param_maybe_defaultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def param(self):
            return self.getTypedRuleContext(PythonParser.ParamContext,0)


        def default_assignment(self):
            return self.getTypedRuleContext(PythonParser.Default_assignmentContext,0)


        def COMMA(self):
            return self.getToken(PythonParser.COMMA, 0)

        def TYPE_COMMENT(self):
            return self.getToken(PythonParser.TYPE_COMMENT, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_param_maybe_default

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParam_maybe_default" ):
                return visitor.visitParam_maybe_default(self)
            else:
                return visitor.visitChildren(self)




    def param_maybe_default(self):

        localctx = PythonParser.Param_maybe_defaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_param_maybe_default)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 871
            self.param()
            self.state = 873
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==59:
                self.state = 872
                self.default_assignment()


            self.state = 876
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==49:
                self.state = 875
                self.match(PythonParser.COMMA)


            self.state = 879
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==93:
                self.state = 878
                self.match(PythonParser.TYPE_COMMENT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParamContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def annotation(self):
            return self.getTypedRuleContext(PythonParser.AnnotationContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_param

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParam" ):
                return visitor.visitParam(self)
            else:
                return visitor.visitChildren(self)




    def param(self):

        localctx = PythonParser.ParamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_param)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 881
            self.match(PythonParser.NAME)
            self.state = 883
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==48:
                self.state = 882
                self.annotation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Param_star_annotationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def star_annotation(self):
            return self.getTypedRuleContext(PythonParser.Star_annotationContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_param_star_annotation

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParam_star_annotation" ):
                return visitor.visitParam_star_annotation(self)
            else:
                return visitor.visitChildren(self)




    def param_star_annotation(self):

        localctx = PythonParser.Param_star_annotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_param_star_annotation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 885
            self.match(PythonParser.NAME)
            self.state = 886
            self.star_annotation()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)

        def expression(self):
            return self.getTypedRuleContext(PythonParser.ExpressionContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_annotation

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnnotation" ):
                return visitor.visitAnnotation(self)
            else:
                return visitor.visitChildren(self)




    def annotation(self):

        localctx = PythonParser.AnnotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_annotation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 888
            self.match(PythonParser.COLON)
            self.state = 889
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Star_annotationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)

        def star_expression(self):
            return self.getTypedRuleContext(PythonParser.Star_expressionContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_star_annotation

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStar_annotation" ):
                return visitor.visitStar_annotation(self)
            else:
                return visitor.visitChildren(self)




    def star_annotation(self):

        localctx = PythonParser.Star_annotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_star_annotation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 891
            self.match(PythonParser.COLON)
            self.state = 892
            self.star_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Default_assignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUAL(self):
            return self.getToken(PythonParser.EQUAL, 0)

        def expression(self):
            return self.getTypedRuleContext(PythonParser.ExpressionContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_default_assignment

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefault_assignment" ):
                return visitor.visitDefault_assignment(self)
            else:
                return visitor.visitChildren(self)




    def default_assignment(self):

        localctx = PythonParser.Default_assignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_default_assignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 894
            self.match(PythonParser.EQUAL)
            self.state = 895
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(PythonParser.IF, 0)

        def named_expression(self):
            return self.getTypedRuleContext(PythonParser.Named_expressionContext,0)


        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)

        def block(self):
            return self.getTypedRuleContext(PythonParser.BlockContext,0)


        def elif_stmt(self):
            return self.getTypedRuleContext(PythonParser.Elif_stmtContext,0)


        def else_block(self):
            return self.getTypedRuleContext(PythonParser.Else_blockContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_if_stmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIf_stmt" ):
                return visitor.visitIf_stmt(self)
            else:
                return visitor.visitChildren(self)




    def if_stmt(self):

        localctx = PythonParser.If_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_if_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 897
            self.match(PythonParser.IF)
            self.state = 898
            self.named_expression()
            self.state = 899
            self.match(PythonParser.COLON)
            self.state = 900
            self.block()
            self.state = 905
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
            if la_ == 1:
                self.state = 901
                self.elif_stmt()
                pass

            elif la_ == 2:
                self.state = 903
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
                if la_ == 1:
                    self.state = 902
                    self.else_block()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Elif_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELIF(self):
            return self.getToken(PythonParser.ELIF, 0)

        def named_expression(self):
            return self.getTypedRuleContext(PythonParser.Named_expressionContext,0)


        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)

        def block(self):
            return self.getTypedRuleContext(PythonParser.BlockContext,0)


        def elif_stmt(self):
            return self.getTypedRuleContext(PythonParser.Elif_stmtContext,0)


        def else_block(self):
            return self.getTypedRuleContext(PythonParser.Else_blockContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_elif_stmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElif_stmt" ):
                return visitor.visitElif_stmt(self)
            else:
                return visitor.visitChildren(self)




    def elif_stmt(self):

        localctx = PythonParser.Elif_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_elif_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 907
            self.match(PythonParser.ELIF)
            self.state = 908
            self.named_expression()
            self.state = 909
            self.match(PythonParser.COLON)
            self.state = 910
            self.block()
            self.state = 915
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
            if la_ == 1:
                self.state = 911
                self.elif_stmt()
                pass

            elif la_ == 2:
                self.state = 913
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
                if la_ == 1:
                    self.state = 912
                    self.else_block()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Else_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(PythonParser.ELSE, 0)

        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)

        def block(self):
            return self.getTypedRuleContext(PythonParser.BlockContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_else_block

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElse_block" ):
                return visitor.visitElse_block(self)
            else:
                return visitor.visitChildren(self)




    def else_block(self):

        localctx = PythonParser.Else_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_else_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 917
            self.match(PythonParser.ELSE)
            self.state = 918
            self.match(PythonParser.COLON)
            self.state = 919
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class While_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(PythonParser.WHILE, 0)

        def named_expression(self):
            return self.getTypedRuleContext(PythonParser.Named_expressionContext,0)


        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)

        def block(self):
            return self.getTypedRuleContext(PythonParser.BlockContext,0)


        def else_block(self):
            return self.getTypedRuleContext(PythonParser.Else_blockContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_while_stmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhile_stmt" ):
                return visitor.visitWhile_stmt(self)
            else:
                return visitor.visitChildren(self)




    def while_stmt(self):

        localctx = PythonParser.While_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_while_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 921
            self.match(PythonParser.WHILE)
            self.state = 922
            self.named_expression()
            self.state = 923
            self.match(PythonParser.COLON)
            self.state = 924
            self.block()
            self.state = 926
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
            if la_ == 1:
                self.state = 925
                self.else_block()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(PythonParser.FOR, 0)

        def star_targets(self):
            return self.getTypedRuleContext(PythonParser.Star_targetsContext,0)


        def IN(self):
            return self.getToken(PythonParser.IN, 0)

        def star_expressions(self):
            return self.getTypedRuleContext(PythonParser.Star_expressionsContext,0)


        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)

        def block(self):
            return self.getTypedRuleContext(PythonParser.BlockContext,0)


        def ASYNC(self):
            return self.getToken(PythonParser.ASYNC, 0)

        def TYPE_COMMENT(self):
            return self.getToken(PythonParser.TYPE_COMMENT, 0)

        def else_block(self):
            return self.getTypedRuleContext(PythonParser.Else_blockContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_for_stmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFor_stmt" ):
                return visitor.visitFor_stmt(self)
            else:
                return visitor.visitChildren(self)




    def for_stmt(self):

        localctx = PythonParser.For_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_for_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 929
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==36:
                self.state = 928
                self.match(PythonParser.ASYNC)


            self.state = 931
            self.match(PythonParser.FOR)
            self.state = 932
            self.star_targets()
            self.state = 933
            self.match(PythonParser.IN)
            self.state = 934
            self.star_expressions()
            self.state = 935
            self.match(PythonParser.COLON)
            self.state = 937
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
            if la_ == 1:
                self.state = 936
                self.match(PythonParser.TYPE_COMMENT)


            self.state = 939
            self.block()
            self.state = 941
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
            if la_ == 1:
                self.state = 940
                self.else_block()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(PythonParser.WITH, 0)

        def block(self):
            return self.getTypedRuleContext(PythonParser.BlockContext,0)


        def LPAR(self):
            return self.getToken(PythonParser.LPAR, 0)

        def with_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.With_itemContext)
            else:
                return self.getTypedRuleContext(PythonParser.With_itemContext,i)


        def RPAR(self):
            return self.getToken(PythonParser.RPAR, 0)

        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)

        def ASYNC(self):
            return self.getToken(PythonParser.ASYNC, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def TYPE_COMMENT(self):
            return self.getToken(PythonParser.TYPE_COMMENT, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_with_stmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWith_stmt" ):
                return visitor.visitWith_stmt(self)
            else:
                return visitor.visitChildren(self)




    def with_stmt(self):

        localctx = PythonParser.With_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_with_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 944
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==36:
                self.state = 943
                self.match(PythonParser.ASYNC)


            self.state = 946
            self.match(PythonParser.WITH)
            self.state = 974
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,99,self._ctx)
            if la_ == 1:
                self.state = 947
                self.match(PythonParser.LPAR)
                self.state = 948
                self.with_item()
                self.state = 953
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,95,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 949
                        self.match(PythonParser.COMMA)
                        self.state = 950
                        self.with_item() 
                    self.state = 955
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,95,self._ctx)

                self.state = 957
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==49:
                    self.state = 956
                    self.match(PythonParser.COMMA)


                self.state = 959
                self.match(PythonParser.RPAR)
                self.state = 960
                self.match(PythonParser.COLON)
                pass

            elif la_ == 2:
                self.state = 962
                self.with_item()
                self.state = 967
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==49:
                    self.state = 963
                    self.match(PythonParser.COMMA)
                    self.state = 964
                    self.with_item()
                    self.state = 969
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 970
                self.match(PythonParser.COLON)
                self.state = 972
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,98,self._ctx)
                if la_ == 1:
                    self.state = 971
                    self.match(PythonParser.TYPE_COMMENT)


                pass


            self.state = 976
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_itemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(PythonParser.ExpressionContext,0)


        def AS(self):
            return self.getToken(PythonParser.AS, 0)

        def star_target(self):
            return self.getTypedRuleContext(PythonParser.Star_targetContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_with_item

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWith_item" ):
                return visitor.visitWith_item(self)
            else:
                return visitor.visitChildren(self)




    def with_item(self):

        localctx = PythonParser.With_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_with_item)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 978
            self.expression()
            self.state = 981
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==26:
                self.state = 979
                self.match(PythonParser.AS)
                self.state = 980
                self.star_target()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Try_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRY(self):
            return self.getToken(PythonParser.TRY, 0)

        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)

        def block(self):
            return self.getTypedRuleContext(PythonParser.BlockContext,0)


        def finally_block(self):
            return self.getTypedRuleContext(PythonParser.Finally_blockContext,0)


        def except_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Except_blockContext)
            else:
                return self.getTypedRuleContext(PythonParser.Except_blockContext,i)


        def else_block(self):
            return self.getTypedRuleContext(PythonParser.Else_blockContext,0)


        def except_star_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Except_star_blockContext)
            else:
                return self.getTypedRuleContext(PythonParser.Except_star_blockContext,i)


        def getRuleIndex(self):
            return PythonParser.RULE_try_stmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTry_stmt" ):
                return visitor.visitTry_stmt(self)
            else:
                return visitor.visitChildren(self)




    def try_stmt(self):

        localctx = PythonParser.Try_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_try_stmt)
        try:
            self.state = 1016
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 983
                self.match(PythonParser.TRY)
                self.state = 984
                self.match(PythonParser.COLON)
                self.state = 985
                self.block()
                self.state = 986
                self.finally_block()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 988
                self.match(PythonParser.TRY)
                self.state = 989
                self.match(PythonParser.COLON)
                self.state = 990
                self.block()
                self.state = 992 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 991
                        self.except_block()

                    else:
                        raise NoViableAltException(self)
                    self.state = 994 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,101,self._ctx)

                self.state = 997
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
                if la_ == 1:
                    self.state = 996
                    self.else_block()


                self.state = 1000
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
                if la_ == 1:
                    self.state = 999
                    self.finally_block()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1002
                self.match(PythonParser.TRY)
                self.state = 1003
                self.match(PythonParser.COLON)
                self.state = 1004
                self.block()
                self.state = 1006 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1005
                        self.except_star_block()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1008 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,104,self._ctx)

                self.state = 1011
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
                if la_ == 1:
                    self.state = 1010
                    self.else_block()


                self.state = 1014
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
                if la_ == 1:
                    self.state = 1013
                    self.finally_block()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Except_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCEPT(self):
            return self.getToken(PythonParser.EXCEPT, 0)

        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)

        def block(self):
            return self.getTypedRuleContext(PythonParser.BlockContext,0)


        def expression(self):
            return self.getTypedRuleContext(PythonParser.ExpressionContext,0)


        def AS(self):
            return self.getToken(PythonParser.AS, 0)

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_except_block

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExcept_block" ):
                return visitor.visitExcept_block(self)
            else:
                return visitor.visitChildren(self)




    def except_block(self):

        localctx = PythonParser.Except_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_except_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1018
            self.match(PythonParser.EXCEPT)
            self.state = 1024
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 6770809800558792) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 119537665) != 0):
                self.state = 1019
                self.expression()
                self.state = 1022
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==26:
                    self.state = 1020
                    self.match(PythonParser.AS)
                    self.state = 1021
                    self.match(PythonParser.NAME)




            self.state = 1026
            self.match(PythonParser.COLON)
            self.state = 1027
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Except_star_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCEPT(self):
            return self.getToken(PythonParser.EXCEPT, 0)

        def STAR(self):
            return self.getToken(PythonParser.STAR, 0)

        def expression(self):
            return self.getTypedRuleContext(PythonParser.ExpressionContext,0)


        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)

        def block(self):
            return self.getTypedRuleContext(PythonParser.BlockContext,0)


        def AS(self):
            return self.getToken(PythonParser.AS, 0)

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_except_star_block

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExcept_star_block" ):
                return visitor.visitExcept_star_block(self)
            else:
                return visitor.visitChildren(self)




    def except_star_block(self):

        localctx = PythonParser.Except_star_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_except_star_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1029
            self.match(PythonParser.EXCEPT)
            self.state = 1030
            self.match(PythonParser.STAR)
            self.state = 1031
            self.expression()
            self.state = 1034
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==26:
                self.state = 1032
                self.match(PythonParser.AS)
                self.state = 1033
                self.match(PythonParser.NAME)


            self.state = 1036
            self.match(PythonParser.COLON)
            self.state = 1037
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Finally_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FINALLY(self):
            return self.getToken(PythonParser.FINALLY, 0)

        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)

        def block(self):
            return self.getTypedRuleContext(PythonParser.BlockContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_finally_block

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFinally_block" ):
                return visitor.visitFinally_block(self)
            else:
                return visitor.visitChildren(self)




    def finally_block(self):

        localctx = PythonParser.Finally_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_finally_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1039
            self.match(PythonParser.FINALLY)
            self.state = 1040
            self.match(PythonParser.COLON)
            self.state = 1041
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Match_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def soft_kw_match(self):
            return self.getTypedRuleContext(PythonParser.Soft_kw_matchContext,0)


        def subject_expr(self):
            return self.getTypedRuleContext(PythonParser.Subject_exprContext,0)


        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)

        def NEWLINE(self):
            return self.getToken(PythonParser.NEWLINE, 0)

        def INDENT(self):
            return self.getToken(PythonParser.INDENT, 0)

        def DEDENT(self):
            return self.getToken(PythonParser.DEDENT, 0)

        def case_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Case_blockContext)
            else:
                return self.getTypedRuleContext(PythonParser.Case_blockContext,i)


        def getRuleIndex(self):
            return PythonParser.RULE_match_stmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMatch_stmt" ):
                return visitor.visitMatch_stmt(self)
            else:
                return visitor.visitChildren(self)




    def match_stmt(self):

        localctx = PythonParser.Match_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_match_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1043
            self.soft_kw_match()
            self.state = 1044
            self.subject_expr()
            self.state = 1045
            self.match(PythonParser.COLON)
            self.state = 1046
            self.match(PythonParser.NEWLINE)
            self.state = 1047
            self.match(PythonParser.INDENT)
            self.state = 1049 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1048
                    self.case_block()

                else:
                    raise NoViableAltException(self)
                self.state = 1051 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,111,self._ctx)

            self.state = 1053
            self.match(PythonParser.DEDENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Subject_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def star_named_expression(self):
            return self.getTypedRuleContext(PythonParser.Star_named_expressionContext,0)


        def COMMA(self):
            return self.getToken(PythonParser.COMMA, 0)

        def star_named_expressions(self):
            return self.getTypedRuleContext(PythonParser.Star_named_expressionsContext,0)


        def named_expression(self):
            return self.getTypedRuleContext(PythonParser.Named_expressionContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_subject_expr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubject_expr" ):
                return visitor.visitSubject_expr(self)
            else:
                return visitor.visitChildren(self)




    def subject_expr(self):

        localctx = PythonParser.Subject_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_subject_expr)
        self._la = 0 # Token type
        try:
            self.state = 1061
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1055
                self.star_named_expression()
                self.state = 1056
                self.match(PythonParser.COMMA)
                self.state = 1058
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 15778009055299784) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 119537665) != 0):
                    self.state = 1057
                    self.star_named_expressions()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1060
                self.named_expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Case_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def soft_kw_case(self):
            return self.getTypedRuleContext(PythonParser.Soft_kw_caseContext,0)


        def patterns(self):
            return self.getTypedRuleContext(PythonParser.PatternsContext,0)


        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)

        def block(self):
            return self.getTypedRuleContext(PythonParser.BlockContext,0)


        def guard(self):
            return self.getTypedRuleContext(PythonParser.GuardContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_case_block

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCase_block" ):
                return visitor.visitCase_block(self)
            else:
                return visitor.visitChildren(self)




    def case_block(self):

        localctx = PythonParser.Case_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_case_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1063
            self.soft_kw_case()
            self.state = 1064
            self.patterns()
            self.state = 1066
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==38:
                self.state = 1065
                self.guard()


            self.state = 1068
            self.match(PythonParser.COLON)
            self.state = 1069
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GuardContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(PythonParser.IF, 0)

        def named_expression(self):
            return self.getTypedRuleContext(PythonParser.Named_expressionContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_guard

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGuard" ):
                return visitor.visitGuard(self)
            else:
                return visitor.visitChildren(self)




    def guard(self):

        localctx = PythonParser.GuardContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_guard)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1071
            self.match(PythonParser.IF)
            self.state = 1072
            self.named_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatternsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def open_sequence_pattern(self):
            return self.getTypedRuleContext(PythonParser.Open_sequence_patternContext,0)


        def pattern(self):
            return self.getTypedRuleContext(PythonParser.PatternContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_patterns

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPatterns" ):
                return visitor.visitPatterns(self)
            else:
                return visitor.visitChildren(self)




    def patterns(self):

        localctx = PythonParser.PatternsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_patterns)
        try:
            self.state = 1076
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,115,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1074
                self.open_sequence_pattern()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1075
                self.pattern()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def as_pattern(self):
            return self.getTypedRuleContext(PythonParser.As_patternContext,0)


        def or_pattern(self):
            return self.getTypedRuleContext(PythonParser.Or_patternContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_pattern

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPattern" ):
                return visitor.visitPattern(self)
            else:
                return visitor.visitChildren(self)




    def pattern(self):

        localctx = PythonParser.PatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_pattern)
        try:
            self.state = 1080
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,116,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1078
                self.as_pattern()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1079
                self.or_pattern()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class As_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def or_pattern(self):
            return self.getTypedRuleContext(PythonParser.Or_patternContext,0)


        def AS(self):
            return self.getToken(PythonParser.AS, 0)

        def pattern_capture_target(self):
            return self.getTypedRuleContext(PythonParser.Pattern_capture_targetContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_as_pattern

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAs_pattern" ):
                return visitor.visitAs_pattern(self)
            else:
                return visitor.visitChildren(self)




    def as_pattern(self):

        localctx = PythonParser.As_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_as_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1082
            self.or_pattern()
            self.state = 1083
            self.match(PythonParser.AS)
            self.state = 1084
            self.pattern_capture_target()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Or_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def closed_pattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Closed_patternContext)
            else:
                return self.getTypedRuleContext(PythonParser.Closed_patternContext,i)


        def VBAR(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.VBAR)
            else:
                return self.getToken(PythonParser.VBAR, i)

        def getRuleIndex(self):
            return PythonParser.RULE_or_pattern

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOr_pattern" ):
                return visitor.visitOr_pattern(self)
            else:
                return visitor.visitChildren(self)




    def or_pattern(self):

        localctx = PythonParser.Or_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_or_pattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1086
            self.closed_pattern()
            self.state = 1091
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==55:
                self.state = 1087
                self.match(PythonParser.VBAR)
                self.state = 1088
                self.closed_pattern()
                self.state = 1093
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Closed_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal_pattern(self):
            return self.getTypedRuleContext(PythonParser.Literal_patternContext,0)


        def capture_pattern(self):
            return self.getTypedRuleContext(PythonParser.Capture_patternContext,0)


        def wildcard_pattern(self):
            return self.getTypedRuleContext(PythonParser.Wildcard_patternContext,0)


        def value_pattern(self):
            return self.getTypedRuleContext(PythonParser.Value_patternContext,0)


        def group_pattern(self):
            return self.getTypedRuleContext(PythonParser.Group_patternContext,0)


        def sequence_pattern(self):
            return self.getTypedRuleContext(PythonParser.Sequence_patternContext,0)


        def mapping_pattern(self):
            return self.getTypedRuleContext(PythonParser.Mapping_patternContext,0)


        def class_pattern(self):
            return self.getTypedRuleContext(PythonParser.Class_patternContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_closed_pattern

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClosed_pattern" ):
                return visitor.visitClosed_pattern(self)
            else:
                return visitor.visitChildren(self)




    def closed_pattern(self):

        localctx = PythonParser.Closed_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_closed_pattern)
        try:
            self.state = 1102
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,118,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1094
                self.literal_pattern()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1095
                self.capture_pattern()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1096
                self.wildcard_pattern()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1097
                self.value_pattern()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1098
                self.group_pattern()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1099
                self.sequence_pattern()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1100
                self.mapping_pattern()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1101
                self.class_pattern()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Literal_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def signed_number(self):
            return self.getTypedRuleContext(PythonParser.Signed_numberContext,0)


        def complex_number(self):
            return self.getTypedRuleContext(PythonParser.Complex_numberContext,0)


        def strings(self):
            return self.getTypedRuleContext(PythonParser.StringsContext,0)


        def NONE(self):
            return self.getToken(PythonParser.NONE, 0)

        def TRUE(self):
            return self.getToken(PythonParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(PythonParser.FALSE, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_literal_pattern

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteral_pattern" ):
                return visitor.visitLiteral_pattern(self)
            else:
                return visitor.visitChildren(self)




    def literal_pattern(self):

        localctx = PythonParser.Literal_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_literal_pattern)
        try:
            self.state = 1110
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1104
                self.signed_number()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1105
                self.complex_number()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1106
                self.strings()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1107
                self.match(PythonParser.NONE)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1108
                self.match(PythonParser.TRUE)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1109
                self.match(PythonParser.FALSE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Literal_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def signed_number(self):
            return self.getTypedRuleContext(PythonParser.Signed_numberContext,0)


        def complex_number(self):
            return self.getTypedRuleContext(PythonParser.Complex_numberContext,0)


        def strings(self):
            return self.getTypedRuleContext(PythonParser.StringsContext,0)


        def NONE(self):
            return self.getToken(PythonParser.NONE, 0)

        def TRUE(self):
            return self.getToken(PythonParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(PythonParser.FALSE, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_literal_expr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteral_expr" ):
                return visitor.visitLiteral_expr(self)
            else:
                return visitor.visitChildren(self)




    def literal_expr(self):

        localctx = PythonParser.Literal_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_literal_expr)
        try:
            self.state = 1118
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1112
                self.signed_number()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1113
                self.complex_number()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1114
                self.strings()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1115
                self.match(PythonParser.NONE)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1116
                self.match(PythonParser.TRUE)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1117
                self.match(PythonParser.FALSE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Complex_numberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def signed_real_number(self):
            return self.getTypedRuleContext(PythonParser.Signed_real_numberContext,0)


        def imaginary_number(self):
            return self.getTypedRuleContext(PythonParser.Imaginary_numberContext,0)


        def PLUS(self):
            return self.getToken(PythonParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(PythonParser.MINUS, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_complex_number

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComplex_number" ):
                return visitor.visitComplex_number(self)
            else:
                return visitor.visitChildren(self)




    def complex_number(self):

        localctx = PythonParser.Complex_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_complex_number)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1120
            self.signed_real_number()
            self.state = 1121
            _la = self._input.LA(1)
            if not(_la==51 or _la==52):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1122
            self.imaginary_number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Signed_numberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(PythonParser.NUMBER, 0)

        def MINUS(self):
            return self.getToken(PythonParser.MINUS, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_signed_number

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSigned_number" ):
                return visitor.visitSigned_number(self)
            else:
                return visitor.visitChildren(self)




    def signed_number(self):

        localctx = PythonParser.Signed_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_signed_number)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1125
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==52:
                self.state = 1124
                self.match(PythonParser.MINUS)


            self.state = 1127
            self.match(PythonParser.NUMBER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Signed_real_numberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def real_number(self):
            return self.getTypedRuleContext(PythonParser.Real_numberContext,0)


        def MINUS(self):
            return self.getToken(PythonParser.MINUS, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_signed_real_number

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSigned_real_number" ):
                return visitor.visitSigned_real_number(self)
            else:
                return visitor.visitChildren(self)




    def signed_real_number(self):

        localctx = PythonParser.Signed_real_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_signed_real_number)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1130
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==52:
                self.state = 1129
                self.match(PythonParser.MINUS)


            self.state = 1132
            self.real_number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Real_numberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(PythonParser.NUMBER, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_real_number

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReal_number" ):
                return visitor.visitReal_number(self)
            else:
                return visitor.visitChildren(self)




    def real_number(self):

        localctx = PythonParser.Real_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_real_number)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1134
            self.match(PythonParser.NUMBER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Imaginary_numberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(PythonParser.NUMBER, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_imaginary_number

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImaginary_number" ):
                return visitor.visitImaginary_number(self)
            else:
                return visitor.visitChildren(self)




    def imaginary_number(self):

        localctx = PythonParser.Imaginary_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_imaginary_number)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1136
            self.match(PythonParser.NUMBER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Capture_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pattern_capture_target(self):
            return self.getTypedRuleContext(PythonParser.Pattern_capture_targetContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_capture_pattern

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCapture_pattern" ):
                return visitor.visitCapture_pattern(self)
            else:
                return visitor.visitChildren(self)




    def capture_pattern(self):

        localctx = PythonParser.Capture_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_capture_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1138
            self.pattern_capture_target()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pattern_capture_targetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def soft_kw__not__wildcard(self):
            return self.getTypedRuleContext(PythonParser.Soft_kw__not__wildcardContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_pattern_capture_target

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPattern_capture_target" ):
                return visitor.visitPattern_capture_target(self)
            else:
                return visitor.visitChildren(self)




    def pattern_capture_target(self):

        localctx = PythonParser.Pattern_capture_targetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_pattern_capture_target)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1140
            self.soft_kw__not__wildcard()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Wildcard_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def soft_kw_wildcard(self):
            return self.getTypedRuleContext(PythonParser.Soft_kw_wildcardContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_wildcard_pattern

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWildcard_pattern" ):
                return visitor.visitWildcard_pattern(self)
            else:
                return visitor.visitChildren(self)




    def wildcard_pattern(self):

        localctx = PythonParser.Wildcard_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_wildcard_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1142
            self.soft_kw_wildcard()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Value_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attr(self):
            return self.getTypedRuleContext(PythonParser.AttrContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_value_pattern

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitValue_pattern" ):
                return visitor.visitValue_pattern(self)
            else:
                return visitor.visitChildren(self)




    def value_pattern(self):

        localctx = PythonParser.Value_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_value_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1144
            self.attr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.NAME)
            else:
                return self.getToken(PythonParser.NAME, i)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.DOT)
            else:
                return self.getToken(PythonParser.DOT, i)

        def getRuleIndex(self):
            return PythonParser.RULE_attr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttr" ):
                return visitor.visitAttr(self)
            else:
                return visitor.visitChildren(self)




    def attr(self):

        localctx = PythonParser.AttrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_attr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1146
            self.match(PythonParser.NAME)
            self.state = 1149 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1147
                self.match(PythonParser.DOT)
                self.state = 1148
                self.match(PythonParser.NAME)
                self.state = 1151 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==47):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Name_or_attrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.NAME)
            else:
                return self.getToken(PythonParser.NAME, i)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.DOT)
            else:
                return self.getToken(PythonParser.DOT, i)

        def getRuleIndex(self):
            return PythonParser.RULE_name_or_attr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitName_or_attr" ):
                return visitor.visitName_or_attr(self)
            else:
                return visitor.visitChildren(self)




    def name_or_attr(self):

        localctx = PythonParser.Name_or_attrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_name_or_attr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1153
            self.match(PythonParser.NAME)
            self.state = 1158
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==47:
                self.state = 1154
                self.match(PythonParser.DOT)
                self.state = 1155
                self.match(PythonParser.NAME)
                self.state = 1160
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAR(self):
            return self.getToken(PythonParser.LPAR, 0)

        def pattern(self):
            return self.getTypedRuleContext(PythonParser.PatternContext,0)


        def RPAR(self):
            return self.getToken(PythonParser.RPAR, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_group_pattern

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroup_pattern" ):
                return visitor.visitGroup_pattern(self)
            else:
                return visitor.visitChildren(self)




    def group_pattern(self):

        localctx = PythonParser.Group_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_group_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1161
            self.match(PythonParser.LPAR)
            self.state = 1162
            self.pattern()
            self.state = 1163
            self.match(PythonParser.RPAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sequence_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LSQB(self):
            return self.getToken(PythonParser.LSQB, 0)

        def RSQB(self):
            return self.getToken(PythonParser.RSQB, 0)

        def maybe_sequence_pattern(self):
            return self.getTypedRuleContext(PythonParser.Maybe_sequence_patternContext,0)


        def LPAR(self):
            return self.getToken(PythonParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(PythonParser.RPAR, 0)

        def open_sequence_pattern(self):
            return self.getTypedRuleContext(PythonParser.Open_sequence_patternContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_sequence_pattern

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSequence_pattern" ):
                return visitor.visitSequence_pattern(self)
            else:
                return visitor.visitChildren(self)




    def sequence_pattern(self):

        localctx = PythonParser.Sequence_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_sequence_pattern)
        try:
            self.state = 1175
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [42]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1165
                self.match(PythonParser.LSQB)
                self.state = 1167
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,125,self._ctx)
                if la_ == 1:
                    self.state = 1166
                    self.maybe_sequence_pattern()


                self.state = 1169
                self.match(PythonParser.RSQB)
                pass
            elif token in [41]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1170
                self.match(PythonParser.LPAR)
                self.state = 1172
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,126,self._ctx)
                if la_ == 1:
                    self.state = 1171
                    self.open_sequence_pattern()


                self.state = 1174
                self.match(PythonParser.RPAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Open_sequence_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def maybe_star_pattern(self):
            return self.getTypedRuleContext(PythonParser.Maybe_star_patternContext,0)


        def COMMA(self):
            return self.getToken(PythonParser.COMMA, 0)

        def maybe_sequence_pattern(self):
            return self.getTypedRuleContext(PythonParser.Maybe_sequence_patternContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_open_sequence_pattern

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOpen_sequence_pattern" ):
                return visitor.visitOpen_sequence_pattern(self)
            else:
                return visitor.visitChildren(self)




    def open_sequence_pattern(self):

        localctx = PythonParser.Open_sequence_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_open_sequence_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1177
            self.maybe_star_pattern()
            self.state = 1178
            self.match(PythonParser.COMMA)
            self.state = 1180
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,128,self._ctx)
            if la_ == 1:
                self.state = 1179
                self.maybe_sequence_pattern()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Maybe_sequence_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def maybe_star_pattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Maybe_star_patternContext)
            else:
                return self.getTypedRuleContext(PythonParser.Maybe_star_patternContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def getRuleIndex(self):
            return PythonParser.RULE_maybe_sequence_pattern

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaybe_sequence_pattern" ):
                return visitor.visitMaybe_sequence_pattern(self)
            else:
                return visitor.visitChildren(self)




    def maybe_sequence_pattern(self):

        localctx = PythonParser.Maybe_sequence_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_maybe_sequence_pattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1182
            self.maybe_star_pattern()
            self.state = 1187
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,129,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1183
                    self.match(PythonParser.COMMA)
                    self.state = 1184
                    self.maybe_star_pattern() 
                self.state = 1189
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,129,self._ctx)

            self.state = 1191
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==49:
                self.state = 1190
                self.match(PythonParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Maybe_star_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def star_pattern(self):
            return self.getTypedRuleContext(PythonParser.Star_patternContext,0)


        def pattern(self):
            return self.getTypedRuleContext(PythonParser.PatternContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_maybe_star_pattern

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaybe_star_pattern" ):
                return visitor.visitMaybe_star_pattern(self)
            else:
                return visitor.visitChildren(self)




    def maybe_star_pattern(self):

        localctx = PythonParser.Maybe_star_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_maybe_star_pattern)
        try:
            self.state = 1195
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,131,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1193
                self.star_pattern()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1194
                self.pattern()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Star_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(PythonParser.STAR, 0)

        def pattern_capture_target(self):
            return self.getTypedRuleContext(PythonParser.Pattern_capture_targetContext,0)


        def wildcard_pattern(self):
            return self.getTypedRuleContext(PythonParser.Wildcard_patternContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_star_pattern

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStar_pattern" ):
                return visitor.visitStar_pattern(self)
            else:
                return visitor.visitChildren(self)




    def star_pattern(self):

        localctx = PythonParser.Star_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_star_pattern)
        try:
            self.state = 1201
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,132,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1197
                self.match(PythonParser.STAR)
                self.state = 1198
                self.pattern_capture_target()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1199
                self.match(PythonParser.STAR)
                self.state = 1200
                self.wildcard_pattern()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Mapping_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(PythonParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(PythonParser.RBRACE, 0)

        def double_star_pattern(self):
            return self.getTypedRuleContext(PythonParser.Double_star_patternContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def items_pattern(self):
            return self.getTypedRuleContext(PythonParser.Items_patternContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_mapping_pattern

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMapping_pattern" ):
                return visitor.visitMapping_pattern(self)
            else:
                return visitor.visitChildren(self)




    def mapping_pattern(self):

        localctx = PythonParser.Mapping_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_mapping_pattern)
        self._la = 0 # Token type
        try:
            self.state = 1223
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,136,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1203
                self.match(PythonParser.LBRACE)
                self.state = 1204
                self.match(PythonParser.RBRACE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1205
                self.match(PythonParser.LBRACE)
                self.state = 1206
                self.double_star_pattern()
                self.state = 1208
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==49:
                    self.state = 1207
                    self.match(PythonParser.COMMA)


                self.state = 1210
                self.match(PythonParser.RBRACE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1212
                self.match(PythonParser.LBRACE)
                self.state = 1213
                self.items_pattern()
                self.state = 1216
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,134,self._ctx)
                if la_ == 1:
                    self.state = 1214
                    self.match(PythonParser.COMMA)
                    self.state = 1215
                    self.double_star_pattern()


                self.state = 1219
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==49:
                    self.state = 1218
                    self.match(PythonParser.COMMA)


                self.state = 1221
                self.match(PythonParser.RBRACE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Items_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def key_value_pattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Key_value_patternContext)
            else:
                return self.getTypedRuleContext(PythonParser.Key_value_patternContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def getRuleIndex(self):
            return PythonParser.RULE_items_pattern

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitItems_pattern" ):
                return visitor.visitItems_pattern(self)
            else:
                return visitor.visitChildren(self)




    def items_pattern(self):

        localctx = PythonParser.Items_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_items_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1225
            self.key_value_pattern()
            self.state = 1230
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,137,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1226
                    self.match(PythonParser.COMMA)
                    self.state = 1227
                    self.key_value_pattern() 
                self.state = 1232
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,137,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Key_value_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)

        def pattern(self):
            return self.getTypedRuleContext(PythonParser.PatternContext,0)


        def literal_expr(self):
            return self.getTypedRuleContext(PythonParser.Literal_exprContext,0)


        def attr(self):
            return self.getTypedRuleContext(PythonParser.AttrContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_key_value_pattern

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKey_value_pattern" ):
                return visitor.visitKey_value_pattern(self)
            else:
                return visitor.visitChildren(self)




    def key_value_pattern(self):

        localctx = PythonParser.Key_value_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_key_value_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1235
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 6, 11, 16, 52, 90, 91]:
                self.state = 1233
                self.literal_expr()
                pass
            elif token in [89]:
                self.state = 1234
                self.attr()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1237
            self.match(PythonParser.COLON)
            self.state = 1238
            self.pattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Double_star_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOUBLESTAR(self):
            return self.getToken(PythonParser.DOUBLESTAR, 0)

        def pattern_capture_target(self):
            return self.getTypedRuleContext(PythonParser.Pattern_capture_targetContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_double_star_pattern

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDouble_star_pattern" ):
                return visitor.visitDouble_star_pattern(self)
            else:
                return visitor.visitChildren(self)




    def double_star_pattern(self):

        localctx = PythonParser.Double_star_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_double_star_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1240
            self.match(PythonParser.DOUBLESTAR)
            self.state = 1241
            self.pattern_capture_target()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name_or_attr(self):
            return self.getTypedRuleContext(PythonParser.Name_or_attrContext,0)


        def LPAR(self):
            return self.getToken(PythonParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(PythonParser.RPAR, 0)

        def positional_patterns(self):
            return self.getTypedRuleContext(PythonParser.Positional_patternsContext,0)


        def keyword_patterns(self):
            return self.getTypedRuleContext(PythonParser.Keyword_patternsContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def getRuleIndex(self):
            return PythonParser.RULE_class_pattern

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClass_pattern" ):
                return visitor.visitClass_pattern(self)
            else:
                return visitor.visitChildren(self)




    def class_pattern(self):

        localctx = PythonParser.Class_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_class_pattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1243
            self.name_or_attr()
            self.state = 1244
            self.match(PythonParser.LPAR)
            self.state = 1256
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,142,self._ctx)
            if la_ == 1:
                self.state = 1251
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,140,self._ctx)
                if la_ == 1:
                    self.state = 1245
                    self.positional_patterns()
                    self.state = 1248
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,139,self._ctx)
                    if la_ == 1:
                        self.state = 1246
                        self.match(PythonParser.COMMA)
                        self.state = 1247
                        self.keyword_patterns()


                    pass

                elif la_ == 2:
                    self.state = 1250
                    self.keyword_patterns()
                    pass


                self.state = 1254
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==49:
                    self.state = 1253
                    self.match(PythonParser.COMMA)




            self.state = 1258
            self.match(PythonParser.RPAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Positional_patternsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.PatternContext)
            else:
                return self.getTypedRuleContext(PythonParser.PatternContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def getRuleIndex(self):
            return PythonParser.RULE_positional_patterns

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPositional_patterns" ):
                return visitor.visitPositional_patterns(self)
            else:
                return visitor.visitChildren(self)




    def positional_patterns(self):

        localctx = PythonParser.Positional_patternsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_positional_patterns)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1260
            self.pattern()
            self.state = 1265
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,143,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1261
                    self.match(PythonParser.COMMA)
                    self.state = 1262
                    self.pattern() 
                self.state = 1267
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,143,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Keyword_patternsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def keyword_pattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Keyword_patternContext)
            else:
                return self.getTypedRuleContext(PythonParser.Keyword_patternContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def getRuleIndex(self):
            return PythonParser.RULE_keyword_patterns

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKeyword_patterns" ):
                return visitor.visitKeyword_patterns(self)
            else:
                return visitor.visitChildren(self)




    def keyword_patterns(self):

        localctx = PythonParser.Keyword_patternsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_keyword_patterns)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1268
            self.keyword_pattern()
            self.state = 1273
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,144,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1269
                    self.match(PythonParser.COMMA)
                    self.state = 1270
                    self.keyword_pattern() 
                self.state = 1275
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,144,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Keyword_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def EQUAL(self):
            return self.getToken(PythonParser.EQUAL, 0)

        def pattern(self):
            return self.getTypedRuleContext(PythonParser.PatternContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_keyword_pattern

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKeyword_pattern" ):
                return visitor.visitKeyword_pattern(self)
            else:
                return visitor.visitChildren(self)




    def keyword_pattern(self):

        localctx = PythonParser.Keyword_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_keyword_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1276
            self.match(PythonParser.NAME)
            self.state = 1277
            self.match(PythonParser.EQUAL)
            self.state = 1278
            self.pattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_aliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def soft_kw_type(self):
            return self.getTypedRuleContext(PythonParser.Soft_kw_typeContext,0)


        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def EQUAL(self):
            return self.getToken(PythonParser.EQUAL, 0)

        def expression(self):
            return self.getTypedRuleContext(PythonParser.ExpressionContext,0)


        def type_params(self):
            return self.getTypedRuleContext(PythonParser.Type_paramsContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_type_alias

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_alias" ):
                return visitor.visitType_alias(self)
            else:
                return visitor.visitChildren(self)




    def type_alias(self):

        localctx = PythonParser.Type_aliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_type_alias)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1280
            self.soft_kw_type()
            self.state = 1281
            self.match(PythonParser.NAME)
            self.state = 1283
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==42:
                self.state = 1282
                self.type_params()


            self.state = 1285
            self.match(PythonParser.EQUAL)
            self.state = 1286
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_paramsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LSQB(self):
            return self.getToken(PythonParser.LSQB, 0)

        def type_param_seq(self):
            return self.getTypedRuleContext(PythonParser.Type_param_seqContext,0)


        def RSQB(self):
            return self.getToken(PythonParser.RSQB, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_type_params

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_params" ):
                return visitor.visitType_params(self)
            else:
                return visitor.visitChildren(self)




    def type_params(self):

        localctx = PythonParser.Type_paramsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_type_params)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1288
            self.match(PythonParser.LSQB)
            self.state = 1289
            self.type_param_seq()
            self.state = 1290
            self.match(PythonParser.RSQB)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_param_seqContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_param(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Type_paramContext)
            else:
                return self.getTypedRuleContext(PythonParser.Type_paramContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def getRuleIndex(self):
            return PythonParser.RULE_type_param_seq

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_param_seq" ):
                return visitor.visitType_param_seq(self)
            else:
                return visitor.visitChildren(self)




    def type_param_seq(self):

        localctx = PythonParser.Type_param_seqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_type_param_seq)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1292
            self.type_param()
            self.state = 1297
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,146,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1293
                    self.match(PythonParser.COMMA)
                    self.state = 1294
                    self.type_param() 
                self.state = 1299
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,146,self._ctx)

            self.state = 1301
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==49:
                self.state = 1300
                self.match(PythonParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_paramContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def type_param_bound(self):
            return self.getTypedRuleContext(PythonParser.Type_param_boundContext,0)


        def STAR(self):
            return self.getToken(PythonParser.STAR, 0)

        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)

        def expression(self):
            return self.getTypedRuleContext(PythonParser.ExpressionContext,0)


        def DOUBLESTAR(self):
            return self.getToken(PythonParser.DOUBLESTAR, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_type_param

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_param" ):
                return visitor.visitType_param(self)
            else:
                return visitor.visitChildren(self)




    def type_param(self):

        localctx = PythonParser.Type_paramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_type_param)
        self._la = 0 # Token type
        try:
            self.state = 1319
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [89]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1303
                self.match(PythonParser.NAME)
                self.state = 1305
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==48:
                    self.state = 1304
                    self.type_param_bound()


                pass
            elif token in [53]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1307
                self.match(PythonParser.STAR)
                self.state = 1308
                self.match(PythonParser.NAME)
                self.state = 1311
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==48:
                    self.state = 1309
                    self.match(PythonParser.COLON)
                    self.state = 1310
                    self.expression()


                pass
            elif token in [69]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1313
                self.match(PythonParser.DOUBLESTAR)
                self.state = 1314
                self.match(PythonParser.NAME)
                self.state = 1317
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==48:
                    self.state = 1315
                    self.match(PythonParser.COLON)
                    self.state = 1316
                    self.expression()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_param_boundContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)

        def expression(self):
            return self.getTypedRuleContext(PythonParser.ExpressionContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_type_param_bound

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_param_bound" ):
                return visitor.visitType_param_bound(self)
            else:
                return visitor.visitChildren(self)




    def type_param_bound(self):

        localctx = PythonParser.Type_param_boundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_type_param_bound)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1321
            self.match(PythonParser.COLON)
            self.state = 1322
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PythonParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def getRuleIndex(self):
            return PythonParser.RULE_expressions

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressions" ):
                return visitor.visitExpressions(self)
            else:
                return visitor.visitChildren(self)




    def expressions(self):

        localctx = PythonParser.ExpressionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_expressions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1324
            self.expression()
            self.state = 1329
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,152,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1325
                    self.match(PythonParser.COMMA)
                    self.state = 1326
                    self.expression() 
                self.state = 1331
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,152,self._ctx)

            self.state = 1333
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==49:
                self.state = 1332
                self.match(PythonParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def disjunction(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.DisjunctionContext)
            else:
                return self.getTypedRuleContext(PythonParser.DisjunctionContext,i)


        def IF(self):
            return self.getToken(PythonParser.IF, 0)

        def ELSE(self):
            return self.getToken(PythonParser.ELSE, 0)

        def expression(self):
            return self.getTypedRuleContext(PythonParser.ExpressionContext,0)


        def lambdef(self):
            return self.getTypedRuleContext(PythonParser.LambdefContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_expression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression" ):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)




    def expression(self):

        localctx = PythonParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_expression)
        self._la = 0 # Token type
        try:
            self.state = 1344
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 6, 7, 11, 16, 34, 41, 42, 43, 51, 52, 65, 86, 89, 90, 91]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1335
                self.disjunction()
                self.state = 1341
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==38:
                    self.state = 1336
                    self.match(PythonParser.IF)
                    self.state = 1337
                    self.disjunction()
                    self.state = 1338
                    self.match(PythonParser.ELSE)
                    self.state = 1339
                    self.expression()


                pass
            elif token in [24]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1343
                self.lambdef()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Yield_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def YIELD(self):
            return self.getToken(PythonParser.YIELD, 0)

        def FROM(self):
            return self.getToken(PythonParser.FROM, 0)

        def expression(self):
            return self.getTypedRuleContext(PythonParser.ExpressionContext,0)


        def star_expressions(self):
            return self.getTypedRuleContext(PythonParser.Star_expressionsContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_yield_expr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYield_expr" ):
                return visitor.visitYield_expr(self)
            else:
                return visitor.visitChildren(self)




    def yield_expr(self):

        localctx = PythonParser.Yield_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_yield_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1346
            self.match(PythonParser.YIELD)
            self.state = 1352
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [28]:
                self.state = 1347
                self.match(PythonParser.FROM)
                self.state = 1348
                self.expression()
                pass
            elif token in [3, 6, 7, 11, 16, 24, 34, 41, 42, 43, 44, 46, 48, 50, 51, 52, 53, 59, 65, 86, 88, 89, 90, 91, 92, 93]:
                self.state = 1350
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 15778009055299784) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 119537665) != 0):
                    self.state = 1349
                    self.star_expressions()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Star_expressionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def star_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Star_expressionContext)
            else:
                return self.getTypedRuleContext(PythonParser.Star_expressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def getRuleIndex(self):
            return PythonParser.RULE_star_expressions

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStar_expressions" ):
                return visitor.visitStar_expressions(self)
            else:
                return visitor.visitChildren(self)




    def star_expressions(self):

        localctx = PythonParser.Star_expressionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_star_expressions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1354
            self.star_expression()
            self.state = 1359
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,158,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1355
                    self.match(PythonParser.COMMA)
                    self.state = 1356
                    self.star_expression() 
                self.state = 1361
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,158,self._ctx)

            self.state = 1363
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==49:
                self.state = 1362
                self.match(PythonParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Star_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(PythonParser.STAR, 0)

        def bitwise_or(self):
            return self.getTypedRuleContext(PythonParser.Bitwise_orContext,0)


        def expression(self):
            return self.getTypedRuleContext(PythonParser.ExpressionContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_star_expression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStar_expression" ):
                return visitor.visitStar_expression(self)
            else:
                return visitor.visitChildren(self)




    def star_expression(self):

        localctx = PythonParser.Star_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_star_expression)
        try:
            self.state = 1368
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [53]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1365
                self.match(PythonParser.STAR)
                self.state = 1366
                self.bitwise_or(0)
                pass
            elif token in [3, 6, 7, 11, 16, 24, 34, 41, 42, 43, 51, 52, 65, 86, 89, 90, 91]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1367
                self.expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Star_named_expressionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def star_named_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Star_named_expressionContext)
            else:
                return self.getTypedRuleContext(PythonParser.Star_named_expressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def getRuleIndex(self):
            return PythonParser.RULE_star_named_expressions

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStar_named_expressions" ):
                return visitor.visitStar_named_expressions(self)
            else:
                return visitor.visitChildren(self)




    def star_named_expressions(self):

        localctx = PythonParser.Star_named_expressionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_star_named_expressions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1370
            self.star_named_expression()
            self.state = 1375
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,161,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1371
                    self.match(PythonParser.COMMA)
                    self.state = 1372
                    self.star_named_expression() 
                self.state = 1377
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,161,self._ctx)

            self.state = 1379
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==49:
                self.state = 1378
                self.match(PythonParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Star_named_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(PythonParser.STAR, 0)

        def bitwise_or(self):
            return self.getTypedRuleContext(PythonParser.Bitwise_orContext,0)


        def named_expression(self):
            return self.getTypedRuleContext(PythonParser.Named_expressionContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_star_named_expression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStar_named_expression" ):
                return visitor.visitStar_named_expression(self)
            else:
                return visitor.visitChildren(self)




    def star_named_expression(self):

        localctx = PythonParser.Star_named_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_star_named_expression)
        try:
            self.state = 1384
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [53]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1381
                self.match(PythonParser.STAR)
                self.state = 1382
                self.bitwise_or(0)
                pass
            elif token in [3, 6, 7, 11, 16, 24, 34, 41, 42, 43, 51, 52, 65, 86, 89, 90, 91]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1383
                self.named_expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Assignment_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def COLONEQUAL(self):
            return self.getToken(PythonParser.COLONEQUAL, 0)

        def expression(self):
            return self.getTypedRuleContext(PythonParser.ExpressionContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_assignment_expression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignment_expression" ):
                return visitor.visitAssignment_expression(self)
            else:
                return visitor.visitChildren(self)




    def assignment_expression(self):

        localctx = PythonParser.Assignment_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_assignment_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1386
            self.match(PythonParser.NAME)
            self.state = 1387
            self.match(PythonParser.COLONEQUAL)
            self.state = 1388
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Named_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignment_expression(self):
            return self.getTypedRuleContext(PythonParser.Assignment_expressionContext,0)


        def expression(self):
            return self.getTypedRuleContext(PythonParser.ExpressionContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_named_expression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamed_expression" ):
                return visitor.visitNamed_expression(self)
            else:
                return visitor.visitChildren(self)




    def named_expression(self):

        localctx = PythonParser.Named_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_named_expression)
        try:
            self.state = 1392
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,164,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1390
                self.assignment_expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1391
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DisjunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conjunction(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.ConjunctionContext)
            else:
                return self.getTypedRuleContext(PythonParser.ConjunctionContext,i)


        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.OR)
            else:
                return self.getToken(PythonParser.OR, i)

        def getRuleIndex(self):
            return PythonParser.RULE_disjunction

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDisjunction" ):
                return visitor.visitDisjunction(self)
            else:
                return visitor.visitChildren(self)




    def disjunction(self):

        localctx = PythonParser.DisjunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_disjunction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1394
            self.conjunction()
            self.state = 1399
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==39:
                self.state = 1395
                self.match(PythonParser.OR)
                self.state = 1396
                self.conjunction()
                self.state = 1401
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConjunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def inversion(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.InversionContext)
            else:
                return self.getTypedRuleContext(PythonParser.InversionContext,i)


        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.AND)
            else:
                return self.getToken(PythonParser.AND, i)

        def getRuleIndex(self):
            return PythonParser.RULE_conjunction

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConjunction" ):
                return visitor.visitConjunction(self)
            else:
                return visitor.visitChildren(self)




    def conjunction(self):

        localctx = PythonParser.ConjunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_conjunction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1402
            self.inversion()
            self.state = 1407
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==21:
                self.state = 1403
                self.match(PythonParser.AND)
                self.state = 1404
                self.inversion()
                self.state = 1409
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InversionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(PythonParser.NOT, 0)

        def inversion(self):
            return self.getTypedRuleContext(PythonParser.InversionContext,0)


        def comparison(self):
            return self.getTypedRuleContext(PythonParser.ComparisonContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_inversion

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInversion" ):
                return visitor.visitInversion(self)
            else:
                return visitor.visitChildren(self)




    def inversion(self):

        localctx = PythonParser.InversionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_inversion)
        try:
            self.state = 1413
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [34]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1410
                self.match(PythonParser.NOT)
                self.state = 1411
                self.inversion()
                pass
            elif token in [3, 6, 7, 11, 16, 41, 42, 43, 51, 52, 65, 86, 89, 90, 91]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1412
                self.comparison()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComparisonContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bitwise_or(self):
            return self.getTypedRuleContext(PythonParser.Bitwise_orContext,0)


        def compare_op_bitwise_or_pair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Compare_op_bitwise_or_pairContext)
            else:
                return self.getTypedRuleContext(PythonParser.Compare_op_bitwise_or_pairContext,i)


        def getRuleIndex(self):
            return PythonParser.RULE_comparison

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparison" ):
                return visitor.visitComparison(self)
            else:
                return visitor.visitChildren(self)




    def comparison(self):

        localctx = PythonParser.ComparisonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_comparison)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1415
            self.bitwise_or(0)
            self.state = 1419
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 14)) & ~0x3f) == 0 and ((1 << (_la - 14)) & 2137450605445153) != 0):
                self.state = 1416
                self.compare_op_bitwise_or_pair()
                self.state = 1421
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Compare_op_bitwise_or_pairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def eq_bitwise_or(self):
            return self.getTypedRuleContext(PythonParser.Eq_bitwise_orContext,0)


        def noteq_bitwise_or(self):
            return self.getTypedRuleContext(PythonParser.Noteq_bitwise_orContext,0)


        def lte_bitwise_or(self):
            return self.getTypedRuleContext(PythonParser.Lte_bitwise_orContext,0)


        def lt_bitwise_or(self):
            return self.getTypedRuleContext(PythonParser.Lt_bitwise_orContext,0)


        def gte_bitwise_or(self):
            return self.getTypedRuleContext(PythonParser.Gte_bitwise_orContext,0)


        def gt_bitwise_or(self):
            return self.getTypedRuleContext(PythonParser.Gt_bitwise_orContext,0)


        def notin_bitwise_or(self):
            return self.getTypedRuleContext(PythonParser.Notin_bitwise_orContext,0)


        def in_bitwise_or(self):
            return self.getTypedRuleContext(PythonParser.In_bitwise_orContext,0)


        def isnot_bitwise_or(self):
            return self.getTypedRuleContext(PythonParser.Isnot_bitwise_orContext,0)


        def is_bitwise_or(self):
            return self.getTypedRuleContext(PythonParser.Is_bitwise_orContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_compare_op_bitwise_or_pair

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompare_op_bitwise_or_pair" ):
                return visitor.visitCompare_op_bitwise_or_pair(self)
            else:
                return visitor.visitChildren(self)




    def compare_op_bitwise_or_pair(self):

        localctx = PythonParser.Compare_op_bitwise_or_pairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_compare_op_bitwise_or_pair)
        try:
            self.state = 1432
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,169,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1422
                self.eq_bitwise_or()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1423
                self.noteq_bitwise_or()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1424
                self.lte_bitwise_or()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1425
                self.lt_bitwise_or()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1426
                self.gte_bitwise_or()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1427
                self.gt_bitwise_or()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1428
                self.notin_bitwise_or()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1429
                self.in_bitwise_or()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1430
                self.isnot_bitwise_or()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1431
                self.is_bitwise_or()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Eq_bitwise_orContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQEQUAL(self):
            return self.getToken(PythonParser.EQEQUAL, 0)

        def bitwise_or(self):
            return self.getTypedRuleContext(PythonParser.Bitwise_orContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_eq_bitwise_or

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEq_bitwise_or" ):
                return visitor.visitEq_bitwise_or(self)
            else:
                return visitor.visitChildren(self)




    def eq_bitwise_or(self):

        localctx = PythonParser.Eq_bitwise_orContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_eq_bitwise_or)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1434
            self.match(PythonParser.EQEQUAL)
            self.state = 1435
            self.bitwise_or(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Noteq_bitwise_orContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bitwise_or(self):
            return self.getTypedRuleContext(PythonParser.Bitwise_orContext,0)


        def NOTEQUAL(self):
            return self.getToken(PythonParser.NOTEQUAL, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_noteq_bitwise_or

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNoteq_bitwise_or" ):
                return visitor.visitNoteq_bitwise_or(self)
            else:
                return visitor.visitChildren(self)




    def noteq_bitwise_or(self):

        localctx = PythonParser.Noteq_bitwise_orContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_noteq_bitwise_or)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1437
            self.match(PythonParser.NOTEQUAL)
            self.state = 1438
            self.bitwise_or(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lte_bitwise_orContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LESSEQUAL(self):
            return self.getToken(PythonParser.LESSEQUAL, 0)

        def bitwise_or(self):
            return self.getTypedRuleContext(PythonParser.Bitwise_orContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_lte_bitwise_or

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLte_bitwise_or" ):
                return visitor.visitLte_bitwise_or(self)
            else:
                return visitor.visitChildren(self)




    def lte_bitwise_or(self):

        localctx = PythonParser.Lte_bitwise_orContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_lte_bitwise_or)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1440
            self.match(PythonParser.LESSEQUAL)
            self.state = 1441
            self.bitwise_or(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lt_bitwise_orContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LESS(self):
            return self.getToken(PythonParser.LESS, 0)

        def bitwise_or(self):
            return self.getTypedRuleContext(PythonParser.Bitwise_orContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_lt_bitwise_or

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLt_bitwise_or" ):
                return visitor.visitLt_bitwise_or(self)
            else:
                return visitor.visitChildren(self)




    def lt_bitwise_or(self):

        localctx = PythonParser.Lt_bitwise_orContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_lt_bitwise_or)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1443
            self.match(PythonParser.LESS)
            self.state = 1444
            self.bitwise_or(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Gte_bitwise_orContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GREATEREQUAL(self):
            return self.getToken(PythonParser.GREATEREQUAL, 0)

        def bitwise_or(self):
            return self.getTypedRuleContext(PythonParser.Bitwise_orContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_gte_bitwise_or

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGte_bitwise_or" ):
                return visitor.visitGte_bitwise_or(self)
            else:
                return visitor.visitChildren(self)




    def gte_bitwise_or(self):

        localctx = PythonParser.Gte_bitwise_orContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_gte_bitwise_or)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1446
            self.match(PythonParser.GREATEREQUAL)
            self.state = 1447
            self.bitwise_or(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Gt_bitwise_orContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GREATER(self):
            return self.getToken(PythonParser.GREATER, 0)

        def bitwise_or(self):
            return self.getTypedRuleContext(PythonParser.Bitwise_orContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_gt_bitwise_or

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGt_bitwise_or" ):
                return visitor.visitGt_bitwise_or(self)
            else:
                return visitor.visitChildren(self)




    def gt_bitwise_or(self):

        localctx = PythonParser.Gt_bitwise_orContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_gt_bitwise_or)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1449
            self.match(PythonParser.GREATER)
            self.state = 1450
            self.bitwise_or(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Notin_bitwise_orContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(PythonParser.NOT, 0)

        def IN(self):
            return self.getToken(PythonParser.IN, 0)

        def bitwise_or(self):
            return self.getTypedRuleContext(PythonParser.Bitwise_orContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_notin_bitwise_or

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNotin_bitwise_or" ):
                return visitor.visitNotin_bitwise_or(self)
            else:
                return visitor.visitChildren(self)




    def notin_bitwise_or(self):

        localctx = PythonParser.Notin_bitwise_orContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_notin_bitwise_or)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1452
            self.match(PythonParser.NOT)
            self.state = 1453
            self.match(PythonParser.IN)
            self.state = 1454
            self.bitwise_or(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class In_bitwise_orContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IN(self):
            return self.getToken(PythonParser.IN, 0)

        def bitwise_or(self):
            return self.getTypedRuleContext(PythonParser.Bitwise_orContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_in_bitwise_or

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIn_bitwise_or" ):
                return visitor.visitIn_bitwise_or(self)
            else:
                return visitor.visitChildren(self)




    def in_bitwise_or(self):

        localctx = PythonParser.In_bitwise_orContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_in_bitwise_or)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1456
            self.match(PythonParser.IN)
            self.state = 1457
            self.bitwise_or(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isnot_bitwise_orContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IS(self):
            return self.getToken(PythonParser.IS, 0)

        def NOT(self):
            return self.getToken(PythonParser.NOT, 0)

        def bitwise_or(self):
            return self.getTypedRuleContext(PythonParser.Bitwise_orContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_isnot_bitwise_or

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIsnot_bitwise_or" ):
                return visitor.visitIsnot_bitwise_or(self)
            else:
                return visitor.visitChildren(self)




    def isnot_bitwise_or(self):

        localctx = PythonParser.Isnot_bitwise_orContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_isnot_bitwise_or)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1459
            self.match(PythonParser.IS)
            self.state = 1460
            self.match(PythonParser.NOT)
            self.state = 1461
            self.bitwise_or(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Is_bitwise_orContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IS(self):
            return self.getToken(PythonParser.IS, 0)

        def bitwise_or(self):
            return self.getTypedRuleContext(PythonParser.Bitwise_orContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_is_bitwise_or

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIs_bitwise_or" ):
                return visitor.visitIs_bitwise_or(self)
            else:
                return visitor.visitChildren(self)




    def is_bitwise_or(self):

        localctx = PythonParser.Is_bitwise_orContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_is_bitwise_or)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1463
            self.match(PythonParser.IS)
            self.state = 1464
            self.bitwise_or(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Bitwise_orContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bitwise_xor(self):
            return self.getTypedRuleContext(PythonParser.Bitwise_xorContext,0)


        def bitwise_or(self):
            return self.getTypedRuleContext(PythonParser.Bitwise_orContext,0)


        def VBAR(self):
            return self.getToken(PythonParser.VBAR, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_bitwise_or

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitwise_or" ):
                return visitor.visitBitwise_or(self)
            else:
                return visitor.visitChildren(self)



    def bitwise_or(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PythonParser.Bitwise_orContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 254
        self.enterRecursionRule(localctx, 254, self.RULE_bitwise_or, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1467
            self.bitwise_xor(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 1474
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,170,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PythonParser.Bitwise_orContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_bitwise_or)
                    self.state = 1469
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 1470
                    self.match(PythonParser.VBAR)
                    self.state = 1471
                    self.bitwise_xor(0) 
                self.state = 1476
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,170,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Bitwise_xorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bitwise_and(self):
            return self.getTypedRuleContext(PythonParser.Bitwise_andContext,0)


        def bitwise_xor(self):
            return self.getTypedRuleContext(PythonParser.Bitwise_xorContext,0)


        def CIRCUMFLEX(self):
            return self.getToken(PythonParser.CIRCUMFLEX, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_bitwise_xor

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitwise_xor" ):
                return visitor.visitBitwise_xor(self)
            else:
                return visitor.visitChildren(self)



    def bitwise_xor(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PythonParser.Bitwise_xorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 256
        self.enterRecursionRule(localctx, 256, self.RULE_bitwise_xor, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1478
            self.bitwise_and(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 1485
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,171,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PythonParser.Bitwise_xorContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_bitwise_xor)
                    self.state = 1480
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 1481
                    self.match(PythonParser.CIRCUMFLEX)
                    self.state = 1482
                    self.bitwise_and(0) 
                self.state = 1487
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,171,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Bitwise_andContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def shift_expr(self):
            return self.getTypedRuleContext(PythonParser.Shift_exprContext,0)


        def bitwise_and(self):
            return self.getTypedRuleContext(PythonParser.Bitwise_andContext,0)


        def AMPER(self):
            return self.getToken(PythonParser.AMPER, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_bitwise_and

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitwise_and" ):
                return visitor.visitBitwise_and(self)
            else:
                return visitor.visitChildren(self)



    def bitwise_and(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PythonParser.Bitwise_andContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 258
        self.enterRecursionRule(localctx, 258, self.RULE_bitwise_and, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1489
            self.shift_expr(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 1496
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,172,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PythonParser.Bitwise_andContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_bitwise_and)
                    self.state = 1491
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 1492
                    self.match(PythonParser.AMPER)
                    self.state = 1493
                    self.shift_expr(0) 
                self.state = 1498
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,172,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Shift_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sum_(self):
            return self.getTypedRuleContext(PythonParser.SumContext,0)


        def shift_expr(self):
            return self.getTypedRuleContext(PythonParser.Shift_exprContext,0)


        def LEFTSHIFT(self):
            return self.getToken(PythonParser.LEFTSHIFT, 0)

        def RIGHTSHIFT(self):
            return self.getToken(PythonParser.RIGHTSHIFT, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_shift_expr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShift_expr" ):
                return visitor.visitShift_expr(self)
            else:
                return visitor.visitChildren(self)



    def shift_expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PythonParser.Shift_exprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 260
        self.enterRecursionRule(localctx, 260, self.RULE_shift_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1500
            self.sum_(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 1507
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,173,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PythonParser.Shift_exprContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_shift_expr)
                    self.state = 1502
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 1503
                    _la = self._input.LA(1)
                    if not(_la==67 or _la==68):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1504
                    self.sum_(0) 
                self.state = 1509
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,173,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class SumContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def term(self):
            return self.getTypedRuleContext(PythonParser.TermContext,0)


        def sum_(self):
            return self.getTypedRuleContext(PythonParser.SumContext,0)


        def PLUS(self):
            return self.getToken(PythonParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(PythonParser.MINUS, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_sum

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSum" ):
                return visitor.visitSum(self)
            else:
                return visitor.visitChildren(self)



    def sum_(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PythonParser.SumContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 262
        self.enterRecursionRule(localctx, 262, self.RULE_sum, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1511
            self.term(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 1518
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,174,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PythonParser.SumContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_sum)
                    self.state = 1513
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 1514
                    _la = self._input.LA(1)
                    if not(_la==51 or _la==52):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1515
                    self.term(0) 
                self.state = 1520
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,174,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class TermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor(self):
            return self.getTypedRuleContext(PythonParser.FactorContext,0)


        def term(self):
            return self.getTypedRuleContext(PythonParser.TermContext,0)


        def STAR(self):
            return self.getToken(PythonParser.STAR, 0)

        def SLASH(self):
            return self.getToken(PythonParser.SLASH, 0)

        def DOUBLESLASH(self):
            return self.getToken(PythonParser.DOUBLESLASH, 0)

        def PERCENT(self):
            return self.getToken(PythonParser.PERCENT, 0)

        def AT(self):
            return self.getToken(PythonParser.AT, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_term

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTerm" ):
                return visitor.visitTerm(self)
            else:
                return visitor.visitChildren(self)



    def term(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PythonParser.TermContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 264
        self.enterRecursionRule(localctx, 264, self.RULE_term, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1522
            self.factor()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1529
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,175,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PythonParser.TermContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_term)
                    self.state = 1524
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 1525
                    _la = self._input.LA(1)
                    if not(((((_la - 53)) & ~0x3f) == 0 and ((1 << (_la - 53)) & 1342177411) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1526
                    self.factor() 
                self.state = 1531
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,175,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class FactorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLUS(self):
            return self.getToken(PythonParser.PLUS, 0)

        def factor(self):
            return self.getTypedRuleContext(PythonParser.FactorContext,0)


        def MINUS(self):
            return self.getToken(PythonParser.MINUS, 0)

        def TILDE(self):
            return self.getToken(PythonParser.TILDE, 0)

        def power(self):
            return self.getTypedRuleContext(PythonParser.PowerContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_factor

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFactor" ):
                return visitor.visitFactor(self)
            else:
                return visitor.visitChildren(self)




    def factor(self):

        localctx = PythonParser.FactorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_factor)
        try:
            self.state = 1539
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [51]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1532
                self.match(PythonParser.PLUS)
                self.state = 1533
                self.factor()
                pass
            elif token in [52]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1534
                self.match(PythonParser.MINUS)
                self.state = 1535
                self.factor()
                pass
            elif token in [65]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1536
                self.match(PythonParser.TILDE)
                self.state = 1537
                self.factor()
                pass
            elif token in [3, 6, 7, 11, 16, 41, 42, 43, 86, 89, 90, 91]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1538
                self.power()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PowerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def await_primary(self):
            return self.getTypedRuleContext(PythonParser.Await_primaryContext,0)


        def DOUBLESTAR(self):
            return self.getToken(PythonParser.DOUBLESTAR, 0)

        def factor(self):
            return self.getTypedRuleContext(PythonParser.FactorContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_power

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPower" ):
                return visitor.visitPower(self)
            else:
                return visitor.visitChildren(self)




    def power(self):

        localctx = PythonParser.PowerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_power)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1541
            self.await_primary()
            self.state = 1544
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,177,self._ctx)
            if la_ == 1:
                self.state = 1542
                self.match(PythonParser.DOUBLESTAR)
                self.state = 1543
                self.factor()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Await_primaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AWAIT(self):
            return self.getToken(PythonParser.AWAIT, 0)

        def primary(self):
            return self.getTypedRuleContext(PythonParser.PrimaryContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_await_primary

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAwait_primary" ):
                return visitor.visitAwait_primary(self)
            else:
                return visitor.visitChildren(self)




    def await_primary(self):

        localctx = PythonParser.Await_primaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_await_primary)
        try:
            self.state = 1549
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [7]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1546
                self.match(PythonParser.AWAIT)
                self.state = 1547
                self.primary(0)
                pass
            elif token in [3, 6, 11, 16, 41, 42, 43, 86, 89, 90, 91]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1548
                self.primary(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atom(self):
            return self.getTypedRuleContext(PythonParser.AtomContext,0)


        def primary(self):
            return self.getTypedRuleContext(PythonParser.PrimaryContext,0)


        def DOT(self):
            return self.getToken(PythonParser.DOT, 0)

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def genexp(self):
            return self.getTypedRuleContext(PythonParser.GenexpContext,0)


        def LPAR(self):
            return self.getToken(PythonParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(PythonParser.RPAR, 0)

        def LSQB(self):
            return self.getToken(PythonParser.LSQB, 0)

        def slices(self):
            return self.getTypedRuleContext(PythonParser.SlicesContext,0)


        def RSQB(self):
            return self.getToken(PythonParser.RSQB, 0)

        def arguments(self):
            return self.getTypedRuleContext(PythonParser.ArgumentsContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_primary

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimary" ):
                return visitor.visitPrimary(self)
            else:
                return visitor.visitChildren(self)



    def primary(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PythonParser.PrimaryContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 272
        self.enterRecursionRule(localctx, 272, self.RULE_primary, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1552
            self.atom()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1571
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,181,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PythonParser.PrimaryContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_primary)
                    self.state = 1554
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 1567
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,180,self._ctx)
                    if la_ == 1:
                        self.state = 1555
                        self.match(PythonParser.DOT)
                        self.state = 1556
                        self.match(PythonParser.NAME)
                        pass

                    elif la_ == 2:
                        self.state = 1557
                        self.genexp()
                        pass

                    elif la_ == 3:
                        self.state = 1558
                        self.match(PythonParser.LPAR)
                        self.state = 1560
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & 15778009055299784) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 119537681) != 0):
                            self.state = 1559
                            self.arguments()


                        self.state = 1562
                        self.match(PythonParser.RPAR)
                        pass

                    elif la_ == 4:
                        self.state = 1563
                        self.match(PythonParser.LSQB)
                        self.state = 1564
                        self.slices()
                        self.state = 1565
                        self.match(PythonParser.RSQB)
                        pass

             
                self.state = 1573
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,181,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class SlicesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def slice_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.SliceContext)
            else:
                return self.getTypedRuleContext(PythonParser.SliceContext,i)


        def starred_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Starred_expressionContext)
            else:
                return self.getTypedRuleContext(PythonParser.Starred_expressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def getRuleIndex(self):
            return PythonParser.RULE_slices

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSlices" ):
                return visitor.visitSlices(self)
            else:
                return visitor.visitChildren(self)




    def slices(self):

        localctx = PythonParser.SlicesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_slices)
        self._la = 0 # Token type
        try:
            self.state = 1592
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,186,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1574
                self.slice_()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1577
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [3, 6, 7, 11, 16, 24, 34, 41, 42, 43, 48, 51, 52, 65, 86, 89, 90, 91]:
                    self.state = 1575
                    self.slice_()
                    pass
                elif token in [53]:
                    self.state = 1576
                    self.starred_expression()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1586
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,184,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1579
                        self.match(PythonParser.COMMA)
                        self.state = 1582
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [3, 6, 7, 11, 16, 24, 34, 41, 42, 43, 48, 51, 52, 65, 86, 89, 90, 91]:
                            self.state = 1580
                            self.slice_()
                            pass
                        elif token in [53]:
                            self.state = 1581
                            self.starred_expression()
                            pass
                        else:
                            raise NoViableAltException(self)
                 
                    self.state = 1588
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,184,self._ctx)

                self.state = 1590
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==49:
                    self.state = 1589
                    self.match(PythonParser.COMMA)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SliceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COLON)
            else:
                return self.getToken(PythonParser.COLON, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PythonParser.ExpressionContext,i)


        def named_expression(self):
            return self.getTypedRuleContext(PythonParser.Named_expressionContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_slice

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSlice" ):
                return visitor.visitSlice(self)
            else:
                return visitor.visitChildren(self)




    def slice_(self):

        localctx = PythonParser.SliceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_slice)
        self._la = 0 # Token type
        try:
            self.state = 1608
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,191,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1595
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 6770809800558792) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 119537665) != 0):
                    self.state = 1594
                    self.expression()


                self.state = 1597
                self.match(PythonParser.COLON)
                self.state = 1599
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 6770809800558792) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 119537665) != 0):
                    self.state = 1598
                    self.expression()


                self.state = 1605
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==48:
                    self.state = 1601
                    self.match(PythonParser.COLON)
                    self.state = 1603
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 6770809800558792) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 119537665) != 0):
                        self.state = 1602
                        self.expression()




                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1607
                self.named_expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AtomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def TRUE(self):
            return self.getToken(PythonParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(PythonParser.FALSE, 0)

        def NONE(self):
            return self.getToken(PythonParser.NONE, 0)

        def strings(self):
            return self.getTypedRuleContext(PythonParser.StringsContext,0)


        def NUMBER(self):
            return self.getToken(PythonParser.NUMBER, 0)

        def tuple_(self):
            return self.getTypedRuleContext(PythonParser.TupleContext,0)


        def group(self):
            return self.getTypedRuleContext(PythonParser.GroupContext,0)


        def genexp(self):
            return self.getTypedRuleContext(PythonParser.GenexpContext,0)


        def list_(self):
            return self.getTypedRuleContext(PythonParser.ListContext,0)


        def listcomp(self):
            return self.getTypedRuleContext(PythonParser.ListcompContext,0)


        def dict_(self):
            return self.getTypedRuleContext(PythonParser.DictContext,0)


        def set_(self):
            return self.getTypedRuleContext(PythonParser.SetContext,0)


        def dictcomp(self):
            return self.getTypedRuleContext(PythonParser.DictcompContext,0)


        def setcomp(self):
            return self.getTypedRuleContext(PythonParser.SetcompContext,0)


        def ELLIPSIS(self):
            return self.getToken(PythonParser.ELLIPSIS, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_atom

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtom" ):
                return visitor.visitAtom(self)
            else:
                return visitor.visitChildren(self)




    def atom(self):

        localctx = PythonParser.AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_atom)
        try:
            self.state = 1632
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [89]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1610
                self.match(PythonParser.NAME)
                pass
            elif token in [16]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1611
                self.match(PythonParser.TRUE)
                pass
            elif token in [6]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1612
                self.match(PythonParser.FALSE)
                pass
            elif token in [11]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1613
                self.match(PythonParser.NONE)
                pass
            elif token in [3, 91]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1614
                self.strings()
                pass
            elif token in [90]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1615
                self.match(PythonParser.NUMBER)
                pass
            elif token in [41]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1619
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,192,self._ctx)
                if la_ == 1:
                    self.state = 1616
                    self.tuple_()
                    pass

                elif la_ == 2:
                    self.state = 1617
                    self.group()
                    pass

                elif la_ == 3:
                    self.state = 1618
                    self.genexp()
                    pass


                pass
            elif token in [42]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1623
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,193,self._ctx)
                if la_ == 1:
                    self.state = 1621
                    self.list_()
                    pass

                elif la_ == 2:
                    self.state = 1622
                    self.listcomp()
                    pass


                pass
            elif token in [43]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1629
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,194,self._ctx)
                if la_ == 1:
                    self.state = 1625
                    self.dict_()
                    pass

                elif la_ == 2:
                    self.state = 1626
                    self.set_()
                    pass

                elif la_ == 3:
                    self.state = 1627
                    self.dictcomp()
                    pass

                elif la_ == 4:
                    self.state = 1628
                    self.setcomp()
                    pass


                pass
            elif token in [86]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1631
                self.match(PythonParser.ELLIPSIS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAR(self):
            return self.getToken(PythonParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(PythonParser.RPAR, 0)

        def yield_expr(self):
            return self.getTypedRuleContext(PythonParser.Yield_exprContext,0)


        def named_expression(self):
            return self.getTypedRuleContext(PythonParser.Named_expressionContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_group

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroup" ):
                return visitor.visitGroup(self)
            else:
                return visitor.visitChildren(self)




    def group(self):

        localctx = PythonParser.GroupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_group)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1634
            self.match(PythonParser.LPAR)
            self.state = 1637
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [40]:
                self.state = 1635
                self.yield_expr()
                pass
            elif token in [3, 6, 7, 11, 16, 24, 34, 41, 42, 43, 51, 52, 65, 86, 89, 90, 91]:
                self.state = 1636
                self.named_expression()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1639
            self.match(PythonParser.RPAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LAMBDA(self):
            return self.getToken(PythonParser.LAMBDA, 0)

        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)

        def expression(self):
            return self.getTypedRuleContext(PythonParser.ExpressionContext,0)


        def lambda_params(self):
            return self.getTypedRuleContext(PythonParser.Lambda_paramsContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_lambdef

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambdef" ):
                return visitor.visitLambdef(self)
            else:
                return visitor.visitChildren(self)




    def lambdef(self):

        localctx = PythonParser.LambdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_lambdef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1641
            self.match(PythonParser.LAMBDA)
            self.state = 1643
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 53)) & ~0x3f) == 0 and ((1 << (_la - 53)) & 68719542273) != 0):
                self.state = 1642
                self.lambda_params()


            self.state = 1645
            self.match(PythonParser.COLON)
            self.state = 1646
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lambda_paramsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lambda_parameters(self):
            return self.getTypedRuleContext(PythonParser.Lambda_parametersContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_lambda_params

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambda_params" ):
                return visitor.visitLambda_params(self)
            else:
                return visitor.visitChildren(self)




    def lambda_params(self):

        localctx = PythonParser.Lambda_paramsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_lambda_params)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1648
            self.lambda_parameters()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lambda_parametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lambda_slash_no_default(self):
            return self.getTypedRuleContext(PythonParser.Lambda_slash_no_defaultContext,0)


        def lambda_param_no_default(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Lambda_param_no_defaultContext)
            else:
                return self.getTypedRuleContext(PythonParser.Lambda_param_no_defaultContext,i)


        def lambda_param_with_default(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Lambda_param_with_defaultContext)
            else:
                return self.getTypedRuleContext(PythonParser.Lambda_param_with_defaultContext,i)


        def lambda_star_etc(self):
            return self.getTypedRuleContext(PythonParser.Lambda_star_etcContext,0)


        def lambda_slash_with_default(self):
            return self.getTypedRuleContext(PythonParser.Lambda_slash_with_defaultContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_lambda_parameters

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambda_parameters" ):
                return visitor.visitLambda_parameters(self)
            else:
                return visitor.visitChildren(self)




    def lambda_parameters(self):

        localctx = PythonParser.Lambda_parametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_lambda_parameters)
        self._la = 0 # Token type
        try:
            self.state = 1699
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,208,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1650
                self.lambda_slash_no_default()
                self.state = 1654
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,198,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1651
                        self.lambda_param_no_default() 
                    self.state = 1656
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,198,self._ctx)

                self.state = 1660
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==89:
                    self.state = 1657
                    self.lambda_param_with_default()
                    self.state = 1662
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1664
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==53 or _la==69:
                    self.state = 1663
                    self.lambda_star_etc()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1666
                self.lambda_slash_with_default()
                self.state = 1670
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==89:
                    self.state = 1667
                    self.lambda_param_with_default()
                    self.state = 1672
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1674
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==53 or _la==69:
                    self.state = 1673
                    self.lambda_star_etc()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1677 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1676
                        self.lambda_param_no_default()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1679 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,203,self._ctx)

                self.state = 1684
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==89:
                    self.state = 1681
                    self.lambda_param_with_default()
                    self.state = 1686
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1688
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==53 or _la==69:
                    self.state = 1687
                    self.lambda_star_etc()


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1691 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1690
                    self.lambda_param_with_default()
                    self.state = 1693 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==89):
                        break

                self.state = 1696
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==53 or _la==69:
                    self.state = 1695
                    self.lambda_star_etc()


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1698
                self.lambda_star_etc()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lambda_slash_no_defaultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SLASH(self):
            return self.getToken(PythonParser.SLASH, 0)

        def lambda_param_no_default(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Lambda_param_no_defaultContext)
            else:
                return self.getTypedRuleContext(PythonParser.Lambda_param_no_defaultContext,i)


        def COMMA(self):
            return self.getToken(PythonParser.COMMA, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_lambda_slash_no_default

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambda_slash_no_default" ):
                return visitor.visitLambda_slash_no_default(self)
            else:
                return visitor.visitChildren(self)




    def lambda_slash_no_default(self):

        localctx = PythonParser.Lambda_slash_no_defaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_lambda_slash_no_default)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1702 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1701
                self.lambda_param_no_default()
                self.state = 1704 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==89):
                    break

            self.state = 1706
            self.match(PythonParser.SLASH)
            self.state = 1708
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==49:
                self.state = 1707
                self.match(PythonParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lambda_slash_with_defaultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SLASH(self):
            return self.getToken(PythonParser.SLASH, 0)

        def lambda_param_no_default(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Lambda_param_no_defaultContext)
            else:
                return self.getTypedRuleContext(PythonParser.Lambda_param_no_defaultContext,i)


        def lambda_param_with_default(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Lambda_param_with_defaultContext)
            else:
                return self.getTypedRuleContext(PythonParser.Lambda_param_with_defaultContext,i)


        def COMMA(self):
            return self.getToken(PythonParser.COMMA, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_lambda_slash_with_default

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambda_slash_with_default" ):
                return visitor.visitLambda_slash_with_default(self)
            else:
                return visitor.visitChildren(self)




    def lambda_slash_with_default(self):

        localctx = PythonParser.Lambda_slash_with_defaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_lambda_slash_with_default)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1713
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,211,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1710
                    self.lambda_param_no_default() 
                self.state = 1715
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,211,self._ctx)

            self.state = 1717 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1716
                self.lambda_param_with_default()
                self.state = 1719 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==89):
                    break

            self.state = 1721
            self.match(PythonParser.SLASH)
            self.state = 1723
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==49:
                self.state = 1722
                self.match(PythonParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lambda_star_etcContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(PythonParser.STAR, 0)

        def lambda_param_no_default(self):
            return self.getTypedRuleContext(PythonParser.Lambda_param_no_defaultContext,0)


        def lambda_param_maybe_default(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Lambda_param_maybe_defaultContext)
            else:
                return self.getTypedRuleContext(PythonParser.Lambda_param_maybe_defaultContext,i)


        def lambda_kwds(self):
            return self.getTypedRuleContext(PythonParser.Lambda_kwdsContext,0)


        def COMMA(self):
            return self.getToken(PythonParser.COMMA, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_lambda_star_etc

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambda_star_etc" ):
                return visitor.visitLambda_star_etc(self)
            else:
                return visitor.visitChildren(self)




    def lambda_star_etc(self):

        localctx = PythonParser.Lambda_star_etcContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_lambda_star_etc)
        self._la = 0 # Token type
        try:
            self.state = 1747
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,218,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1725
                self.match(PythonParser.STAR)
                self.state = 1726
                self.lambda_param_no_default()
                self.state = 1730
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==89:
                    self.state = 1727
                    self.lambda_param_maybe_default()
                    self.state = 1732
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1734
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==69:
                    self.state = 1733
                    self.lambda_kwds()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1736
                self.match(PythonParser.STAR)
                self.state = 1737
                self.match(PythonParser.COMMA)
                self.state = 1739 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1738
                    self.lambda_param_maybe_default()
                    self.state = 1741 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==89):
                        break

                self.state = 1744
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==69:
                    self.state = 1743
                    self.lambda_kwds()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1746
                self.lambda_kwds()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lambda_kwdsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOUBLESTAR(self):
            return self.getToken(PythonParser.DOUBLESTAR, 0)

        def lambda_param_no_default(self):
            return self.getTypedRuleContext(PythonParser.Lambda_param_no_defaultContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_lambda_kwds

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambda_kwds" ):
                return visitor.visitLambda_kwds(self)
            else:
                return visitor.visitChildren(self)




    def lambda_kwds(self):

        localctx = PythonParser.Lambda_kwdsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_lambda_kwds)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1749
            self.match(PythonParser.DOUBLESTAR)
            self.state = 1750
            self.lambda_param_no_default()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lambda_param_no_defaultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lambda_param(self):
            return self.getTypedRuleContext(PythonParser.Lambda_paramContext,0)


        def COMMA(self):
            return self.getToken(PythonParser.COMMA, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_lambda_param_no_default

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambda_param_no_default" ):
                return visitor.visitLambda_param_no_default(self)
            else:
                return visitor.visitChildren(self)




    def lambda_param_no_default(self):

        localctx = PythonParser.Lambda_param_no_defaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_lambda_param_no_default)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1752
            self.lambda_param()
            self.state = 1754
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==49:
                self.state = 1753
                self.match(PythonParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lambda_param_with_defaultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lambda_param(self):
            return self.getTypedRuleContext(PythonParser.Lambda_paramContext,0)


        def default_assignment(self):
            return self.getTypedRuleContext(PythonParser.Default_assignmentContext,0)


        def COMMA(self):
            return self.getToken(PythonParser.COMMA, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_lambda_param_with_default

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambda_param_with_default" ):
                return visitor.visitLambda_param_with_default(self)
            else:
                return visitor.visitChildren(self)




    def lambda_param_with_default(self):

        localctx = PythonParser.Lambda_param_with_defaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_lambda_param_with_default)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1756
            self.lambda_param()
            self.state = 1757
            self.default_assignment()
            self.state = 1759
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==49:
                self.state = 1758
                self.match(PythonParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lambda_param_maybe_defaultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lambda_param(self):
            return self.getTypedRuleContext(PythonParser.Lambda_paramContext,0)


        def default_assignment(self):
            return self.getTypedRuleContext(PythonParser.Default_assignmentContext,0)


        def COMMA(self):
            return self.getToken(PythonParser.COMMA, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_lambda_param_maybe_default

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambda_param_maybe_default" ):
                return visitor.visitLambda_param_maybe_default(self)
            else:
                return visitor.visitChildren(self)




    def lambda_param_maybe_default(self):

        localctx = PythonParser.Lambda_param_maybe_defaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_lambda_param_maybe_default)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1761
            self.lambda_param()
            self.state = 1763
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==59:
                self.state = 1762
                self.default_assignment()


            self.state = 1766
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==49:
                self.state = 1765
                self.match(PythonParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lambda_paramContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_lambda_param

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambda_param" ):
                return visitor.visitLambda_param(self)
            else:
                return visitor.visitChildren(self)




    def lambda_param(self):

        localctx = PythonParser.Lambda_paramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_lambda_param)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1768
            self.match(PythonParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fstring_middleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fstring_replacement_field(self):
            return self.getTypedRuleContext(PythonParser.Fstring_replacement_fieldContext,0)


        def FSTRING_MIDDLE(self):
            return self.getToken(PythonParser.FSTRING_MIDDLE, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_fstring_middle

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFstring_middle" ):
                return visitor.visitFstring_middle(self)
            else:
                return visitor.visitChildren(self)




    def fstring_middle(self):

        localctx = PythonParser.Fstring_middleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_fstring_middle)
        try:
            self.state = 1772
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [43]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1770
                self.fstring_replacement_field()
                pass
            elif token in [4]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1771
                self.match(PythonParser.FSTRING_MIDDLE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fstring_replacement_fieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(PythonParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(PythonParser.RBRACE, 0)

        def yield_expr(self):
            return self.getTypedRuleContext(PythonParser.Yield_exprContext,0)


        def star_expressions(self):
            return self.getTypedRuleContext(PythonParser.Star_expressionsContext,0)


        def EQUAL(self):
            return self.getToken(PythonParser.EQUAL, 0)

        def fstring_conversion(self):
            return self.getTypedRuleContext(PythonParser.Fstring_conversionContext,0)


        def fstring_full_format_spec(self):
            return self.getTypedRuleContext(PythonParser.Fstring_full_format_specContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_fstring_replacement_field

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFstring_replacement_field" ):
                return visitor.visitFstring_replacement_field(self)
            else:
                return visitor.visitChildren(self)




    def fstring_replacement_field(self):

        localctx = PythonParser.Fstring_replacement_fieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_fstring_replacement_field)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1774
            self.match(PythonParser.LBRACE)
            self.state = 1777
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [40]:
                self.state = 1775
                self.yield_expr()
                pass
            elif token in [3, 6, 7, 11, 16, 24, 34, 41, 42, 43, 51, 52, 53, 65, 86, 89, 90, 91]:
                self.state = 1776
                self.star_expressions()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1780
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==59:
                self.state = 1779
                self.match(PythonParser.EQUAL)


            self.state = 1783
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==88:
                self.state = 1782
                self.fstring_conversion()


            self.state = 1786
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==48:
                self.state = 1785
                self.fstring_full_format_spec()


            self.state = 1788
            self.match(PythonParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fstring_conversionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCLAMATION(self):
            return self.getToken(PythonParser.EXCLAMATION, 0)

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_fstring_conversion

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFstring_conversion" ):
                return visitor.visitFstring_conversion(self)
            else:
                return visitor.visitChildren(self)




    def fstring_conversion(self):

        localctx = PythonParser.Fstring_conversionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_fstring_conversion)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1790
            self.match(PythonParser.EXCLAMATION)
            self.state = 1791
            self.match(PythonParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fstring_full_format_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)

        def fstring_format_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Fstring_format_specContext)
            else:
                return self.getTypedRuleContext(PythonParser.Fstring_format_specContext,i)


        def getRuleIndex(self):
            return PythonParser.RULE_fstring_full_format_spec

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFstring_full_format_spec" ):
                return visitor.visitFstring_full_format_spec(self)
            else:
                return visitor.visitChildren(self)




    def fstring_full_format_spec(self):

        localctx = PythonParser.Fstring_full_format_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_fstring_full_format_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1793
            self.match(PythonParser.COLON)
            self.state = 1797
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4 or _la==43:
                self.state = 1794
                self.fstring_format_spec()
                self.state = 1799
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fstring_format_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FSTRING_MIDDLE(self):
            return self.getToken(PythonParser.FSTRING_MIDDLE, 0)

        def fstring_replacement_field(self):
            return self.getTypedRuleContext(PythonParser.Fstring_replacement_fieldContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_fstring_format_spec

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFstring_format_spec" ):
                return visitor.visitFstring_format_spec(self)
            else:
                return visitor.visitChildren(self)




    def fstring_format_spec(self):

        localctx = PythonParser.Fstring_format_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_fstring_format_spec)
        try:
            self.state = 1802
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [4]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1800
                self.match(PythonParser.FSTRING_MIDDLE)
                pass
            elif token in [43]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1801
                self.fstring_replacement_field()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FstringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FSTRING_START(self):
            return self.getToken(PythonParser.FSTRING_START, 0)

        def FSTRING_END(self):
            return self.getToken(PythonParser.FSTRING_END, 0)

        def fstring_middle(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Fstring_middleContext)
            else:
                return self.getTypedRuleContext(PythonParser.Fstring_middleContext,i)


        def getRuleIndex(self):
            return PythonParser.RULE_fstring

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFstring" ):
                return visitor.visitFstring(self)
            else:
                return visitor.visitChildren(self)




    def fstring(self):

        localctx = PythonParser.FstringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_fstring)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1804
            self.match(PythonParser.FSTRING_START)
            self.state = 1808
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4 or _la==43:
                self.state = 1805
                self.fstring_middle()
                self.state = 1810
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1811
            self.match(PythonParser.FSTRING_END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(PythonParser.STRING, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_string

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitString" ):
                return visitor.visitString(self)
            else:
                return visitor.visitChildren(self)




    def string(self):

        localctx = PythonParser.StringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_string)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1813
            self.match(PythonParser.STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fstring(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.FstringContext)
            else:
                return self.getTypedRuleContext(PythonParser.FstringContext,i)


        def string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.StringContext)
            else:
                return self.getTypedRuleContext(PythonParser.StringContext,i)


        def getRuleIndex(self):
            return PythonParser.RULE_strings

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStrings" ):
                return visitor.visitStrings(self)
            else:
                return visitor.visitChildren(self)




    def strings(self):

        localctx = PythonParser.StringsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_strings)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1817 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1817
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [3]:
                        self.state = 1815
                        self.fstring()
                        pass
                    elif token in [91]:
                        self.state = 1816
                        self.string()
                        pass
                    else:
                        raise NoViableAltException(self)


                else:
                    raise NoViableAltException(self)
                self.state = 1819 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,232,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LSQB(self):
            return self.getToken(PythonParser.LSQB, 0)

        def RSQB(self):
            return self.getToken(PythonParser.RSQB, 0)

        def star_named_expressions(self):
            return self.getTypedRuleContext(PythonParser.Star_named_expressionsContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_list

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitList" ):
                return visitor.visitList(self)
            else:
                return visitor.visitChildren(self)




    def list_(self):

        localctx = PythonParser.ListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1821
            self.match(PythonParser.LSQB)
            self.state = 1823
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 15778009055299784) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 119537665) != 0):
                self.state = 1822
                self.star_named_expressions()


            self.state = 1825
            self.match(PythonParser.RSQB)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TupleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAR(self):
            return self.getToken(PythonParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(PythonParser.RPAR, 0)

        def star_named_expression(self):
            return self.getTypedRuleContext(PythonParser.Star_named_expressionContext,0)


        def COMMA(self):
            return self.getToken(PythonParser.COMMA, 0)

        def star_named_expressions(self):
            return self.getTypedRuleContext(PythonParser.Star_named_expressionsContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_tuple

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTuple" ):
                return visitor.visitTuple(self)
            else:
                return visitor.visitChildren(self)




    def tuple_(self):

        localctx = PythonParser.TupleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_tuple)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1827
            self.match(PythonParser.LPAR)
            self.state = 1833
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 15778009055299784) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 119537665) != 0):
                self.state = 1828
                self.star_named_expression()
                self.state = 1829
                self.match(PythonParser.COMMA)
                self.state = 1831
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 15778009055299784) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 119537665) != 0):
                    self.state = 1830
                    self.star_named_expressions()




            self.state = 1835
            self.match(PythonParser.RPAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(PythonParser.LBRACE, 0)

        def star_named_expressions(self):
            return self.getTypedRuleContext(PythonParser.Star_named_expressionsContext,0)


        def RBRACE(self):
            return self.getToken(PythonParser.RBRACE, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_set

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSet" ):
                return visitor.visitSet(self)
            else:
                return visitor.visitChildren(self)




    def set_(self):

        localctx = PythonParser.SetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_set)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1837
            self.match(PythonParser.LBRACE)
            self.state = 1838
            self.star_named_expressions()
            self.state = 1839
            self.match(PythonParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DictContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(PythonParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(PythonParser.RBRACE, 0)

        def double_starred_kvpairs(self):
            return self.getTypedRuleContext(PythonParser.Double_starred_kvpairsContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_dict

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDict" ):
                return visitor.visitDict(self)
            else:
                return visitor.visitChildren(self)




    def dict_(self):

        localctx = PythonParser.DictContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_dict)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1841
            self.match(PythonParser.LBRACE)
            self.state = 1843
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 6770809800558792) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 119537681) != 0):
                self.state = 1842
                self.double_starred_kvpairs()


            self.state = 1845
            self.match(PythonParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Double_starred_kvpairsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def double_starred_kvpair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Double_starred_kvpairContext)
            else:
                return self.getTypedRuleContext(PythonParser.Double_starred_kvpairContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def getRuleIndex(self):
            return PythonParser.RULE_double_starred_kvpairs

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDouble_starred_kvpairs" ):
                return visitor.visitDouble_starred_kvpairs(self)
            else:
                return visitor.visitChildren(self)




    def double_starred_kvpairs(self):

        localctx = PythonParser.Double_starred_kvpairsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_double_starred_kvpairs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1847
            self.double_starred_kvpair()
            self.state = 1852
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,237,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1848
                    self.match(PythonParser.COMMA)
                    self.state = 1849
                    self.double_starred_kvpair() 
                self.state = 1854
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,237,self._ctx)

            self.state = 1856
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==49:
                self.state = 1855
                self.match(PythonParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Double_starred_kvpairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOUBLESTAR(self):
            return self.getToken(PythonParser.DOUBLESTAR, 0)

        def bitwise_or(self):
            return self.getTypedRuleContext(PythonParser.Bitwise_orContext,0)


        def kvpair(self):
            return self.getTypedRuleContext(PythonParser.KvpairContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_double_starred_kvpair

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDouble_starred_kvpair" ):
                return visitor.visitDouble_starred_kvpair(self)
            else:
                return visitor.visitChildren(self)




    def double_starred_kvpair(self):

        localctx = PythonParser.Double_starred_kvpairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_double_starred_kvpair)
        try:
            self.state = 1861
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [69]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1858
                self.match(PythonParser.DOUBLESTAR)
                self.state = 1859
                self.bitwise_or(0)
                pass
            elif token in [3, 6, 7, 11, 16, 24, 34, 41, 42, 43, 51, 52, 65, 86, 89, 90, 91]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1860
                self.kvpair()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KvpairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PythonParser.ExpressionContext,i)


        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_kvpair

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKvpair" ):
                return visitor.visitKvpair(self)
            else:
                return visitor.visitChildren(self)




    def kvpair(self):

        localctx = PythonParser.KvpairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_kvpair)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1863
            self.expression()
            self.state = 1864
            self.match(PythonParser.COLON)
            self.state = 1865
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_if_clausesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def for_if_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.For_if_clauseContext)
            else:
                return self.getTypedRuleContext(PythonParser.For_if_clauseContext,i)


        def getRuleIndex(self):
            return PythonParser.RULE_for_if_clauses

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFor_if_clauses" ):
                return visitor.visitFor_if_clauses(self)
            else:
                return visitor.visitChildren(self)




    def for_if_clauses(self):

        localctx = PythonParser.For_if_clausesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_for_if_clauses)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1868 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1867
                self.for_if_clause()
                self.state = 1870 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==23 or _la==36):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_if_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(PythonParser.FOR, 0)

        def star_targets(self):
            return self.getTypedRuleContext(PythonParser.Star_targetsContext,0)


        def IN(self):
            return self.getToken(PythonParser.IN, 0)

        def disjunction(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.DisjunctionContext)
            else:
                return self.getTypedRuleContext(PythonParser.DisjunctionContext,i)


        def ASYNC(self):
            return self.getToken(PythonParser.ASYNC, 0)

        def IF(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.IF)
            else:
                return self.getToken(PythonParser.IF, i)

        def getRuleIndex(self):
            return PythonParser.RULE_for_if_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFor_if_clause" ):
                return visitor.visitFor_if_clause(self)
            else:
                return visitor.visitChildren(self)




    def for_if_clause(self):

        localctx = PythonParser.For_if_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_for_if_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1873
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==36:
                self.state = 1872
                self.match(PythonParser.ASYNC)


            self.state = 1875
            self.match(PythonParser.FOR)
            self.state = 1876
            self.star_targets()
            self.state = 1877
            self.match(PythonParser.IN)
            self.state = 1878
            self.disjunction()
            self.state = 1883
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==38:
                self.state = 1879
                self.match(PythonParser.IF)
                self.state = 1880
                self.disjunction()
                self.state = 1885
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ListcompContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LSQB(self):
            return self.getToken(PythonParser.LSQB, 0)

        def named_expression(self):
            return self.getTypedRuleContext(PythonParser.Named_expressionContext,0)


        def for_if_clauses(self):
            return self.getTypedRuleContext(PythonParser.For_if_clausesContext,0)


        def RSQB(self):
            return self.getToken(PythonParser.RSQB, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_listcomp

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitListcomp" ):
                return visitor.visitListcomp(self)
            else:
                return visitor.visitChildren(self)




    def listcomp(self):

        localctx = PythonParser.ListcompContext(self, self._ctx, self.state)
        self.enterRule(localctx, 338, self.RULE_listcomp)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1886
            self.match(PythonParser.LSQB)
            self.state = 1887
            self.named_expression()
            self.state = 1888
            self.for_if_clauses()
            self.state = 1889
            self.match(PythonParser.RSQB)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetcompContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(PythonParser.LBRACE, 0)

        def named_expression(self):
            return self.getTypedRuleContext(PythonParser.Named_expressionContext,0)


        def for_if_clauses(self):
            return self.getTypedRuleContext(PythonParser.For_if_clausesContext,0)


        def RBRACE(self):
            return self.getToken(PythonParser.RBRACE, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_setcomp

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetcomp" ):
                return visitor.visitSetcomp(self)
            else:
                return visitor.visitChildren(self)




    def setcomp(self):

        localctx = PythonParser.SetcompContext(self, self._ctx, self.state)
        self.enterRule(localctx, 340, self.RULE_setcomp)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1891
            self.match(PythonParser.LBRACE)
            self.state = 1892
            self.named_expression()
            self.state = 1893
            self.for_if_clauses()
            self.state = 1894
            self.match(PythonParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenexpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAR(self):
            return self.getToken(PythonParser.LPAR, 0)

        def for_if_clauses(self):
            return self.getTypedRuleContext(PythonParser.For_if_clausesContext,0)


        def RPAR(self):
            return self.getToken(PythonParser.RPAR, 0)

        def assignment_expression(self):
            return self.getTypedRuleContext(PythonParser.Assignment_expressionContext,0)


        def expression(self):
            return self.getTypedRuleContext(PythonParser.ExpressionContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_genexp

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGenexp" ):
                return visitor.visitGenexp(self)
            else:
                return visitor.visitChildren(self)




    def genexp(self):

        localctx = PythonParser.GenexpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 342, self.RULE_genexp)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1896
            self.match(PythonParser.LPAR)
            self.state = 1899
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,243,self._ctx)
            if la_ == 1:
                self.state = 1897
                self.assignment_expression()
                pass

            elif la_ == 2:
                self.state = 1898
                self.expression()
                pass


            self.state = 1901
            self.for_if_clauses()
            self.state = 1902
            self.match(PythonParser.RPAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DictcompContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(PythonParser.LBRACE, 0)

        def kvpair(self):
            return self.getTypedRuleContext(PythonParser.KvpairContext,0)


        def for_if_clauses(self):
            return self.getTypedRuleContext(PythonParser.For_if_clausesContext,0)


        def RBRACE(self):
            return self.getToken(PythonParser.RBRACE, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_dictcomp

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDictcomp" ):
                return visitor.visitDictcomp(self)
            else:
                return visitor.visitChildren(self)




    def dictcomp(self):

        localctx = PythonParser.DictcompContext(self, self._ctx, self.state)
        self.enterRule(localctx, 344, self.RULE_dictcomp)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1904
            self.match(PythonParser.LBRACE)
            self.state = 1905
            self.kvpair()
            self.state = 1906
            self.for_if_clauses()
            self.state = 1907
            self.match(PythonParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def args(self):
            return self.getTypedRuleContext(PythonParser.ArgsContext,0)


        def COMMA(self):
            return self.getToken(PythonParser.COMMA, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_arguments

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArguments" ):
                return visitor.visitArguments(self)
            else:
                return visitor.visitChildren(self)




    def arguments(self):

        localctx = PythonParser.ArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 346, self.RULE_arguments)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1909
            self.args()
            self.state = 1911
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==49:
                self.state = 1910
                self.match(PythonParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def starred_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Starred_expressionContext)
            else:
                return self.getTypedRuleContext(PythonParser.Starred_expressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def kwargs(self):
            return self.getTypedRuleContext(PythonParser.KwargsContext,0)


        def assignment_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Assignment_expressionContext)
            else:
                return self.getTypedRuleContext(PythonParser.Assignment_expressionContext,i)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PythonParser.ExpressionContext,i)


        def getRuleIndex(self):
            return PythonParser.RULE_args

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgs" ):
                return visitor.visitArgs(self)
            else:
                return visitor.visitChildren(self)




    def args(self):

        localctx = PythonParser.ArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 348, self.RULE_args)
        try:
            self.state = 1938
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,251,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1918
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [53]:
                    self.state = 1913
                    self.starred_expression()
                    pass
                elif token in [3, 6, 7, 11, 16, 24, 34, 41, 42, 43, 51, 52, 65, 86, 89, 90, 91]:
                    self.state = 1916
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,245,self._ctx)
                    if la_ == 1:
                        self.state = 1914
                        self.assignment_expression()
                        pass

                    elif la_ == 2:
                        self.state = 1915
                        self.expression()
                        pass


                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1930
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,249,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1920
                        self.match(PythonParser.COMMA)
                        self.state = 1926
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [53]:
                            self.state = 1921
                            self.starred_expression()
                            pass
                        elif token in [3, 6, 7, 11, 16, 24, 34, 41, 42, 43, 51, 52, 65, 86, 89, 90, 91]:
                            self.state = 1924
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,247,self._ctx)
                            if la_ == 1:
                                self.state = 1922
                                self.assignment_expression()
                                pass

                            elif la_ == 2:
                                self.state = 1923
                                self.expression()
                                pass


                            pass
                        else:
                            raise NoViableAltException(self)
                 
                    self.state = 1932
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,249,self._ctx)

                self.state = 1935
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,250,self._ctx)
                if la_ == 1:
                    self.state = 1933
                    self.match(PythonParser.COMMA)
                    self.state = 1934
                    self.kwargs()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1937
                self.kwargs()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KwargsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def kwarg_or_starred(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Kwarg_or_starredContext)
            else:
                return self.getTypedRuleContext(PythonParser.Kwarg_or_starredContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def kwarg_or_double_starred(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Kwarg_or_double_starredContext)
            else:
                return self.getTypedRuleContext(PythonParser.Kwarg_or_double_starredContext,i)


        def getRuleIndex(self):
            return PythonParser.RULE_kwargs

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKwargs" ):
                return visitor.visitKwargs(self)
            else:
                return visitor.visitChildren(self)




    def kwargs(self):

        localctx = PythonParser.KwargsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 350, self.RULE_kwargs)
        try:
            self.state = 1967
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,256,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1940
                self.kwarg_or_starred()
                self.state = 1945
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,252,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1941
                        self.match(PythonParser.COMMA)
                        self.state = 1942
                        self.kwarg_or_starred() 
                    self.state = 1947
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,252,self._ctx)

                self.state = 1957
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,254,self._ctx)
                if la_ == 1:
                    self.state = 1948
                    self.match(PythonParser.COMMA)
                    self.state = 1949
                    self.kwarg_or_double_starred()
                    self.state = 1954
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,253,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1950
                            self.match(PythonParser.COMMA)
                            self.state = 1951
                            self.kwarg_or_double_starred() 
                        self.state = 1956
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,253,self._ctx)



                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1959
                self.kwarg_or_double_starred()
                self.state = 1964
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,255,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1960
                        self.match(PythonParser.COMMA)
                        self.state = 1961
                        self.kwarg_or_double_starred() 
                    self.state = 1966
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,255,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Starred_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(PythonParser.STAR, 0)

        def expression(self):
            return self.getTypedRuleContext(PythonParser.ExpressionContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_starred_expression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStarred_expression" ):
                return visitor.visitStarred_expression(self)
            else:
                return visitor.visitChildren(self)




    def starred_expression(self):

        localctx = PythonParser.Starred_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 352, self.RULE_starred_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1969
            self.match(PythonParser.STAR)
            self.state = 1970
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Kwarg_or_starredContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def EQUAL(self):
            return self.getToken(PythonParser.EQUAL, 0)

        def expression(self):
            return self.getTypedRuleContext(PythonParser.ExpressionContext,0)


        def starred_expression(self):
            return self.getTypedRuleContext(PythonParser.Starred_expressionContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_kwarg_or_starred

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKwarg_or_starred" ):
                return visitor.visitKwarg_or_starred(self)
            else:
                return visitor.visitChildren(self)




    def kwarg_or_starred(self):

        localctx = PythonParser.Kwarg_or_starredContext(self, self._ctx, self.state)
        self.enterRule(localctx, 354, self.RULE_kwarg_or_starred)
        try:
            self.state = 1976
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [89]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1972
                self.match(PythonParser.NAME)
                self.state = 1973
                self.match(PythonParser.EQUAL)
                self.state = 1974
                self.expression()
                pass
            elif token in [53]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1975
                self.starred_expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Kwarg_or_double_starredContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def EQUAL(self):
            return self.getToken(PythonParser.EQUAL, 0)

        def expression(self):
            return self.getTypedRuleContext(PythonParser.ExpressionContext,0)


        def DOUBLESTAR(self):
            return self.getToken(PythonParser.DOUBLESTAR, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_kwarg_or_double_starred

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKwarg_or_double_starred" ):
                return visitor.visitKwarg_or_double_starred(self)
            else:
                return visitor.visitChildren(self)




    def kwarg_or_double_starred(self):

        localctx = PythonParser.Kwarg_or_double_starredContext(self, self._ctx, self.state)
        self.enterRule(localctx, 356, self.RULE_kwarg_or_double_starred)
        try:
            self.state = 1983
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [89]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1978
                self.match(PythonParser.NAME)
                self.state = 1979
                self.match(PythonParser.EQUAL)
                self.state = 1980
                self.expression()
                pass
            elif token in [69]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1981
                self.match(PythonParser.DOUBLESTAR)
                self.state = 1982
                self.expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Star_targetsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def star_target(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Star_targetContext)
            else:
                return self.getTypedRuleContext(PythonParser.Star_targetContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def getRuleIndex(self):
            return PythonParser.RULE_star_targets

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStar_targets" ):
                return visitor.visitStar_targets(self)
            else:
                return visitor.visitChildren(self)




    def star_targets(self):

        localctx = PythonParser.Star_targetsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 358, self.RULE_star_targets)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1985
            self.star_target()
            self.state = 1990
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,259,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1986
                    self.match(PythonParser.COMMA)
                    self.state = 1987
                    self.star_target() 
                self.state = 1992
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,259,self._ctx)

            self.state = 1994
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==49:
                self.state = 1993
                self.match(PythonParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Star_targets_list_seqContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def star_target(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Star_targetContext)
            else:
                return self.getTypedRuleContext(PythonParser.Star_targetContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def getRuleIndex(self):
            return PythonParser.RULE_star_targets_list_seq

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStar_targets_list_seq" ):
                return visitor.visitStar_targets_list_seq(self)
            else:
                return visitor.visitChildren(self)




    def star_targets_list_seq(self):

        localctx = PythonParser.Star_targets_list_seqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 360, self.RULE_star_targets_list_seq)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1996
            self.star_target()
            self.state = 1999 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1997
                    self.match(PythonParser.COMMA)
                    self.state = 1998
                    self.star_target()

                else:
                    raise NoViableAltException(self)
                self.state = 2001 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,261,self._ctx)

            self.state = 2004
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==49:
                self.state = 2003
                self.match(PythonParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Star_targets_tuple_seqContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def star_target(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Star_targetContext)
            else:
                return self.getTypedRuleContext(PythonParser.Star_targetContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def getRuleIndex(self):
            return PythonParser.RULE_star_targets_tuple_seq

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStar_targets_tuple_seq" ):
                return visitor.visitStar_targets_tuple_seq(self)
            else:
                return visitor.visitChildren(self)




    def star_targets_tuple_seq(self):

        localctx = PythonParser.Star_targets_tuple_seqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 362, self.RULE_star_targets_tuple_seq)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2006
            self.star_target()
            self.state = 2017
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,265,self._ctx)
            if la_ == 1:
                self.state = 2007
                self.match(PythonParser.COMMA)
                pass

            elif la_ == 2:
                self.state = 2010 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2008
                        self.match(PythonParser.COMMA)
                        self.state = 2009
                        self.star_target()

                    else:
                        raise NoViableAltException(self)
                    self.state = 2012 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,263,self._ctx)

                self.state = 2015
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==49:
                    self.state = 2014
                    self.match(PythonParser.COMMA)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Star_targetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(PythonParser.STAR, 0)

        def star_target(self):
            return self.getTypedRuleContext(PythonParser.Star_targetContext,0)


        def target_with_star_atom(self):
            return self.getTypedRuleContext(PythonParser.Target_with_star_atomContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_star_target

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStar_target" ):
                return visitor.visitStar_target(self)
            else:
                return visitor.visitChildren(self)




    def star_target(self):

        localctx = PythonParser.Star_targetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 364, self.RULE_star_target)
        try:
            self.state = 2022
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [53]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2019
                self.match(PythonParser.STAR)

                self.state = 2020
                self.star_target()
                pass
            elif token in [3, 6, 11, 16, 41, 42, 43, 86, 89, 90, 91]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2021
                self.target_with_star_atom()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Target_with_star_atomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def t_primary(self):
            return self.getTypedRuleContext(PythonParser.T_primaryContext,0)


        def DOT(self):
            return self.getToken(PythonParser.DOT, 0)

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def LSQB(self):
            return self.getToken(PythonParser.LSQB, 0)

        def slices(self):
            return self.getTypedRuleContext(PythonParser.SlicesContext,0)


        def RSQB(self):
            return self.getToken(PythonParser.RSQB, 0)

        def star_atom(self):
            return self.getTypedRuleContext(PythonParser.Star_atomContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_target_with_star_atom

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTarget_with_star_atom" ):
                return visitor.visitTarget_with_star_atom(self)
            else:
                return visitor.visitChildren(self)




    def target_with_star_atom(self):

        localctx = PythonParser.Target_with_star_atomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 366, self.RULE_target_with_star_atom)
        try:
            self.state = 2034
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,268,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2024
                self.t_primary(0)
                self.state = 2031
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [47]:
                    self.state = 2025
                    self.match(PythonParser.DOT)
                    self.state = 2026
                    self.match(PythonParser.NAME)
                    pass
                elif token in [42]:
                    self.state = 2027
                    self.match(PythonParser.LSQB)
                    self.state = 2028
                    self.slices()
                    self.state = 2029
                    self.match(PythonParser.RSQB)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2033
                self.star_atom()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Star_atomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def LPAR(self):
            return self.getToken(PythonParser.LPAR, 0)

        def target_with_star_atom(self):
            return self.getTypedRuleContext(PythonParser.Target_with_star_atomContext,0)


        def RPAR(self):
            return self.getToken(PythonParser.RPAR, 0)

        def star_targets_tuple_seq(self):
            return self.getTypedRuleContext(PythonParser.Star_targets_tuple_seqContext,0)


        def LSQB(self):
            return self.getToken(PythonParser.LSQB, 0)

        def RSQB(self):
            return self.getToken(PythonParser.RSQB, 0)

        def star_targets_list_seq(self):
            return self.getTypedRuleContext(PythonParser.Star_targets_list_seqContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_star_atom

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStar_atom" ):
                return visitor.visitStar_atom(self)
            else:
                return visitor.visitChildren(self)




    def star_atom(self):

        localctx = PythonParser.Star_atomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 368, self.RULE_star_atom)
        self._la = 0 # Token type
        try:
            self.state = 2051
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,271,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2036
                self.match(PythonParser.NAME)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2037
                self.match(PythonParser.LPAR)
                self.state = 2038
                self.target_with_star_atom()
                self.state = 2039
                self.match(PythonParser.RPAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2041
                self.match(PythonParser.LPAR)
                self.state = 2043
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 9022592417597512) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 57) != 0):
                    self.state = 2042
                    self.star_targets_tuple_seq()


                self.state = 2045
                self.match(PythonParser.RPAR)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2046
                self.match(PythonParser.LSQB)
                self.state = 2048
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 9022592417597512) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 57) != 0):
                    self.state = 2047
                    self.star_targets_list_seq()


                self.state = 2050
                self.match(PythonParser.RSQB)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Single_targetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def single_subscript_attribute_target(self):
            return self.getTypedRuleContext(PythonParser.Single_subscript_attribute_targetContext,0)


        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def LPAR(self):
            return self.getToken(PythonParser.LPAR, 0)

        def single_target(self):
            return self.getTypedRuleContext(PythonParser.Single_targetContext,0)


        def RPAR(self):
            return self.getToken(PythonParser.RPAR, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_single_target

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingle_target" ):
                return visitor.visitSingle_target(self)
            else:
                return visitor.visitChildren(self)




    def single_target(self):

        localctx = PythonParser.Single_targetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 370, self.RULE_single_target)
        try:
            self.state = 2059
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,272,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2053
                self.single_subscript_attribute_target()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2054
                self.match(PythonParser.NAME)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2055
                self.match(PythonParser.LPAR)
                self.state = 2056
                self.single_target()
                self.state = 2057
                self.match(PythonParser.RPAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Single_subscript_attribute_targetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def t_primary(self):
            return self.getTypedRuleContext(PythonParser.T_primaryContext,0)


        def DOT(self):
            return self.getToken(PythonParser.DOT, 0)

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def LSQB(self):
            return self.getToken(PythonParser.LSQB, 0)

        def slices(self):
            return self.getTypedRuleContext(PythonParser.SlicesContext,0)


        def RSQB(self):
            return self.getToken(PythonParser.RSQB, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_single_subscript_attribute_target

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingle_subscript_attribute_target" ):
                return visitor.visitSingle_subscript_attribute_target(self)
            else:
                return visitor.visitChildren(self)




    def single_subscript_attribute_target(self):

        localctx = PythonParser.Single_subscript_attribute_targetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 372, self.RULE_single_subscript_attribute_target)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2061
            self.t_primary(0)
            self.state = 2068
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [47]:
                self.state = 2062
                self.match(PythonParser.DOT)
                self.state = 2063
                self.match(PythonParser.NAME)
                pass
            elif token in [42]:
                self.state = 2064
                self.match(PythonParser.LSQB)
                self.state = 2065
                self.slices()
                self.state = 2066
                self.match(PythonParser.RSQB)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class T_primaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atom(self):
            return self.getTypedRuleContext(PythonParser.AtomContext,0)


        def t_primary(self):
            return self.getTypedRuleContext(PythonParser.T_primaryContext,0)


        def DOT(self):
            return self.getToken(PythonParser.DOT, 0)

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def LSQB(self):
            return self.getToken(PythonParser.LSQB, 0)

        def slices(self):
            return self.getTypedRuleContext(PythonParser.SlicesContext,0)


        def RSQB(self):
            return self.getToken(PythonParser.RSQB, 0)

        def genexp(self):
            return self.getTypedRuleContext(PythonParser.GenexpContext,0)


        def LPAR(self):
            return self.getToken(PythonParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(PythonParser.RPAR, 0)

        def arguments(self):
            return self.getTypedRuleContext(PythonParser.ArgumentsContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_t_primary

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitT_primary" ):
                return visitor.visitT_primary(self)
            else:
                return visitor.visitChildren(self)



    def t_primary(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PythonParser.T_primaryContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 374
        self.enterRecursionRule(localctx, 374, self.RULE_t_primary, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2071
            self.atom()
            self._ctx.stop = self._input.LT(-1)
            self.state = 2090
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,276,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PythonParser.T_primaryContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_t_primary)
                    self.state = 2073
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 2086
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,275,self._ctx)
                    if la_ == 1:
                        self.state = 2074
                        self.match(PythonParser.DOT)
                        self.state = 2075
                        self.match(PythonParser.NAME)
                        pass

                    elif la_ == 2:
                        self.state = 2076
                        self.match(PythonParser.LSQB)
                        self.state = 2077
                        self.slices()
                        self.state = 2078
                        self.match(PythonParser.RSQB)
                        pass

                    elif la_ == 3:
                        self.state = 2080
                        self.genexp()
                        pass

                    elif la_ == 4:
                        self.state = 2081
                        self.match(PythonParser.LPAR)
                        self.state = 2083
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & 15778009055299784) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 119537681) != 0):
                            self.state = 2082
                            self.arguments()


                        self.state = 2085
                        self.match(PythonParser.RPAR)
                        pass

             
                self.state = 2092
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,276,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Del_targetsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def del_target(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Del_targetContext)
            else:
                return self.getTypedRuleContext(PythonParser.Del_targetContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def getRuleIndex(self):
            return PythonParser.RULE_del_targets

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDel_targets" ):
                return visitor.visitDel_targets(self)
            else:
                return visitor.visitChildren(self)




    def del_targets(self):

        localctx = PythonParser.Del_targetsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 376, self.RULE_del_targets)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2093
            self.del_target()
            self.state = 2098
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,277,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2094
                    self.match(PythonParser.COMMA)
                    self.state = 2095
                    self.del_target() 
                self.state = 2100
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,277,self._ctx)

            self.state = 2102
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==49:
                self.state = 2101
                self.match(PythonParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Del_targetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def t_primary(self):
            return self.getTypedRuleContext(PythonParser.T_primaryContext,0)


        def DOT(self):
            return self.getToken(PythonParser.DOT, 0)

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def LSQB(self):
            return self.getToken(PythonParser.LSQB, 0)

        def slices(self):
            return self.getTypedRuleContext(PythonParser.SlicesContext,0)


        def RSQB(self):
            return self.getToken(PythonParser.RSQB, 0)

        def del_t_atom(self):
            return self.getTypedRuleContext(PythonParser.Del_t_atomContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_del_target

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDel_target" ):
                return visitor.visitDel_target(self)
            else:
                return visitor.visitChildren(self)




    def del_target(self):

        localctx = PythonParser.Del_targetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 378, self.RULE_del_target)
        try:
            self.state = 2114
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,280,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2104
                self.t_primary(0)
                self.state = 2111
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [47]:
                    self.state = 2105
                    self.match(PythonParser.DOT)
                    self.state = 2106
                    self.match(PythonParser.NAME)
                    pass
                elif token in [42]:
                    self.state = 2107
                    self.match(PythonParser.LSQB)
                    self.state = 2108
                    self.slices()
                    self.state = 2109
                    self.match(PythonParser.RSQB)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2113
                self.del_t_atom()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Del_t_atomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def LPAR(self):
            return self.getToken(PythonParser.LPAR, 0)

        def del_target(self):
            return self.getTypedRuleContext(PythonParser.Del_targetContext,0)


        def RPAR(self):
            return self.getToken(PythonParser.RPAR, 0)

        def del_targets(self):
            return self.getTypedRuleContext(PythonParser.Del_targetsContext,0)


        def LSQB(self):
            return self.getToken(PythonParser.LSQB, 0)

        def RSQB(self):
            return self.getToken(PythonParser.RSQB, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_del_t_atom

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDel_t_atom" ):
                return visitor.visitDel_t_atom(self)
            else:
                return visitor.visitChildren(self)




    def del_t_atom(self):

        localctx = PythonParser.Del_t_atomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 380, self.RULE_del_t_atom)
        self._la = 0 # Token type
        try:
            self.state = 2131
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,283,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2116
                self.match(PythonParser.NAME)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2117
                self.match(PythonParser.LPAR)
                self.state = 2118
                self.del_target()
                self.state = 2119
                self.match(PythonParser.RPAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2121
                self.match(PythonParser.LPAR)
                self.state = 2123
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 15393162856520) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 57) != 0):
                    self.state = 2122
                    self.del_targets()


                self.state = 2125
                self.match(PythonParser.RPAR)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2126
                self.match(PythonParser.LSQB)
                self.state = 2128
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 15393162856520) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 57) != 0):
                    self.state = 2127
                    self.del_targets()


                self.state = 2130
                self.match(PythonParser.RSQB)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_expressionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PythonParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def STAR(self):
            return self.getToken(PythonParser.STAR, 0)

        def DOUBLESTAR(self):
            return self.getToken(PythonParser.DOUBLESTAR, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_type_expressions

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_expressions" ):
                return visitor.visitType_expressions(self)
            else:
                return visitor.visitChildren(self)




    def type_expressions(self):

        localctx = PythonParser.Type_expressionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 382, self.RULE_type_expressions)
        self._la = 0 # Token type
        try:
            self.state = 2164
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 6, 7, 11, 16, 24, 34, 41, 42, 43, 51, 52, 65, 86, 89, 90, 91]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2133
                self.expression()
                self.state = 2138
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,284,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2134
                        self.match(PythonParser.COMMA)
                        self.state = 2135
                        self.expression() 
                    self.state = 2140
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,284,self._ctx)

                self.state = 2153
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==49:
                    self.state = 2141
                    self.match(PythonParser.COMMA)
                    self.state = 2151
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [53]:
                        self.state = 2142
                        self.match(PythonParser.STAR)
                        self.state = 2143
                        self.expression()
                        self.state = 2147
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==49:
                            self.state = 2144
                            self.match(PythonParser.COMMA)
                            self.state = 2145
                            self.match(PythonParser.DOUBLESTAR)
                            self.state = 2146
                            self.expression()


                        pass
                    elif token in [69]:
                        self.state = 2149
                        self.match(PythonParser.DOUBLESTAR)
                        self.state = 2150
                        self.expression()
                        pass
                    else:
                        raise NoViableAltException(self)



                pass
            elif token in [53]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2155
                self.match(PythonParser.STAR)
                self.state = 2156
                self.expression()
                self.state = 2160
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==49:
                    self.state = 2157
                    self.match(PythonParser.COMMA)
                    self.state = 2158
                    self.match(PythonParser.DOUBLESTAR)
                    self.state = 2159
                    self.expression()


                pass
            elif token in [69]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2162
                self.match(PythonParser.DOUBLESTAR)
                self.state = 2163
                self.expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_type_commentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEWLINE(self):
            return self.getToken(PythonParser.NEWLINE, 0)

        def TYPE_COMMENT(self):
            return self.getToken(PythonParser.TYPE_COMMENT, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_func_type_comment

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunc_type_comment" ):
                return visitor.visitFunc_type_comment(self)
            else:
                return visitor.visitChildren(self)




    def func_type_comment(self):

        localctx = PythonParser.Func_type_commentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 384, self.RULE_func_type_comment)
        try:
            self.state = 2169
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [92]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2166
                self.match(PythonParser.NEWLINE)
                self.state = 2167
                self.match(PythonParser.TYPE_COMMENT)
                pass
            elif token in [93]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2168
                self.match(PythonParser.TYPE_COMMENT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Soft_kw_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_soft_kw_type

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSoft_kw_type" ):
                return visitor.visitSoft_kw_type(self)
            else:
                return visitor.visitChildren(self)




    def soft_kw_type(self):

        localctx = PythonParser.Soft_kw_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 386, self.RULE_soft_kw_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2171
            if not self.isEqualToCurrentTokenText("type"):
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "self.isEqualToCurrentTokenText(\"type\")")
            self.state = 2172
            self.match(PythonParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Soft_kw_matchContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_soft_kw_match

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSoft_kw_match" ):
                return visitor.visitSoft_kw_match(self)
            else:
                return visitor.visitChildren(self)




    def soft_kw_match(self):

        localctx = PythonParser.Soft_kw_matchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 388, self.RULE_soft_kw_match)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2174
            if not self.isEqualToCurrentTokenText("match"):
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "self.isEqualToCurrentTokenText(\"match\")")
            self.state = 2175
            self.match(PythonParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Soft_kw_caseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_soft_kw_case

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSoft_kw_case" ):
                return visitor.visitSoft_kw_case(self)
            else:
                return visitor.visitChildren(self)




    def soft_kw_case(self):

        localctx = PythonParser.Soft_kw_caseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 390, self.RULE_soft_kw_case)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2177
            if not self.isEqualToCurrentTokenText("case"):
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "self.isEqualToCurrentTokenText(\"case\")")
            self.state = 2178
            self.match(PythonParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Soft_kw_wildcardContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_soft_kw_wildcard

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSoft_kw_wildcard" ):
                return visitor.visitSoft_kw_wildcard(self)
            else:
                return visitor.visitChildren(self)




    def soft_kw_wildcard(self):

        localctx = PythonParser.Soft_kw_wildcardContext(self, self._ctx, self.state)
        self.enterRule(localctx, 392, self.RULE_soft_kw_wildcard)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2180
            if not self.isEqualToCurrentTokenText("_"):
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "self.isEqualToCurrentTokenText(\"_\")")
            self.state = 2181
            self.match(PythonParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Soft_kw__not__wildcardContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_soft_kw__not__wildcard

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSoft_kw__not__wildcard" ):
                return visitor.visitSoft_kw__not__wildcard(self)
            else:
                return visitor.visitChildren(self)




    def soft_kw__not__wildcard(self):

        localctx = PythonParser.Soft_kw__not__wildcardContext(self, self._ctx, self.state)
        self.enterRule(localctx, 394, self.RULE_soft_kw__not__wildcard)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2183
            if not self.isnotEqualToCurrentTokenText("_"):
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "self.isnotEqualToCurrentTokenText(\"_\")")
            self.state = 2184
            self.match(PythonParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[29] = self.dotted_name_sempred
        self._predicates[127] = self.bitwise_or_sempred
        self._predicates[128] = self.bitwise_xor_sempred
        self._predicates[129] = self.bitwise_and_sempred
        self._predicates[130] = self.shift_expr_sempred
        self._predicates[131] = self.sum_sempred
        self._predicates[132] = self.term_sempred
        self._predicates[136] = self.primary_sempred
        self._predicates[187] = self.t_primary_sempred
        self._predicates[193] = self.soft_kw_type_sempred
        self._predicates[194] = self.soft_kw_match_sempred
        self._predicates[195] = self.soft_kw_case_sempred
        self._predicates[196] = self.soft_kw_wildcard_sempred
        self._predicates[197] = self.soft_kw__not__wildcard_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def dotted_name_sempred(self, localctx:Dotted_nameContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 2)
         

    def bitwise_or_sempred(self, localctx:Bitwise_orContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 2)
         

    def bitwise_xor_sempred(self, localctx:Bitwise_xorContext, predIndex:int):
            if predIndex == 2:
                return self.precpred(self._ctx, 2)
         

    def bitwise_and_sempred(self, localctx:Bitwise_andContext, predIndex:int):
            if predIndex == 3:
                return self.precpred(self._ctx, 2)
         

    def shift_expr_sempred(self, localctx:Shift_exprContext, predIndex:int):
            if predIndex == 4:
                return self.precpred(self._ctx, 2)
         

    def sum_sempred(self, localctx:SumContext, predIndex:int):
            if predIndex == 5:
                return self.precpred(self._ctx, 2)
         

    def term_sempred(self, localctx:TermContext, predIndex:int):
            if predIndex == 6:
                return self.precpred(self._ctx, 2)
         

    def primary_sempred(self, localctx:PrimaryContext, predIndex:int):
            if predIndex == 7:
                return self.precpred(self._ctx, 2)
         

    def t_primary_sempred(self, localctx:T_primaryContext, predIndex:int):
            if predIndex == 8:
                return self.precpred(self._ctx, 2)
         

    def soft_kw_type_sempred(self, localctx:Soft_kw_typeContext, predIndex:int):
            if predIndex == 9:
                return self.isEqualToCurrentTokenText("type")
         

    def soft_kw_match_sempred(self, localctx:Soft_kw_matchContext, predIndex:int):
            if predIndex == 10:
                return self.isEqualToCurrentTokenText("match")
         

    def soft_kw_case_sempred(self, localctx:Soft_kw_caseContext, predIndex:int):
            if predIndex == 11:
                return self.isEqualToCurrentTokenText("case")
         

    def soft_kw_wildcard_sempred(self, localctx:Soft_kw_wildcardContext, predIndex:int):
            if predIndex == 12:
                return self.isEqualToCurrentTokenText("_")
         

    def soft_kw__not__wildcard_sempred(self, localctx:Soft_kw__not__wildcardContext, predIndex:int):
            if predIndex == 13:
                return self.isnotEqualToCurrentTokenText("_")
         




