name: Build and Release

on:
  push:
    branches: [ main ]
    tags: ['[0-9]+\.[0-9]+\.[0-9]+']
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      fast-mode:
        description: 'Fast mode (reduced build variants)'
        required: false
        default: 'false'
        type: choice
        options: ['true', 'false']
      test-wheels:
        description: 'Test wheels compatibility'
        required: false
        default: 'false'
        type: choice
        options: ['true', 'false']

# Permissions needed for this workflow
permissions:
  contents: write    # For creating releases and pushing to gh-pages
  pull-requests: write  # For commenting on PRs
  pages: write      # For GitHub Pages deployment
  id-token: write   # For PyPI trusted publishing

# Concurrency control
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  # Lint check job
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: |
            **/pyproject.toml
            **/requirements*.txt
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install nox
          python -m pip install -e ".[dev]"
      
      - name: Run linters
        run: python -m nox -s lint

  # Build wheels using cibuildwheel
  build-wheels:
    name: Build wheels on ${{ matrix.os }}
    needs: [lint]
    if: ${{ !(github.event_name == 'workflow_dispatch' && github.event.inputs.fast-mode == 'true') }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux builds
          - os: ubuntu-latest
          # Windows builds
          - os: windows-latest
          # macOS builds - Intel
          - os: macos-13
          # macOS builds - Apple Silicon
          - os: macos-14
    
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
      
      # Cache Eigen library
      - name: Cache Eigen library
        uses: actions/cache@v4
        with:
          path: extern/eigen
          key: ${{ runner.os }}-eigen-${{ hashFiles('.github/scripts/*/setup_eigen.sh') }}
          restore-keys: |
            ${{ runner.os }}-eigen-
      
      # Build wheels using cibuildwheel action
      - name: Build wheels
        uses: pypa/cibuildwheel@v2.23.0
        with:
          output-dir: wheelhouse
        env:
          CIBW_BUILD: "cp37-* cp38-* cp39-* cp310-* cp311-* cp312-*"
          CIBW_SKIP: "pp* *-musllinux* *-win32 *-manylinux_i686"
          CIBW_BEFORE_BUILD: "pip install -U pip setuptools wheel numpy pybind11 scikit-build-core cmake"
          CIBW_BUILD_VERBOSITY: 3
          CIBW_ENVIRONMENT: "PYTHONIOENCODING=UTF-8 PIP_NO_BUILD_ISOLATION=1"
          CIBW_ENVIRONMENT_PASS_LINUX: "LANG LC_ALL"
          CIBW_ENVIRONMENT_LINUX: "LANG=C.UTF-8 LC_ALL=C.UTF-8 PYTHONIOENCODING=UTF-8 CMAKE_PREFIX_PATH=/opt/python/{package.platname}"
          CIBW_ENVIRONMENT_WINDOWS: "CMAKE_GENERATOR=Ninja CMAKE_POSITION_INDEPENDENT_CODE=ON"
          CIBW_REPAIR_WHEEL_COMMAND_LINUX: "auditwheel repair -w {dest_dir} {wheel}"
          CIBW_REPAIR_WHEEL_COMMAND_MACOS: "delocate-wheel --require-archs {delocate_archs} -w {dest_dir} -v {wheel}"
          CIBW_BEFORE_ALL_WINDOWS: "choco install -y ninja && dir \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\" || dir \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\" || dir \"C:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\" || dir \"C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\""
          CIBW_ENVIRONMENT_MACOS: "MAKEFLAGS=-j4 FORCE_PYTHON_VERSION={python_version}"
      
      # Upload wheels
      - uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}
          path: ./wheelhouse/*.whl
          if-no-files-found: error

  # 测试构建的轮子在不同 Python 版本上的兼容性
  test-wheels:
    name: Test wheels compatibility
    needs: [build-wheels]
    if: ${{ github.event_name == 'release' || (github.event_name == 'workflow_dispatch' && github.event.inputs.test-wheels == 'true') }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.7', '3.8', '3.9', '3.10', '3.11', '3.12', '3.13']
        exclude:
          # 排除不支持的组合
          - os: ubuntu-latest
            python-version: '3.13'
          - os: macos-latest
            python-version: '3.13'
    
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      
      # 下载构建的轮子
      - uses: actions/download-artifact@v4
        with:
          name: wheels
          path: wheels/
      
      # 安装系统依赖
      - name: Install system dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgl1-mesa-glx
        shell: bash
      
      # 安装轮子并测试
      - name: Install and test wheel
        run: |
          python -m pip install --upgrade pip
          python -m pip install pytest pytest-cov numpy
          # 查找适合当前 Python 版本的轮子
          if [ "${{ runner.os }}" == "Windows" ]; then
            WHEEL_PATTERN="py_dem_bones-*-cp$(echo ${{ matrix.python-version }} | tr -d '.')*win*.whl"
          elif [ "${{ runner.os }}" == "macOS" ]; then
            WHEEL_PATTERN="py_dem_bones-*-cp$(echo ${{ matrix.python-version }} | tr -d '.')*macosx*.whl"
          else
            WHEEL_PATTERN="py_dem_bones-*-cp$(echo ${{ matrix.python-version }} | tr -d '.')*manylinux*.whl"
          fi
          
          # 尝试安装 ABI3 轮子（如果没有特定版本的轮子）
          if ! ls wheels/$WHEEL_PATTERN 1> /dev/null 2>&1; then
            echo "No specific wheel found for Python ${{ matrix.python-version }}, trying ABI3 wheel"
            if [ "${{ runner.os }}" == "Windows" ]; then
              WHEEL_PATTERN="py_dem_bones-*-cp310-abi3*win*.whl"
            elif [ "${{ runner.os }}" == "macOS" ]; then
              WHEEL_PATTERN="py_dem_bones-*-cp310-abi3*macosx*.whl"
            else
              WHEEL_PATTERN="py_dem_bones-*-cp310-abi3*manylinux*.whl"
            fi
          fi
          
          # 安装找到的轮子
          WHEEL=$(ls wheels/$WHEEL_PATTERN | head -n 1)
          if [ -z "$WHEEL" ]; then
            echo "No compatible wheel found for Python ${{ matrix.python-version }} on ${{ runner.os }}"
            exit 1
          fi
          
          echo "Installing wheel: $WHEEL"
          python -m pip install $WHEEL
          
          # 运行基本导入测试
          python -c "import py_dem_bones; print(py_dem_bones.__version__)"
          python -c "from py_dem_bones import DemBones; d = DemBones()"
          
          # 运行完整的单元测试套件
          echo "Running full test suite..."
          python -m pytest tests/ -v
        shell: bash

  # Fast build for quick checks
  fast-build:
    name: Fast Build
    needs: [lint]
    if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.fast-mode == 'true' }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            python-version: '3.7'
          - os: ubuntu-latest
            python-version: '3.13'
          - os: macos-latest
            python-version: '3.11'
          - os: windows-latest
            python-version: '3.11'
    
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          cache-dependency-path: |
            **/pyproject.toml
            **/requirements*.txt
      
      # 
      - name: Build and test
        run: |
          python -m pip install --upgrade pip
          python -m pip install pytest pytest-cov
          python -m pip install -e ".[dev,test]"
          python -m pytest tests/ -v
        
      # u5b89u88c5 Linux u7cfbu7edfu4f9du8d56u5b89u88c5u6b65u9aa4
      - name: Install system dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake ninja-build gcc g++
        shell: bash

  # Build source distribution
  build-sdist:
    name: Build source distribution
    needs: [lint]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: |
            **/pyproject.toml
            **/requirements*.txt
      
      # u5b89u88c5u7cfbu7edfu4f9du8d56
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake ninja-build gcc g++
        shell: bash
      
      - name: Build SDist
        run: |
          python -m pip install build numpy pybind11 scikit-build-core cmake
          python -m build --sdist
      
      - name: Test SDist
        run: |
          python -m pip install --upgrade pip
          python -m pip install pytest pytest-cov numpy
          python -m pip install dist/*.tar.gz
          python -c "import py_dem_bones; print(py_dem_bones.__version__)"
          python -m pytest tests/test_basic.py -v || echo "Basic tests failed but continuing"
      
      - uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: dist/*.tar.gz
          if-no-files-found: error

  # Documentation preview for PRs
  docs-preview:
    name: Documentation Preview
    needs: [lint]
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: |
            **/pyproject.toml
            **/requirements*.txt
      
      - name: Build documentation
        run: |
          python -m pip install nox
          python -m pip install -e ".[docs]"
          python -m nox -s docs
      
      - name: Upload documentation preview
        uses: actions/upload-artifact@v4
        with:
          name: docs-preview
          path: docs/_build/html
          if-no-files-found: error
      
      - name: Deploy to GitHub Pages (PR Preview)
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs/_build/html
          destination_dir: pr-preview/${{ github.event.pull_request.number }}
          keep_files: true
      
      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            const artifactUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}/artifacts`;
            const pagesUrl = `https://${context.repo.owner}.github.io/${context.repo.repo}/pr-preview/${context.issue.number}/`;
            const comment = `📚 Documentation preview has been built successfully!\n\n- [View Documentation Preview](${pagesUrl})\n- [Download Artifacts](${artifactUrl})`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  # Create GitHub Release and publish to PyPI
  release:
    name: Release
    needs: [build-wheels, build-sdist]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    environment:
      name: release
      url: https://pypi.org/p/py-dem-bones
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
      
      # Download artifacts
      - uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
          path: dist
          merge-multiple: true
      
      - uses: actions/download-artifact@v4
        with:
          name: sdist
          path: dist
      
      # Create GitHub Release
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      # Publish to PyPI
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1

  # Deploy documentation to GitHub Pages
  docs-deploy:
    name: Deploy Documentation
    needs: [release]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    # Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
    permissions:
      contents: read
      pages: write
      id-token: write
    # Deploy to the github-pages environment
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: |
            **/pyproject.toml
            **/requirements*.txt
      
      - name: Build documentation
        run: |
          python -m pip install nox
          python -m pip install -e ".[docs]"
          python -m nox -s docs
      
      - name: Setup Pages
        uses: actions/configure-pages@v4
      
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: 'docs/_build/html'
      
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
