# coding: utf-8

"""
    Skyfire SDK

    The Skyfire SDK is designed to allow agents to interact with the Skyfire platform to enable autonomous payments.

    The version of the OpenAPI document: 1.0.0
    Contact: support@skyfire.xyz
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from skyfire_sdk.models.bridge_virtual_account import BridgeVirtualAccount
from skyfire_sdk.models.custody_provider import CustodyProvider
from skyfire_sdk.models.eth_network_type import EthNetworkType
from skyfire_sdk.models.wallet_type import WalletType
from typing import Optional, Set
from typing_extensions import Self

class Wallet(BaseModel):
    """
    Wallet
    """ # noqa: E501
    id: StrictStr
    user_id: StrictStr = Field(alias="userId")
    organization_id: StrictStr = Field(alias="organizationId")
    wallet_name: StrictStr = Field(alias="walletName")
    is_default: Optional[StrictBool] = Field(alias="isDefault")
    is_smart: StrictBool = Field(alias="isSmart")
    custody_provider: CustodyProvider = Field(alias="custodyProvider")
    wallet_type: WalletType = Field(alias="walletType")
    network: EthNetworkType
    wallet_address: StrictStr = Field(alias="walletAddress")
    bridge_virtual_account: Optional[BridgeVirtualAccount] = Field(default=None, alias="bridgeVirtualAccount")
    bridge_virtual_account_id: Optional[StrictStr] = Field(default=None, alias="bridgeVirtualAccountId")
    created_date: datetime = Field(alias="createdDate")
    updated_date: datetime = Field(alias="updatedDate")
    skyfire_user: Optional[SkyfireUser] = Field(default=None, alias="#skyfireUser")
    organization: Optional[Organization] = Field(default=None, alias="#organization")
    __properties: ClassVar[List[str]] = ["id", "userId", "organizationId", "walletName", "isDefault", "isSmart", "custodyProvider", "walletType", "network", "walletAddress", "bridgeVirtualAccount", "bridgeVirtualAccountId", "createdDate", "updatedDate", "#skyfireUser", "#organization"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Wallet from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of bridge_virtual_account
        if self.bridge_virtual_account:
            _dict['bridgeVirtualAccount'] = self.bridge_virtual_account.to_dict()
        # override the default output from pydantic by calling `to_dict()` of skyfire_user
        if self.skyfire_user:
            _dict['#skyfireUser'] = self.skyfire_user.to_dict()
        # override the default output from pydantic by calling `to_dict()` of organization
        if self.organization:
            _dict['#organization'] = self.organization.to_dict()
        # set to None if is_default (nullable) is None
        # and model_fields_set contains the field
        if self.is_default is None and "is_default" in self.model_fields_set:
            _dict['isDefault'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Wallet from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "userId": obj.get("userId"),
            "organizationId": obj.get("organizationId"),
            "walletName": obj.get("walletName"),
            "isDefault": obj.get("isDefault"),
            "isSmart": obj.get("isSmart"),
            "custodyProvider": obj.get("custodyProvider"),
            "walletType": obj.get("walletType"),
            "network": obj.get("network"),
            "walletAddress": obj.get("walletAddress"),
            "bridgeVirtualAccount": BridgeVirtualAccount.from_dict(obj["bridgeVirtualAccount"]) if obj.get("bridgeVirtualAccount") is not None else None,
            "bridgeVirtualAccountId": obj.get("bridgeVirtualAccountId"),
            "createdDate": obj.get("createdDate"),
            "updatedDate": obj.get("updatedDate"),
            "#skyfireUser": SkyfireUser.from_dict(obj["#skyfireUser"]) if obj.get("#skyfireUser") is not None else None,
            "#organization": Organization.from_dict(obj["#organization"]) if obj.get("#organization") is not None else None
        })
        return _obj

from skyfire_sdk.models.organization import Organization
from skyfire_sdk.models.skyfire_user import SkyfireUser
# TODO: Rewrite to not use raise_errors
Wallet.model_rebuild(raise_errors=False)

