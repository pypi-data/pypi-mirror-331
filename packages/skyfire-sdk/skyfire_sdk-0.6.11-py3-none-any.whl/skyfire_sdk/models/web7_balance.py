# coding: utf-8

"""
    Skyfire SDK

    The Skyfire SDK is designed to allow agents to interact with the Skyfire platform to enable autonomous payments.

    The version of the OpenAPI document: 1.0.0
    Contact: support@skyfire.xyz
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List
from skyfire_sdk.models.web7_balance_claims import Web7BalanceClaims
from skyfire_sdk.models.web7_balance_escrow import Web7BalanceEscrow
from skyfire_sdk.models.web7_balance_native import Web7BalanceNative
from skyfire_sdk.models.web7_balance_onchain import Web7BalanceOnchain
from typing import Optional, Set
from typing_extensions import Self

class Web7Balance(BaseModel):
    """
    Web7Balance
    """ # noqa: E501
    native: Web7BalanceNative
    claims: Web7BalanceClaims
    escrow: Web7BalanceEscrow
    onchain: Web7BalanceOnchain
    token_address: StrictStr = Field(alias="tokenAddress")
    contract_address: StrictStr = Field(alias="contractAddress")
    custody_provider: StrictStr = Field(alias="custodyProvider")
    is_smart_account: StrictBool = Field(alias="isSmartAccount")
    network: StrictStr
    address: StrictStr
    __properties: ClassVar[List[str]] = ["native", "claims", "escrow", "onchain", "tokenAddress", "contractAddress", "custodyProvider", "isSmartAccount", "network", "address"]

    @field_validator('custody_provider')
    def custody_provider_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['SKYFIRE_EVERVAULT', 'SKYFIRE_COINBASE_MPC', 'CIRCLE_DEVELOPER_WALLET']):
            raise ValueError("must be one of enum values ('SKYFIRE_EVERVAULT', 'SKYFIRE_COINBASE_MPC', 'CIRCLE_DEVELOPER_WALLET')")
        return value

    @field_validator('network')
    def network_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['eth_mainnet', 'eth_goerli', 'eth_hardhat_mainnet', 'polygon_mainnet', 'polygon_testnet', 'polygon_hardhat_mainnet', 'coinbase_mainnet', 'coinbase_testnet', 'coinbase_hardhat_mainnet']):
            raise ValueError("must be one of enum values ('eth_mainnet', 'eth_goerli', 'eth_hardhat_mainnet', 'polygon_mainnet', 'polygon_testnet', 'polygon_hardhat_mainnet', 'coinbase_mainnet', 'coinbase_testnet', 'coinbase_hardhat_mainnet')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Web7Balance from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of native
        if self.native:
            _dict['native'] = self.native.to_dict()
        # override the default output from pydantic by calling `to_dict()` of claims
        if self.claims:
            _dict['claims'] = self.claims.to_dict()
        # override the default output from pydantic by calling `to_dict()` of escrow
        if self.escrow:
            _dict['escrow'] = self.escrow.to_dict()
        # override the default output from pydantic by calling `to_dict()` of onchain
        if self.onchain:
            _dict['onchain'] = self.onchain.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Web7Balance from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "native": Web7BalanceNative.from_dict(obj["native"]) if obj.get("native") is not None else None,
            "claims": Web7BalanceClaims.from_dict(obj["claims"]) if obj.get("claims") is not None else None,
            "escrow": Web7BalanceEscrow.from_dict(obj["escrow"]) if obj.get("escrow") is not None else None,
            "onchain": Web7BalanceOnchain.from_dict(obj["onchain"]) if obj.get("onchain") is not None else None,
            "tokenAddress": obj.get("tokenAddress"),
            "contractAddress": obj.get("contractAddress"),
            "custodyProvider": obj.get("custodyProvider"),
            "isSmartAccount": obj.get("isSmartAccount"),
            "network": obj.get("network"),
            "address": obj.get("address")
        })
        return _obj


