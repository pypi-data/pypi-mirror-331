# coding: utf-8

"""
    Skyfire SDK

    The Skyfire SDK is designed to allow agents to interact with the Skyfire platform to enable autonomous payments.

    The version of the OpenAPI document: 1.0.0
    Contact: support@skyfire.xyz
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from skyfire_sdk.models.vetric_marketplace_search_response_data_marketplace_search_feed_units_edges_inner_node_row1_current_price_amount import VetricMarketplaceSearchResponseDataMarketplaceSearchFeedUnitsEdgesInnerNodeRow1CurrentPriceAmount
from typing import Optional, Set
from typing_extensions import Self

class VetricMarketplaceSearchResponseDataMarketplaceSearchFeedUnitsEdgesInnerNodeRow1(BaseModel):
    """
    VetricMarketplaceSearchResponseDataMarketplaceSearchFeedUnitsEdgesInnerNodeRow1
    """ # noqa: E501
    typename: Optional[StrictStr] = Field(default=None, description="Type name of the row object.", alias="__typename")
    is_marketplace_feed_content_entity_snippet: Optional[StrictStr] = Field(default=None, description="Indicator for row snippet type.", alias="__isMarketplaceFeedContentEntitySnippet")
    snippet_type: Optional[StrictStr] = Field(default=None, description="Type of snippet, such as 'PRICE'.")
    current_price_amount: Optional[VetricMarketplaceSearchResponseDataMarketplaceSearchFeedUnitsEdgesInnerNodeRow1CurrentPriceAmount] = None
    id: Optional[StrictStr] = Field(default=None, description="Unique identifier for the row snippet.")
    __properties: ClassVar[List[str]] = ["__typename", "__isMarketplaceFeedContentEntitySnippet", "snippet_type", "current_price_amount", "id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VetricMarketplaceSearchResponseDataMarketplaceSearchFeedUnitsEdgesInnerNodeRow1 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of current_price_amount
        if self.current_price_amount:
            _dict['current_price_amount'] = self.current_price_amount.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VetricMarketplaceSearchResponseDataMarketplaceSearchFeedUnitsEdgesInnerNodeRow1 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "__typename": obj.get("__typename"),
            "__isMarketplaceFeedContentEntitySnippet": obj.get("__isMarketplaceFeedContentEntitySnippet"),
            "snippet_type": obj.get("snippet_type"),
            "current_price_amount": VetricMarketplaceSearchResponseDataMarketplaceSearchFeedUnitsEdgesInnerNodeRow1CurrentPriceAmount.from_dict(obj["current_price_amount"]) if obj.get("current_price_amount") is not None else None,
            "id": obj.get("id")
        })
        return _obj


