# coding: utf-8

"""
    Skyfire SDK

    The Skyfire SDK is designed to allow agents to interact with the Skyfire platform to enable autonomous payments.

    The version of the OpenAPI document: 1.0.0
    Contact: support@skyfire.xyz
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Union
from typing import Optional, Set
from typing_extensions import Self

class APINinjaWeatherResponse(BaseModel):
    """
    APINinjaWeatherResponse
    """ # noqa: E501
    wind_speed: Union[StrictFloat, StrictInt] = Field(description="The wind speed in meters per second.")
    wind_degrees: Union[StrictFloat, StrictInt] = Field(description="The wind direction in degrees.")
    temp: Union[StrictFloat, StrictInt] = Field(description="The temperature in Celsius.")
    humidity: Union[StrictFloat, StrictInt] = Field(description="The humidity percentage.")
    sunset: Union[StrictFloat, StrictInt] = Field(description="The UNIX timestamp of the sunset time.")
    min_temp: Union[StrictFloat, StrictInt] = Field(description="The minimum temperature in Celsius.")
    cloud_pct: Union[StrictFloat, StrictInt] = Field(description="The cloud coverage percentage.")
    feels_like: Union[StrictFloat, StrictInt] = Field(description="The \"feels like\" temperature in Celsius.")
    sunrise: Union[StrictFloat, StrictInt] = Field(description="The UNIX timestamp of the sunrise time.")
    max_temp: Union[StrictFloat, StrictInt] = Field(description="The maximum temperature in Celsius.")
    __properties: ClassVar[List[str]] = ["wind_speed", "wind_degrees", "temp", "humidity", "sunset", "min_temp", "cloud_pct", "feels_like", "sunrise", "max_temp"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of APINinjaWeatherResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of APINinjaWeatherResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "wind_speed": obj.get("wind_speed"),
            "wind_degrees": obj.get("wind_degrees"),
            "temp": obj.get("temp"),
            "humidity": obj.get("humidity"),
            "sunset": obj.get("sunset"),
            "min_temp": obj.get("min_temp"),
            "cloud_pct": obj.get("cloud_pct"),
            "feels_like": obj.get("feels_like"),
            "sunrise": obj.get("sunrise"),
            "max_temp": obj.get("max_temp")
        })
        return _obj


