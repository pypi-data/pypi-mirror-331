# coding: utf-8

"""
    Skyfire SDK

    The Skyfire SDK is designed to allow agents to interact with the Skyfire platform to enable autonomous payments.

    The version of the OpenAPI document: 1.0.0
    Contact: support@skyfire.xyz
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from skyfire_sdk.models.claim import Claim
from skyfire_sdk.models.fees import Fees
from skyfire_sdk.models.redemption import Redemption
from typing import Optional, Set
from typing_extensions import Self

class Transaction(BaseModel):
    """
    Represents a transaction object.
    """ # noqa: E501
    id: StrictStr = Field(description="The unique identifier of the transaction.")
    status: StrictStr = Field(description="The status of the transaction.")
    created_at: StrictStr = Field(description="The date and time when the transaction was created.", alias="createdAt")
    type: StrictStr = Field(description="The type of the transaction.")
    tx_id: Optional[StrictStr] = Field(default=None, description="The transaction ID.", alias="txId")
    tx_type: Optional[StrictStr] = Field(default=None, description="The type of the transaction.", alias="txType")
    tx_hash: Optional[StrictStr] = Field(default=None, description="The hash of the transaction.", alias="txHash")
    redemption: Optional[Redemption] = None
    redemption_id: Optional[StrictStr] = Field(default=None, description="The identifier for the redemption associated with the transaction.", alias="redemptionId")
    fees: Optional[Fees] = None
    claim: Optional[Claim] = None
    claim_id: Optional[StrictStr] = Field(default=None, description="The identifier for the claim associated with the transaction.", alias="claimId")
    __properties: ClassVar[List[str]] = ["id", "status", "createdAt", "type", "txId", "txType", "txHash", "redemption", "redemptionId", "fees", "claim", "claimId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Transaction from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of redemption
        if self.redemption:
            _dict['redemption'] = self.redemption.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fees
        if self.fees:
            _dict['fees'] = self.fees.to_dict()
        # override the default output from pydantic by calling `to_dict()` of claim
        if self.claim:
            _dict['claim'] = self.claim.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Transaction from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "status": obj.get("status"),
            "createdAt": obj.get("createdAt"),
            "type": obj.get("type"),
            "txId": obj.get("txId"),
            "txType": obj.get("txType"),
            "txHash": obj.get("txHash"),
            "redemption": Redemption.from_dict(obj["redemption"]) if obj.get("redemption") is not None else None,
            "redemptionId": obj.get("redemptionId"),
            "fees": Fees.from_dict(obj["fees"]) if obj.get("fees") is not None else None,
            "claim": Claim.from_dict(obj["claim"]) if obj.get("claim") is not None else None,
            "claimId": obj.get("claimId")
        })
        return _obj


