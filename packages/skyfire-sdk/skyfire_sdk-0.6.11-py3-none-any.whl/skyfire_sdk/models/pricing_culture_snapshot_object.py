# coding: utf-8

"""
    Skyfire SDK

    The Skyfire SDK is designed to allow agents to interact with the Skyfire platform to enable autonomous payments.

    The version of the OpenAPI document: 1.0.0
    Contact: support@skyfire.xyz
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from skyfire_sdk.models.pricing_culture_snapshot_asset_details import PricingCultureSnapshotAssetDetails
from typing import Optional, Set
from typing_extensions import Self

class PricingCultureSnapshotObject(BaseModel):
    """
    PricingCultureSnapshotObject
    """ # noqa: E501
    id: Optional[StrictInt] = None
    market_comp_id: Optional[StrictInt] = None
    event_time: Optional[datetime] = None
    value_min: Optional[StrictStr] = None
    value_max: Optional[StrictStr] = None
    value_average: Optional[StrictStr] = None
    number_of_constituents: Optional[StrictInt] = None
    value_min_asset: Optional[PricingCultureSnapshotAssetDetails] = None
    value_max_asset: Optional[PricingCultureSnapshotAssetDetails] = None
    prices: Optional[List[StrictStr]] = None
    comparable_idx: Optional[StrictStr] = None
    recent_avg: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["id", "market_comp_id", "event_time", "value_min", "value_max", "value_average", "number_of_constituents", "value_min_asset", "value_max_asset", "prices", "comparable_idx", "recent_avg"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PricingCultureSnapshotObject from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of value_min_asset
        if self.value_min_asset:
            _dict['value_min_asset'] = self.value_min_asset.to_dict()
        # override the default output from pydantic by calling `to_dict()` of value_max_asset
        if self.value_max_asset:
            _dict['value_max_asset'] = self.value_max_asset.to_dict()
        # set to None if comparable_idx (nullable) is None
        # and model_fields_set contains the field
        if self.comparable_idx is None and "comparable_idx" in self.model_fields_set:
            _dict['comparable_idx'] = None

        # set to None if recent_avg (nullable) is None
        # and model_fields_set contains the field
        if self.recent_avg is None and "recent_avg" in self.model_fields_set:
            _dict['recent_avg'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PricingCultureSnapshotObject from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "market_comp_id": obj.get("market_comp_id"),
            "event_time": obj.get("event_time"),
            "value_min": obj.get("value_min"),
            "value_max": obj.get("value_max"),
            "value_average": obj.get("value_average"),
            "number_of_constituents": obj.get("number_of_constituents"),
            "value_min_asset": PricingCultureSnapshotAssetDetails.from_dict(obj["value_min_asset"]) if obj.get("value_min_asset") is not None else None,
            "value_max_asset": PricingCultureSnapshotAssetDetails.from_dict(obj["value_max_asset"]) if obj.get("value_max_asset") is not None else None,
            "prices": obj.get("prices"),
            "comparable_idx": obj.get("comparable_idx"),
            "recent_avg": obj.get("recent_avg")
        })
        return _obj


