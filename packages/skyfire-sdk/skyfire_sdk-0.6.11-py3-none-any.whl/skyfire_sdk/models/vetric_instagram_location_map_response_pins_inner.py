# coding: utf-8

"""
    Skyfire SDK

    The Skyfire SDK is designed to allow agents to interact with the Skyfire platform to enable autonomous payments.

    The version of the OpenAPI document: 1.0.0
    Contact: support@skyfire.xyz
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from skyfire_sdk.models.vetric_instagram_location_map_response_pins_inner_location import VetricInstagramLocationMapResponsePinsInnerLocation
from skyfire_sdk.models.vetric_instagram_location_map_response_pins_inner_page_info import VetricInstagramLocationMapResponsePinsInnerPageInfo
from skyfire_sdk.models.vetric_instagram_location_map_response_pins_inner_preview_medias_inner import VetricInstagramLocationMapResponsePinsInnerPreviewMediasInner
from typing import Optional, Set
from typing_extensions import Self

class VetricInstagramLocationMapResponsePinsInner(BaseModel):
    """
    VetricInstagramLocationMapResponsePinsInner
    """ # noqa: E501
    lat: Union[StrictFloat, StrictInt] = Field(description="Latitude of the location.")
    lng: StrictStr = Field(description="Longitude of the location.")
    location: VetricInstagramLocationMapResponsePinsInnerLocation
    page_info: Optional[VetricInstagramLocationMapResponsePinsInnerPageInfo] = None
    media_id: StrictStr = Field(description="ID of the media associated with the location.")
    thumbnail_url: StrictStr = Field(description="Thumbnail URL of the media.")
    preview_medias: Optional[List[VetricInstagramLocationMapResponsePinsInnerPreviewMediasInner]] = None
    media_count: StrictInt = Field(description="Total number of media posts at the location.")
    formatted_media_count: Optional[StrictStr] = Field(default=None, description="Formatted version of the media count.")
    rank: Optional[StrictInt] = Field(default=None, description="Ranking of the location.")
    __properties: ClassVar[List[str]] = ["lat", "lng", "location", "page_info", "media_id", "thumbnail_url", "preview_medias", "media_count", "formatted_media_count", "rank"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VetricInstagramLocationMapResponsePinsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of location
        if self.location:
            _dict['location'] = self.location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of page_info
        if self.page_info:
            _dict['page_info'] = self.page_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in preview_medias (list)
        _items = []
        if self.preview_medias:
            for _item in self.preview_medias:
                if _item:
                    _items.append(_item.to_dict())
            _dict['preview_medias'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VetricInstagramLocationMapResponsePinsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "lat": obj.get("lat"),
            "lng": obj.get("lng"),
            "location": VetricInstagramLocationMapResponsePinsInnerLocation.from_dict(obj["location"]) if obj.get("location") is not None else None,
            "page_info": VetricInstagramLocationMapResponsePinsInnerPageInfo.from_dict(obj["page_info"]) if obj.get("page_info") is not None else None,
            "media_id": obj.get("media_id"),
            "thumbnail_url": obj.get("thumbnail_url"),
            "preview_medias": [VetricInstagramLocationMapResponsePinsInnerPreviewMediasInner.from_dict(_item) for _item in obj["preview_medias"]] if obj.get("preview_medias") is not None else None,
            "media_count": obj.get("media_count"),
            "formatted_media_count": obj.get("formatted_media_count"),
            "rank": obj.get("rank")
        })
        return _obj


