# coding: utf-8

"""
    Skyfire SDK

    The Skyfire SDK is designed to allow agents to interact with the Skyfire platform to enable autonomous payments.

    The version of the OpenAPI document: 1.0.0
    Contact: support@skyfire.xyz
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from skyfire_sdk.models.user_organization import UserOrganization
from skyfire_sdk.models.user_rule import UserRule
from skyfire_sdk.models.user_type import UserType
from typing import Optional, Set
from typing_extensions import Self

class SkyfireUser(BaseModel):
    """
    SkyfireUser
    """ # noqa: E501
    id: StrictStr
    username: StrictStr
    email: StrictStr
    is_admin: StrictBool = Field(description="internal skyfire admins, with access to manage all admin endpoints", alias="isAdmin")
    is_enterprise_admin: StrictBool = Field(description="enterprise admins can manage organizations", alias="isEnterpriseAdmin")
    is_active: StrictBool = Field(alias="isActive")
    is_onboarded: StrictBool = Field(alias="isOnboarded")
    user_type: Optional[UserType] = Field(default=None, alias="userType")
    created_date: datetime = Field(alias="createdDate")
    updated_date: datetime = Field(alias="updatedDate")
    attributes: Optional[Any] = None
    parent_user_id: StrictStr = Field(alias="parentUserId")
    stytch_user_id: Optional[StrictStr] = Field(default=None, alias="stytchUserId")
    stripe_customer_id: Optional[StrictStr] = Field(default=None, alias="stripeCustomerId")
    rules: Optional[List[UserRule]] = None
    parent_user: Optional[SkyfireUser] = Field(default=None, alias="#parentUser")
    user_organizations: Optional[List[UserOrganization]] = Field(default=None, alias="#userOrganizations")
    wallets: Optional[List[Wallet]] = Field(default=None, alias="#wallets")
    default_wallet: Optional[Wallet] = Field(default=None, alias="#defaultWallet")
    organization_wallets: Optional[List[Wallet]] = Field(default=None, alias="#organizationWallets")
    created_organizations: Optional[List[Organization]] = Field(default=None, alias="#createdOrganizations")
    __properties: ClassVar[List[str]] = ["id", "username", "email", "isAdmin", "isEnterpriseAdmin", "isActive", "isOnboarded", "userType", "createdDate", "updatedDate", "attributes", "parentUserId", "stytchUserId", "stripeCustomerId", "rules", "#parentUser", "#userOrganizations", "#wallets", "#defaultWallet", "#organizationWallets", "#createdOrganizations"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SkyfireUser from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in rules (list)
        _items = []
        if self.rules:
            for _item in self.rules:
                if _item:
                    _items.append(_item.to_dict())
            _dict['rules'] = _items
        # override the default output from pydantic by calling `to_dict()` of parent_user
        if self.parent_user:
            _dict['#parentUser'] = self.parent_user.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in user_organizations (list)
        _items = []
        if self.user_organizations:
            for _item in self.user_organizations:
                if _item:
                    _items.append(_item.to_dict())
            _dict['#userOrganizations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in wallets (list)
        _items = []
        if self.wallets:
            for _item in self.wallets:
                if _item:
                    _items.append(_item.to_dict())
            _dict['#wallets'] = _items
        # override the default output from pydantic by calling `to_dict()` of default_wallet
        if self.default_wallet:
            _dict['#defaultWallet'] = self.default_wallet.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in organization_wallets (list)
        _items = []
        if self.organization_wallets:
            for _item in self.organization_wallets:
                if _item:
                    _items.append(_item.to_dict())
            _dict['#organizationWallets'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in created_organizations (list)
        _items = []
        if self.created_organizations:
            for _item in self.created_organizations:
                if _item:
                    _items.append(_item.to_dict())
            _dict['#createdOrganizations'] = _items
        # set to None if attributes (nullable) is None
        # and model_fields_set contains the field
        if self.attributes is None and "attributes" in self.model_fields_set:
            _dict['attributes'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SkyfireUser from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "username": obj.get("username"),
            "email": obj.get("email"),
            "isAdmin": obj.get("isAdmin"),
            "isEnterpriseAdmin": obj.get("isEnterpriseAdmin"),
            "isActive": obj.get("isActive"),
            "isOnboarded": obj.get("isOnboarded"),
            "userType": obj.get("userType"),
            "createdDate": obj.get("createdDate"),
            "updatedDate": obj.get("updatedDate"),
            "attributes": obj.get("attributes"),
            "parentUserId": obj.get("parentUserId"),
            "stytchUserId": obj.get("stytchUserId"),
            "stripeCustomerId": obj.get("stripeCustomerId"),
            "rules": [UserRule.from_dict(_item) for _item in obj["rules"]] if obj.get("rules") is not None else None,
            "#parentUser": SkyfireUser.from_dict(obj["#parentUser"]) if obj.get("#parentUser") is not None else None,
            "#userOrganizations": [UserOrganization.from_dict(_item) for _item in obj["#userOrganizations"]] if obj.get("#userOrganizations") is not None else None,
            "#wallets": [Wallet.from_dict(_item) for _item in obj["#wallets"]] if obj.get("#wallets") is not None else None,
            "#defaultWallet": Wallet.from_dict(obj["#defaultWallet"]) if obj.get("#defaultWallet") is not None else None,
            "#organizationWallets": [Wallet.from_dict(_item) for _item in obj["#organizationWallets"]] if obj.get("#organizationWallets") is not None else None,
            "#createdOrganizations": [Organization.from_dict(_item) for _item in obj["#createdOrganizations"]] if obj.get("#createdOrganizations") is not None else None
        })
        return _obj

from skyfire_sdk.models.organization import Organization
from skyfire_sdk.models.wallet import Wallet
# TODO: Rewrite to not use raise_errors
SkyfireUser.model_rebuild(raise_errors=False)

