# coding: utf-8

"""
    Skyfire SDK

    The Skyfire SDK is designed to allow agents to interact with the Skyfire platform to enable autonomous payments.

    The version of the OpenAPI document: 1.0.0
    Contact: support@skyfire.xyz
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from skyfire_sdk.models.user_organization import UserOrganization
from typing import Optional, Set
from typing_extensions import Self

class Organization(BaseModel):
    """
    Organization
    """ # noqa: E501
    id: StrictStr
    name: StrictStr
    admin_user_id: StrictStr = Field(alias="adminUserId")
    created_date: datetime = Field(alias="createdDate")
    updated_date: datetime = Field(alias="updatedDate")
    wallets: Optional[List[Wallet]] = Field(default=None, alias="#wallets")
    user_organizations: Optional[List[UserOrganization]] = Field(default=None, alias="#userOrganizations")
    __properties: ClassVar[List[str]] = ["id", "name", "adminUserId", "createdDate", "updatedDate", "#wallets", "#userOrganizations"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Organization from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in wallets (list)
        _items = []
        if self.wallets:
            for _item in self.wallets:
                if _item:
                    _items.append(_item.to_dict())
            _dict['#wallets'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in user_organizations (list)
        _items = []
        if self.user_organizations:
            for _item in self.user_organizations:
                if _item:
                    _items.append(_item.to_dict())
            _dict['#userOrganizations'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Organization from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "adminUserId": obj.get("adminUserId"),
            "createdDate": obj.get("createdDate"),
            "updatedDate": obj.get("updatedDate"),
            "#wallets": [Wallet.from_dict(_item) for _item in obj["#wallets"]] if obj.get("#wallets") is not None else None,
            "#userOrganizations": [UserOrganization.from_dict(_item) for _item in obj["#userOrganizations"]] if obj.get("#userOrganizations") is not None else None
        })
        return _obj

from skyfire_sdk.models.wallet import Wallet
# TODO: Rewrite to not use raise_errors
Organization.model_rebuild(raise_errors=False)

