# coding: utf-8

"""
    Skyfire SDK

    The Skyfire SDK is designed to allow agents to interact with the Skyfire platform to enable autonomous payments.

    The version of the OpenAPI document: 1.0.0
    Contact: support@skyfire.xyz
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from skyfire_sdk.models.vetric_marketplace_search_response_data_marketplace_search_feed_units_edges_inner_node_data import VetricMarketplaceSearchResponseDataMarketplaceSearchFeedUnitsEdgesInnerNodeData
from skyfire_sdk.models.vetric_marketplace_search_response_data_marketplace_search_feed_units_edges_inner_node_photo import VetricMarketplaceSearchResponseDataMarketplaceSearchFeedUnitsEdgesInnerNodePhoto
from skyfire_sdk.models.vetric_marketplace_search_response_data_marketplace_search_feed_units_edges_inner_node_row1 import VetricMarketplaceSearchResponseDataMarketplaceSearchFeedUnitsEdgesInnerNodeRow1
from skyfire_sdk.models.vetric_marketplace_search_response_data_marketplace_search_feed_units_edges_inner_node_row2 import VetricMarketplaceSearchResponseDataMarketplaceSearchFeedUnitsEdgesInnerNodeRow2
from skyfire_sdk.models.vetric_marketplace_search_response_data_marketplace_search_feed_units_edges_inner_node_row3 import VetricMarketplaceSearchResponseDataMarketplaceSearchFeedUnitsEdgesInnerNodeRow3
from typing import Optional, Set
from typing_extensions import Self

class VetricMarketplaceSearchResponseDataMarketplaceSearchFeedUnitsEdgesInnerNode(BaseModel):
    """
    The individual marketplace listing node.
    """ # noqa: E501
    typename: Optional[StrictStr] = Field(default=None, description="Type name of the object, typically 'MarketplaceFeedGeneralListingObject'.", alias="__typename")
    id: Optional[StrictStr] = Field(default=None, description="Unique identifier for the listing.")
    story_key: Optional[StrictStr] = Field(default=None, description="Key associated with the story.")
    story_type: Optional[StrictStr] = Field(default=None, description="Type of story, such as 'GENERAL_LISTING'.")
    is_marketplace_feed_story: Optional[StrictStr] = Field(default=None, description="Indicator for Marketplace feed story type.", alias="__isMarketplaceFeedStory")
    tracking: Optional[StrictStr] = Field(default=None, description="JSON string containing tracking information.")
    is_marketplace_feed_general_listing_data: Optional[StrictStr] = Field(default=None, description="Indicator for Marketplace feed listing data type.", alias="__isMarketplaceFeedGeneralListingData")
    entity_id: Optional[StrictStr] = Field(default=None, description="Entity ID for the listing.")
    reportable_id: Optional[StrictStr] = Field(default=None, description="Reportable ID used for reporting.")
    photo: Optional[VetricMarketplaceSearchResponseDataMarketplaceSearchFeedUnitsEdgesInnerNodePhoto] = None
    data: Optional[VetricMarketplaceSearchResponseDataMarketplaceSearchFeedUnitsEdgesInnerNodeData] = None
    row_0: Optional[Dict[str, Any]] = Field(default=None, description="Placeholder for row data")
    row_1: Optional[VetricMarketplaceSearchResponseDataMarketplaceSearchFeedUnitsEdgesInnerNodeRow1] = None
    row_2: Optional[VetricMarketplaceSearchResponseDataMarketplaceSearchFeedUnitsEdgesInnerNodeRow2] = None
    row_3: Optional[VetricMarketplaceSearchResponseDataMarketplaceSearchFeedUnitsEdgesInnerNodeRow3] = None
    row_4: Optional[Dict[str, Any]] = Field(default=None, description="Placeholder for row data")
    row_5: Optional[Dict[str, Any]] = Field(default=None, description="Placeholder for row data")
    badge_bottom_left: Optional[Dict[str, Any]] = Field(default=None, description="Placeholder for badge data")
    __properties: ClassVar[List[str]] = ["__typename", "id", "story_key", "story_type", "__isMarketplaceFeedStory", "tracking", "__isMarketplaceFeedGeneralListingData", "entity_id", "reportable_id", "photo", "data", "row_0", "row_1", "row_2", "row_3", "row_4", "row_5", "badge_bottom_left"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VetricMarketplaceSearchResponseDataMarketplaceSearchFeedUnitsEdgesInnerNode from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of photo
        if self.photo:
            _dict['photo'] = self.photo.to_dict()
        # override the default output from pydantic by calling `to_dict()` of data
        if self.data:
            _dict['data'] = self.data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of row_1
        if self.row_1:
            _dict['row_1'] = self.row_1.to_dict()
        # override the default output from pydantic by calling `to_dict()` of row_2
        if self.row_2:
            _dict['row_2'] = self.row_2.to_dict()
        # override the default output from pydantic by calling `to_dict()` of row_3
        if self.row_3:
            _dict['row_3'] = self.row_3.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VetricMarketplaceSearchResponseDataMarketplaceSearchFeedUnitsEdgesInnerNode from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "__typename": obj.get("__typename"),
            "id": obj.get("id"),
            "story_key": obj.get("story_key"),
            "story_type": obj.get("story_type"),
            "__isMarketplaceFeedStory": obj.get("__isMarketplaceFeedStory"),
            "tracking": obj.get("tracking"),
            "__isMarketplaceFeedGeneralListingData": obj.get("__isMarketplaceFeedGeneralListingData"),
            "entity_id": obj.get("entity_id"),
            "reportable_id": obj.get("reportable_id"),
            "photo": VetricMarketplaceSearchResponseDataMarketplaceSearchFeedUnitsEdgesInnerNodePhoto.from_dict(obj["photo"]) if obj.get("photo") is not None else None,
            "data": VetricMarketplaceSearchResponseDataMarketplaceSearchFeedUnitsEdgesInnerNodeData.from_dict(obj["data"]) if obj.get("data") is not None else None,
            "row_0": obj.get("row_0"),
            "row_1": VetricMarketplaceSearchResponseDataMarketplaceSearchFeedUnitsEdgesInnerNodeRow1.from_dict(obj["row_1"]) if obj.get("row_1") is not None else None,
            "row_2": VetricMarketplaceSearchResponseDataMarketplaceSearchFeedUnitsEdgesInnerNodeRow2.from_dict(obj["row_2"]) if obj.get("row_2") is not None else None,
            "row_3": VetricMarketplaceSearchResponseDataMarketplaceSearchFeedUnitsEdgesInnerNodeRow3.from_dict(obj["row_3"]) if obj.get("row_3") is not None else None,
            "row_4": obj.get("row_4"),
            "row_5": obj.get("row_5"),
            "badge_bottom_left": obj.get("badge_bottom_left")
        })
        return _obj


