# coding: utf-8

"""
    Skyfire SDK

    The Skyfire SDK is designed to allow agents to interact with the Skyfire platform to enable autonomous payments.

    The version of the OpenAPI document: 1.0.0
    Contact: support@skyfire.xyz
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from skyfire_sdk.models.identity_check_type import IdentityCheckType
from skyfire_sdk.models.skyfire_user import SkyfireUser
from skyfire_sdk.models.wallet import Wallet
from typing import Optional, Set
from typing_extensions import Self

class Receiver(BaseModel):
    """
    Receiver
    """ # noqa: E501
    id: StrictStr
    user_id: StrictStr = Field(alias="userId")
    wallet_id: StrictStr = Field(alias="walletId")
    cost: Union[StrictFloat, StrictInt]
    currency: StrictStr
    is_internal: StrictBool = Field(alias="isInternal")
    is_dynamic_pricing: StrictBool = Field(alias="isDynamicPricing")
    is_proxy: StrictBool = Field(alias="isProxy")
    base_path: StrictStr = Field(alias="basePath")
    proxy_url: StrictStr = Field(alias="proxyUrl")
    headers: Optional[Dict[str, StrictStr]] = Field(default=None, description="Construct a type with a set of properties K of type T")
    free_list: Optional[List[StrictStr]] = Field(default=None, alias="freeList")
    allow_list: Optional[List[StrictStr]] = Field(default=None, alias="allowList")
    block_list: Optional[List[StrictStr]] = Field(default=None, alias="blockList")
    protection: Optional[List[IdentityCheckType]] = None
    created_date: datetime = Field(alias="createdDate")
    updated_date: datetime = Field(alias="updatedDate")
    skyfire_user: Optional[SkyfireUser] = Field(default=None, alias="#skyfireUser")
    wallets: Optional[List[Wallet]] = Field(default=None, alias="#wallets")
    default_wallet: Optional[Wallet] = Field(default=None, alias="#defaultWallet")
    __properties: ClassVar[List[str]] = ["id", "userId", "walletId", "cost", "currency", "isInternal", "isDynamicPricing", "isProxy", "basePath", "proxyUrl", "headers", "freeList", "allowList", "blockList", "protection", "createdDate", "updatedDate", "#skyfireUser", "#wallets", "#defaultWallet"]

    @field_validator('currency')
    def currency_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['USDT', 'USDC']):
            raise ValueError("must be one of enum values ('USDT', 'USDC')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Receiver from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of skyfire_user
        if self.skyfire_user:
            _dict['#skyfireUser'] = self.skyfire_user.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in wallets (list)
        _items = []
        if self.wallets:
            for _item in self.wallets:
                if _item:
                    _items.append(_item.to_dict())
            _dict['#wallets'] = _items
        # override the default output from pydantic by calling `to_dict()` of default_wallet
        if self.default_wallet:
            _dict['#defaultWallet'] = self.default_wallet.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Receiver from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "userId": obj.get("userId"),
            "walletId": obj.get("walletId"),
            "cost": obj.get("cost"),
            "currency": obj.get("currency"),
            "isInternal": obj.get("isInternal"),
            "isDynamicPricing": obj.get("isDynamicPricing"),
            "isProxy": obj.get("isProxy"),
            "basePath": obj.get("basePath"),
            "proxyUrl": obj.get("proxyUrl"),
            "headers": obj.get("headers"),
            "freeList": obj.get("freeList"),
            "allowList": obj.get("allowList"),
            "blockList": obj.get("blockList"),
            "protection": obj.get("protection"),
            "createdDate": obj.get("createdDate"),
            "updatedDate": obj.get("updatedDate"),
            "#skyfireUser": SkyfireUser.from_dict(obj["#skyfireUser"]) if obj.get("#skyfireUser") is not None else None,
            "#wallets": [Wallet.from_dict(_item) for _item in obj["#wallets"]] if obj.get("#wallets") is not None else None,
            "#defaultWallet": Wallet.from_dict(obj["#defaultWallet"]) if obj.get("#defaultWallet") is not None else None
        })
        return _obj


