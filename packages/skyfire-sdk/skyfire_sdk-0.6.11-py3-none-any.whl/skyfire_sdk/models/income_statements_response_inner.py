# coding: utf-8

"""
    Skyfire API

    The Skyfire SDK is designed to allow agents to interact with the Skyfire platform to enable autonomous payments.

    The version of the OpenAPI document: 1.0.0
    Contact: support@skyfire.xyz
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class IncomeStatementsResponseInner(BaseModel):
    """
    IncomeStatementsResponseInner
    """ # noqa: E501
    ticker: Optional[StrictStr] = None
    calendar_date: Optional[date] = None
    report_period: Optional[date] = None
    period: Optional[StrictStr] = None
    revenue: Optional[Union[StrictFloat, StrictInt]] = None
    cost_of_revenue: Optional[Union[StrictFloat, StrictInt]] = None
    gross_profit: Optional[Union[StrictFloat, StrictInt]] = None
    operating_expense: Optional[Union[StrictFloat, StrictInt]] = None
    selling_general_and_administrative_expenses: Optional[Union[StrictFloat, StrictInt]] = None
    research_and_development: Optional[Union[StrictFloat, StrictInt]] = None
    operating_income: Optional[Union[StrictFloat, StrictInt]] = None
    interest_expense: Optional[Union[StrictFloat, StrictInt]] = None
    ebit: Optional[Union[StrictFloat, StrictInt]] = None
    income_tax_expense: Optional[Union[StrictFloat, StrictInt]] = None
    net_income_discontinued_operations: Optional[Union[StrictFloat, StrictInt]] = None
    net_income_non_controlling_interests: Optional[Union[StrictFloat, StrictInt]] = None
    net_income: Optional[Union[StrictFloat, StrictInt]] = None
    net_income_common_stock: Optional[Union[StrictFloat, StrictInt]] = None
    preferred_dividends_impact: Optional[Union[StrictFloat, StrictInt]] = None
    consolidated_income: Optional[Union[StrictFloat, StrictInt]] = None
    earnings_per_share: Optional[Union[StrictFloat, StrictInt]] = None
    earnings_per_share_diluted: Optional[Union[StrictFloat, StrictInt]] = None
    dividends_per_common_share: Optional[Union[StrictFloat, StrictInt]] = None
    weighted_average_shares: Optional[Union[StrictFloat, StrictInt]] = None
    weighted_average_shares_diluted: Optional[Union[StrictFloat, StrictInt]] = None
    __properties: ClassVar[List[str]] = ["ticker", "calendar_date", "report_period", "period", "revenue", "cost_of_revenue", "gross_profit", "operating_expense", "selling_general_and_administrative_expenses", "research_and_development", "operating_income", "interest_expense", "ebit", "income_tax_expense", "net_income_discontinued_operations", "net_income_non_controlling_interests", "net_income", "net_income_common_stock", "preferred_dividends_impact", "consolidated_income", "earnings_per_share", "earnings_per_share_diluted", "dividends_per_common_share", "weighted_average_shares", "weighted_average_shares_diluted"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IncomeStatementsResponseInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IncomeStatementsResponseInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ticker": obj.get("ticker"),
            "calendar_date": obj.get("calendar_date"),
            "report_period": obj.get("report_period"),
            "period": obj.get("period"),
            "revenue": obj.get("revenue"),
            "cost_of_revenue": obj.get("cost_of_revenue"),
            "gross_profit": obj.get("gross_profit"),
            "operating_expense": obj.get("operating_expense"),
            "selling_general_and_administrative_expenses": obj.get("selling_general_and_administrative_expenses"),
            "research_and_development": obj.get("research_and_development"),
            "operating_income": obj.get("operating_income"),
            "interest_expense": obj.get("interest_expense"),
            "ebit": obj.get("ebit"),
            "income_tax_expense": obj.get("income_tax_expense"),
            "net_income_discontinued_operations": obj.get("net_income_discontinued_operations"),
            "net_income_non_controlling_interests": obj.get("net_income_non_controlling_interests"),
            "net_income": obj.get("net_income"),
            "net_income_common_stock": obj.get("net_income_common_stock"),
            "preferred_dividends_impact": obj.get("preferred_dividends_impact"),
            "consolidated_income": obj.get("consolidated_income"),
            "earnings_per_share": obj.get("earnings_per_share"),
            "earnings_per_share_diluted": obj.get("earnings_per_share_diluted"),
            "dividends_per_common_share": obj.get("dividends_per_common_share"),
            "weighted_average_shares": obj.get("weighted_average_shares"),
            "weighted_average_shares_diluted": obj.get("weighted_average_shares_diluted")
        })
        return _obj


