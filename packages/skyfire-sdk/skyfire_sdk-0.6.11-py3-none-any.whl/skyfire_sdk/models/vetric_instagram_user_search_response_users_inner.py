# coding: utf-8

"""
    Skyfire SDK

    The Skyfire SDK is designed to allow agents to interact with the Skyfire platform to enable autonomous payments.

    The version of the OpenAPI document: 1.0.0
    Contact: support@skyfire.xyz
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from skyfire_sdk.models.vetric_instagram_user_search_response_users_inner_friendship_status import VetricInstagramUserSearchResponseUsersInnerFriendshipStatus
from typing import Optional, Set
from typing_extensions import Self

class VetricInstagramUserSearchResponseUsersInner(BaseModel):
    """
    VetricInstagramUserSearchResponseUsersInner
    """ # noqa: E501
    pk: Union[StrictFloat, StrictInt] = Field(description="The primary key ID of the user.")
    pk_id: StrictStr = Field(description="String version of the user's primary key ID.")
    full_name: StrictStr = Field(description="The full name of the user.")
    is_private: StrictBool = Field(description="Whether the user's profile is private.")
    fbid_v2: Optional[StrictStr] = Field(default=None, description="The Facebook ID version 2 for the user.")
    third_party_downloads_enabled: Optional[StrictInt] = Field(default=None, description="Indicates if third-party downloads are enabled for the user (0 or 1).")
    id: StrictStr = Field(description="The user's unique Instagram ID.")
    profile_pic_url: StrictStr = Field(description="URL of the user's profile picture.")
    username: StrictStr = Field(description="The Instagram username of the user.")
    has_anonymous_profile_picture: Optional[StrictBool] = Field(default=None, description="Indicates if the user has an anonymous profile picture.")
    account_badges: Optional[List[StrictStr]] = Field(default=None, description="Array of account badges for the user.")
    is_verified: Optional[StrictBool] = Field(default=None, description="Indicates if the user is verified.")
    has_opt_eligible_shop: Optional[StrictBool] = Field(default=None, description="Indicates if the user has an eligible shop.")
    friendship_status: Optional[VetricInstagramUserSearchResponseUsersInnerFriendshipStatus] = None
    latest_reel_media: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The timestamp of the user's latest reel media.")
    is_verified_search_boosted: Optional[StrictBool] = Field(default=None, description="Indicates if the user receives a verified search boost.")
    should_show_category: Optional[StrictBool] = Field(default=None, description="Indicates if the user's category should be shown.")
    __properties: ClassVar[List[str]] = ["pk", "pk_id", "full_name", "is_private", "fbid_v2", "third_party_downloads_enabled", "id", "profile_pic_url", "username", "has_anonymous_profile_picture", "account_badges", "is_verified", "has_opt_eligible_shop", "friendship_status", "latest_reel_media", "is_verified_search_boosted", "should_show_category"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VetricInstagramUserSearchResponseUsersInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of friendship_status
        if self.friendship_status:
            _dict['friendship_status'] = self.friendship_status.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VetricInstagramUserSearchResponseUsersInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "pk": obj.get("pk"),
            "pk_id": obj.get("pk_id"),
            "full_name": obj.get("full_name"),
            "is_private": obj.get("is_private"),
            "fbid_v2": obj.get("fbid_v2"),
            "third_party_downloads_enabled": obj.get("third_party_downloads_enabled"),
            "id": obj.get("id"),
            "profile_pic_url": obj.get("profile_pic_url"),
            "username": obj.get("username"),
            "has_anonymous_profile_picture": obj.get("has_anonymous_profile_picture"),
            "account_badges": obj.get("account_badges"),
            "is_verified": obj.get("is_verified"),
            "has_opt_eligible_shop": obj.get("has_opt_eligible_shop"),
            "friendship_status": VetricInstagramUserSearchResponseUsersInnerFriendshipStatus.from_dict(obj["friendship_status"]) if obj.get("friendship_status") is not None else None,
            "latest_reel_media": obj.get("latest_reel_media"),
            "is_verified_search_boosted": obj.get("is_verified_search_boosted"),
            "should_show_category": obj.get("should_show_category")
        })
        return _obj


