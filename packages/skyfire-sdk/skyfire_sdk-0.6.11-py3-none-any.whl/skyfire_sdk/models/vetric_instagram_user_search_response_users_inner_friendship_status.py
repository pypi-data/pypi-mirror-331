# coding: utf-8

"""
    Skyfire SDK

    The Skyfire SDK is designed to allow agents to interact with the Skyfire platform to enable autonomous payments.

    The version of the OpenAPI document: 1.0.0
    Contact: support@skyfire.xyz
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class VetricInstagramUserSearchResponseUsersInnerFriendshipStatus(BaseModel):
    """
    The friendship status between the user and the target profile.
    """ # noqa: E501
    following: Optional[StrictBool] = Field(default=None, description="Indicates if the user is following the target profile.")
    is_private: Optional[StrictBool] = Field(default=None, description="Whether the target profile is private.")
    incoming_request: Optional[StrictBool] = Field(default=None, description="Whether there's an incoming friend request.")
    outgoing_request: Optional[StrictBool] = Field(default=None, description="Whether there's an outgoing friend request.")
    is_bestie: Optional[StrictBool] = Field(default=None, description="Whether the user is marked as a 'bestie' by the profile owner.")
    is_restricted: Optional[StrictBool] = Field(default=None, description="Whether the user is restricted.")
    is_feed_favorite: Optional[StrictBool] = Field(default=None, description="Whether the user is marked as a favorite in the feed.")
    __properties: ClassVar[List[str]] = ["following", "is_private", "incoming_request", "outgoing_request", "is_bestie", "is_restricted", "is_feed_favorite"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VetricInstagramUserSearchResponseUsersInnerFriendshipStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VetricInstagramUserSearchResponseUsersInnerFriendshipStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "following": obj.get("following"),
            "is_private": obj.get("is_private"),
            "incoming_request": obj.get("incoming_request"),
            "outgoing_request": obj.get("outgoing_request"),
            "is_bestie": obj.get("is_bestie"),
            "is_restricted": obj.get("is_restricted"),
            "is_feed_favorite": obj.get("is_feed_favorite")
        })
        return _obj


