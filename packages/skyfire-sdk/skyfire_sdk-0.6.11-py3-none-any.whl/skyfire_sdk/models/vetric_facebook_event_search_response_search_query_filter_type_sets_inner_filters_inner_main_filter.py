# coding: utf-8

"""
    Skyfire SDK

    The Skyfire SDK is designed to allow agents to interact with the Skyfire platform to enable autonomous payments.

    The version of the OpenAPI document: 1.0.0
    Contact: support@skyfire.xyz
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List
from skyfire_sdk.models.vetric_facebook_event_search_response_search_query_filter_type_sets_inner_filters_inner_main_filter_filter_values import VetricFacebookEventSearchResponseSearchQueryFilterTypeSetsInnerFiltersInnerMainFilterFilterValues
from typing import Optional, Set
from typing_extensions import Self

class VetricFacebookEventSearchResponseSearchQueryFilterTypeSetsInnerFiltersInnerMainFilter(BaseModel):
    """
    VetricFacebookEventSearchResponseSearchQueryFilterTypeSetsInnerFiltersInnerMainFilter
    """ # noqa: E501
    cache_id: StrictStr = Field(description="Cache ID for the filter.")
    id: StrictStr = Field(description="ID of the filter.")
    name: StrictStr = Field(description="Name of the filter.")
    text: StrictStr = Field(description="Display text for the filter.")
    filter_icon: StrictStr = Field(description="Icon associated with the filter.")
    default_option_text: StrictStr = Field(description="Default option text for the filter.")
    filter_values: VetricFacebookEventSearchResponseSearchQueryFilterTypeSetsInnerFiltersInnerMainFilterFilterValues
    __properties: ClassVar[List[str]] = ["cache_id", "id", "name", "text", "filter_icon", "default_option_text", "filter_values"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VetricFacebookEventSearchResponseSearchQueryFilterTypeSetsInnerFiltersInnerMainFilter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of filter_values
        if self.filter_values:
            _dict['filter_values'] = self.filter_values.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VetricFacebookEventSearchResponseSearchQueryFilterTypeSetsInnerFiltersInnerMainFilter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cache_id": obj.get("cache_id"),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "text": obj.get("text"),
            "filter_icon": obj.get("filter_icon"),
            "default_option_text": obj.get("default_option_text"),
            "filter_values": VetricFacebookEventSearchResponseSearchQueryFilterTypeSetsInnerFiltersInnerMainFilterFilterValues.from_dict(obj["filter_values"]) if obj.get("filter_values") is not None else None
        })
        return _obj


