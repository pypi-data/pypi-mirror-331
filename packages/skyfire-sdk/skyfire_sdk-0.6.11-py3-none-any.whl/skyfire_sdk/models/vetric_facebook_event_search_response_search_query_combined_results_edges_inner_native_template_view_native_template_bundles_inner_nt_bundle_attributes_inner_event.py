# coding: utf-8

"""
    Skyfire SDK

    The Skyfire SDK is designed to allow agents to interact with the Skyfire platform to enable autonomous payments.

    The version of the OpenAPI document: 1.0.0
    Contact: support@skyfire.xyz
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List
from skyfire_sdk.models.vetric_facebook_event_search_response_search_query_combined_results_edges_inner_native_template_view_native_template_bundles_inner_nt_bundle_attributes_inner_event_event_place import VetricFacebookEventSearchResponseSearchQueryCombinedResultsEdgesInnerNativeTemplateViewNativeTemplateBundlesInnerNtBundleAttributesInnerEventEventPlace
from skyfire_sdk.models.vetric_facebook_event_search_response_search_query_combined_results_edges_inner_native_template_view_native_template_bundles_inner_nt_bundle_attributes_inner_event_event_profile_picture import VetricFacebookEventSearchResponseSearchQueryCombinedResultsEdgesInnerNativeTemplateViewNativeTemplateBundlesInnerNtBundleAttributesInnerEventEventProfilePicture
from skyfire_sdk.models.vetric_facebook_event_search_response_search_query_combined_results_edges_inner_native_template_view_native_template_bundles_inner_nt_bundle_attributes_inner_event_featurable_image import VetricFacebookEventSearchResponseSearchQueryCombinedResultsEdgesInnerNativeTemplateViewNativeTemplateBundlesInnerNtBundleAttributesInnerEventFeaturableImage
from typing import Optional, Set
from typing_extensions import Self

class VetricFacebookEventSearchResponseSearchQueryCombinedResultsEdgesInnerNativeTemplateViewNativeTemplateBundlesInnerNtBundleAttributesInnerEvent(BaseModel):
    """
    VetricFacebookEventSearchResponseSearchQueryCombinedResultsEdgesInnerNativeTemplateViewNativeTemplateBundlesInnerNtBundleAttributesInnerEvent
    """ # noqa: E501
    id: StrictStr = Field(description="ID of the event.")
    name: StrictStr = Field(description="Name of the event.")
    start_timestamp: StrictInt = Field(description="Start timestamp of the event.")
    end_timestamp: StrictInt = Field(description="End timestamp of the event.")
    live_permalink_time_range_sentence: StrictStr = Field(description="Time range of the event in a readable format.")
    timezone: StrictStr = Field(description="Timezone of the event.")
    event_place: VetricFacebookEventSearchResponseSearchQueryCombinedResultsEdgesInnerNativeTemplateViewNativeTemplateBundlesInnerNtBundleAttributesInnerEventEventPlace
    event_profile_picture: VetricFacebookEventSearchResponseSearchQueryCombinedResultsEdgesInnerNativeTemplateViewNativeTemplateBundlesInnerNtBundleAttributesInnerEventEventProfilePicture = Field(alias="eventProfilePicture")
    day_time_sentence: StrictStr = Field(description="Readable sentence describing the day and time of the event.")
    featurable_image: VetricFacebookEventSearchResponseSearchQueryCombinedResultsEdgesInnerNativeTemplateViewNativeTemplateBundlesInnerNtBundleAttributesInnerEventFeaturableImage
    __properties: ClassVar[List[str]] = ["id", "name", "start_timestamp", "end_timestamp", "live_permalink_time_range_sentence", "timezone", "event_place", "eventProfilePicture", "day_time_sentence", "featurable_image"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VetricFacebookEventSearchResponseSearchQueryCombinedResultsEdgesInnerNativeTemplateViewNativeTemplateBundlesInnerNtBundleAttributesInnerEvent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of event_place
        if self.event_place:
            _dict['event_place'] = self.event_place.to_dict()
        # override the default output from pydantic by calling `to_dict()` of event_profile_picture
        if self.event_profile_picture:
            _dict['eventProfilePicture'] = self.event_profile_picture.to_dict()
        # override the default output from pydantic by calling `to_dict()` of featurable_image
        if self.featurable_image:
            _dict['featurable_image'] = self.featurable_image.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VetricFacebookEventSearchResponseSearchQueryCombinedResultsEdgesInnerNativeTemplateViewNativeTemplateBundlesInnerNtBundleAttributesInnerEvent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "start_timestamp": obj.get("start_timestamp"),
            "end_timestamp": obj.get("end_timestamp"),
            "live_permalink_time_range_sentence": obj.get("live_permalink_time_range_sentence"),
            "timezone": obj.get("timezone"),
            "event_place": VetricFacebookEventSearchResponseSearchQueryCombinedResultsEdgesInnerNativeTemplateViewNativeTemplateBundlesInnerNtBundleAttributesInnerEventEventPlace.from_dict(obj["event_place"]) if obj.get("event_place") is not None else None,
            "eventProfilePicture": VetricFacebookEventSearchResponseSearchQueryCombinedResultsEdgesInnerNativeTemplateViewNativeTemplateBundlesInnerNtBundleAttributesInnerEventEventProfilePicture.from_dict(obj["eventProfilePicture"]) if obj.get("eventProfilePicture") is not None else None,
            "day_time_sentence": obj.get("day_time_sentence"),
            "featurable_image": VetricFacebookEventSearchResponseSearchQueryCombinedResultsEdgesInnerNativeTemplateViewNativeTemplateBundlesInnerNtBundleAttributesInnerEventFeaturableImage.from_dict(obj["featurable_image"]) if obj.get("featurable_image") is not None else None
        })
        return _obj


