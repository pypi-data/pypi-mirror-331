# coding: utf-8

"""
    Skyfire SDK

    The Skyfire SDK is designed to allow agents to interact with the Skyfire platform to enable autonomous payments.

    The version of the OpenAPI document: 1.0.0
    Contact: support@skyfire.xyz
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from skyfire_sdk.models.vetric_facebook_user_search_response_combined_results_edges_inner_native_template_view import VetricFacebookUserSearchResponseCombinedResultsEdgesInnerNativeTemplateView
from typing import Optional, Set
from typing_extensions import Self

class VetricFacebookUserSearchResponseCombinedResultsEdgesInner(BaseModel):
    """
    VetricFacebookUserSearchResponseCombinedResultsEdgesInner
    """ # noqa: E501
    result_display_styles: List[StrictStr] = Field(description="Styles for result display.")
    logging_unit_id: StrictStr = Field(description="Unique ID for result logging.")
    module_role: StrictStr = Field(description="Role of the result module.")
    result_role: StrictStr = Field(description="Role of the result.")
    node: Optional[StrictStr] = Field(default=None, description="Node details if available.")
    native_template_view: Optional[VetricFacebookUserSearchResponseCombinedResultsEdgesInnerNativeTemplateView] = None
    __properties: ClassVar[List[str]] = ["result_display_styles", "logging_unit_id", "module_role", "result_role", "node", "native_template_view"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VetricFacebookUserSearchResponseCombinedResultsEdgesInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of native_template_view
        if self.native_template_view:
            _dict['native_template_view'] = self.native_template_view.to_dict()
        # set to None if node (nullable) is None
        # and model_fields_set contains the field
        if self.node is None and "node" in self.model_fields_set:
            _dict['node'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VetricFacebookUserSearchResponseCombinedResultsEdgesInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "result_display_styles": obj.get("result_display_styles"),
            "logging_unit_id": obj.get("logging_unit_id"),
            "module_role": obj.get("module_role"),
            "result_role": obj.get("result_role"),
            "node": obj.get("node"),
            "native_template_view": VetricFacebookUserSearchResponseCombinedResultsEdgesInnerNativeTemplateView.from_dict(obj["native_template_view"]) if obj.get("native_template_view") is not None else None
        })
        return _obj


