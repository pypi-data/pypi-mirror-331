# coding: utf-8

"""
    Skyfire API

    The Skyfire API is designed to allow agents to interact with the Skyfire platform to enable autonomous payments.

    The version of the OpenAPI document: 1.0.0
    Contact: support@skyfire.xyz
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from skyfire_sdk.models.balance_sheet import BalanceSheet

class TestBalanceSheet(unittest.TestCase):
    """BalanceSheet unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> BalanceSheet:
        """Test BalanceSheet
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `BalanceSheet`
        """
        model = BalanceSheet()
        if include_optional:
            return BalanceSheet(
                ticker = 'AAPL',
                calendar_date = 'Sun Dec 24 19:00:00 EST 2023',
                report_period = 'Sun Dec 24 19:00:00 EST 2023',
                period = 'quarterly',
                total_assets = 123,
                current_assets = 123,
                cash_and_equivalents = 123,
                inventory = 123,
                current_investments = 123,
                trade_and_non_trade_receivables = 123,
                non_current_assets = 123,
                property_plant_and_equipment = 123,
                goodwill_and_intangible_assets = 123,
                investments = 123,
                non_current_investments = 123,
                tax_assets = 123,
                total_liabilities = 123,
                current_liabilities = 123,
                current_debt = 123,
                trade_and_non_trade_payables = 123,
                deferred_revenue = 123,
                deposit_liabilities = 123,
                non_current_liabilities = 123,
                non_current_debt = 123,
                tax_liabilities = 123,
                shareholders_equity = 123,
                retained_earnings = 123,
                accumulated_other_comprehensive_income = 123,
                total_debt = 123
            )
        else:
            return BalanceSheet(
        )
        """

    def testBalanceSheet(self):
        """Test BalanceSheet"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
