# coding: utf-8

"""
    Skyfire SDK

    The Skyfire SDK is designed to allow agents to interact with the Skyfire platform to enable autonomous payments.

    The version of the OpenAPI document: 1.0.0
    Contact: support@skyfire.xyz
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from skyfire_sdk.models.redemptions_response import RedemptionsResponse

class TestRedemptionsResponse(unittest.TestCase):
    """RedemptionsResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> RedemptionsResponse:
        """Test RedemptionsResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `RedemptionsResponse`
        """
        model = RedemptionsResponse()
        if include_optional:
            return RedemptionsResponse(
                redemptions = [
                    skyfire_sdk.models.redemption.Redemption(
                        redemption_id = '', 
                        source_address = '', 
                        destination_address = '', 
                        source_name = '', 
                        destination_name = '', 
                        network = 'polygon_testnet', 
                        created_at = '', 
                        summary = skyfire_sdk.models.redemption_summary.Redemption_summary(
                            receiver_total = '', 
                            value = '', 
                            fee = '', ), 
                        claims = [
                            skyfire_sdk.models.claim.Claim(
                                id = '', 
                                created_at = '', 
                                value = '', 
                                source_name = '', 
                                destination_name = '', 
                                source_address = '', 
                                destination_address = '', 
                                network = 'polygon_testnet', 
                                nonce = '', 
                                signature = '', 
                                reference_id = '', 
                                status = '', 
                                updated_at = '', 
                                tx_hash = '', )
                            ], )
                    ],
                pagination = skyfire_sdk.models.pagination_meta.PaginationMeta(
                    total_pages = 1.337, 
                    limit = 1.337, )
            )
        else:
            return RedemptionsResponse(
                redemptions = [
                    skyfire_sdk.models.redemption.Redemption(
                        redemption_id = '', 
                        source_address = '', 
                        destination_address = '', 
                        source_name = '', 
                        destination_name = '', 
                        network = 'polygon_testnet', 
                        created_at = '', 
                        summary = skyfire_sdk.models.redemption_summary.Redemption_summary(
                            receiver_total = '', 
                            value = '', 
                            fee = '', ), 
                        claims = [
                            skyfire_sdk.models.claim.Claim(
                                id = '', 
                                created_at = '', 
                                value = '', 
                                source_name = '', 
                                destination_name = '', 
                                source_address = '', 
                                destination_address = '', 
                                network = 'polygon_testnet', 
                                nonce = '', 
                                signature = '', 
                                reference_id = '', 
                                status = '', 
                                updated_at = '', 
                                tx_hash = '', )
                            ], )
                    ],
        )
        """

    def testRedemptionsResponse(self):
        """Test RedemptionsResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
