# coding: utf-8

"""
    Skyfire SDK

    The Skyfire SDK is designed to allow agents to interact with the Skyfire platform to enable autonomous payments.

    The version of the OpenAPI document: 1.0.0
    Contact: support@skyfire.xyz
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from skyfire_sdk.models.vetric_twitter_top_search_response_tweets_inner_tweet_entities import VetricTwitterTopSearchResponseTweetsInnerTweetEntities

class TestVetricTwitterTopSearchResponseTweetsInnerTweetEntities(unittest.TestCase):
    """VetricTwitterTopSearchResponseTweetsInnerTweetEntities unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> VetricTwitterTopSearchResponseTweetsInnerTweetEntities:
        """Test VetricTwitterTopSearchResponseTweetsInnerTweetEntities
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `VetricTwitterTopSearchResponseTweetsInnerTweetEntities`
        """
        model = VetricTwitterTopSearchResponseTweetsInnerTweetEntities()
        if include_optional:
            return VetricTwitterTopSearchResponseTweetsInnerTweetEntities(
                hashtags = [
                    ''
                    ],
                symbols = [
                    ''
                    ],
                urls = [
                    ''
                    ],
                user_mentions = [
                    ''
                    ]
            )
        else:
            return VetricTwitterTopSearchResponseTweetsInnerTweetEntities(
        )
        """

    def testVetricTwitterTopSearchResponseTweetsInnerTweetEntities(self):
        """Test VetricTwitterTopSearchResponseTweetsInnerTweetEntities"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
