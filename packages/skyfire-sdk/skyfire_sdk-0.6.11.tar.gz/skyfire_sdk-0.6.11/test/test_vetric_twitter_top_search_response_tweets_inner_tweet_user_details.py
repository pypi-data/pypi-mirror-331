# coding: utf-8

"""
    Skyfire SDK

    The Skyfire SDK is designed to allow agents to interact with the Skyfire platform to enable autonomous payments.

    The version of the OpenAPI document: 1.0.0
    Contact: support@skyfire.xyz
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from skyfire_sdk.models.vetric_twitter_top_search_response_tweets_inner_tweet_user_details import VetricTwitterTopSearchResponseTweetsInnerTweetUserDetails

class TestVetricTwitterTopSearchResponseTweetsInnerTweetUserDetails(unittest.TestCase):
    """VetricTwitterTopSearchResponseTweetsInnerTweetUserDetails unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> VetricTwitterTopSearchResponseTweetsInnerTweetUserDetails:
        """Test VetricTwitterTopSearchResponseTweetsInnerTweetUserDetails
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `VetricTwitterTopSearchResponseTweetsInnerTweetUserDetails`
        """
        model = VetricTwitterTopSearchResponseTweetsInnerTweetUserDetails()
        if include_optional:
            return VetricTwitterTopSearchResponseTweetsInnerTweetUserDetails(
                typename = '',
                rest_id = '',
                has_nft_avatar = True,
                is_blue_verified = True,
                affiliates_highlighted_label = skyfire_sdk.models.affiliates_highlighted_label.affiliates_highlighted_label(),
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                description = '',
                entities = skyfire_sdk.models.vetric_twitter_top_search_response_tweets_inner_tweet_user_details_entities.VetricTwitterTopSearchResponse_tweets_inner_tweet_user_details_entities(
                    description = skyfire_sdk.models.vetric_twitter_top_search_response_tweets_inner_tweet_user_details_entities_description.VetricTwitterTopSearchResponse_tweets_inner_tweet_user_details_entities_description(
                        hashtags = [
                            ''
                            ], 
                        symbols = [
                            ''
                            ], 
                        urls = [
                            ''
                            ], 
                        user_mentions = [
                            ''
                            ], ), ),
                fast_followers_count = 56,
                favourites_count = 56,
                followers_count = 56,
                friends_count = 56,
                id_str = '',
                location = '',
                media_count = 56,
                name = '',
                normal_followers_count = 56,
                pinned_tweet_ids_str = [
                    ''
                    ],
                profile_image_url_https = '',
                profile_link_color = '',
                protected = True,
                screen_name = '',
                statuses_count = 56,
                verified = True,
                withheld_in_countries = [
                    ''
                    ],
                business_account = skyfire_sdk.models.business_account.business_account(),
                super_followed_by = True,
                super_following = True,
                private_super_following = True,
                exclusive_tweet_following = True
            )
        else:
            return VetricTwitterTopSearchResponseTweetsInnerTweetUserDetails(
        )
        """

    def testVetricTwitterTopSearchResponseTweetsInnerTweetUserDetails(self):
        """Test VetricTwitterTopSearchResponseTweetsInnerTweetUserDetails"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
