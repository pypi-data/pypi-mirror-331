# coding: utf-8

"""
    Skyfire SDK

    The Skyfire SDK is designed to allow agents to interact with the Skyfire platform to enable autonomous payments.

    The version of the OpenAPI document: 1.0.0
    Contact: support@skyfire.xyz
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from skyfire_sdk.models.vetric_twitter_top_search_response_tweets_inner_tweet_user_details_entities import VetricTwitterTopSearchResponseTweetsInnerTweetUserDetailsEntities
from typing import Optional, Set
from typing_extensions import Self

class VetricTwitterTopSearchResponseTweetsInnerTweetUserDetails(BaseModel):
    """
    VetricTwitterTopSearchResponseTweetsInnerTweetUserDetails
    """ # noqa: E501
    typename: Optional[StrictStr] = Field(default=None, description="The type of the object, in this case, User.", alias="__typename")
    rest_id: Optional[StrictStr] = Field(default=None, description="The REST ID of the user.")
    has_nft_avatar: Optional[StrictBool] = Field(default=None, description="Indicates if the user has an NFT avatar.")
    is_blue_verified: Optional[StrictBool] = Field(default=None, description="Indicates if the user is blue verified.")
    affiliates_highlighted_label: Optional[Dict[str, Any]] = Field(default=None, description="Affiliates highlighted label object.")
    created_at: Optional[datetime] = Field(default=None, description="The creation date of the user account.")
    description: Optional[StrictStr] = Field(default=None, description="The user's description.")
    entities: Optional[VetricTwitterTopSearchResponseTweetsInnerTweetUserDetailsEntities] = None
    fast_followers_count: Optional[StrictInt] = Field(default=None, description="The number of fast followers.")
    favourites_count: Optional[StrictInt] = Field(default=None, description="The number of favorites by the user.")
    followers_count: Optional[StrictInt] = Field(default=None, description="The number of followers of the user.")
    friends_count: Optional[StrictInt] = Field(default=None, description="The number of friends of the user.")
    id_str: Optional[StrictStr] = Field(default=None, description="The string ID of the user.")
    location: Optional[StrictStr] = Field(default=None, description="The location of the user.")
    media_count: Optional[StrictInt] = Field(default=None, description="The number of media items posted by the user.")
    name: Optional[StrictStr] = Field(default=None, description="The name of the user.")
    normal_followers_count: Optional[StrictInt] = Field(default=None, description="The number of normal followers.")
    pinned_tweet_ids_str: Optional[List[StrictStr]] = Field(default=None, description="List of pinned tweet IDs.")
    profile_image_url_https: Optional[StrictStr] = Field(default=None, description="The HTTPS URL of the user's profile image.")
    profile_link_color: Optional[StrictStr] = Field(default=None, description="The profile link color of the user.")
    protected: Optional[StrictBool] = Field(default=None, description="Indicates if the user's tweets are protected.")
    screen_name: Optional[StrictStr] = Field(default=None, description="The screen name of the user.")
    statuses_count: Optional[StrictInt] = Field(default=None, description="The number of statuses (tweets) posted by the user.")
    verified: Optional[StrictBool] = Field(default=None, description="Indicates if the user is verified.")
    withheld_in_countries: Optional[List[StrictStr]] = Field(default=None, description="List of countries where the user's tweets are withheld.")
    business_account: Optional[Dict[str, Any]] = Field(default=None, description="Business account object.")
    super_followed_by: Optional[StrictBool] = Field(default=None, description="Indicates if the user is super-followed by others.")
    super_following: Optional[StrictBool] = Field(default=None, description="Indicates if the user is super-following others.")
    private_super_following: Optional[StrictBool] = Field(default=None, description="Indicates if the user is private super-following.")
    exclusive_tweet_following: Optional[StrictBool] = Field(default=None, description="Indicates if the user is following exclusive tweets.")
    __properties: ClassVar[List[str]] = ["__typename", "rest_id", "has_nft_avatar", "is_blue_verified", "affiliates_highlighted_label", "created_at", "description", "entities", "fast_followers_count", "favourites_count", "followers_count", "friends_count", "id_str", "location", "media_count", "name", "normal_followers_count", "pinned_tweet_ids_str", "profile_image_url_https", "profile_link_color", "protected", "screen_name", "statuses_count", "verified", "withheld_in_countries", "business_account", "super_followed_by", "super_following", "private_super_following", "exclusive_tweet_following"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VetricTwitterTopSearchResponseTweetsInnerTweetUserDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of entities
        if self.entities:
            _dict['entities'] = self.entities.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VetricTwitterTopSearchResponseTweetsInnerTweetUserDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "__typename": obj.get("__typename"),
            "rest_id": obj.get("rest_id"),
            "has_nft_avatar": obj.get("has_nft_avatar"),
            "is_blue_verified": obj.get("is_blue_verified"),
            "affiliates_highlighted_label": obj.get("affiliates_highlighted_label"),
            "created_at": obj.get("created_at"),
            "description": obj.get("description"),
            "entities": VetricTwitterTopSearchResponseTweetsInnerTweetUserDetailsEntities.from_dict(obj["entities"]) if obj.get("entities") is not None else None,
            "fast_followers_count": obj.get("fast_followers_count"),
            "favourites_count": obj.get("favourites_count"),
            "followers_count": obj.get("followers_count"),
            "friends_count": obj.get("friends_count"),
            "id_str": obj.get("id_str"),
            "location": obj.get("location"),
            "media_count": obj.get("media_count"),
            "name": obj.get("name"),
            "normal_followers_count": obj.get("normal_followers_count"),
            "pinned_tweet_ids_str": obj.get("pinned_tweet_ids_str"),
            "profile_image_url_https": obj.get("profile_image_url_https"),
            "profile_link_color": obj.get("profile_link_color"),
            "protected": obj.get("protected"),
            "screen_name": obj.get("screen_name"),
            "statuses_count": obj.get("statuses_count"),
            "verified": obj.get("verified"),
            "withheld_in_countries": obj.get("withheld_in_countries"),
            "business_account": obj.get("business_account"),
            "super_followed_by": obj.get("super_followed_by"),
            "super_following": obj.get("super_following"),
            "private_super_following": obj.get("private_super_following"),
            "exclusive_tweet_following": obj.get("exclusive_tweet_following")
        })
        return _obj


