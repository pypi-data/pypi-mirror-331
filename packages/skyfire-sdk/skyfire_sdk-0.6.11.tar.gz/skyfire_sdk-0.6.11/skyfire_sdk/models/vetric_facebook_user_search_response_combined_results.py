# coding: utf-8

"""
    Skyfire SDK

    The Skyfire SDK is designed to allow agents to interact with the Skyfire platform to enable autonomous payments.

    The version of the OpenAPI document: 1.0.0
    Contact: support@skyfire.xyz
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from skyfire_sdk.models.vetric_facebook_user_search_response_combined_results_edges_inner import VetricFacebookUserSearchResponseCombinedResultsEdgesInner
from skyfire_sdk.models.vetric_facebook_user_search_response_combined_results_page_info import VetricFacebookUserSearchResponseCombinedResultsPageInfo
from typing import Optional, Set
from typing_extensions import Self

class VetricFacebookUserSearchResponseCombinedResults(BaseModel):
    """
    VetricFacebookUserSearchResponseCombinedResults
    """ # noqa: E501
    page_info: VetricFacebookUserSearchResponseCombinedResultsPageInfo
    has_hcm: StrictBool = Field(description="Indicates if HCM is available.")
    degradation_level: Optional[StrictStr] = Field(description="Level of degradation, if any.")
    has_iem_triggered: StrictBool = Field(description="Indicates if IEM was triggered.")
    is_cache_hit: Optional[StrictBool] = Field(description="Indicates if the result was a cache hit.")
    edges: List[VetricFacebookUserSearchResponseCombinedResultsEdgesInner]
    __properties: ClassVar[List[str]] = ["page_info", "has_hcm", "degradation_level", "has_iem_triggered", "is_cache_hit", "edges"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VetricFacebookUserSearchResponseCombinedResults from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of page_info
        if self.page_info:
            _dict['page_info'] = self.page_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in edges (list)
        _items = []
        if self.edges:
            for _item in self.edges:
                if _item:
                    _items.append(_item.to_dict())
            _dict['edges'] = _items
        # set to None if degradation_level (nullable) is None
        # and model_fields_set contains the field
        if self.degradation_level is None and "degradation_level" in self.model_fields_set:
            _dict['degradation_level'] = None

        # set to None if is_cache_hit (nullable) is None
        # and model_fields_set contains the field
        if self.is_cache_hit is None and "is_cache_hit" in self.model_fields_set:
            _dict['is_cache_hit'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VetricFacebookUserSearchResponseCombinedResults from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "page_info": VetricFacebookUserSearchResponseCombinedResultsPageInfo.from_dict(obj["page_info"]) if obj.get("page_info") is not None else None,
            "has_hcm": obj.get("has_hcm"),
            "degradation_level": obj.get("degradation_level"),
            "has_iem_triggered": obj.get("has_iem_triggered"),
            "is_cache_hit": obj.get("is_cache_hit"),
            "edges": [VetricFacebookUserSearchResponseCombinedResultsEdgesInner.from_dict(_item) for _item in obj["edges"]] if obj.get("edges") is not None else None
        })
        return _obj


