# coding: utf-8

"""
    Skyfire SDK

    The Skyfire SDK is designed to allow agents to interact with the Skyfire platform to enable autonomous payments.

    The version of the OpenAPI document: 1.0.0
    Contact: support@skyfire.xyz
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from skyfire_sdk.models.vetric_twitter_top_search_response_tweets_inner_tweet_extended_entities_media_inner_ext_media_stats import VetricTwitterTopSearchResponseTweetsInnerTweetExtendedEntitiesMediaInnerExtMediaStats
from skyfire_sdk.models.vetric_twitter_top_search_response_tweets_inner_tweet_extended_entities_media_inner_original_info import VetricTwitterTopSearchResponseTweetsInnerTweetExtendedEntitiesMediaInnerOriginalInfo
from skyfire_sdk.models.vetric_twitter_top_search_response_tweets_inner_tweet_extended_entities_media_inner_video_info import VetricTwitterTopSearchResponseTweetsInnerTweetExtendedEntitiesMediaInnerVideoInfo
from typing import Optional, Set
from typing_extensions import Self

class VetricTwitterTopSearchResponseTweetsInnerTweetExtendedEntitiesMediaInner(BaseModel):
    """
    VetricTwitterTopSearchResponseTweetsInnerTweetExtendedEntitiesMediaInner
    """ # noqa: E501
    additional_media_info: Optional[Dict[str, Any]] = Field(default=None, description="Additional media information.")
    expanded_url: Optional[StrictStr] = Field(default=None, description="The expanded URL of the media.")
    ext_media_stats: Optional[VetricTwitterTopSearchResponseTweetsInnerTweetExtendedEntitiesMediaInnerExtMediaStats] = None
    id_str: Optional[StrictStr] = Field(default=None, description="The string ID of the media.")
    media_url_https: Optional[StrictStr] = Field(default=None, description="The HTTPS URL of the media.")
    original_info: Optional[VetricTwitterTopSearchResponseTweetsInnerTweetExtendedEntitiesMediaInnerOriginalInfo] = None
    type: Optional[StrictStr] = Field(default=None, description="The type of media (e.g., video, image).")
    url: Optional[StrictStr] = Field(default=None, description="The URL of the media.")
    video_info: Optional[VetricTwitterTopSearchResponseTweetsInnerTweetExtendedEntitiesMediaInnerVideoInfo] = None
    __properties: ClassVar[List[str]] = ["additional_media_info", "expanded_url", "ext_media_stats", "id_str", "media_url_https", "original_info", "type", "url", "video_info"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VetricTwitterTopSearchResponseTweetsInnerTweetExtendedEntitiesMediaInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of ext_media_stats
        if self.ext_media_stats:
            _dict['ext_media_stats'] = self.ext_media_stats.to_dict()
        # override the default output from pydantic by calling `to_dict()` of original_info
        if self.original_info:
            _dict['original_info'] = self.original_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of video_info
        if self.video_info:
            _dict['video_info'] = self.video_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VetricTwitterTopSearchResponseTweetsInnerTweetExtendedEntitiesMediaInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "additional_media_info": obj.get("additional_media_info"),
            "expanded_url": obj.get("expanded_url"),
            "ext_media_stats": VetricTwitterTopSearchResponseTweetsInnerTweetExtendedEntitiesMediaInnerExtMediaStats.from_dict(obj["ext_media_stats"]) if obj.get("ext_media_stats") is not None else None,
            "id_str": obj.get("id_str"),
            "media_url_https": obj.get("media_url_https"),
            "original_info": VetricTwitterTopSearchResponseTweetsInnerTweetExtendedEntitiesMediaInnerOriginalInfo.from_dict(obj["original_info"]) if obj.get("original_info") is not None else None,
            "type": obj.get("type"),
            "url": obj.get("url"),
            "video_info": VetricTwitterTopSearchResponseTweetsInnerTweetExtendedEntitiesMediaInnerVideoInfo.from_dict(obj["video_info"]) if obj.get("video_info") is not None else None
        })
        return _obj


