# coding: utf-8

"""
    Skyfire SDK

    The Skyfire SDK is designed to allow agents to interact with the Skyfire platform to enable autonomous payments.

    The version of the OpenAPI document: 1.0.0
    Contact: support@skyfire.xyz
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List
from skyfire_sdk.models.bridge_destination import BridgeDestination
from skyfire_sdk.models.bridge_source_deposit_address import BridgeSourceDepositAddress
from typing import Optional, Set
from typing_extensions import Self

class BridgeVirtualAccount(BaseModel):
    """
    BridgeVirtualAccount
    """ # noqa: E501
    id: StrictStr
    status: StrictStr
    customer_id: StrictStr
    source_deposit_instructions: BridgeSourceDepositAddress
    destination: BridgeDestination
    __properties: ClassVar[List[str]] = ["id", "status", "customer_id", "source_deposit_instructions", "destination"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['activated', 'deactivated']):
            raise ValueError("must be one of enum values ('activated', 'deactivated')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BridgeVirtualAccount from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of source_deposit_instructions
        if self.source_deposit_instructions:
            _dict['source_deposit_instructions'] = self.source_deposit_instructions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of destination
        if self.destination:
            _dict['destination'] = self.destination.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BridgeVirtualAccount from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "status": obj.get("status"),
            "customer_id": obj.get("customer_id"),
            "source_deposit_instructions": BridgeSourceDepositAddress.from_dict(obj["source_deposit_instructions"]) if obj.get("source_deposit_instructions") is not None else None,
            "destination": BridgeDestination.from_dict(obj["destination"]) if obj.get("destination") is not None else None
        })
        return _obj


