# coding: utf-8

"""
    Skyfire SDK

    The Skyfire SDK is designed to allow agents to interact with the Skyfire platform to enable autonomous payments.

    The version of the OpenAPI document: 1.0.0
    Contact: support@skyfire.xyz
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from skyfire_sdk.models.pricing_culture_comp_attributes import PricingCultureCompAttributes
from skyfire_sdk.models.pricing_culture_comp_params import PricingCultureCompParams
from typing import Optional, Set
from typing_extensions import Self

class PricingCultureObject(BaseModel):
    """
    PricingCultureObject
    """ # noqa: E501
    id: Optional[StrictInt] = None
    comp_type: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    params: Optional[PricingCultureCompParams] = None
    attributes: Optional[PricingCultureCompAttributes] = None
    frequency_in_days: Optional[StrictInt] = None
    func: Optional[StrictStr] = None
    is_template: Optional[StrictBool] = None
    available_for_buyer: Optional[StrictBool] = None
    last_run_on: Optional[datetime] = None
    publish: Optional[StrictBool] = None
    comparable_idx: Optional[StrictStr] = None
    tags: Optional[StrictStr] = None
    alias_id: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["id", "comp_type", "name", "description", "params", "attributes", "frequency_in_days", "func", "is_template", "available_for_buyer", "last_run_on", "publish", "comparable_idx", "tags", "alias_id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PricingCultureObject from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of params
        if self.params:
            _dict['params'] = self.params.to_dict()
        # override the default output from pydantic by calling `to_dict()` of attributes
        if self.attributes:
            _dict['attributes'] = self.attributes.to_dict()
        # set to None if func (nullable) is None
        # and model_fields_set contains the field
        if self.func is None and "func" in self.model_fields_set:
            _dict['func'] = None

        # set to None if comparable_idx (nullable) is None
        # and model_fields_set contains the field
        if self.comparable_idx is None and "comparable_idx" in self.model_fields_set:
            _dict['comparable_idx'] = None

        # set to None if tags (nullable) is None
        # and model_fields_set contains the field
        if self.tags is None and "tags" in self.model_fields_set:
            _dict['tags'] = None

        # set to None if alias_id (nullable) is None
        # and model_fields_set contains the field
        if self.alias_id is None and "alias_id" in self.model_fields_set:
            _dict['alias_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PricingCultureObject from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "comp_type": obj.get("comp_type"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "params": PricingCultureCompParams.from_dict(obj["params"]) if obj.get("params") is not None else None,
            "attributes": PricingCultureCompAttributes.from_dict(obj["attributes"]) if obj.get("attributes") is not None else None,
            "frequency_in_days": obj.get("frequency_in_days"),
            "func": obj.get("func"),
            "is_template": obj.get("is_template"),
            "available_for_buyer": obj.get("available_for_buyer"),
            "last_run_on": obj.get("last_run_on"),
            "publish": obj.get("publish"),
            "comparable_idx": obj.get("comparable_idx"),
            "tags": obj.get("tags"),
            "alias_id": obj.get("alias_id")
        })
        return _obj


