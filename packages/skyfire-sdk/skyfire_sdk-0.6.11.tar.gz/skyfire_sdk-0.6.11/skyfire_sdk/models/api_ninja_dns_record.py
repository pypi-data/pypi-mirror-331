# coding: utf-8

"""
    Skyfire SDK

    The Skyfire SDK is designed to allow agents to interact with the Skyfire platform to enable autonomous payments.

    The version of the OpenAPI document: 1.0.0
    Contact: support@skyfire.xyz
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class APINinjaDNSRecord(BaseModel):
    """
    Represents a DNS record in the DNS Lookup response.
    """ # noqa: E501
    record_type: StrictStr = Field(description="The type of DNS record.")
    value: Optional[StrictStr] = Field(default=None, description="The value of the DNS record.")
    priority: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The priority of the DNS record (for SRV records).")
    mname: Optional[StrictStr] = Field(default=None, description="The master name server for the zone (for SOA records).")
    rname: Optional[StrictStr] = Field(default=None, description="The email address of the administrator responsible for the zone (for SOA records).")
    serial: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The serial number for the zone (for SOA records).")
    refresh: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The refresh interval for secondary name servers (for SOA records).")
    retry: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The retry interval for secondary name servers (for SOA records).")
    expire: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The expiration time for secondary name servers (for SOA records).")
    ttl: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The minimum TTL for negative caching (for SOA records).")
    __properties: ClassVar[List[str]] = ["record_type", "value", "priority", "mname", "rname", "serial", "refresh", "retry", "expire", "ttl"]

    @field_validator('record_type')
    def record_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['NS', 'PTR', 'SRV', 'SOA', 'CAA']):
            raise ValueError("must be one of enum values ('NS', 'PTR', 'SRV', 'SOA', 'CAA')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of APINinjaDNSRecord from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of APINinjaDNSRecord from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "record_type": obj.get("record_type"),
            "value": obj.get("value"),
            "priority": obj.get("priority"),
            "mname": obj.get("mname"),
            "rname": obj.get("rname"),
            "serial": obj.get("serial"),
            "refresh": obj.get("refresh"),
            "retry": obj.get("retry"),
            "expire": obj.get("expire"),
            "ttl": obj.get("ttl")
        })
        return _obj


