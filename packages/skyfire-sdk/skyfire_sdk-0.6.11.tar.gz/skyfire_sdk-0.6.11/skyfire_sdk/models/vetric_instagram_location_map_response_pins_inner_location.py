# coding: utf-8

"""
    Skyfire SDK

    The Skyfire SDK is designed to allow agents to interact with the Skyfire platform to enable autonomous payments.

    The version of the OpenAPI document: 1.0.0
    Contact: support@skyfire.xyz
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class VetricInstagramLocationMapResponsePinsInnerLocation(BaseModel):
    """
    VetricInstagramLocationMapResponsePinsInnerLocation
    """ # noqa: E501
    pk: StrictInt = Field(description="Unique identifier for the location.")
    short_name: Optional[StrictStr] = Field(default=None, description="Short name of the location.")
    facebook_places_id: Optional[StrictInt] = Field(default=None, description="Facebook Places ID associated with the location.")
    external_source: Optional[StrictStr] = Field(default=None, description="External source of the location data.")
    name: StrictStr = Field(description="Full name of the location.")
    address: StrictStr = Field(description="Address of the location.")
    city: StrictStr = Field(description="City where the location is.")
    has_viewer_saved: Optional[StrictBool] = Field(default=None, description="Indicates whether the viewer has saved the location.")
    lat: Union[StrictFloat, StrictInt] = Field(description="Latitude of the location.")
    lng: StrictStr = Field(description="Longitude of the location.")
    __properties: ClassVar[List[str]] = ["pk", "short_name", "facebook_places_id", "external_source", "name", "address", "city", "has_viewer_saved", "lat", "lng"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VetricInstagramLocationMapResponsePinsInnerLocation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VetricInstagramLocationMapResponsePinsInnerLocation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "pk": obj.get("pk"),
            "short_name": obj.get("short_name"),
            "facebook_places_id": obj.get("facebook_places_id"),
            "external_source": obj.get("external_source"),
            "name": obj.get("name"),
            "address": obj.get("address"),
            "city": obj.get("city"),
            "has_viewer_saved": obj.get("has_viewer_saved"),
            "lat": obj.get("lat"),
            "lng": obj.get("lng")
        })
        return _obj


