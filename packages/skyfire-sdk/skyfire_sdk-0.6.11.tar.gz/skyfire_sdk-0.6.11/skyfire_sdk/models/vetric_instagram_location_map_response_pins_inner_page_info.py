# coding: utf-8

"""
    Skyfire SDK

    The Skyfire SDK is designed to allow agents to interact with the Skyfire platform to enable autonomous payments.

    The version of the OpenAPI document: 1.0.0
    Contact: support@skyfire.xyz
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from skyfire_sdk.models.vetric_instagram_location_map_response_pins_inner_page_info_hours import VetricInstagramLocationMapResponsePinsInnerPageInfoHours
from skyfire_sdk.models.vetric_instagram_location_map_response_pins_inner_page_info_page_effect_info import VetricInstagramLocationMapResponsePinsInnerPageInfoPageEffectInfo
from typing import Optional, Set
from typing_extensions import Self

class VetricInstagramLocationMapResponsePinsInnerPageInfo(BaseModel):
    """
    VetricInstagramLocationMapResponsePinsInnerPageInfo
    """ # noqa: E501
    location_id: Optional[StrictStr] = Field(default=None, description="Location ID for the page.")
    facebook_places_id: Optional[StrictStr] = Field(default=None, description="Facebook Places ID for the page.")
    name: Optional[StrictStr] = Field(default=None, description="Name of the location.")
    phone: Optional[StrictStr] = Field(default=None, description="Phone number of the location.")
    website: Optional[StrictStr] = Field(default=None, description="Website URL of the location.")
    category: Optional[StrictStr] = Field(default=None, description="Category of the business or location.")
    price_range: Optional[StrictInt] = Field(default=None, description="Price range of the location.")
    hours: Optional[VetricInstagramLocationMapResponsePinsInnerPageInfoHours] = None
    location_address: Optional[StrictStr] = Field(default=None, description="Full address of the location.")
    location_city: Optional[StrictStr] = Field(default=None, description="City where the location is.")
    location_zip: Optional[StrictStr] = Field(default=None, description="Postal code of the location.")
    num_guides: Optional[StrictInt] = Field(default=None, description="Number of guides associated with the location.")
    has_menu: Optional[StrictBool] = Field(default=None, description="Indicates if the location has a menu.")
    page_effect_info: Optional[VetricInstagramLocationMapResponsePinsInnerPageInfoPageEffectInfo] = None
    __properties: ClassVar[List[str]] = ["location_id", "facebook_places_id", "name", "phone", "website", "category", "price_range", "hours", "location_address", "location_city", "location_zip", "num_guides", "has_menu", "page_effect_info"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VetricInstagramLocationMapResponsePinsInnerPageInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of hours
        if self.hours:
            _dict['hours'] = self.hours.to_dict()
        # override the default output from pydantic by calling `to_dict()` of page_effect_info
        if self.page_effect_info:
            _dict['page_effect_info'] = self.page_effect_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VetricInstagramLocationMapResponsePinsInnerPageInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "location_id": obj.get("location_id"),
            "facebook_places_id": obj.get("facebook_places_id"),
            "name": obj.get("name"),
            "phone": obj.get("phone"),
            "website": obj.get("website"),
            "category": obj.get("category"),
            "price_range": obj.get("price_range"),
            "hours": VetricInstagramLocationMapResponsePinsInnerPageInfoHours.from_dict(obj["hours"]) if obj.get("hours") is not None else None,
            "location_address": obj.get("location_address"),
            "location_city": obj.get("location_city"),
            "location_zip": obj.get("location_zip"),
            "num_guides": obj.get("num_guides"),
            "has_menu": obj.get("has_menu"),
            "page_effect_info": VetricInstagramLocationMapResponsePinsInnerPageInfoPageEffectInfo.from_dict(obj["page_effect_info"]) if obj.get("page_effect_info") is not None else None
        })
        return _obj


