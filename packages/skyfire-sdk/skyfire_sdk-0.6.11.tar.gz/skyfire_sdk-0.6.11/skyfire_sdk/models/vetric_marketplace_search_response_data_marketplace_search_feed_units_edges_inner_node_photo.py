# coding: utf-8

"""
    Skyfire SDK

    The Skyfire SDK is designed to allow agents to interact with the Skyfire platform to enable autonomous payments.

    The version of the OpenAPI document: 1.0.0
    Contact: support@skyfire.xyz
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from skyfire_sdk.models.vetric_marketplace_search_response_data_marketplace_search_feed_units_edges_inner_node_photo_default_image import VetricMarketplaceSearchResponseDataMarketplaceSearchFeedUnitsEdgesInnerNodePhotoDefaultImage
from skyfire_sdk.models.vetric_marketplace_search_response_data_marketplace_search_feed_units_edges_inner_node_photo_smart_resized_image import VetricMarketplaceSearchResponseDataMarketplaceSearchFeedUnitsEdgesInnerNodePhotoSmartResizedImage
from typing import Optional, Set
from typing_extensions import Self

class VetricMarketplaceSearchResponseDataMarketplaceSearchFeedUnitsEdgesInnerNodePhoto(BaseModel):
    """
    VetricMarketplaceSearchResponseDataMarketplaceSearchFeedUnitsEdgesInnerNodePhoto
    """ # noqa: E501
    typename: Optional[StrictStr] = Field(default=None, description="Type name of the photo object.", alias="__typename")
    accessibility_caption: Optional[StrictStr] = Field(default=None, description="Accessibility caption for the image.")
    background_color: Optional[StrictStr] = Field(default=None, description="Background color for the image, if applicable.")
    smart_resized_image: Optional[VetricMarketplaceSearchResponseDataMarketplaceSearchFeedUnitsEdgesInnerNodePhotoSmartResizedImage] = None
    default_image: Optional[VetricMarketplaceSearchResponseDataMarketplaceSearchFeedUnitsEdgesInnerNodePhotoDefaultImage] = None
    id: Optional[StrictStr] = Field(default=None, description="Unique identifier for the image.")
    __properties: ClassVar[List[str]] = ["__typename", "accessibility_caption", "background_color", "smart_resized_image", "default_image", "id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VetricMarketplaceSearchResponseDataMarketplaceSearchFeedUnitsEdgesInnerNodePhoto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of smart_resized_image
        if self.smart_resized_image:
            _dict['smart_resized_image'] = self.smart_resized_image.to_dict()
        # override the default output from pydantic by calling `to_dict()` of default_image
        if self.default_image:
            _dict['default_image'] = self.default_image.to_dict()
        # set to None if background_color (nullable) is None
        # and model_fields_set contains the field
        if self.background_color is None and "background_color" in self.model_fields_set:
            _dict['background_color'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VetricMarketplaceSearchResponseDataMarketplaceSearchFeedUnitsEdgesInnerNodePhoto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "__typename": obj.get("__typename"),
            "accessibility_caption": obj.get("accessibility_caption"),
            "background_color": obj.get("background_color"),
            "smart_resized_image": VetricMarketplaceSearchResponseDataMarketplaceSearchFeedUnitsEdgesInnerNodePhotoSmartResizedImage.from_dict(obj["smart_resized_image"]) if obj.get("smart_resized_image") is not None else None,
            "default_image": VetricMarketplaceSearchResponseDataMarketplaceSearchFeedUnitsEdgesInnerNodePhotoDefaultImage.from_dict(obj["default_image"]) if obj.get("default_image") is not None else None,
            "id": obj.get("id")
        })
        return _obj


