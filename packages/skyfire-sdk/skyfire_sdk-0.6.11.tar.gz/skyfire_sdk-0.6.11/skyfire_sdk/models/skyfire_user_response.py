# coding: utf-8

"""
    Skyfire SDK

    The Skyfire SDK is designed to allow agents to interact with the Skyfire platform to enable autonomous payments.

    The version of the OpenAPI document: 1.0.0
    Contact: support@skyfire.xyz
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from skyfire_sdk.models.organization_response import OrganizationResponse
from skyfire_sdk.models.receiver_user_response import ReceiverUserResponse
from skyfire_sdk.models.skyfire_user import SkyfireUser
from skyfire_sdk.models.wallet import Wallet
from typing import Optional, Set
from typing_extensions import Self

class SkyfireUserResponse(BaseModel):
    """
    SkyfireUserResponse
    """ # noqa: E501
    user: SkyfireUser
    default_wallet: Optional[Wallet] = Field(default=None, alias="defaultWallet")
    wallets: Optional[List[Wallet]] = None
    receiver_user_response: Optional[ReceiverUserResponse] = Field(default=None, alias="receiverUserResponse")
    user_organization_responses: Optional[List[OrganizationResponse]] = Field(default=None, alias="userOrganizationResponses")
    __properties: ClassVar[List[str]] = ["user", "defaultWallet", "wallets", "receiverUserResponse", "userOrganizationResponses"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SkyfireUserResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of user
        if self.user:
            _dict['user'] = self.user.to_dict()
        # override the default output from pydantic by calling `to_dict()` of default_wallet
        if self.default_wallet:
            _dict['defaultWallet'] = self.default_wallet.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in wallets (list)
        _items = []
        if self.wallets:
            for _item in self.wallets:
                if _item:
                    _items.append(_item.to_dict())
            _dict['wallets'] = _items
        # override the default output from pydantic by calling `to_dict()` of receiver_user_response
        if self.receiver_user_response:
            _dict['receiverUserResponse'] = self.receiver_user_response.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in user_organization_responses (list)
        _items = []
        if self.user_organization_responses:
            for _item in self.user_organization_responses:
                if _item:
                    _items.append(_item.to_dict())
            _dict['userOrganizationResponses'] = _items
        # set to None if default_wallet (nullable) is None
        # and model_fields_set contains the field
        if self.default_wallet is None and "default_wallet" in self.model_fields_set:
            _dict['defaultWallet'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SkyfireUserResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "user": SkyfireUser.from_dict(obj["user"]) if obj.get("user") is not None else None,
            "defaultWallet": Wallet.from_dict(obj["defaultWallet"]) if obj.get("defaultWallet") is not None else None,
            "wallets": [Wallet.from_dict(_item) for _item in obj["wallets"]] if obj.get("wallets") is not None else None,
            "receiverUserResponse": ReceiverUserResponse.from_dict(obj["receiverUserResponse"]) if obj.get("receiverUserResponse") is not None else None,
            "userOrganizationResponses": [OrganizationResponse.from_dict(_item) for _item in obj["userOrganizationResponses"]] if obj.get("userOrganizationResponses") is not None else None
        })
        return _obj


