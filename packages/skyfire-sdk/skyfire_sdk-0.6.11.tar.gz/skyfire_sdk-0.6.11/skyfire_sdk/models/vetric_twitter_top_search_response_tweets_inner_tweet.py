# coding: utf-8

"""
    Skyfire SDK

    The Skyfire SDK is designed to allow agents to interact with the Skyfire platform to enable autonomous payments.

    The version of the OpenAPI document: 1.0.0
    Contact: support@skyfire.xyz
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from skyfire_sdk.models.vetric_twitter_top_search_response_tweets_inner_tweet_entities import VetricTwitterTopSearchResponseTweetsInnerTweetEntities
from skyfire_sdk.models.vetric_twitter_top_search_response_tweets_inner_tweet_extended_entities import VetricTwitterTopSearchResponseTweetsInnerTweetExtendedEntities
from skyfire_sdk.models.vetric_twitter_top_search_response_tweets_inner_tweet_user_details import VetricTwitterTopSearchResponseTweetsInnerTweetUserDetails
from typing import Optional, Set
from typing_extensions import Self

class VetricTwitterTopSearchResponseTweetsInnerTweet(BaseModel):
    """
    VetricTwitterTopSearchResponseTweetsInnerTweet
    """ # noqa: E501
    typename: Optional[StrictStr] = Field(default=None, description="The type of the object, in this case, Tweet.", alias="__typename")
    rest_id: Optional[StrictStr] = Field(default=None, description="The REST ID of the tweet.")
    view_count: Optional[StrictInt] = Field(default=None, description="The number of views for the tweet.")
    user_details: Optional[VetricTwitterTopSearchResponseTweetsInnerTweetUserDetails] = None
    conversation_id_str: Optional[StrictStr] = Field(default=None, description="The conversation ID of the tweet.")
    created_at: Optional[datetime] = Field(default=None, description="The creation date of the tweet.")
    entities: Optional[VetricTwitterTopSearchResponseTweetsInnerTweetEntities] = None
    favorite_count: Optional[StrictInt] = Field(default=None, description="The number of times the tweet was favorited.")
    full_text: Optional[StrictStr] = Field(default=None, description="The full text of the tweet.")
    is_quote_status: Optional[StrictBool] = Field(default=None, description="Indicates if the tweet is a quote tweet.")
    lang: Optional[StrictStr] = Field(default=None, description="The language of the tweet.")
    quote_count: Optional[StrictInt] = Field(default=None, description="The number of times the tweet was quoted.")
    reply_count: Optional[StrictInt] = Field(default=None, description="The number of replies to the tweet.")
    retweet_count: Optional[StrictInt] = Field(default=None, description="The number of retweets of the tweet.")
    retweeted: Optional[StrictBool] = Field(default=None, description="Indicates if the tweet was retweeted.")
    user_id_str: Optional[StrictStr] = Field(default=None, description="The string ID of the user who posted the tweet.")
    possibly_sensitive: Optional[StrictBool] = Field(default=None, description="Indicates if the tweet contains sensitive content.")
    extended_entities: Optional[VetricTwitterTopSearchResponseTweetsInnerTweetExtendedEntities] = None
    __properties: ClassVar[List[str]] = ["__typename", "rest_id", "view_count", "user_details", "conversation_id_str", "created_at", "entities", "favorite_count", "full_text", "is_quote_status", "lang", "quote_count", "reply_count", "retweet_count", "retweeted", "user_id_str", "possibly_sensitive", "extended_entities"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VetricTwitterTopSearchResponseTweetsInnerTweet from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of user_details
        if self.user_details:
            _dict['user_details'] = self.user_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of entities
        if self.entities:
            _dict['entities'] = self.entities.to_dict()
        # override the default output from pydantic by calling `to_dict()` of extended_entities
        if self.extended_entities:
            _dict['extended_entities'] = self.extended_entities.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VetricTwitterTopSearchResponseTweetsInnerTweet from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "__typename": obj.get("__typename"),
            "rest_id": obj.get("rest_id"),
            "view_count": obj.get("view_count"),
            "user_details": VetricTwitterTopSearchResponseTweetsInnerTweetUserDetails.from_dict(obj["user_details"]) if obj.get("user_details") is not None else None,
            "conversation_id_str": obj.get("conversation_id_str"),
            "created_at": obj.get("created_at"),
            "entities": VetricTwitterTopSearchResponseTweetsInnerTweetEntities.from_dict(obj["entities"]) if obj.get("entities") is not None else None,
            "favorite_count": obj.get("favorite_count"),
            "full_text": obj.get("full_text"),
            "is_quote_status": obj.get("is_quote_status"),
            "lang": obj.get("lang"),
            "quote_count": obj.get("quote_count"),
            "reply_count": obj.get("reply_count"),
            "retweet_count": obj.get("retweet_count"),
            "retweeted": obj.get("retweeted"),
            "user_id_str": obj.get("user_id_str"),
            "possibly_sensitive": obj.get("possibly_sensitive"),
            "extended_entities": VetricTwitterTopSearchResponseTweetsInnerTweetExtendedEntities.from_dict(obj["extended_entities"]) if obj.get("extended_entities") is not None else None
        })
        return _obj


