[project]
name = "cicd-tempy"
version = "0.3.0"
description = "Templates for Python projects"
authors = [{ name = "mo", email = "mohamedmartini1991@gmail.com" }]
dependencies = []
requires-python = ">=3.11"
readme = "README.md"
license = { file = "LICENSE" }

[dependency-groups]
lint = ["ruff", "mypy"]
dev = ["pre-commit"]
test = ["pytest", "pytest-pretty", "pytest-mock", "coverage[toml]"]
docs = [
    "mkdocs>=1.6.1",
    "mike>=2.1.3",
    "mkdocstrings[python]>=0.28.2",
    "shtab>=1.7.1",
    "mkdocstrings",
    "mkdocs-material",
]

[tool.uv]
managed = true
# build-constraint-dependencies = ["setuptools==60.0.0"]

# # Require that `package[extra1]` and `package[extra2]` are resolved
# # in different forks so that they cannot conflict with one another.
# conflicts = [
#     [
#         { extra = "extra1" },
#         { extra = "extra2" },
#     ]
# ]

# # Require that the dependency groups `group1` and `group2`
# # are resolved in different forks so that they cannot conflict
# # with one another.
# conflicts = [
#     [
#         { group = "group1" },
#         { group = "group2" },
#     ]
# ]

# # Ensure that the grpcio version is always less than 1.65, if it's requested by a
# # direct or transitive dependency.
# constraint-dependencies = ["grpcio<1.65"]

# default-groups = ["dev", "test", "docs"]

# Resolve for most popular environments
environments = [
    "sys_platform == 'win32'",
    "sys_platform == 'linux'",
    "sys_platform == 'darwin'",
]
# Require that the package is available for macOS ARM and x86 (Intel).
required-environments = [
    "sys_platform == 'win32'",
    "sys_platform == 'darwin' and platform_machine == 'arm64'",
    "sys_platform == 'darwin' and platform_machine == 'x86_64'",
    "sys_platform == 'linux'",
]

# # Always install Werkzeug 2.3.0, regardless of whether transitive dependencies request
# # a different version.
# override-dependencies = ["werkzeug==2.3.0"]

# [tool.uv.sources]
# httpx = { git = "https://github.com/encode/httpx", tag = "0.27.0" }
# pytest = { url = "https://files.pythonhosted.org/packages/6b/77/7440a06a8ead44c7757a64362dd22df5760f9b12dc5f11b6188cd2fc27a0/pytest-8.3.3-py3-none-any.whl" }
# pydantic = { path = "/path/to/pydantic", editable = true }

# keyring-provider = "subprocess"
# publish-url = "https://upload.pypi.org/legacy/"
# resolution = "lowest-direct"
package = true

[tool.ruff]
line-length = 115
extend-exclude = []

[tool.ruff.lint] # From https://github.com/pydantic/pydantic/blob/main/pyproject.toml
select = [
    'F',      # Pyflakes
    'E',      # pycodestyle (Error)
    'I',      # isort
    'D',      # pydocstyle
    'UP',     # pyupgrade
    'YTT',    # flake8-2020
    'B',      # flake8-bugbear
    'T10',    # flake8-debugger
    'T20',    # flake8-print
    'C4',     # flake8-comprehensions
    'PYI006', # flake8-pyi
    'PYI062', # flake8-pyi
    'PYI063', # flake8-pyi
    'PYI066', # flake8-pyi
]
ignore = ['D105', 'D107', 'D205', 'D415', 'E501', 'B011', 'B028', 'B904']
flake8-quotes = { inline-quotes = 'single', multiline-quotes = 'double' }
isort = { known-first-party = ['cicd-tempy', 'tests'] }
mccabe = { max-complexity = 14 }
pydocstyle = { convention = 'google' }

[tool.ruff.lint.per-file-ignores]
'tests/*' = ['D']
'src/pytemplate/main.py' = ['D100']

[tool.ruff.lint.extend-per-file-ignores]

[tool.ruff.format]
quote-style = 'single'

[tool.codespell]
skip = '.git,env*,uv.lock'
ignore-words-list = 'word1,word2'

# [tool.pdm.scripts]
# post_install = "pdm run pre-commit install"

[tool.coverage.run]
source = ['src']
branch = true
relative_files = true
context = '${CONTEXT}'

[tool.coverage.report]
precision = 2
exclude_lines = [
    'pragma: no cover',
    'raise NotImplementedError',
    'if TYPE_CHECKING:',
    'if typing.TYPE_CHECKING:',
    '@overload',
    '@typing.overload',
    '\(Protocol\):$',
    'typing.assert_never',
    'assert_never',
]

[tool.coverage.paths]
source = [
    'src/cicd-tempy/',
    '/Users/runner/work/cicd-tempy/src/cicd-tempy/',
    'D:\a\cicd-tempy\src\cicd-tempy',
]

[tool.semantic_release]
version_variables = ["src/cicd-tempy/__init__.py:__version__"]
version_toml = ["pyproject.toml:project.version"]
version_source = "tag"
commit_version_number = true
commit_message = "chore(release): bump version to {version}"
tag_format = "{version}"
mode = "init"

[tool.semantic_release.commit_parser_options]
default_level_bump = "patch"
minor_tags = ['feat']
patch_tags = ['fix', 'perf', 'build']
other_allowed_tags = ['chore', 'ci', 'docs', 'style', 'refactor', 'test']

[tool.semantic_release.publish]
dist_glob_patterns = ["dist/*"]
upload_to_vcs_release = true

[tool.semantic_release.branches.main]
match = "(main|master)"
prerelease_token = "rc"
prerelease = false

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

# [build-system]
# requires = ["setuptools", "wheel"]
# build-backend = "setuptools.build_meta"
