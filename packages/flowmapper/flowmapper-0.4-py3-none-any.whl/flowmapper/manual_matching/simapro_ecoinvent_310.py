import randonneur as rn
import randonneur_data as rd
from pathlib import Path
import json


data_dir = Path(__file__).parent / "data" / "simapro_ecoinvent_310"
results_dir = Path(__file__).parent / "results"
base_data_dir = Path(__file__).parent.parent / "data"


def generate_simapro_ecoinvent_310_manual_matches(
    output_dir: Path = results_dir,
    filename: str = "simapro-2024-ecoinvent-3.10-biosphere.json",
    add_to_randonneur_data: bool = False,
) -> Path:
    # Manually add some ecoinvent 3.9 -> 3.10 conversions which don't apply to resources
    mapping_files = [
        "just_different.json",
        "land_use_not_in_ecoinvent.json",
        "regionalized_random.json",
        "unit_conversions.json",
        "water_misc.json",
    ]
    non_resources = {
        'Caesium': 'Caesium I',
        'Calcium': 'Calcium II',
        'Sodium': 'Sodium I',
        'Strontium': 'Strontium II',
    }
    non_resource_categories = [
        obj['source']['context']
        for obj in json.load(open(base_data_dir / "simapro-2023-ecoinvent-3-contexts.json"))["update"]
        if obj['target']['context'][0] != "natural resource"
    ]

    data = [
        {
            'source': {
                'name': key,
                'context': context
            },
            'target': {'name': value}
        }
        for key, value in non_resources.items()
        for context in non_resource_categories
    ]
    for fn in mapping_files:
        data.extend(json.load(open(data_dir / fn)))

    registry = rd.Registry()
    migration = registry.get_file("ecoinvent-3.9.1-biosphere-ecoinvent-3.10-biosphere")
    name_change = {
        (pair['source']['name'], pair['target']['name'])
        for pair in migration['replace']
        if 'name' in pair['target']
        and 'name' in pair['source']
        and pair['source']['name'] != pair['target']['name']
        and pair['source']['name'] not in non_resources
    }
    assert len(name_change) == len({a for a, b in name_change})
    data.extend([
        {'source': {'name': a}, 'target': {'name': b}}
        for a, b in name_change
    ])

    dp = rn.Datapackage(
        name="SimaPro-2024-to-ecoinvent-3.10-elementary-flows",
        description="Generic manual matching of SimaPro elementary flows to ecoinvent 3.10 elementary flows. Generated by flowmapper.manual_matches.simapro_ecoinvent_310.generate_simapro_ecoinvent_310_manual_matches`.",
        contributors=[
            {
                "title": "Chris Mutel",
                "path": "https://chris.mutel.org/",
                "roles": ["author"],
            }
        ],
        mapping_source=rn.MappingConstants.SIMAPRO_CSV,
        mapping_target=rn.MappingConstants.ECOSPOLD2_BIO,
        source_id="SimaPro-2024",
        target_id="ecoinvent-3.10-biosphere",
        homepage="https://github.com/cmutel/flowmapper",
        version="2.0.0",
    )
    dp.add_data("update", data)
    dp.to_json(output_dir / filename)


if __name__ == "__main__":
    generate_simapro_ecoinvent_310_manual_matches()
