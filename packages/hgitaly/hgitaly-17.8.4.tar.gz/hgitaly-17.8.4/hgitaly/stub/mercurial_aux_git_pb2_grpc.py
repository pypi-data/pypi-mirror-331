# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import repository_pb2 as repository__pb2


class MercurialAuxGitServiceStub(object):
    """Methods working on auxiliary Git repositories

    The auxiliary Git repositories are mostly meant to support mirroring
    to external Git services.
    These are set aside so that Gitaly does not handle them.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AuxGitCreateBundle = channel.unary_stream(
                '/hgitaly.MercurialAuxGitService/AuxGitCreateBundle',
                request_serializer=repository__pb2.CreateBundleRequest.SerializeToString,
                response_deserializer=repository__pb2.CreateBundleResponse.FromString,
                )
        self.AuxGitCreateFromBundle = channel.stream_unary(
                '/hgitaly.MercurialAuxGitService/AuxGitCreateFromBundle',
                request_serializer=repository__pb2.CreateRepositoryFromBundleRequest.SerializeToString,
                response_deserializer=repository__pb2.CreateRepositoryFromBundleResponse.FromString,
                )
        self.AuxGitRepositorySize = channel.unary_unary(
                '/hgitaly.MercurialAuxGitService/AuxGitRepositorySize',
                request_serializer=repository__pb2.RepositorySizeRequest.SerializeToString,
                response_deserializer=repository__pb2.RepositorySizeResponse.FromString,
                )


class MercurialAuxGitServiceServicer(object):
    """Methods working on auxiliary Git repositories

    The auxiliary Git repositories are mostly meant to support mirroring
    to external Git services.
    These are set aside so that Gitaly does not handle them.
    """

    def AuxGitCreateBundle(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AuxGitCreateFromBundle(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AuxGitRepositorySize(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MercurialAuxGitServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AuxGitCreateBundle': grpc.unary_stream_rpc_method_handler(
                    servicer.AuxGitCreateBundle,
                    request_deserializer=repository__pb2.CreateBundleRequest.FromString,
                    response_serializer=repository__pb2.CreateBundleResponse.SerializeToString,
            ),
            'AuxGitCreateFromBundle': grpc.stream_unary_rpc_method_handler(
                    servicer.AuxGitCreateFromBundle,
                    request_deserializer=repository__pb2.CreateRepositoryFromBundleRequest.FromString,
                    response_serializer=repository__pb2.CreateRepositoryFromBundleResponse.SerializeToString,
            ),
            'AuxGitRepositorySize': grpc.unary_unary_rpc_method_handler(
                    servicer.AuxGitRepositorySize,
                    request_deserializer=repository__pb2.RepositorySizeRequest.FromString,
                    response_serializer=repository__pb2.RepositorySizeResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'hgitaly.MercurialAuxGitService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MercurialAuxGitService(object):
    """Methods working on auxiliary Git repositories

    The auxiliary Git repositories are mostly meant to support mirroring
    to external Git services.
    These are set aside so that Gitaly does not handle them.
    """

    @staticmethod
    def AuxGitCreateBundle(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/hgitaly.MercurialAuxGitService/AuxGitCreateBundle',
            repository__pb2.CreateBundleRequest.SerializeToString,
            repository__pb2.CreateBundleResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AuxGitCreateFromBundle(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/hgitaly.MercurialAuxGitService/AuxGitCreateFromBundle',
            repository__pb2.CreateRepositoryFromBundleRequest.SerializeToString,
            repository__pb2.CreateRepositoryFromBundleResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AuxGitRepositorySize(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/hgitaly.MercurialAuxGitService/AuxGitRepositorySize',
            repository__pb2.RepositorySizeRequest.SerializeToString,
            repository__pb2.RepositorySizeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
