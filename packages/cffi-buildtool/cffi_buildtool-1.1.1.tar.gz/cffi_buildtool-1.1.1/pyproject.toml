[project]
authors = [
  {name = 'Rose Davidson', email = 'rose@metaclassical.com'},
]
# complete classifier list: http://pypi.python.org/pypi?%3Aaction=list_classifiers
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Operating System :: Unix",
  "Operating System :: POSIX",
  "Operating System :: Microsoft :: Windows",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
]
dependencies = ['cffi>=1.17.1']
description = 'CFFI Buildtool helps build CFFI-based Python extension modules without setuptools.'
dynamic = ['version']
name = 'cffi-buildtool'
readme = 'README.md'
requires-python = '>=3.8'

[project.urls]
Changelog = "https://github.com/inklesspen/cffi-buildtool/blob/main/CHANGELOG.md"
Documentation = "https://github.com/inklesspen/cffi-buildtool/blob/main/README.md"
Issues = "https://github.com/inklesspen/cffi-buildtool/issues"
Repository = "https://github.com/inklesspen/cffi-buildtool.git"

[project.scripts]
"gen-cffi-src" = "cffi_buildtool.cli:run"

[dependency-groups]
test = [
  "pytest>=8.3.5",
  "pytest-cov>=5.0.0",
]

[build-system]
build-backend = 'mesonpy'
requires = ['meson-python']

[tool.ruff]
extend-exclude = []
line-length = 140
src = ["src", "tests"]
target-version = "py38"

[tool.ruff.lint]
ignore = [
  "RUF001", # ruff-specific rules ambiguous-unicode-character-string
  "S101", # flake8-bandit assert
  "S308", # flake8-bandit suspicious-mark-safe-usage
  "S603", # flake8-bandit subprocess-without-shell-equals-true
  "S607", # flake8-bandit start-process-with-partial-path
  "E501", # pycodestyle line-too-long
]
select = [
  "B", # flake8-bugbear
  "C4", # flake8-comprehensions
  "DTZ", # flake8-datetimez
  "E", # pycodestyle errors
  "EXE", # flake8-executable
  "F", # pyflakes
  "I", # isort
  "INT", # flake8-gettext
  "PIE", # flake8-pie
  "PLC", # pylint convention
  "PLE", # pylint errors
  "PT", # flake8-pytest-style
  "PTH", # flake8-use-pathlib
  "RSE", # flake8-raise
  "RUF", # ruff-specific rules
  "S", # flake8-bandit
  "UP", # pyupgrade
  "W", # pycodestyle warnings
  "TCH", # flake8-type-checking
]

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false
mark-parentheses = false

[tool.ruff.lint.isort]
force-single-line = true
forced-separate = ["conftest"]

[tool.ruff.format]
quote-style = "double"

[tool.pytest.ini_options]
addopts = [
  "-ra",
  "--strict-markers",
  "--doctest-modules",
  "--doctest-glob=\\*.rst",
  "--tb=short",
]
filterwarnings = ["error"]
norecursedirs = ["migrations"]
python_files = [
  "test_*.py",
  "*_test.py",
  "tests.py",
]
testpaths = ["tests"]

[tool.bumpversion]
allow_dirty = false
commit = true
commit_args = ""
current_version = "1.1.1"
ignore_missing_files = false
ignore_missing_version = false
message = "Bump version: {current_version} → {new_version}"
parse = "(?P<major>\\d+)\\.(?P<minor>\\d+)\\.(?P<patch>\\d+)"
regex = false
replace = "{new_version}"
search = "{current_version}"
serialize = ["{major}.{minor}.{patch}"]
sign_tags = false
tag = true
tag_message = "Bump version: {current_version} → {new_version}"
tag_name = "v{new_version}"

[[tool.bumpversion.files]]
filename = "meson.build"
replace = "version: '{new_version}'"
search = "version: '{current_version}'"

[[tool.bumpversion.files]]
filename = "src/cffi_buildtool/__init__.py"
replace = "__version__ = \"{new_version}\""
search = "__version__ = \"{current_version}\""

[tool.uv]
# Force uv to _always_ rebuild when using install --editable
# https://docs.astral.sh/uv/concepts/cache/#dynamic-metadata
reinstall-package = ["cffi-buildtool"]
