from jstreams.stream import Predicate as Predicate, stream as stream
from jstreams.utils import isCallable as isCallable, requireNotNull as requireNotNull
from typing import Callable, Generic, TypeVar, overload

T = TypeVar('T')
V = TypeVar('V')

class Case(Generic[T, V]):
    def __init__(self, matching: T | Callable[[T], bool] | Predicate[T], resulting: V | Callable[[], V]) -> None: ...
    def matches(self, value: T) -> bool: ...
    def result(self) -> V: ...

class DefaultCase(Case[T, V]):
    def __init__(self, resulting: V | Callable[[], V]) -> None: ...

class Match(Generic[T]):
    def __init__(self, value: T) -> None: ...
    @overload
    def of(self, case1: Case[T, V]) -> V | None: ...
    @overload
    def of(self, case1: Case[T, V], case2: Case[T, V]) -> V | None: ...
    @overload
    def of(self, case1: Case[T, V], case2: Case[T, V], case3: Case[T, V]) -> V | None: ...
    @overload
    def of(self, case1: Case[T, V], case2: Case[T, V], case3: Case[T, V], case4: Case[T, V]) -> V | None: ...
    @overload
    def of(self, case1: Case[T, V], case2: Case[T, V], case3: Case[T, V], case4: Case[T, V], case5: Case[T, V]) -> V | None: ...
    @overload
    def of(self, case1: Case[T, V], case2: Case[T, V], case3: Case[T, V], case4: Case[T, V], case5: Case[T, V], case6: Case[T, V]) -> V | None: ...
    @overload
    def of(self, case1: Case[T, V], case2: Case[T, V], case3: Case[T, V], case4: Case[T, V], case5: Case[T, V], case6: Case[T, V], case7: Case[T, V]) -> V | None: ...
    @overload
    def of(self, case1: Case[T, V], case2: Case[T, V], case3: Case[T, V], case4: Case[T, V], case5: Case[T, V], case6: Case[T, V], case7: Case[T, V], case8: Case[T, V]) -> V | None: ...
    @overload
    def of(self, case1: Case[T, V], case2: Case[T, V], case3: Case[T, V], case4: Case[T, V], case5: Case[T, V], case6: Case[T, V], case7: Case[T, V], case8: Case[T, V], case9: Case[T, V]) -> V | None: ...
    @overload
    def of(self, case1: Case[T, V], case2: Case[T, V], case3: Case[T, V], case4: Case[T, V], case5: Case[T, V], case6: Case[T, V], case7: Case[T, V], case8: Case[T, V], case9: Case[T, V], case10: Case[T, V]) -> V | None: ...
    @overload
    def of(self, case1: Case[T, V], case2: Case[T, V], case3: Case[T, V], case4: Case[T, V], case5: Case[T, V], case6: Case[T, V], case7: Case[T, V], case8: Case[T, V], case9: Case[T, V], case10: Case[T, V], case11: Case[T, V]) -> V | None: ...
    @overload
    def of(self, case1: Case[T, V], case2: Case[T, V], case3: Case[T, V], case4: Case[T, V], case5: Case[T, V], case6: Case[T, V], case7: Case[T, V], case8: Case[T, V], case9: Case[T, V], case10: Case[T, V], case11: Case[T, V], case12: Case[T, V]) -> V | None: ...
    @overload
    def of(self, case1: Case[T, V], case2: Case[T, V], case3: Case[T, V], case4: Case[T, V], case5: Case[T, V], case6: Case[T, V], case7: Case[T, V], case8: Case[T, V], case9: Case[T, V], case10: Case[T, V], case11: Case[T, V], case12: Case[T, V], case13: Case[T, V]) -> V | None: ...
    @overload
    def of(self, case1: Case[T, V], case2: Case[T, V], case3: Case[T, V], case4: Case[T, V], case5: Case[T, V], case6: Case[T, V], case7: Case[T, V], case8: Case[T, V], case9: Case[T, V], case10: Case[T, V], case11: Case[T, V], case12: Case[T, V], case13: Case[T, V], case14: Case[T, V]) -> V | None: ...
    @overload
    def of(self, case1: Case[T, V], case2: Case[T, V], case3: Case[T, V], case4: Case[T, V], case5: Case[T, V], case6: Case[T, V], case7: Case[T, V], case8: Case[T, V], case9: Case[T, V], case10: Case[T, V], case11: Case[T, V], case12: Case[T, V], case13: Case[T, V], case14: Case[T, V], case15: Case[T, V]) -> V | None: ...

def case(matching: T | Callable[[T], bool] | Predicate[T], resulting: V | Callable[[], V]) -> Case[T, V]: ...
def match(value: T) -> Match[T]: ...
def matchOpt(value: T | None) -> Match[T | None]: ...
def defaultCase(resulting: V | Callable[[], V]) -> Case[T, V]: ...
