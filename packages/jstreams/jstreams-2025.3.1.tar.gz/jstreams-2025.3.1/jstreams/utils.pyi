from _typeshed import Incomplete
from jstreams import Stream as Stream
from jstreams.stream import isNotNone as isNotNone
from typing import Any, Callable, TypeVar

T = TypeVar('T')
K = TypeVar('K')

class _F:
    def mth(self) -> None: ...

FnType: Incomplete
MthType: Incomplete

def isCallable(var: Any) -> bool: ...
def requireNotNull(obj: T | None) -> T: ...
def isNumber(anyVal: Any) -> bool: ...
def toInt(val: Any) -> int: ...
def toFloat(val: Any) -> float: ...
def asList(dct: dict[Any, T]) -> list[T]: ...
def keysAsList(dct: dict[T, Any]) -> list[T]: ...
def loadJson(s: str | bytes | bytearray) -> list[Any] | dict[Any, Any] | None: ...
def loadJsonEx(s: str | bytes | bytearray, handler: Callable[[Exception], Any] | None) -> list[Any] | dict[Any, Any] | None: ...
def identity(value: T) -> T: ...
def extract(typ: type[T], val: Any, keys: list[Any], defaultValue: T | None = None) -> T | None: ...
def extractList(val: dict[K, T], keys: list[K]) -> list[T | None]: ...
def extractNonNullList(val: dict[K, T], keys: list[K]) -> list[T]: ...
