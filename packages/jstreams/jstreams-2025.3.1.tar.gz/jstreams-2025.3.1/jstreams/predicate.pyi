from jstreams.stream import Predicate as Predicate, Stream as Stream, predicateOf as predicateOf
from typing import Any, Callable, Iterable, Mapping, TypeVar

T = TypeVar('T')

def isTrue(var: bool) -> bool: ...
def isFalse(var: bool) -> bool: ...
def isNone(val: Any) -> bool: ...
def isIn(it: Iterable[Any]) -> Predicate[Any]: ...
def isNotIn(it: Iterable[Any]) -> Predicate[Any]: ...
def equals(obj: T) -> Predicate[T]: ...
def notEquals(obj: Any) -> Predicate[Any]: ...
def isBlank(obj: Any) -> bool: ...
def isNotBlank(obj: Any) -> bool: ...
def default(defaultVal: T) -> Callable[[T | None], T]: ...
def allNone(it: Iterable[T | None]) -> bool: ...
def allNotNone(it: Iterable[T | None]) -> bool: ...
def contains(value: Any) -> Predicate[str | Iterable[Any] | None]: ...
def strContains(value: str) -> Predicate[str | None]: ...
def strContainsIgnoreCase(value: str) -> Predicate[str | None]: ...
def strStartsWith(value: str) -> Predicate[str | None]: ...
def strStartsWithIgnoreCase(value: str) -> Predicate[str | None]: ...
def strEndsWith(value: str) -> Predicate[str | None]: ...
def strEndsWithIgnoreCase(value: str) -> Predicate[str | None]: ...
def strMatches(value: str) -> Predicate[str | None]: ...
def strNotMatches(value: str) -> Predicate[str | None]: ...
def strLongerThan(value: int) -> Predicate[str | None]: ...
def strShorterThan(value: int) -> Predicate[str | None]: ...
def strLongerThanOrEqual(value: int) -> Predicate[str | None]: ...
def strShorterThanOrEqual(value: int) -> Predicate[str | None]: ...
def equalsIgnoreCase(value: str) -> Predicate[str | None]: ...
def isEven(integer: int | None) -> bool: ...
def isOdd(integer: int | None) -> bool: ...
def isPositive(number: float | None) -> bool: ...
def isNegative(number: float | None) -> bool: ...
def isZero(number: float | None) -> bool: ...
def isInt(number: float | None) -> bool: ...
def isBeween(intervalStart: float, intervalEnd: float) -> Predicate[float | None]: ...
def isBeweenClosed(intervalStart: float, intervalEnd: float) -> Predicate[float | None]: ...
def isInInterval(intervalStart: float, intervalEnd: float) -> Predicate[float | None]: ...
def isInOpenInterval(intervalStart: float, intervalEnd: float) -> Predicate[float | None]: ...
def isBeweenClosedStart(intervalStart: float, intervalEnd: float) -> Predicate[float | None]: ...
def isBeweenClosedEnd(intervalStart: float, intervalEnd: float) -> Predicate[float | None]: ...
def isHigherThan(value: float) -> Predicate[float | None]: ...
def isHigherThanOrEqual(value: float) -> Predicate[float | None]: ...
def isLessThan(value: float) -> Predicate[float | None]: ...
def isLessThanOrEqual(value: float) -> Predicate[float | None]: ...
def Not(predicate: Predicate[T | None] | Callable[[T | None], bool]) -> Predicate[T | None]: ...
def not_(predicate: Predicate[T | None] | Callable[[T | None], bool]) -> Predicate[T | None]: ...
def NotStrict(predicate: Predicate[T] | Callable[[T], bool]) -> Predicate[T]: ...
def notStrict(predicate: Predicate[T] | Callable[[T], bool]) -> Predicate[T]: ...
def allOf(predicates: list[Predicate[T] | Callable[[T], bool]]) -> Predicate[T]: ...
def anyOf(predicates: list[Predicate[T] | Callable[[T], bool]]) -> Predicate[T]: ...
def noneOf(predicates: list[Predicate[T] | Callable[[T], bool]]) -> Predicate[T]: ...
def hasKey(key: Any) -> Predicate[Mapping[Any, Any] | None]: ...
def hasValue(value: Any) -> Predicate[Mapping[Any, Any] | None]: ...
def isKeyIn(mapping: Mapping[Any, Any]) -> Predicate[Any]: ...
def isValueIn(mapping: Mapping[Any, Any]) -> Predicate[Any]: ...
