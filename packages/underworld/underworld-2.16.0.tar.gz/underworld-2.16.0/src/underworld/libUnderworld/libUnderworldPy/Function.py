# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
import _Function

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _Function.SWIG_PyInstanceMethod_New
_swig_new_static_method = _Function.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import underworld.libUnderworld.libUnderworldPy.StGermain
import underworld.libUnderworld.libUnderworldPy.StgDomain
import underworld.libUnderworld.libUnderworldPy.StgFEM
import underworld.libUnderworld.libUnderworldPy.PICellerator
class FunctionIO(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    Scalar = _Function.FunctionIO_Scalar
    Vector = _Function.FunctionIO_Vector
    SymmetricTensor = _Function.FunctionIO_SymmetricTensor
    Tensor = _Function.FunctionIO_Tensor
    Array = _Function.FunctionIO_Array
    __swig_destroy__ = _Function.delete_FunctionIO
    clone = _swig_new_instance_method(_Function.FunctionIO_clone)
    cloneType = _swig_new_instance_method(_Function.FunctionIO_cloneType)
    iotype = _swig_new_instance_method(_Function.FunctionIO_iotype)
    size = _swig_new_instance_method(_Function.FunctionIO_size)
    resize = _swig_new_instance_method(_Function.FunctionIO_resize)
    _iotype = property(_Function.FunctionIO__iotype_get, _Function.FunctionIO__iotype_set)
    dataRaw = _swig_new_instance_method(_Function.FunctionIO_dataRaw)

# Register FunctionIO in _Function:
_Function.FunctionIO_swigregister(FunctionIO)
class Function(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    getFunction = _swig_new_instance_method(_Function.Function_getFunction)
    __swig_destroy__ = _Function.delete_Function
    set_pyfnerrorheader = _swig_new_instance_method(_Function.Function_set_pyfnerrorheader)

# Register Function in _Function:
_Function.Function_swigregister(Function)
class Input(Function):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _Function.Input_swiginit(self, _Function.new_Input())
    __swig_destroy__ = _Function.delete_Input

# Register Input in _Function:
_Function.Input_swigregister(Input)
class SafeMaths(Function):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, fn):
        _Function.SafeMaths_swiginit(self, _Function.new_SafeMaths(fn))
    __swig_destroy__ = _Function.delete_SafeMaths

# Register SafeMaths in _Function:
_Function.SafeMaths_swigregister(SafeMaths)
class CustomException(Function):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, fn_input, fn_condition, fn_print=None):
        _Function.CustomException_swiginit(self, _Function.new_CustomException(fn_input, fn_condition, fn_print))
    __swig_destroy__ = _Function.delete_CustomException

# Register CustomException in _Function:
_Function.CustomException_swigregister(CustomException)
class MinMax(Function):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, fn, fn_norm=None, fn_auxiliary=None):
        _Function.MinMax_swiginit(self, _Function.new_MinMax(fn, fn_norm, fn_auxiliary))
    __swig_destroy__ = _Function.delete_MinMax
    getMin = _swig_new_instance_method(_Function.MinMax_getMin)
    getMax = _swig_new_instance_method(_Function.MinMax_getMax)
    getMinGlobal = _swig_new_instance_method(_Function.MinMax_getMinGlobal)
    getMaxGlobal = _swig_new_instance_method(_Function.MinMax_getMaxGlobal)
    getMinRank = _swig_new_instance_method(_Function.MinMax_getMinRank)
    getMaxRank = _swig_new_instance_method(_Function.MinMax_getMaxRank)
    getMinAux = _swig_new_instance_method(_Function.MinMax_getMinAux)
    getMaxAux = _swig_new_instance_method(_Function.MinMax_getMaxAux)
    reset = _swig_new_instance_method(_Function.MinMax_reset)

# Register MinMax in _Function:
_Function.MinMax_swigregister(MinMax)
class Count(Function):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, fn_input):
        _Function.Count_swiginit(self, _Function.new_Count(fn_input))
    __swig_destroy__ = _Function.delete_Count
    count = property(_Function.Count_count_get, _Function.Count_count_set)
    reset = _swig_new_instance_method(_Function.Count_reset)

# Register Count in _Function:
_Function.Count_swigregister(Count)
class At(Function):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, fn, component):
        _Function.At_swiginit(self, _Function.new_At(fn, component))
    __swig_destroy__ = _Function.delete_At

# Register At in _Function:
_Function.At_swigregister(At)
class Binary(Function):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Function.delete_Binary

# Register Binary in _Function:
_Function.Binary_swigregister(Binary)
class Add(Binary):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, fn1, fn2):
        _Function.Add_swiginit(self, _Function.new_Add(fn1, fn2))
    __swig_destroy__ = _Function.delete_Add

# Register Add in _Function:
_Function.Add_swigregister(Add)
class Subtract(Binary):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, fn1, fn2):
        _Function.Subtract_swiginit(self, _Function.new_Subtract(fn1, fn2))
    __swig_destroy__ = _Function.delete_Subtract

# Register Subtract in _Function:
_Function.Subtract_swigregister(Subtract)
class Multiply(Binary):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, fn1, fn2):
        _Function.Multiply_swiginit(self, _Function.new_Multiply(fn1, fn2))
    __swig_destroy__ = _Function.delete_Multiply

# Register Multiply in _Function:
_Function.Multiply_swigregister(Multiply)
class Divide(Binary):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, fn1, fn2):
        _Function.Divide_swiginit(self, _Function.new_Divide(fn1, fn2))
    __swig_destroy__ = _Function.delete_Divide

# Register Divide in _Function:
_Function.Divide_swigregister(Divide)
class Dot(Binary):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, fn1, fn2):
        _Function.Dot_swiginit(self, _Function.new_Dot(fn1, fn2))
    __swig_destroy__ = _Function.delete_Dot

# Register Dot in _Function:
_Function.Dot_swigregister(Dot)
class Pow(Binary):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, fn1, fn2):
        _Function.Pow_swiginit(self, _Function.new_Pow(fn1, fn2))
    __swig_destroy__ = _Function.delete_Pow

# Register Pow in _Function:
_Function.Pow_swigregister(Pow)
class Min(Binary):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, fn1, fn2):
        _Function.Min_swiginit(self, _Function.new_Min(fn1, fn2))
    __swig_destroy__ = _Function.delete_Min

# Register Min in _Function:
_Function.Min_swigregister(Min)
class Max(Binary):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, fn1, fn2):
        _Function.Max_swiginit(self, _Function.new_Max(fn1, fn2))
    __swig_destroy__ = _Function.delete_Max

# Register Max in _Function:
_Function.Max_swigregister(Max)
class Constant(Function):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, constio):
        _Function.Constant_swiginit(self, _Function.new_Constant(constio))
    set_value = _swig_new_instance_method(_Function.Constant_set_value)
    __swig_destroy__ = _Function.delete_Constant

# Register Constant in _Function:
_Function.Constant_swigregister(Constant)
class SwarmVariableFn(Function):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, swarmvariable):
        _Function.SwarmVariableFn_swiginit(self, _Function.new_SwarmVariableFn(swarmvariable))
    __swig_destroy__ = _Function.delete_SwarmVariableFn

# Register SwarmVariableFn in _Function:
_Function.SwarmVariableFn_swigregister(SwarmVariableFn)
class ParticleFound(Function):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, swarm):
        _Function.ParticleFound_swiginit(self, _Function.new_ParticleFound(swarm))
    __swig_destroy__ = _Function.delete_ParticleFound

# Register ParticleFound in _Function:
_Function.ParticleFound_swigregister(ParticleFound)
class FeVariableFn(Function):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, fevariable):
        _Function.FeVariableFn_swiginit(self, _Function.new_FeVariableFn(fevariable))
    __swig_destroy__ = _Function.delete_FeVariableFn

# Register FeVariableFn in _Function:
_Function.FeVariableFn_swigregister(FeVariableFn)
class GradFeVariableFn(Function):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, fevariable):
        _Function.GradFeVariableFn_swiginit(self, _Function.new_GradFeVariableFn(fevariable))
    __swig_destroy__ = _Function.delete_GradFeVariableFn

# Register GradFeVariableFn in _Function:
_Function.GradFeVariableFn_swigregister(GradFeVariableFn)
class Map(Function):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, keyFunc, defaultFunc=None):
        _Function.Map_swiginit(self, _Function.new_Map(keyFunc, defaultFunc))
    insert = _swig_new_instance_method(_Function.Map_insert)
    __swig_destroy__ = _Function.delete_Map

# Register Map in _Function:
_Function.Map_swigregister(Map)
class TensorFunc(Function):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    get_symmetric = _Function.TensorFunc_get_symmetric
    get_antisymmetric = _Function.TensorFunc_get_antisymmetric
    second_invariant = _Function.TensorFunc_second_invariant
    get_deviatoric = _Function.TensorFunc_get_deviatoric

    def __init__(self, fn, partFunc):
        _Function.TensorFunc_swiginit(self, _Function.new_TensorFunc(fn, partFunc))
    __swig_destroy__ = _Function.delete_TensorFunc

# Register TensorFunc in _Function:
_Function.TensorFunc_swigregister(TensorFunc)
class SolA(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    sigma = property(_Function.SolA_sigma_get, _Function.SolA_sigma_set)
    Z = property(_Function.SolA_Z_get, _Function.SolA_Z_set)
    n = property(_Function.SolA_n_get, _Function.SolA_n_set)
    m = property(_Function.SolA_m_get, _Function.SolA_m_set)

    def __init__(self, sigma, Z, n, m):
        _Function.SolA_swiginit(self, _Function.new_SolA(sigma, Z, n, m))
    __swig_destroy__ = _Function.delete_SolA
    velocity = _swig_new_instance_method(_Function.SolA_velocity)
    pressure = _swig_new_instance_method(_Function.SolA_pressure)
    stress = _swig_new_instance_method(_Function.SolA_stress)
    strainrate = _swig_new_instance_method(_Function.SolA_strainrate)
    viscosity = _swig_new_instance_method(_Function.SolA_viscosity)
    bodyforce = _swig_new_instance_method(_Function.SolA_bodyforce)

# Register SolA in _Function:
_Function.SolA_swigregister(SolA)
class SolB(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    sigma = property(_Function.SolB_sigma_get, _Function.SolB_sigma_set)
    Z = property(_Function.SolB_Z_get, _Function.SolB_Z_set)
    n = property(_Function.SolB_n_get, _Function.SolB_n_set)
    m = property(_Function.SolB_m_get, _Function.SolB_m_set)

    def __init__(self, sigma, Z, n, m):
        _Function.SolB_swiginit(self, _Function.new_SolB(sigma, Z, n, m))
    __swig_destroy__ = _Function.delete_SolB
    velocity = _swig_new_instance_method(_Function.SolB_velocity)
    pressure = _swig_new_instance_method(_Function.SolB_pressure)
    stress = _swig_new_instance_method(_Function.SolB_stress)
    strainrate = _swig_new_instance_method(_Function.SolB_strainrate)
    viscosity = _swig_new_instance_method(_Function.SolB_viscosity)
    bodyforce = _swig_new_instance_method(_Function.SolB_bodyforce)

# Register SolB in _Function:
_Function.SolB_swigregister(SolB)
class SolC(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, sigma, viscosity, xc, nmodes):
        _Function.SolC_swiginit(self, _Function.new_SolC(sigma, viscosity, xc, nmodes))
    __swig_destroy__ = _Function.delete_SolC
    sigma = property(_Function.SolC_sigma_get, _Function.SolC_sigma_set)
    visc = property(_Function.SolC_visc_get, _Function.SolC_visc_set)
    xc = property(_Function.SolC_xc_get, _Function.SolC_xc_set)
    nmodes = property(_Function.SolC_nmodes_get, _Function.SolC_nmodes_set)
    velocity = _swig_new_instance_method(_Function.SolC_velocity)
    pressure = _swig_new_instance_method(_Function.SolC_pressure)
    stress = _swig_new_instance_method(_Function.SolC_stress)
    strainrate = _swig_new_instance_method(_Function.SolC_strainrate)
    viscosity = _swig_new_instance_method(_Function.SolC_viscosity)
    bodyforce = _swig_new_instance_method(_Function.SolC_bodyforce)

# Register SolC in _Function:
_Function.SolC_swigregister(SolC)
class SolCx(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, viscosityA, viscosityB, xc, nz):
        _Function.SolCx_swiginit(self, _Function.new_SolCx(viscosityA, viscosityB, xc, nz))
    __swig_destroy__ = _Function.delete_SolCx
    viscosityA = property(_Function.SolCx_viscosityA_get, _Function.SolCx_viscosityA_set)
    viscosityB = property(_Function.SolCx_viscosityB_get, _Function.SolCx_viscosityB_set)
    xc = property(_Function.SolCx_xc_get, _Function.SolCx_xc_set)
    nz = property(_Function.SolCx_nz_get, _Function.SolCx_nz_set)
    velocity = _swig_new_instance_method(_Function.SolCx_velocity)
    pressure = _swig_new_instance_method(_Function.SolCx_pressure)
    stress = _swig_new_instance_method(_Function.SolCx_stress)
    strainrate = _swig_new_instance_method(_Function.SolCx_strainrate)
    viscosity = _swig_new_instance_method(_Function.SolCx_viscosity)
    bodyforce = _swig_new_instance_method(_Function.SolCx_bodyforce)

# Register SolCx in _Function:
_Function.SolCx_swigregister(SolCx)
class SolDA(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, sigma_0, x_c, x_w, eta_A, eta_B, z_c, nmodes):
        _Function.SolDA_swiginit(self, _Function.new_SolDA(sigma_0, x_c, x_w, eta_A, eta_B, z_c, nmodes))
    __swig_destroy__ = _Function.delete_SolDA
    sigma_0 = property(_Function.SolDA_sigma_0_get, _Function.SolDA_sigma_0_set)
    x_c = property(_Function.SolDA_x_c_get, _Function.SolDA_x_c_set)
    x_w = property(_Function.SolDA_x_w_get, _Function.SolDA_x_w_set)
    eta_A = property(_Function.SolDA_eta_A_get, _Function.SolDA_eta_A_set)
    eta_B = property(_Function.SolDA_eta_B_get, _Function.SolDA_eta_B_set)
    z_c = property(_Function.SolDA_z_c_get, _Function.SolDA_z_c_set)
    nmodes = property(_Function.SolDA_nmodes_get, _Function.SolDA_nmodes_set)
    minp = property(_Function.SolDA_minp_get, _Function.SolDA_minp_set)
    maxp = property(_Function.SolDA_maxp_get, _Function.SolDA_maxp_set)
    velocity = _swig_new_instance_method(_Function.SolDA_velocity)
    pressure = _swig_new_instance_method(_Function.SolDA_pressure)
    stress = _swig_new_instance_method(_Function.SolDA_stress)
    strainrate = _swig_new_instance_method(_Function.SolDA_strainrate)
    viscosity = _swig_new_instance_method(_Function.SolDA_viscosity)
    bodyforce = _swig_new_instance_method(_Function.SolDA_bodyforce)

# Register SolDA in _Function:
_Function.SolDA_swigregister(SolDA)
class SolDB2d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _Function.SolDB2d_swiginit(self, _Function.new_SolDB2d())
    __swig_destroy__ = _Function.delete_SolDB2d
    bodyforce = _swig_new_instance_method(_Function.SolDB2d_bodyforce)
    viscosity = _swig_new_instance_method(_Function.SolDB2d_viscosity)
    pressure = _swig_new_instance_method(_Function.SolDB2d_pressure)
    strainrate = _swig_new_instance_method(_Function.SolDB2d_strainrate)
    stress = _swig_new_instance_method(_Function.SolDB2d_stress)
    velocity = _swig_new_instance_method(_Function.SolDB2d_velocity)

# Register SolDB2d in _Function:
_Function.SolDB2d_swigregister(SolDB2d)
class SolDB3d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, Beta):
        _Function.SolDB3d_swiginit(self, _Function.new_SolDB3d(Beta))
    __swig_destroy__ = _Function.delete_SolDB3d
    Beta = property(_Function.SolDB3d_Beta_get, _Function.SolDB3d_Beta_set)
    bodyforce = _swig_new_instance_method(_Function.SolDB3d_bodyforce)
    viscosity = _swig_new_instance_method(_Function.SolDB3d_viscosity)
    pressure = _swig_new_instance_method(_Function.SolDB3d_pressure)
    strainrate = _swig_new_instance_method(_Function.SolDB3d_strainrate)
    stress = _swig_new_instance_method(_Function.SolDB3d_stress)
    velocity = _swig_new_instance_method(_Function.SolDB3d_velocity)

# Register SolDB3d in _Function:
_Function.SolDB3d_swigregister(SolDB3d)
class SolH(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, sigma_0, x_c, y_c, eta_0, nmodes):
        _Function.SolH_swiginit(self, _Function.new_SolH(sigma_0, x_c, y_c, eta_0, nmodes))
    __swig_destroy__ = _Function.delete_SolH
    sigma_0 = property(_Function.SolH_sigma_0_get, _Function.SolH_sigma_0_set)
    x_c = property(_Function.SolH_x_c_get, _Function.SolH_x_c_set)
    y_c = property(_Function.SolH_y_c_get, _Function.SolH_y_c_set)
    eta_0 = property(_Function.SolH_eta_0_get, _Function.SolH_eta_0_set)
    nmodes = property(_Function.SolH_nmodes_get, _Function.SolH_nmodes_set)
    velocity = _swig_new_instance_method(_Function.SolH_velocity)
    pressure = _swig_new_instance_method(_Function.SolH_pressure)
    stress = _swig_new_instance_method(_Function.SolH_stress)
    strainrate = _swig_new_instance_method(_Function.SolH_strainrate)
    viscosity = _swig_new_instance_method(_Function.SolH_viscosity)
    bodyforce = _swig_new_instance_method(_Function.SolH_bodyforce)

# Register SolH in _Function:
_Function.SolH_swigregister(SolH)
class SolHA(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, sigma_0, x_c, x_w, y_c, y_w, eta_0, nmodes):
        _Function.SolHA_swiginit(self, _Function.new_SolHA(sigma_0, x_c, x_w, y_c, y_w, eta_0, nmodes))
    __swig_destroy__ = _Function.delete_SolHA
    sigma_0 = property(_Function.SolHA_sigma_0_get, _Function.SolHA_sigma_0_set)
    x_c = property(_Function.SolHA_x_c_get, _Function.SolHA_x_c_set)
    x_w = property(_Function.SolHA_x_w_get, _Function.SolHA_x_w_set)
    y_c = property(_Function.SolHA_y_c_get, _Function.SolHA_y_c_set)
    y_w = property(_Function.SolHA_y_w_get, _Function.SolHA_y_w_set)
    eta_0 = property(_Function.SolHA_eta_0_get, _Function.SolHA_eta_0_set)
    nmodes = property(_Function.SolHA_nmodes_get, _Function.SolHA_nmodes_set)
    minpx = property(_Function.SolHA_minpx_get, _Function.SolHA_minpx_set)
    maxpx = property(_Function.SolHA_maxpx_get, _Function.SolHA_maxpx_set)
    minpy = property(_Function.SolHA_minpy_get, _Function.SolHA_minpy_set)
    maxpy = property(_Function.SolHA_maxpy_get, _Function.SolHA_maxpy_set)
    velocity = _swig_new_instance_method(_Function.SolHA_velocity)
    pressure = _swig_new_instance_method(_Function.SolHA_pressure)
    stress = _swig_new_instance_method(_Function.SolHA_stress)
    strainrate = _swig_new_instance_method(_Function.SolHA_strainrate)
    viscosity = _swig_new_instance_method(_Function.SolHA_viscosity)
    bodyforce = _swig_new_instance_method(_Function.SolHA_bodyforce)

# Register SolHA in _Function:
_Function.SolHA_swigregister(SolHA)
class SolKx(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, sigma, nx, nz, B):
        _Function.SolKx_swiginit(self, _Function.new_SolKx(sigma, nx, nz, B))
    __swig_destroy__ = _Function.delete_SolKx
    sigma = property(_Function.SolKx_sigma_get, _Function.SolKx_sigma_set)
    nx = property(_Function.SolKx_nx_get, _Function.SolKx_nx_set)
    nz = property(_Function.SolKx_nz_get, _Function.SolKx_nz_set)
    B = property(_Function.SolKx_B_get, _Function.SolKx_B_set)
    velocity = _swig_new_instance_method(_Function.SolKx_velocity)
    pressure = _swig_new_instance_method(_Function.SolKx_pressure)
    stress = _swig_new_instance_method(_Function.SolKx_stress)
    strainrate = _swig_new_instance_method(_Function.SolKx_strainrate)
    viscosity = _swig_new_instance_method(_Function.SolKx_viscosity)
    bodyforce = _swig_new_instance_method(_Function.SolKx_bodyforce)

# Register SolKx in _Function:
_Function.SolKx_swigregister(SolKx)
class SolKz(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, sigma, nx, nz, B):
        _Function.SolKz_swiginit(self, _Function.new_SolKz(sigma, nx, nz, B))
    __swig_destroy__ = _Function.delete_SolKz
    sigma = property(_Function.SolKz_sigma_get, _Function.SolKz_sigma_set)
    nx = property(_Function.SolKz_nx_get, _Function.SolKz_nx_set)
    nz = property(_Function.SolKz_nz_get, _Function.SolKz_nz_set)
    B = property(_Function.SolKz_B_get, _Function.SolKz_B_set)
    velocity = _swig_new_instance_method(_Function.SolKz_velocity)
    pressure = _swig_new_instance_method(_Function.SolKz_pressure)
    stress = _swig_new_instance_method(_Function.SolKz_stress)
    strainrate = _swig_new_instance_method(_Function.SolKz_strainrate)
    viscosity = _swig_new_instance_method(_Function.SolKz_viscosity)
    bodyforce = _swig_new_instance_method(_Function.SolKz_bodyforce)

# Register SolKz in _Function:
_Function.SolKz_swigregister(SolKz)
class SolM(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, eta0, m, n, r):
        _Function.SolM_swiginit(self, _Function.new_SolM(eta0, m, n, r))
    __swig_destroy__ = _Function.delete_SolM
    eta0 = property(_Function.SolM_eta0_get, _Function.SolM_eta0_set)
    m = property(_Function.SolM_m_get, _Function.SolM_m_set)
    n = property(_Function.SolM_n_get, _Function.SolM_n_set)
    r = property(_Function.SolM_r_get, _Function.SolM_r_set)
    km = property(_Function.SolM_km_get, _Function.SolM_km_set)
    kn = property(_Function.SolM_kn_get, _Function.SolM_kn_set)
    kr = property(_Function.SolM_kr_get, _Function.SolM_kr_set)
    velocity = _swig_new_instance_method(_Function.SolM_velocity)
    pressure = _swig_new_instance_method(_Function.SolM_pressure)
    stress = _swig_new_instance_method(_Function.SolM_stress)
    strainrate = _swig_new_instance_method(_Function.SolM_strainrate)
    viscosity = _swig_new_instance_method(_Function.SolM_viscosity)
    bodyforce = _swig_new_instance_method(_Function.SolM_bodyforce)

# Register SolM in _Function:
_Function.SolM_swigregister(SolM)
class SolNL(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, eta0, n, r):
        _Function.SolNL_swiginit(self, _Function.new_SolNL(eta0, n, r))
    __swig_destroy__ = _Function.delete_SolNL
    eta0 = property(_Function.SolNL_eta0_get, _Function.SolNL_eta0_set)
    n = property(_Function.SolNL_n_get, _Function.SolNL_n_set)
    r = property(_Function.SolNL_r_get, _Function.SolNL_r_set)
    kn = property(_Function.SolNL_kn_get, _Function.SolNL_kn_set)
    alpha = property(_Function.SolNL_alpha_get, _Function.SolNL_alpha_set)
    velocity = _swig_new_instance_method(_Function.SolNL_velocity)
    pressure = _swig_new_instance_method(_Function.SolNL_pressure)
    stress = _swig_new_instance_method(_Function.SolNL_stress)
    strainrate = _swig_new_instance_method(_Function.SolNL_strainrate)
    viscosity = _swig_new_instance_method(_Function.SolNL_viscosity)
    bodyforce = _swig_new_instance_method(_Function.SolNL_bodyforce)

# Register SolNL in _Function:
_Function.SolNL_swigregister(SolNL)
class IOIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    get = _swig_new_instance_method(_Function.IOIterator_get)
    reset = _swig_new_instance_method(_Function.IOIterator_reset)
    size = _swig_new_instance_method(_Function.IOIterator_size)

# Register IOIterator in _Function:
_Function.IOIterator_swigregister(IOIterator)
class FunctionIOIter(IOIterator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, fIO):
        _Function.FunctionIOIter_swiginit(self, _Function.new_FunctionIOIter(fIO))
    _setNewIO = _swig_new_instance_method(_Function.FunctionIOIter__setNewIO)
    __swig_destroy__ = _Function.delete_FunctionIOIter

# Register FunctionIOIter in _Function:
_Function.FunctionIOIter_swigregister(FunctionIOIter)
class MeshIndexSet(IOIterator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, indexSet, mesh):
        _Function.MeshIndexSet_swiginit(self, _Function.new_MeshIndexSet(indexSet, mesh))
    __swig_destroy__ = _Function.delete_MeshIndexSet

# Register MeshIndexSet in _Function:
_Function.MeshIndexSet_swigregister(MeshIndexSet)
class NumpyInput(IOIterator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arr, inputType):
        _Function.NumpyInput_swiginit(self, _Function.new_NumpyInput(arr, inputType))
    __swig_destroy__ = _Function.delete_NumpyInput
    grab = _swig_new_instance_method(_Function.NumpyInput_grab)

# Register NumpyInput in _Function:
_Function.NumpyInput_swigregister(NumpyInput)
class SwarmInput(IOIterator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, positionVariable):
        _Function.SwarmInput_swiginit(self, _Function.new_SwarmInput(positionVariable))
    __swig_destroy__ = _Function.delete_SwarmInput

# Register SwarmInput in _Function:
_Function.SwarmInput_swigregister(SwarmInput)
class IntegrationSwarmInput(IOIterator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, _intSwarm):
        _Function.IntegrationSwarmInput_swiginit(self, _Function.new_IntegrationSwarmInput(_intSwarm))
    __swig_destroy__ = _Function.delete_IntegrationSwarmInput

# Register IntegrationSwarmInput in _Function:
_Function.IntegrationSwarmInput_swigregister(IntegrationSwarmInput)
class Query(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, function):
        _Function.Query_swiginit(self, _Function.new_Query(function))
    query = _swig_new_instance_method(_Function.Query_query)
    __swig_destroy__ = _Function.delete_Query

# Register Query in _Function:
_Function.Query_swigregister(Query)
class Polygon(Function):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, _fn, IN_ARRAY2):
        _Function.Polygon_swiginit(self, _Function.new_Polygon(_fn, IN_ARRAY2))
    __swig_destroy__ = _Function.delete_Polygon

# Register Polygon in _Function:
_Function.Polygon_swigregister(Polygon)
class Conditional(Function):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _Function.Conditional_swiginit(self, _Function.new_Conditional())
    insert = _swig_new_instance_method(_Function.Conditional_insert)
    __swig_destroy__ = _Function.delete_Conditional

# Register Conditional in _Function:
_Function.Conditional_swigregister(Conditional)
class IO_bool(FunctionIO):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, vec_size, iotype):
        _Function.IO_bool_swiginit(self, _Function.new_IO_bool(vec_size, iotype))
    clone = _swig_new_instance_method(_Function.IO_bool_clone)
    cloneType = _swig_new_instance_method(_Function.IO_bool_cloneType)
    __swig_destroy__ = _Function.delete_IO_bool
    data = _swig_new_instance_method(_Function.IO_bool_data)
    at = _swig_new_instance_method(_Function.IO_bool_at)
    value = _swig_new_instance_method(_Function.IO_bool_value)
    dataRaw = _swig_new_instance_method(_Function.IO_bool_dataRaw)

# Register IO_bool in _Function:
_Function.IO_bool_swigregister(IO_bool)
class IO_char(FunctionIO):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, vec_size, iotype):
        _Function.IO_char_swiginit(self, _Function.new_IO_char(vec_size, iotype))
    clone = _swig_new_instance_method(_Function.IO_char_clone)
    cloneType = _swig_new_instance_method(_Function.IO_char_cloneType)
    __swig_destroy__ = _Function.delete_IO_char
    data = _swig_new_instance_method(_Function.IO_char_data)
    at = _swig_new_instance_method(_Function.IO_char_at)
    value = _swig_new_instance_method(_Function.IO_char_value)
    dataRaw = _swig_new_instance_method(_Function.IO_char_dataRaw)

# Register IO_char in _Function:
_Function.IO_char_swigregister(IO_char)
class IO_short(FunctionIO):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, vec_size, iotype):
        _Function.IO_short_swiginit(self, _Function.new_IO_short(vec_size, iotype))
    clone = _swig_new_instance_method(_Function.IO_short_clone)
    cloneType = _swig_new_instance_method(_Function.IO_short_cloneType)
    __swig_destroy__ = _Function.delete_IO_short
    data = _swig_new_instance_method(_Function.IO_short_data)
    at = _swig_new_instance_method(_Function.IO_short_at)
    value = _swig_new_instance_method(_Function.IO_short_value)
    dataRaw = _swig_new_instance_method(_Function.IO_short_dataRaw)

# Register IO_short in _Function:
_Function.IO_short_swigregister(IO_short)
class IO_unsigned(FunctionIO):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, vec_size, iotype):
        _Function.IO_unsigned_swiginit(self, _Function.new_IO_unsigned(vec_size, iotype))
    clone = _swig_new_instance_method(_Function.IO_unsigned_clone)
    cloneType = _swig_new_instance_method(_Function.IO_unsigned_cloneType)
    __swig_destroy__ = _Function.delete_IO_unsigned
    data = _swig_new_instance_method(_Function.IO_unsigned_data)
    at = _swig_new_instance_method(_Function.IO_unsigned_at)
    value = _swig_new_instance_method(_Function.IO_unsigned_value)
    dataRaw = _swig_new_instance_method(_Function.IO_unsigned_dataRaw)

# Register IO_unsigned in _Function:
_Function.IO_unsigned_swigregister(IO_unsigned)
class IO_int(FunctionIO):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, vec_size, iotype):
        _Function.IO_int_swiginit(self, _Function.new_IO_int(vec_size, iotype))
    clone = _swig_new_instance_method(_Function.IO_int_clone)
    cloneType = _swig_new_instance_method(_Function.IO_int_cloneType)
    __swig_destroy__ = _Function.delete_IO_int
    data = _swig_new_instance_method(_Function.IO_int_data)
    at = _swig_new_instance_method(_Function.IO_int_at)
    value = _swig_new_instance_method(_Function.IO_int_value)
    dataRaw = _swig_new_instance_method(_Function.IO_int_dataRaw)

# Register IO_int in _Function:
_Function.IO_int_swigregister(IO_int)
class IO_float(FunctionIO):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, vec_size, iotype):
        _Function.IO_float_swiginit(self, _Function.new_IO_float(vec_size, iotype))
    clone = _swig_new_instance_method(_Function.IO_float_clone)
    cloneType = _swig_new_instance_method(_Function.IO_float_cloneType)
    __swig_destroy__ = _Function.delete_IO_float
    data = _swig_new_instance_method(_Function.IO_float_data)
    at = _swig_new_instance_method(_Function.IO_float_at)
    value = _swig_new_instance_method(_Function.IO_float_value)
    dataRaw = _swig_new_instance_method(_Function.IO_float_dataRaw)

# Register IO_float in _Function:
_Function.IO_float_swigregister(IO_float)
class IO_double(FunctionIO):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, vec_size, iotype):
        _Function.IO_double_swiginit(self, _Function.new_IO_double(vec_size, iotype))
    clone = _swig_new_instance_method(_Function.IO_double_clone)
    cloneType = _swig_new_instance_method(_Function.IO_double_cloneType)
    __swig_destroy__ = _Function.delete_IO_double
    data = _swig_new_instance_method(_Function.IO_double_data)
    at = _swig_new_instance_method(_Function.IO_double_at)
    value = _swig_new_instance_method(_Function.IO_double_value)
    dataRaw = _swig_new_instance_method(_Function.IO_double_dataRaw)

# Register IO_double in _Function:
_Function.IO_double_swigregister(IO_double)
class MathUnary_cos(Function):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, fn):
        _Function.MathUnary_cos_swiginit(self, _Function.new_MathUnary_cos(fn))
    __swig_destroy__ = _Function.delete_MathUnary_cos

# Register MathUnary_cos in _Function:
_Function.MathUnary_cos_swigregister(MathUnary_cos)
class MathUnary_sin(Function):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, fn):
        _Function.MathUnary_sin_swiginit(self, _Function.new_MathUnary_sin(fn))
    __swig_destroy__ = _Function.delete_MathUnary_sin

# Register MathUnary_sin in _Function:
_Function.MathUnary_sin_swigregister(MathUnary_sin)
class MathUnary_tan(Function):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, fn):
        _Function.MathUnary_tan_swiginit(self, _Function.new_MathUnary_tan(fn))
    __swig_destroy__ = _Function.delete_MathUnary_tan

# Register MathUnary_tan in _Function:
_Function.MathUnary_tan_swigregister(MathUnary_tan)
class MathUnary_acos(Function):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, fn):
        _Function.MathUnary_acos_swiginit(self, _Function.new_MathUnary_acos(fn))
    __swig_destroy__ = _Function.delete_MathUnary_acos

# Register MathUnary_acos in _Function:
_Function.MathUnary_acos_swigregister(MathUnary_acos)
class MathUnary_asin(Function):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, fn):
        _Function.MathUnary_asin_swiginit(self, _Function.new_MathUnary_asin(fn))
    __swig_destroy__ = _Function.delete_MathUnary_asin

# Register MathUnary_asin in _Function:
_Function.MathUnary_asin_swigregister(MathUnary_asin)
class MathUnary_atan(Function):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, fn):
        _Function.MathUnary_atan_swiginit(self, _Function.new_MathUnary_atan(fn))
    __swig_destroy__ = _Function.delete_MathUnary_atan

# Register MathUnary_atan in _Function:
_Function.MathUnary_atan_swigregister(MathUnary_atan)
class MathUnary_cosh(Function):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, fn):
        _Function.MathUnary_cosh_swiginit(self, _Function.new_MathUnary_cosh(fn))
    __swig_destroy__ = _Function.delete_MathUnary_cosh

# Register MathUnary_cosh in _Function:
_Function.MathUnary_cosh_swigregister(MathUnary_cosh)
class MathUnary_sinh(Function):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, fn):
        _Function.MathUnary_sinh_swiginit(self, _Function.new_MathUnary_sinh(fn))
    __swig_destroy__ = _Function.delete_MathUnary_sinh

# Register MathUnary_sinh in _Function:
_Function.MathUnary_sinh_swigregister(MathUnary_sinh)
class MathUnary_tanh(Function):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, fn):
        _Function.MathUnary_tanh_swiginit(self, _Function.new_MathUnary_tanh(fn))
    __swig_destroy__ = _Function.delete_MathUnary_tanh

# Register MathUnary_tanh in _Function:
_Function.MathUnary_tanh_swigregister(MathUnary_tanh)
class MathUnary_acosh(Function):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, fn):
        _Function.MathUnary_acosh_swiginit(self, _Function.new_MathUnary_acosh(fn))
    __swig_destroy__ = _Function.delete_MathUnary_acosh

# Register MathUnary_acosh in _Function:
_Function.MathUnary_acosh_swigregister(MathUnary_acosh)
class MathUnary_asinh(Function):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, fn):
        _Function.MathUnary_asinh_swiginit(self, _Function.new_MathUnary_asinh(fn))
    __swig_destroy__ = _Function.delete_MathUnary_asinh

# Register MathUnary_asinh in _Function:
_Function.MathUnary_asinh_swigregister(MathUnary_asinh)
class MathUnary_atanh(Function):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, fn):
        _Function.MathUnary_atanh_swiginit(self, _Function.new_MathUnary_atanh(fn))
    __swig_destroy__ = _Function.delete_MathUnary_atanh

# Register MathUnary_atanh in _Function:
_Function.MathUnary_atanh_swigregister(MathUnary_atanh)
class MathUnary_exp(Function):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, fn):
        _Function.MathUnary_exp_swiginit(self, _Function.new_MathUnary_exp(fn))
    __swig_destroy__ = _Function.delete_MathUnary_exp

# Register MathUnary_exp in _Function:
_Function.MathUnary_exp_swigregister(MathUnary_exp)
class MathUnary_log(Function):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, fn):
        _Function.MathUnary_log_swiginit(self, _Function.new_MathUnary_log(fn))
    __swig_destroy__ = _Function.delete_MathUnary_log

# Register MathUnary_log in _Function:
_Function.MathUnary_log_swigregister(MathUnary_log)
class MathUnary_log2(Function):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, fn):
        _Function.MathUnary_log2_swiginit(self, _Function.new_MathUnary_log2(fn))
    __swig_destroy__ = _Function.delete_MathUnary_log2

# Register MathUnary_log2 in _Function:
_Function.MathUnary_log2_swigregister(MathUnary_log2)
class MathUnary_log10(Function):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, fn):
        _Function.MathUnary_log10_swiginit(self, _Function.new_MathUnary_log10(fn))
    __swig_destroy__ = _Function.delete_MathUnary_log10

# Register MathUnary_log10 in _Function:
_Function.MathUnary_log10_swigregister(MathUnary_log10)
class MathUnary_sqrt(Function):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, fn):
        _Function.MathUnary_sqrt_swiginit(self, _Function.new_MathUnary_sqrt(fn))
    __swig_destroy__ = _Function.delete_MathUnary_sqrt

# Register MathUnary_sqrt in _Function:
_Function.MathUnary_sqrt_swigregister(MathUnary_sqrt)
class MathUnary_erf(Function):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, fn):
        _Function.MathUnary_erf_swiginit(self, _Function.new_MathUnary_erf(fn))
    __swig_destroy__ = _Function.delete_MathUnary_erf

# Register MathUnary_erf in _Function:
_Function.MathUnary_erf_swigregister(MathUnary_erf)
class MathUnary_erfc(Function):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, fn):
        _Function.MathUnary_erfc_swiginit(self, _Function.new_MathUnary_erfc(fn))
    __swig_destroy__ = _Function.delete_MathUnary_erfc

# Register MathUnary_erfc in _Function:
_Function.MathUnary_erfc_swigregister(MathUnary_erfc)
class MathUnary_abs(Function):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, fn):
        _Function.MathUnary_abs_swiginit(self, _Function.new_MathUnary_abs(fn))
    __swig_destroy__ = _Function.delete_MathUnary_abs

# Register MathUnary_abs in _Function:
_Function.MathUnary_abs_swigregister(MathUnary_abs)
class SolACRTP(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, selfGuy, dimin):
        _Function.SolACRTP_swiginit(self, _Function.new_SolACRTP(selfGuy, dimin))
    velocityFn = property(_Function.SolACRTP_velocityFn_get, _Function.SolACRTP_velocityFn_set)
    pressureFn = property(_Function.SolACRTP_pressureFn_get, _Function.SolACRTP_pressureFn_set)
    stressFn = property(_Function.SolACRTP_stressFn_get, _Function.SolACRTP_stressFn_set)
    strainRateFn = property(_Function.SolACRTP_strainRateFn_get, _Function.SolACRTP_strainRateFn_set)
    viscosityFn = property(_Function.SolACRTP_viscosityFn_get, _Function.SolACRTP_viscosityFn_set)
    bodyForceFn = property(_Function.SolACRTP_bodyForceFn_get, _Function.SolACRTP_bodyForceFn_set)
    dim = property(_Function.SolACRTP_dim_get, _Function.SolACRTP_dim_set)
    __swig_destroy__ = _Function.delete_SolACRTP

# Register SolACRTP in _Function:
_Function.SolACRTP_swigregister(SolACRTP)
class SolBCRTP(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, selfGuy, dimin):
        _Function.SolBCRTP_swiginit(self, _Function.new_SolBCRTP(selfGuy, dimin))
    velocityFn = property(_Function.SolBCRTP_velocityFn_get, _Function.SolBCRTP_velocityFn_set)
    pressureFn = property(_Function.SolBCRTP_pressureFn_get, _Function.SolBCRTP_pressureFn_set)
    stressFn = property(_Function.SolBCRTP_stressFn_get, _Function.SolBCRTP_stressFn_set)
    strainRateFn = property(_Function.SolBCRTP_strainRateFn_get, _Function.SolBCRTP_strainRateFn_set)
    viscosityFn = property(_Function.SolBCRTP_viscosityFn_get, _Function.SolBCRTP_viscosityFn_set)
    bodyForceFn = property(_Function.SolBCRTP_bodyForceFn_get, _Function.SolBCRTP_bodyForceFn_set)
    dim = property(_Function.SolBCRTP_dim_get, _Function.SolBCRTP_dim_set)
    __swig_destroy__ = _Function.delete_SolBCRTP

# Register SolBCRTP in _Function:
_Function.SolBCRTP_swigregister(SolBCRTP)
class SolCCRTP(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, selfGuy, dimin):
        _Function.SolCCRTP_swiginit(self, _Function.new_SolCCRTP(selfGuy, dimin))
    velocityFn = property(_Function.SolCCRTP_velocityFn_get, _Function.SolCCRTP_velocityFn_set)
    pressureFn = property(_Function.SolCCRTP_pressureFn_get, _Function.SolCCRTP_pressureFn_set)
    stressFn = property(_Function.SolCCRTP_stressFn_get, _Function.SolCCRTP_stressFn_set)
    strainRateFn = property(_Function.SolCCRTP_strainRateFn_get, _Function.SolCCRTP_strainRateFn_set)
    viscosityFn = property(_Function.SolCCRTP_viscosityFn_get, _Function.SolCCRTP_viscosityFn_set)
    bodyForceFn = property(_Function.SolCCRTP_bodyForceFn_get, _Function.SolCCRTP_bodyForceFn_set)
    dim = property(_Function.SolCCRTP_dim_get, _Function.SolCCRTP_dim_set)
    __swig_destroy__ = _Function.delete_SolCCRTP

# Register SolCCRTP in _Function:
_Function.SolCCRTP_swigregister(SolCCRTP)
class SolCxCRTP(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, selfGuy, dimin):
        _Function.SolCxCRTP_swiginit(self, _Function.new_SolCxCRTP(selfGuy, dimin))
    velocityFn = property(_Function.SolCxCRTP_velocityFn_get, _Function.SolCxCRTP_velocityFn_set)
    pressureFn = property(_Function.SolCxCRTP_pressureFn_get, _Function.SolCxCRTP_pressureFn_set)
    stressFn = property(_Function.SolCxCRTP_stressFn_get, _Function.SolCxCRTP_stressFn_set)
    strainRateFn = property(_Function.SolCxCRTP_strainRateFn_get, _Function.SolCxCRTP_strainRateFn_set)
    viscosityFn = property(_Function.SolCxCRTP_viscosityFn_get, _Function.SolCxCRTP_viscosityFn_set)
    bodyForceFn = property(_Function.SolCxCRTP_bodyForceFn_get, _Function.SolCxCRTP_bodyForceFn_set)
    dim = property(_Function.SolCxCRTP_dim_get, _Function.SolCxCRTP_dim_set)
    __swig_destroy__ = _Function.delete_SolCxCRTP

# Register SolCxCRTP in _Function:
_Function.SolCxCRTP_swigregister(SolCxCRTP)
class SolDACRTP(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, selfGuy, dimin):
        _Function.SolDACRTP_swiginit(self, _Function.new_SolDACRTP(selfGuy, dimin))
    velocityFn = property(_Function.SolDACRTP_velocityFn_get, _Function.SolDACRTP_velocityFn_set)
    pressureFn = property(_Function.SolDACRTP_pressureFn_get, _Function.SolDACRTP_pressureFn_set)
    stressFn = property(_Function.SolDACRTP_stressFn_get, _Function.SolDACRTP_stressFn_set)
    strainRateFn = property(_Function.SolDACRTP_strainRateFn_get, _Function.SolDACRTP_strainRateFn_set)
    viscosityFn = property(_Function.SolDACRTP_viscosityFn_get, _Function.SolDACRTP_viscosityFn_set)
    bodyForceFn = property(_Function.SolDACRTP_bodyForceFn_get, _Function.SolDACRTP_bodyForceFn_set)
    dim = property(_Function.SolDACRTP_dim_get, _Function.SolDACRTP_dim_set)
    __swig_destroy__ = _Function.delete_SolDACRTP

# Register SolDACRTP in _Function:
_Function.SolDACRTP_swigregister(SolDACRTP)
class SolHCRTP(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, selfGuy, dimin):
        _Function.SolHCRTP_swiginit(self, _Function.new_SolHCRTP(selfGuy, dimin))
    velocityFn = property(_Function.SolHCRTP_velocityFn_get, _Function.SolHCRTP_velocityFn_set)
    pressureFn = property(_Function.SolHCRTP_pressureFn_get, _Function.SolHCRTP_pressureFn_set)
    stressFn = property(_Function.SolHCRTP_stressFn_get, _Function.SolHCRTP_stressFn_set)
    strainRateFn = property(_Function.SolHCRTP_strainRateFn_get, _Function.SolHCRTP_strainRateFn_set)
    viscosityFn = property(_Function.SolHCRTP_viscosityFn_get, _Function.SolHCRTP_viscosityFn_set)
    bodyForceFn = property(_Function.SolHCRTP_bodyForceFn_get, _Function.SolHCRTP_bodyForceFn_set)
    dim = property(_Function.SolHCRTP_dim_get, _Function.SolHCRTP_dim_set)
    __swig_destroy__ = _Function.delete_SolHCRTP

# Register SolHCRTP in _Function:
_Function.SolHCRTP_swigregister(SolHCRTP)
class SolHACRTP(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, selfGuy, dimin):
        _Function.SolHACRTP_swiginit(self, _Function.new_SolHACRTP(selfGuy, dimin))
    velocityFn = property(_Function.SolHACRTP_velocityFn_get, _Function.SolHACRTP_velocityFn_set)
    pressureFn = property(_Function.SolHACRTP_pressureFn_get, _Function.SolHACRTP_pressureFn_set)
    stressFn = property(_Function.SolHACRTP_stressFn_get, _Function.SolHACRTP_stressFn_set)
    strainRateFn = property(_Function.SolHACRTP_strainRateFn_get, _Function.SolHACRTP_strainRateFn_set)
    viscosityFn = property(_Function.SolHACRTP_viscosityFn_get, _Function.SolHACRTP_viscosityFn_set)
    bodyForceFn = property(_Function.SolHACRTP_bodyForceFn_get, _Function.SolHACRTP_bodyForceFn_set)
    dim = property(_Function.SolHACRTP_dim_get, _Function.SolHACRTP_dim_set)
    __swig_destroy__ = _Function.delete_SolHACRTP

# Register SolHACRTP in _Function:
_Function.SolHACRTP_swigregister(SolHACRTP)
class SolKxCRTP(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, selfGuy, dimin):
        _Function.SolKxCRTP_swiginit(self, _Function.new_SolKxCRTP(selfGuy, dimin))
    velocityFn = property(_Function.SolKxCRTP_velocityFn_get, _Function.SolKxCRTP_velocityFn_set)
    pressureFn = property(_Function.SolKxCRTP_pressureFn_get, _Function.SolKxCRTP_pressureFn_set)
    stressFn = property(_Function.SolKxCRTP_stressFn_get, _Function.SolKxCRTP_stressFn_set)
    strainRateFn = property(_Function.SolKxCRTP_strainRateFn_get, _Function.SolKxCRTP_strainRateFn_set)
    viscosityFn = property(_Function.SolKxCRTP_viscosityFn_get, _Function.SolKxCRTP_viscosityFn_set)
    bodyForceFn = property(_Function.SolKxCRTP_bodyForceFn_get, _Function.SolKxCRTP_bodyForceFn_set)
    dim = property(_Function.SolKxCRTP_dim_get, _Function.SolKxCRTP_dim_set)
    __swig_destroy__ = _Function.delete_SolKxCRTP

# Register SolKxCRTP in _Function:
_Function.SolKxCRTP_swigregister(SolKxCRTP)
class SolKzCRTP(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, selfGuy, dimin):
        _Function.SolKzCRTP_swiginit(self, _Function.new_SolKzCRTP(selfGuy, dimin))
    velocityFn = property(_Function.SolKzCRTP_velocityFn_get, _Function.SolKzCRTP_velocityFn_set)
    pressureFn = property(_Function.SolKzCRTP_pressureFn_get, _Function.SolKzCRTP_pressureFn_set)
    stressFn = property(_Function.SolKzCRTP_stressFn_get, _Function.SolKzCRTP_stressFn_set)
    strainRateFn = property(_Function.SolKzCRTP_strainRateFn_get, _Function.SolKzCRTP_strainRateFn_set)
    viscosityFn = property(_Function.SolKzCRTP_viscosityFn_get, _Function.SolKzCRTP_viscosityFn_set)
    bodyForceFn = property(_Function.SolKzCRTP_bodyForceFn_get, _Function.SolKzCRTP_bodyForceFn_set)
    dim = property(_Function.SolKzCRTP_dim_get, _Function.SolKzCRTP_dim_set)
    __swig_destroy__ = _Function.delete_SolKzCRTP

# Register SolKzCRTP in _Function:
_Function.SolKzCRTP_swigregister(SolKzCRTP)
class SolMCRTP(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, selfGuy, dimin):
        _Function.SolMCRTP_swiginit(self, _Function.new_SolMCRTP(selfGuy, dimin))
    velocityFn = property(_Function.SolMCRTP_velocityFn_get, _Function.SolMCRTP_velocityFn_set)
    pressureFn = property(_Function.SolMCRTP_pressureFn_get, _Function.SolMCRTP_pressureFn_set)
    stressFn = property(_Function.SolMCRTP_stressFn_get, _Function.SolMCRTP_stressFn_set)
    strainRateFn = property(_Function.SolMCRTP_strainRateFn_get, _Function.SolMCRTP_strainRateFn_set)
    viscosityFn = property(_Function.SolMCRTP_viscosityFn_get, _Function.SolMCRTP_viscosityFn_set)
    bodyForceFn = property(_Function.SolMCRTP_bodyForceFn_get, _Function.SolMCRTP_bodyForceFn_set)
    dim = property(_Function.SolMCRTP_dim_get, _Function.SolMCRTP_dim_set)
    __swig_destroy__ = _Function.delete_SolMCRTP

# Register SolMCRTP in _Function:
_Function.SolMCRTP_swigregister(SolMCRTP)
class SolNLCRTP(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, selfGuy, dimin):
        _Function.SolNLCRTP_swiginit(self, _Function.new_SolNLCRTP(selfGuy, dimin))
    velocityFn = property(_Function.SolNLCRTP_velocityFn_get, _Function.SolNLCRTP_velocityFn_set)
    pressureFn = property(_Function.SolNLCRTP_pressureFn_get, _Function.SolNLCRTP_pressureFn_set)
    stressFn = property(_Function.SolNLCRTP_stressFn_get, _Function.SolNLCRTP_stressFn_set)
    strainRateFn = property(_Function.SolNLCRTP_strainRateFn_get, _Function.SolNLCRTP_strainRateFn_set)
    viscosityFn = property(_Function.SolNLCRTP_viscosityFn_get, _Function.SolNLCRTP_viscosityFn_set)
    bodyForceFn = property(_Function.SolNLCRTP_bodyForceFn_get, _Function.SolNLCRTP_bodyForceFn_set)
    dim = property(_Function.SolNLCRTP_dim_get, _Function.SolNLCRTP_dim_set)
    __swig_destroy__ = _Function.delete_SolNLCRTP

# Register SolNLCRTP in _Function:
_Function.SolNLCRTP_swigregister(SolNLCRTP)
class SolDB2dCRTP(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, selfGuy, dimin):
        _Function.SolDB2dCRTP_swiginit(self, _Function.new_SolDB2dCRTP(selfGuy, dimin))
    velocityFn = property(_Function.SolDB2dCRTP_velocityFn_get, _Function.SolDB2dCRTP_velocityFn_set)
    pressureFn = property(_Function.SolDB2dCRTP_pressureFn_get, _Function.SolDB2dCRTP_pressureFn_set)
    stressFn = property(_Function.SolDB2dCRTP_stressFn_get, _Function.SolDB2dCRTP_stressFn_set)
    strainRateFn = property(_Function.SolDB2dCRTP_strainRateFn_get, _Function.SolDB2dCRTP_strainRateFn_set)
    viscosityFn = property(_Function.SolDB2dCRTP_viscosityFn_get, _Function.SolDB2dCRTP_viscosityFn_set)
    bodyForceFn = property(_Function.SolDB2dCRTP_bodyForceFn_get, _Function.SolDB2dCRTP_bodyForceFn_set)
    dim = property(_Function.SolDB2dCRTP_dim_get, _Function.SolDB2dCRTP_dim_set)
    __swig_destroy__ = _Function.delete_SolDB2dCRTP

# Register SolDB2dCRTP in _Function:
_Function.SolDB2dCRTP_swigregister(SolDB2dCRTP)
class SolDB3dCRTP(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, selfGuy, dimin):
        _Function.SolDB3dCRTP_swiginit(self, _Function.new_SolDB3dCRTP(selfGuy, dimin))
    velocityFn = property(_Function.SolDB3dCRTP_velocityFn_get, _Function.SolDB3dCRTP_velocityFn_set)
    pressureFn = property(_Function.SolDB3dCRTP_pressureFn_get, _Function.SolDB3dCRTP_pressureFn_set)
    stressFn = property(_Function.SolDB3dCRTP_stressFn_get, _Function.SolDB3dCRTP_stressFn_set)
    strainRateFn = property(_Function.SolDB3dCRTP_strainRateFn_get, _Function.SolDB3dCRTP_strainRateFn_set)
    viscosityFn = property(_Function.SolDB3dCRTP_viscosityFn_get, _Function.SolDB3dCRTP_viscosityFn_set)
    bodyForceFn = property(_Function.SolDB3dCRTP_bodyForceFn_get, _Function.SolDB3dCRTP_bodyForceFn_set)
    dim = property(_Function.SolDB3dCRTP_dim_get, _Function.SolDB3dCRTP_dim_set)
    __swig_destroy__ = _Function.delete_SolDB3dCRTP

# Register SolDB3dCRTP in _Function:
_Function.SolDB3dCRTP_swigregister(SolDB3dCRTP)
class Relational_less(Function):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, fn1, fn2):
        _Function.Relational_less_swiginit(self, _Function.new_Relational_less(fn1, fn2))
    __swig_destroy__ = _Function.delete_Relational_less

# Register Relational_less in _Function:
_Function.Relational_less_swigregister(Relational_less)
class Relational_less_equal(Function):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, fn1, fn2):
        _Function.Relational_less_equal_swiginit(self, _Function.new_Relational_less_equal(fn1, fn2))
    __swig_destroy__ = _Function.delete_Relational_less_equal

# Register Relational_less_equal in _Function:
_Function.Relational_less_equal_swigregister(Relational_less_equal)
class Relational_greater(Function):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, fn1, fn2):
        _Function.Relational_greater_swiginit(self, _Function.new_Relational_greater(fn1, fn2))
    __swig_destroy__ = _Function.delete_Relational_greater

# Register Relational_greater in _Function:
_Function.Relational_greater_swigregister(Relational_greater)
class Relational_greater_equal(Function):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, fn1, fn2):
        _Function.Relational_greater_equal_swiginit(self, _Function.new_Relational_greater_equal(fn1, fn2))
    __swig_destroy__ = _Function.delete_Relational_greater_equal

# Register Relational_greater_equal in _Function:
_Function.Relational_greater_equal_swigregister(Relational_greater_equal)
class Relational_logical_and(Function):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, fn1, fn2):
        _Function.Relational_logical_and_swiginit(self, _Function.new_Relational_logical_and(fn1, fn2))
    __swig_destroy__ = _Function.delete_Relational_logical_and

# Register Relational_logical_and in _Function:
_Function.Relational_logical_and_swigregister(Relational_logical_and)
class Relational_logical_or(Function):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, fn1, fn2):
        _Function.Relational_logical_or_swiginit(self, _Function.new_Relational_logical_or(fn1, fn2))
    __swig_destroy__ = _Function.delete_Relational_logical_or

# Register Relational_logical_or in _Function:
_Function.Relational_logical_or_swigregister(Relational_logical_or)
class Relational_logical_xor(Function):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, fn1, fn2):
        _Function.Relational_logical_xor_swiginit(self, _Function.new_Relational_logical_xor(fn1, fn2))
    __swig_destroy__ = _Function.delete_Relational_logical_xor

# Register Relational_logical_xor in _Function:
_Function.Relational_logical_xor_swigregister(Relational_logical_xor)

