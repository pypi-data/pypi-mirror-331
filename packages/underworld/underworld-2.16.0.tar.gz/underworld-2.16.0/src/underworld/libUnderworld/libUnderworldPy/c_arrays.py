# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
import _c_arrays

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _c_arrays.SWIG_PyInstanceMethod_New
_swig_new_static_method = _c_arrays.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


cdata = _c_arrays.cdata
memmove = _c_arrays.memmove
class DoubleArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements):
        _c_arrays.DoubleArray_swiginit(self, _c_arrays.new_DoubleArray(nelements))
    __swig_destroy__ = _c_arrays.delete_DoubleArray
    __getitem__ = _swig_new_instance_method(_c_arrays.DoubleArray___getitem__)
    __setitem__ = _swig_new_instance_method(_c_arrays.DoubleArray___setitem__)
    cast = _swig_new_instance_method(_c_arrays.DoubleArray_cast)
    frompointer = _swig_new_static_method(_c_arrays.DoubleArray_frompointer)

# Register DoubleArray in _c_arrays:
_c_arrays.DoubleArray_swigregister(DoubleArray)
class FloatArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements):
        _c_arrays.FloatArray_swiginit(self, _c_arrays.new_FloatArray(nelements))
    __swig_destroy__ = _c_arrays.delete_FloatArray
    __getitem__ = _swig_new_instance_method(_c_arrays.FloatArray___getitem__)
    __setitem__ = _swig_new_instance_method(_c_arrays.FloatArray___setitem__)
    cast = _swig_new_instance_method(_c_arrays.FloatArray_cast)
    frompointer = _swig_new_static_method(_c_arrays.FloatArray_frompointer)

# Register FloatArray in _c_arrays:
_c_arrays.FloatArray_swigregister(FloatArray)
class IntArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements):
        _c_arrays.IntArray_swiginit(self, _c_arrays.new_IntArray(nelements))
    __swig_destroy__ = _c_arrays.delete_IntArray
    __getitem__ = _swig_new_instance_method(_c_arrays.IntArray___getitem__)
    __setitem__ = _swig_new_instance_method(_c_arrays.IntArray___setitem__)
    cast = _swig_new_instance_method(_c_arrays.IntArray_cast)
    frompointer = _swig_new_static_method(_c_arrays.IntArray_frompointer)

# Register IntArray in _c_arrays:
_c_arrays.IntArray_swigregister(IntArray)
class UnsignedArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements):
        _c_arrays.UnsignedArray_swiginit(self, _c_arrays.new_UnsignedArray(nelements))
    __swig_destroy__ = _c_arrays.delete_UnsignedArray
    __getitem__ = _swig_new_instance_method(_c_arrays.UnsignedArray___getitem__)
    __setitem__ = _swig_new_instance_method(_c_arrays.UnsignedArray___setitem__)
    cast = _swig_new_instance_method(_c_arrays.UnsignedArray_cast)
    frompointer = _swig_new_static_method(_c_arrays.UnsignedArray_frompointer)

# Register UnsignedArray in _c_arrays:
_c_arrays.UnsignedArray_swigregister(UnsignedArray)

