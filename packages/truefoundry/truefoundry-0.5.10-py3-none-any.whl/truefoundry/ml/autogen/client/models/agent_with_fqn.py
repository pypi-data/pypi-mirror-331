# coding: utf-8

"""
TrueFoundry ML API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, Dict, Optional

from truefoundry.pydantic_v1 import (
    BaseModel,
    Field,
    StrictStr,
    conint,
    conlist,
    constr,
    validator,
)


class AgentWithFQN(BaseModel):
    """
    AgentWithFQN
    """

    name: Optional[constr(strict=True, max_length=256)] = Field(
        default=None,
        description="+sort=1 +label=Name +message=The name should start with lowercase alphabets  and can contain alphanumeric and can include '-' in between +usage=Name of the entity",
    )
    description: Optional[constr(strict=True, max_length=512)] = Field(
        default=None, description="+sort=2 +label=Description"
    )
    metadata: Dict[str, Any] = Field(
        default=...,
        description='+label=Metadata +usage=Key value metadata. Should be valid JSON. For e.g. `{"business-unit": "sales", "quality": "good", "rating": 4.5}` +uiType=JsonInput +uiProps={"descriptionInline":true}',
    )
    version_alias: Optional[constr(strict=True, max_length=128)] = Field(
        default=None,
        description='+label=Version Alias +usage=Version alias is alternate, ideally human readable, version string to reference an artifact version. It should start with `v` followed by alphanumeric and it can include `.` and `-` in between (e.g. `v1.0.0`, `v1-prod`, `v3-dev`, etc) +message=The version alias should start with `v` followed by alphanumeric and can include `.` and `-` in between (e.g. `v1.0.0`, `v1-prod`, `v3-dev`, etc) +uiProps={"descriptionInline":true} +placeholder=v1.0.0',
    )
    ml_repo: Optional[constr(strict=True)] = Field(
        default=None,
        description="+label=ML Repo +usage=Name of the ML Repo +uiType=Hidden",
    )
    version: Optional[conint(strict=True, ge=1)] = Field(
        default=None,
        description="+label=Version of the entity +usage=Version of the entity +uiType=Hidden",
    )
    type: StrictStr = Field(
        default=..., description="+value=agent +usage=Type of the entity"
    )
    available_tools: conlist(constr(strict=True, min_length=1)) = Field(
        default=...,
        description='+sort=30 +uiType=Hidden +label=Tools +usage=Tools available to the agent +uiProps={"descriptionInline":true}',
    )
    goal: constr(strict=True, max_length=128, min_length=1) = Field(
        default=...,
        description='+sort=10 +uiType=TextArea +label=Goal +usage=Short form description. Will be used as `description` when this agent is used as a tool. +uiProps={"descriptionInline":true}',
    )
    instruction: constr(strict=True, max_length=2620, min_length=1) = Field(
        default=...,
        description='`instruction` is the system prompt for now. (2.5 * 1024) +sort=20 +uiType=AgentInstructions +uiProps={"helpText":"Use the syntax ${Tool FQN} to reference a tool, and ${AGENT FQN} to reference another agent"} +label=Instructions +usage=Instructions for the agent to follow to achieve the goal +uiProps={"descriptionInline":true}',
    )
    model_id: constr(strict=True, min_length=1) = Field(
        default=...,
        description='+sort=40 +uiType=EnabledModelSelector +uiProps={"searchable":true,"modelType":"chat","providerType":"openai"} +label=Model +usage=Model to use when running the agent',
    )
    id: StrictStr = Field(default=..., description="+usage=ID of the agent")
    fqn: StrictStr = Field(default=..., description="+usage=FQN of the agent")
    __properties = [
        "name",
        "description",
        "metadata",
        "version_alias",
        "ml_repo",
        "version",
        "type",
        "available_tools",
        "goal",
        "instruction",
        "model_id",
        "id",
        "fqn",
    ]

    @validator("name")
    def name_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[A-Za-z0-9_\-]+$", value):
            raise ValueError(
                r"must validate the regular expression /^[A-Za-z0-9_\-]+$/"
            )
        return value

    @validator("version_alias")
    def version_alias_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^v[a-zA-Z0-9.-]*([a-zA-Z0-9]+)$", value):
            raise ValueError(
                r"must validate the regular expression /^v[a-zA-Z0-9.-]*([a-zA-Z0-9]+)$/"
            )
        return value

    @validator("ml_repo")
    def ml_repo_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[a-zA-Z][a-zA-Z0-9\-]{1,98}[a-zA-Z0-9]$", value):
            raise ValueError(
                r"must validate the regular expression /^[a-zA-Z][a-zA-Z0-9\-]{1,98}[a-zA-Z0-9]$/"
            )
        return value

    @validator("type")
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ("agent",):
            raise ValueError("must be one of enum values ('agent')")
        return value

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AgentWithFQN:
        """Create an instance of AgentWithFQN from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AgentWithFQN:
        """Create an instance of AgentWithFQN from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AgentWithFQN.parse_obj(obj)

        _obj = AgentWithFQN.parse_obj(
            {
                "name": obj.get("name"),
                "description": obj.get("description"),
                "metadata": obj.get("metadata"),
                "version_alias": obj.get("version_alias"),
                "ml_repo": obj.get("ml_repo"),
                "version": obj.get("version"),
                "type": obj.get("type"),
                "available_tools": obj.get("available_tools"),
                "goal": obj.get("goal"),
                "instruction": obj.get("instruction"),
                "model_id": obj.get("model_id"),
                "id": obj.get("id"),
                "fqn": obj.get("fqn"),
            }
        )
        return _obj
