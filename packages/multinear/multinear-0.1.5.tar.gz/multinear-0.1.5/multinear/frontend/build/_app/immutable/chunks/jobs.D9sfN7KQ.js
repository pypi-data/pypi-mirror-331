import{d as _,a as b}from"./disclose-version.Bm9TX1ig.js";import"./legacy.BYxoFlZK.js";import{f as g}from"./index-client.ChMSxKZP.js";import{s as k}from"./index.DK2GAsCY.js";import{l as j,s as y}from"./props.CQ_kOd1X.js";import{I as h,b as w,s as S,c as R,d as v}from"./index.BxQT867L.js";import{w as $,g as x}from"./index.MYQ2GHS0.js";import{g as p}from"./entry.BhVNci_c.js";function z(a,t){const s=j(t,["children","$$slots","$$events","$$legacy"]);h(a,y({name:"chevron-right"},()=>s,{iconNode:[["path",{d:"m9 18 6-6-6-6"}]],children:(o,u)=>{var n=_(),l=g(n);k(l,t,"default",{},null),b(o,n)},$$slots:{default:!0}}))}function G(a,t){const s=j(t,["children","$$slots","$$events","$$legacy"]);h(a,y({name:"play"},()=>s,{iconNode:[["polygon",{points:"6 3 20 12 6 21 6 3"}]],children:(o,u)=>{var n=_(),l=g(n);k(l,t,"default",{},null),b(o,n)},$$slots:{default:!0}}))}const i=$(null),c=$({currentJob:null,jobStatus:null,jobDetails:null,taskStatusCounts:{}});async function C(a,t,s){var o,u,n,l;let r="started";for(;!["completed","failed","not_found"].includes(r);){await new Promise(e=>setTimeout(e,1e3));try{const e=await w(a,t);r=e.status;let f={};if(e.task_status_map&&Object.keys(e.task_status_map).length>0&&(f=Object.values(e.task_status_map).reduce((d,m)=>(d[m]=(d[m]||0)+1,d),{})),(((o=e.details)==null?void 0:o.status)==="failed"||(u=e.details)!=null&&u.error)&&(r="failed",e.error=e.details.error),c.set({currentJob:t,jobStatus:r,jobDetails:e,taskStatusCounts:f}),r==="completed"&&!((n=e.details)!=null&&n.error))await s();else if(r==="failed"||(l=e.details)!=null&&l.error)break}catch(e){console.error("Error polling job status:",e),c.set({currentJob:t,jobStatus:"failed",jobDetails:{project_id:a,job_id:t,status:"failed",total_tasks:1,current_task:1,task_status_map:{},error:e instanceof Error?e.message:"Unknown error occurred"},taskStatusCounts:{}});break}}}async function O(a,t){i.set({type:"experiment",projectId:a}),p("/")}async function q(a,t,s){i.set({type:"task",projectId:a,challengeId:t}),p("/")}async function A(a,t,s){i.set({type:"group",projectId:a,groupId:t}),p("/")}async function B(a){const t=x(i);if(t)try{let s;if(t.type==="experiment")s=await S(t.projectId);else if(t.type==="task")s=await R(t.projectId,t.challengeId);else if(t.type==="group")s=await v(t.projectId,t.groupId);else throw new Error("Unknown run type");const r=s.job_id;c.update(o=>({...o,currentJob:r,jobStatus:"started",jobDetails:null,taskStatusCounts:{}})),await C(t.projectId,r,a)}catch(s){console.error("Error executing pending run:",s),c.set({currentJob:null,jobStatus:"failed",jobDetails:{project_id:t.projectId,job_id:"",status:"failed",total_tasks:1,current_task:1,task_status_map:{},error:s instanceof Error?s.message:"Unknown error occurred"},taskStatusCounts:{}})}finally{i.set(null)}}export{z as C,G as P,O as a,A as b,i as c,B as e,q as h,c as j,C as p};
