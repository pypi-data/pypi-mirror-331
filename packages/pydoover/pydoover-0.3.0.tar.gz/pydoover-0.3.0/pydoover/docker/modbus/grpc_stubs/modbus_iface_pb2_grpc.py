# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from . import modbus_iface_pb2 as grpc__stubs_dot_modbus__iface__pb2

GRPC_GENERATED_VERSION = '1.65.1'
GRPC_VERSION = grpc.__version__
EXPECTED_ERROR_RELEASE = '1.66.0'
SCHEDULED_RELEASE_DATE = 'August 6, 2024'
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    warnings.warn(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in grpc_stubs/modbus_iface_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
        + f' This warning will become an error in {EXPECTED_ERROR_RELEASE},'
        + f' scheduled for release on {SCHEDULED_RELEASE_DATE}.',
        RuntimeWarning
    )


class modbusIfaceStub(object):
    """The doover modbus service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.testComms = channel.unary_unary(
                '/modbus_iface.modbusIface/testComms',
                request_serializer=grpc__stubs_dot_modbus__iface__pb2.testCommsRequest.SerializeToString,
                response_deserializer=grpc__stubs_dot_modbus__iface__pb2.testCommsResponse.FromString,
                _registered_method=True)
        self.openBus = channel.unary_unary(
                '/modbus_iface.modbusIface/openBus',
                request_serializer=grpc__stubs_dot_modbus__iface__pb2.openBusRequest.SerializeToString,
                response_deserializer=grpc__stubs_dot_modbus__iface__pb2.openBusResponse.FromString,
                _registered_method=True)
        self.listBus = channel.unary_unary(
                '/modbus_iface.modbusIface/listBus',
                request_serializer=grpc__stubs_dot_modbus__iface__pb2.listBusRequest.SerializeToString,
                response_deserializer=grpc__stubs_dot_modbus__iface__pb2.listBusResponse.FromString,
                _registered_method=True)
        self.busStatus = channel.unary_unary(
                '/modbus_iface.modbusIface/busStatus',
                request_serializer=grpc__stubs_dot_modbus__iface__pb2.busStatusRequest.SerializeToString,
                response_deserializer=grpc__stubs_dot_modbus__iface__pb2.busStatusResponse.FromString,
                _registered_method=True)
        self.closeBus = channel.unary_unary(
                '/modbus_iface.modbusIface/closeBus',
                request_serializer=grpc__stubs_dot_modbus__iface__pb2.closeBusRequest.SerializeToString,
                response_deserializer=grpc__stubs_dot_modbus__iface__pb2.closeBusResponse.FromString,
                _registered_method=True)
        self.readRegisters = channel.unary_unary(
                '/modbus_iface.modbusIface/readRegisters',
                request_serializer=grpc__stubs_dot_modbus__iface__pb2.readRegisterRequest.SerializeToString,
                response_deserializer=grpc__stubs_dot_modbus__iface__pb2.readRegisterResponse.FromString,
                _registered_method=True)
        self.writeRegisters = channel.unary_unary(
                '/modbus_iface.modbusIface/writeRegisters',
                request_serializer=grpc__stubs_dot_modbus__iface__pb2.writeRegisterRequest.SerializeToString,
                response_deserializer=grpc__stubs_dot_modbus__iface__pb2.writeRegisterResponse.FromString,
                _registered_method=True)
        self.scheduleWriteRegisters = channel.unary_unary(
                '/modbus_iface.modbusIface/scheduleWriteRegisters',
                request_serializer=grpc__stubs_dot_modbus__iface__pb2.scheduleWriteRegisterRequest.SerializeToString,
                response_deserializer=grpc__stubs_dot_modbus__iface__pb2.scheduleWriteRegisterResponse.FromString,
                _registered_method=True)
        self.readRegisterSubscription = channel.unary_stream(
                '/modbus_iface.modbusIface/readRegisterSubscription',
                request_serializer=grpc__stubs_dot_modbus__iface__pb2.readRegisterSubscriptionRequest.SerializeToString,
                response_deserializer=grpc__stubs_dot_modbus__iface__pb2.readRegisterSubscriptionResponse.FromString,
                _registered_method=True)


class modbusIfaceServicer(object):
    """The doover modbus service definition.
    """

    def testComms(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def openBus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def listBus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def busStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def closeBus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def readRegisters(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def writeRegisters(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def scheduleWriteRegisters(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def readRegisterSubscription(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_modbusIfaceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'testComms': grpc.unary_unary_rpc_method_handler(
                    servicer.testComms,
                    request_deserializer=grpc__stubs_dot_modbus__iface__pb2.testCommsRequest.FromString,
                    response_serializer=grpc__stubs_dot_modbus__iface__pb2.testCommsResponse.SerializeToString,
            ),
            'openBus': grpc.unary_unary_rpc_method_handler(
                    servicer.openBus,
                    request_deserializer=grpc__stubs_dot_modbus__iface__pb2.openBusRequest.FromString,
                    response_serializer=grpc__stubs_dot_modbus__iface__pb2.openBusResponse.SerializeToString,
            ),
            'listBus': grpc.unary_unary_rpc_method_handler(
                    servicer.listBus,
                    request_deserializer=grpc__stubs_dot_modbus__iface__pb2.listBusRequest.FromString,
                    response_serializer=grpc__stubs_dot_modbus__iface__pb2.listBusResponse.SerializeToString,
            ),
            'busStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.busStatus,
                    request_deserializer=grpc__stubs_dot_modbus__iface__pb2.busStatusRequest.FromString,
                    response_serializer=grpc__stubs_dot_modbus__iface__pb2.busStatusResponse.SerializeToString,
            ),
            'closeBus': grpc.unary_unary_rpc_method_handler(
                    servicer.closeBus,
                    request_deserializer=grpc__stubs_dot_modbus__iface__pb2.closeBusRequest.FromString,
                    response_serializer=grpc__stubs_dot_modbus__iface__pb2.closeBusResponse.SerializeToString,
            ),
            'readRegisters': grpc.unary_unary_rpc_method_handler(
                    servicer.readRegisters,
                    request_deserializer=grpc__stubs_dot_modbus__iface__pb2.readRegisterRequest.FromString,
                    response_serializer=grpc__stubs_dot_modbus__iface__pb2.readRegisterResponse.SerializeToString,
            ),
            'writeRegisters': grpc.unary_unary_rpc_method_handler(
                    servicer.writeRegisters,
                    request_deserializer=grpc__stubs_dot_modbus__iface__pb2.writeRegisterRequest.FromString,
                    response_serializer=grpc__stubs_dot_modbus__iface__pb2.writeRegisterResponse.SerializeToString,
            ),
            'scheduleWriteRegisters': grpc.unary_unary_rpc_method_handler(
                    servicer.scheduleWriteRegisters,
                    request_deserializer=grpc__stubs_dot_modbus__iface__pb2.scheduleWriteRegisterRequest.FromString,
                    response_serializer=grpc__stubs_dot_modbus__iface__pb2.scheduleWriteRegisterResponse.SerializeToString,
            ),
            'readRegisterSubscription': grpc.unary_stream_rpc_method_handler(
                    servicer.readRegisterSubscription,
                    request_deserializer=grpc__stubs_dot_modbus__iface__pb2.readRegisterSubscriptionRequest.FromString,
                    response_serializer=grpc__stubs_dot_modbus__iface__pb2.readRegisterSubscriptionResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'modbus_iface.modbusIface', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('modbus_iface.modbusIface', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class modbusIface(object):
    """The doover modbus service definition.
    """

    @staticmethod
    def testComms(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/modbus_iface.modbusIface/testComms',
            grpc__stubs_dot_modbus__iface__pb2.testCommsRequest.SerializeToString,
            grpc__stubs_dot_modbus__iface__pb2.testCommsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def openBus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/modbus_iface.modbusIface/openBus',
            grpc__stubs_dot_modbus__iface__pb2.openBusRequest.SerializeToString,
            grpc__stubs_dot_modbus__iface__pb2.openBusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def listBus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/modbus_iface.modbusIface/listBus',
            grpc__stubs_dot_modbus__iface__pb2.listBusRequest.SerializeToString,
            grpc__stubs_dot_modbus__iface__pb2.listBusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def busStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/modbus_iface.modbusIface/busStatus',
            grpc__stubs_dot_modbus__iface__pb2.busStatusRequest.SerializeToString,
            grpc__stubs_dot_modbus__iface__pb2.busStatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def closeBus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/modbus_iface.modbusIface/closeBus',
            grpc__stubs_dot_modbus__iface__pb2.closeBusRequest.SerializeToString,
            grpc__stubs_dot_modbus__iface__pb2.closeBusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def readRegisters(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/modbus_iface.modbusIface/readRegisters',
            grpc__stubs_dot_modbus__iface__pb2.readRegisterRequest.SerializeToString,
            grpc__stubs_dot_modbus__iface__pb2.readRegisterResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def writeRegisters(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/modbus_iface.modbusIface/writeRegisters',
            grpc__stubs_dot_modbus__iface__pb2.writeRegisterRequest.SerializeToString,
            grpc__stubs_dot_modbus__iface__pb2.writeRegisterResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def scheduleWriteRegisters(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/modbus_iface.modbusIface/scheduleWriteRegisters',
            grpc__stubs_dot_modbus__iface__pb2.scheduleWriteRegisterRequest.SerializeToString,
            grpc__stubs_dot_modbus__iface__pb2.scheduleWriteRegisterResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def readRegisterSubscription(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/modbus_iface.modbusIface/readRegisterSubscription',
            grpc__stubs_dot_modbus__iface__pb2.readRegisterSubscriptionRequest.SerializeToString,
            grpc__stubs_dot_modbus__iface__pb2.readRegisterSubscriptionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
