# ===== PROJECT ===========================================================
#
[project]
name = 'audmodel'
authors = [
    {name = 'Johannes Wagner', email = 'jwagner@audeering.com'},
    {name = 'Hagen Wierstorf', email = 'hwierstorf@audeering.com'},
]
description = 'Publish and load models'
readme = 'README.rst'
license = {file = 'LICENSE'}
keywords = [
    'machine learning',
    'model',
    'Artifactory',
]
classifiers = [
    'Development Status :: 5 - Production/Stable',
    'Intended Audience :: Science/Research',
    'Intended Audience :: Developers',
    'License :: OSI Approved :: MIT License',
    'Operating System :: OS Independent',
    'Programming Language :: Python',
    'Programming Language :: Python :: 3',
    'Programming Language :: Python :: 3.9',
    'Programming Language :: Python :: 3.10',
    'Programming Language :: Python :: 3.11',
    'Programming Language :: Python :: 3.12',
    'Programming Language :: Python :: 3.13',
    'Topic :: Scientific/Engineering',
]
requires-python = '>=3.9'
dependencies = [
    'audbackend[all] >=2.2.2',
    'oyaml',
]
# Get version dynamically from git
# (needs setuptools_scm tools config below)
dynamic = ['version']

[project.urls]
repository = 'https://gitlab.audeering.com/tools/audmodel'
documentation = 'http://tools.pp.audeering.com/audmodel/'


# ===== BUILD-SYSTEM ======================================================
#
# Requirements for building the Python package
[build-system]
requires = ['setuptools>=45', 'setuptools_scm[toml]>=6.2']
build-backend = 'setuptools.build_meta'


# ===== TOOL ==============================================================
#

# ----- codespell ---------------------------------------------------------
[tool.codespell]
builtin = 'clear,rare,informal,usage,names'
skip = './audmodel.egg-info,./build,./docs/api,./docs/_templates,./docs/_static,/.misc'
uri-ignore-words-list = 'master'
ignore-words-list = 'ser'


# ----- pytest ------------------------------------------------------------
#
[tool.pytest.ini_options]
cache_dir = '.cache/pytest'
xfail_strict = true
addopts = '''
    --doctest-plus
    --cov=audmodel
    --cov-fail-under=100
    --cov-report xml
    --ignore=docs/
    --ignore=misc/
'''


# ----- ruff --------------------------------------------------------------
#
[tool.ruff]
cache-dir = '.cache/ruff'

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint]
select = [
    'D',     # pydocstyle
    'E',     # pycodestyle errors
    'F',     # Pyflakes
    'I',     # isort
    'N',     # pep8-naming
    'W',     # pycodestyle warnings
]

extend-ignore = [
    'D100',  # Missing docstring in public module
    'D101',  # Missing docstring in public class
    'D102',  # Missing docstring in public method
    'D103',  # Missing docstring in public function
    'D104',  # Missing docstring in public package
    'D107',  # Missing docstring in `__init__`
]

[tool.ruff.lint.per-file-ignores]
'__init__.py' = [
    'F401',  # * imported but unused
]


# ----- I: isort -----
#
# Check correct order/syntax of import statements
#
[tool.ruff.lint.isort]

# All from imports have their own line, e.g.
#
#   from .utils import util_a
#   from .utils import util_b
#
force-single-line = true

# Sort by module names
# and not import before from, e.g.
#
#     from datetime import date
#     import os
#
force-sort-within-sections = true

# Ensure we have two empty lines
# after last import
lines-after-imports = 2

# Group all audEERING packages into a separate section, e.g.
#
#     import os
#
#     import numpy as np
#
#     import audmath
#
section-order = [
    'future',
    'standard-library',
    'third-party',
    'audeering',
    'first-party',
    'local-folder',
]
[tool.ruff.lint.isort.sections]
'audeering' = [
    'audb',
    'audbackend',
    'audeer',
    'audformat',
    'audiofile',
    'audfactory',
    'audinterface',
    'audmath',
    'audmetric',
    'audbenchmark',
    'audobject',
    'audonnx',
    'audplot',
    'audresample',
    'audtorch',
    'auglib',
    'opensmile',
    'segment_detector',
    'sphinx-audeering-theme',
]


# ----- N: pep8-naming -----
#
# Check variable/class names follow PEP8 naming convention
#
[tool.ruff.lint.pep8-naming]
ignore-names = [
    'config',  # allow lowercase class name
    'test_*',  # allow uppercase name when testing a class
]


# ----- W: pycodestyle -----
#
# Check docstrings follow selected convention
#
[tool.ruff.lint.pydocstyle]
convention = 'google'


# ----- setuptools --------------------------------------------------------
#
# Find all (sub-)modules of the Python package
[tool.setuptools.packages.find]
exclude = [
    'tests*',
    'docs*',
    'misc*',
]

# ----- setuptools_scm ----------------------------------------------------
#
# Use setuptools_scm to get version from git
[tool.setuptools_scm]
