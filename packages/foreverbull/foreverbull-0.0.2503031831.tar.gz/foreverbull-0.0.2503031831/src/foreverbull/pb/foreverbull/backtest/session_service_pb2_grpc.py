# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from foreverbull.pb.foreverbull.backtest import session_service_pb2 as foreverbull_dot_backtest_dot_session__service__pb2

GRPC_GENERATED_VERSION = '1.66.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in foreverbull/backtest/session_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class SessionServicerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateExecution = channel.unary_unary(
                '/foreverbull.backtest.SessionServicer/CreateExecution',
                request_serializer=foreverbull_dot_backtest_dot_session__service__pb2.CreateExecutionRequest.SerializeToString,
                response_deserializer=foreverbull_dot_backtest_dot_session__service__pb2.CreateExecutionResponse.FromString,
                _registered_method=True)
        self.RunExecution = channel.unary_stream(
                '/foreverbull.backtest.SessionServicer/RunExecution',
                request_serializer=foreverbull_dot_backtest_dot_session__service__pb2.RunExecutionRequest.SerializeToString,
                response_deserializer=foreverbull_dot_backtest_dot_session__service__pb2.RunExecutionResponse.FromString,
                _registered_method=True)
        self.StoreResult = channel.unary_unary(
                '/foreverbull.backtest.SessionServicer/StoreResult',
                request_serializer=foreverbull_dot_backtest_dot_session__service__pb2.StoreExecutionResultRequest.SerializeToString,
                response_deserializer=foreverbull_dot_backtest_dot_session__service__pb2.StoreExecutionResultResponse.FromString,
                _registered_method=True)
        self.StopServer = channel.unary_unary(
                '/foreverbull.backtest.SessionServicer/StopServer',
                request_serializer=foreverbull_dot_backtest_dot_session__service__pb2.StopServerRequest.SerializeToString,
                response_deserializer=foreverbull_dot_backtest_dot_session__service__pb2.StopServerResponse.FromString,
                _registered_method=True)


class SessionServicerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateExecution(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RunExecution(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StoreResult(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StopServer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SessionServicerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateExecution': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateExecution,
                    request_deserializer=foreverbull_dot_backtest_dot_session__service__pb2.CreateExecutionRequest.FromString,
                    response_serializer=foreverbull_dot_backtest_dot_session__service__pb2.CreateExecutionResponse.SerializeToString,
            ),
            'RunExecution': grpc.unary_stream_rpc_method_handler(
                    servicer.RunExecution,
                    request_deserializer=foreverbull_dot_backtest_dot_session__service__pb2.RunExecutionRequest.FromString,
                    response_serializer=foreverbull_dot_backtest_dot_session__service__pb2.RunExecutionResponse.SerializeToString,
            ),
            'StoreResult': grpc.unary_unary_rpc_method_handler(
                    servicer.StoreResult,
                    request_deserializer=foreverbull_dot_backtest_dot_session__service__pb2.StoreExecutionResultRequest.FromString,
                    response_serializer=foreverbull_dot_backtest_dot_session__service__pb2.StoreExecutionResultResponse.SerializeToString,
            ),
            'StopServer': grpc.unary_unary_rpc_method_handler(
                    servicer.StopServer,
                    request_deserializer=foreverbull_dot_backtest_dot_session__service__pb2.StopServerRequest.FromString,
                    response_serializer=foreverbull_dot_backtest_dot_session__service__pb2.StopServerResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'foreverbull.backtest.SessionServicer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('foreverbull.backtest.SessionServicer', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class SessionServicer(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateExecution(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/foreverbull.backtest.SessionServicer/CreateExecution',
            foreverbull_dot_backtest_dot_session__service__pb2.CreateExecutionRequest.SerializeToString,
            foreverbull_dot_backtest_dot_session__service__pb2.CreateExecutionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RunExecution(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/foreverbull.backtest.SessionServicer/RunExecution',
            foreverbull_dot_backtest_dot_session__service__pb2.RunExecutionRequest.SerializeToString,
            foreverbull_dot_backtest_dot_session__service__pb2.RunExecutionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StoreResult(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/foreverbull.backtest.SessionServicer/StoreResult',
            foreverbull_dot_backtest_dot_session__service__pb2.StoreExecutionResultRequest.SerializeToString,
            foreverbull_dot_backtest_dot_session__service__pb2.StoreExecutionResultResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StopServer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/foreverbull.backtest.SessionServicer/StopServer',
            foreverbull_dot_backtest_dot_session__service__pb2.StopServerRequest.SerializeToString,
            foreverbull_dot_backtest_dot_session__service__pb2.StopServerResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
