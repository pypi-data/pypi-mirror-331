# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from foreverbull.pb.foreverbull.backtest import engine_service_pb2 as foreverbull_dot_backtest_dot_engine__service__pb2

GRPC_GENERATED_VERSION = '1.66.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in foreverbull/backtest/engine_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class EngineStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetIngestion = channel.unary_unary(
                '/foreverbull.backtest.Engine/GetIngestion',
                request_serializer=foreverbull_dot_backtest_dot_engine__service__pb2.GetIngestionRequest.SerializeToString,
                response_deserializer=foreverbull_dot_backtest_dot_engine__service__pb2.GetIngestionResponse.FromString,
                _registered_method=True)
        self.DownloadIngestion = channel.unary_unary(
                '/foreverbull.backtest.Engine/DownloadIngestion',
                request_serializer=foreverbull_dot_backtest_dot_engine__service__pb2.DownloadIngestionRequest.SerializeToString,
                response_deserializer=foreverbull_dot_backtest_dot_engine__service__pb2.DownloadIngestionResponse.FromString,
                _registered_method=True)
        self.Ingest = channel.unary_unary(
                '/foreverbull.backtest.Engine/Ingest',
                request_serializer=foreverbull_dot_backtest_dot_engine__service__pb2.IngestRequest.SerializeToString,
                response_deserializer=foreverbull_dot_backtest_dot_engine__service__pb2.IngestResponse.FromString,
                _registered_method=True)
        self.NewSession = channel.unary_unary(
                '/foreverbull.backtest.Engine/NewSession',
                request_serializer=foreverbull_dot_backtest_dot_engine__service__pb2.NewSessionRequest.SerializeToString,
                response_deserializer=foreverbull_dot_backtest_dot_engine__service__pb2.NewSessionResponse.FromString,
                _registered_method=True)


class EngineServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetIngestion(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DownloadIngestion(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Ingest(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NewSession(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_EngineServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetIngestion': grpc.unary_unary_rpc_method_handler(
                    servicer.GetIngestion,
                    request_deserializer=foreverbull_dot_backtest_dot_engine__service__pb2.GetIngestionRequest.FromString,
                    response_serializer=foreverbull_dot_backtest_dot_engine__service__pb2.GetIngestionResponse.SerializeToString,
            ),
            'DownloadIngestion': grpc.unary_unary_rpc_method_handler(
                    servicer.DownloadIngestion,
                    request_deserializer=foreverbull_dot_backtest_dot_engine__service__pb2.DownloadIngestionRequest.FromString,
                    response_serializer=foreverbull_dot_backtest_dot_engine__service__pb2.DownloadIngestionResponse.SerializeToString,
            ),
            'Ingest': grpc.unary_unary_rpc_method_handler(
                    servicer.Ingest,
                    request_deserializer=foreverbull_dot_backtest_dot_engine__service__pb2.IngestRequest.FromString,
                    response_serializer=foreverbull_dot_backtest_dot_engine__service__pb2.IngestResponse.SerializeToString,
            ),
            'NewSession': grpc.unary_unary_rpc_method_handler(
                    servicer.NewSession,
                    request_deserializer=foreverbull_dot_backtest_dot_engine__service__pb2.NewSessionRequest.FromString,
                    response_serializer=foreverbull_dot_backtest_dot_engine__service__pb2.NewSessionResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'foreverbull.backtest.Engine', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('foreverbull.backtest.Engine', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Engine(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetIngestion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/foreverbull.backtest.Engine/GetIngestion',
            foreverbull_dot_backtest_dot_engine__service__pb2.GetIngestionRequest.SerializeToString,
            foreverbull_dot_backtest_dot_engine__service__pb2.GetIngestionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DownloadIngestion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/foreverbull.backtest.Engine/DownloadIngestion',
            foreverbull_dot_backtest_dot_engine__service__pb2.DownloadIngestionRequest.SerializeToString,
            foreverbull_dot_backtest_dot_engine__service__pb2.DownloadIngestionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Ingest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/foreverbull.backtest.Engine/Ingest',
            foreverbull_dot_backtest_dot_engine__service__pb2.IngestRequest.SerializeToString,
            foreverbull_dot_backtest_dot_engine__service__pb2.IngestResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def NewSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/foreverbull.backtest.Engine/NewSession',
            foreverbull_dot_backtest_dot_engine__service__pb2.NewSessionRequest.SerializeToString,
            foreverbull_dot_backtest_dot_engine__service__pb2.NewSessionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class EngineSessionStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RunBacktest = channel.unary_unary(
                '/foreverbull.backtest.EngineSession/RunBacktest',
                request_serializer=foreverbull_dot_backtest_dot_engine__service__pb2.RunBacktestRequest.SerializeToString,
                response_deserializer=foreverbull_dot_backtest_dot_engine__service__pb2.RunBacktestResponse.FromString,
                _registered_method=True)
        self.GetCurrentPeriod = channel.unary_unary(
                '/foreverbull.backtest.EngineSession/GetCurrentPeriod',
                request_serializer=foreverbull_dot_backtest_dot_engine__service__pb2.GetCurrentPeriodRequest.SerializeToString,
                response_deserializer=foreverbull_dot_backtest_dot_engine__service__pb2.GetCurrentPeriodResponse.FromString,
                _registered_method=True)
        self.PlaceOrdersAndContinue = channel.unary_unary(
                '/foreverbull.backtest.EngineSession/PlaceOrdersAndContinue',
                request_serializer=foreverbull_dot_backtest_dot_engine__service__pb2.PlaceOrdersAndContinueRequest.SerializeToString,
                response_deserializer=foreverbull_dot_backtest_dot_engine__service__pb2.PlaceOrdersAndContinueResponse.FromString,
                _registered_method=True)
        self.GetResult = channel.unary_unary(
                '/foreverbull.backtest.EngineSession/GetResult',
                request_serializer=foreverbull_dot_backtest_dot_engine__service__pb2.GetResultRequest.SerializeToString,
                response_deserializer=foreverbull_dot_backtest_dot_engine__service__pb2.GetResultResponse.FromString,
                _registered_method=True)


class EngineSessionServicer(object):
    """Missing associated documentation comment in .proto file."""

    def RunBacktest(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCurrentPeriod(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PlaceOrdersAndContinue(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetResult(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_EngineSessionServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RunBacktest': grpc.unary_unary_rpc_method_handler(
                    servicer.RunBacktest,
                    request_deserializer=foreverbull_dot_backtest_dot_engine__service__pb2.RunBacktestRequest.FromString,
                    response_serializer=foreverbull_dot_backtest_dot_engine__service__pb2.RunBacktestResponse.SerializeToString,
            ),
            'GetCurrentPeriod': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCurrentPeriod,
                    request_deserializer=foreverbull_dot_backtest_dot_engine__service__pb2.GetCurrentPeriodRequest.FromString,
                    response_serializer=foreverbull_dot_backtest_dot_engine__service__pb2.GetCurrentPeriodResponse.SerializeToString,
            ),
            'PlaceOrdersAndContinue': grpc.unary_unary_rpc_method_handler(
                    servicer.PlaceOrdersAndContinue,
                    request_deserializer=foreverbull_dot_backtest_dot_engine__service__pb2.PlaceOrdersAndContinueRequest.FromString,
                    response_serializer=foreverbull_dot_backtest_dot_engine__service__pb2.PlaceOrdersAndContinueResponse.SerializeToString,
            ),
            'GetResult': grpc.unary_unary_rpc_method_handler(
                    servicer.GetResult,
                    request_deserializer=foreverbull_dot_backtest_dot_engine__service__pb2.GetResultRequest.FromString,
                    response_serializer=foreverbull_dot_backtest_dot_engine__service__pb2.GetResultResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'foreverbull.backtest.EngineSession', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('foreverbull.backtest.EngineSession', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class EngineSession(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def RunBacktest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/foreverbull.backtest.EngineSession/RunBacktest',
            foreverbull_dot_backtest_dot_engine__service__pb2.RunBacktestRequest.SerializeToString,
            foreverbull_dot_backtest_dot_engine__service__pb2.RunBacktestResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetCurrentPeriod(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/foreverbull.backtest.EngineSession/GetCurrentPeriod',
            foreverbull_dot_backtest_dot_engine__service__pb2.GetCurrentPeriodRequest.SerializeToString,
            foreverbull_dot_backtest_dot_engine__service__pb2.GetCurrentPeriodResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PlaceOrdersAndContinue(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/foreverbull.backtest.EngineSession/PlaceOrdersAndContinue',
            foreverbull_dot_backtest_dot_engine__service__pb2.PlaceOrdersAndContinueRequest.SerializeToString,
            foreverbull_dot_backtest_dot_engine__service__pb2.PlaceOrdersAndContinueResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetResult(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/foreverbull.backtest.EngineSession/GetResult',
            foreverbull_dot_backtest_dot_engine__service__pb2.GetResultRequest.SerializeToString,
            foreverbull_dot_backtest_dot_engine__service__pb2.GetResultResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
