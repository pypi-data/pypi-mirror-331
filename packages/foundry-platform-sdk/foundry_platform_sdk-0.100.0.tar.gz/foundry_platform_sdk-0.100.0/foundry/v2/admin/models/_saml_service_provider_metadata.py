#  Copyright 2024 Palantir Technologies, Inc.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.


from __future__ import annotations

from typing import List
from typing import cast

import pydantic

from foundry.v2.admin.models._certificate_info import CertificateInfo
from foundry.v2.admin.models._saml_service_provider_metadata_dict import (
    SamlServiceProviderMetadataDict,
)  # NOQA


class SamlServiceProviderMetadata(pydantic.BaseModel):
    """Information that describes a Foundry Authentication Provider as a SAML service provider. All information listed here is generated by Foundry."""

    entity_id: str = pydantic.Field(alias=str("entityId"))  # type: ignore[literal-required]

    """The static SAML entity ID that represents this service provider."""

    metadata_url: str = pydantic.Field(alias=str("metadataUrl"))  # type: ignore[literal-required]

    """A public URL from which this service provider metadata can be downloaded as XML."""

    acs_urls: List[str] = pydantic.Field(alias=str("acsUrls"))  # type: ignore[literal-required]

    """
    The Assertion Consumer Service (ACS) URLs for this service provider, to which the SAML identity provider
    redirects authentication responses.
    """

    logout_urls: List[str] = pydantic.Field(alias=str("logoutUrls"))  # type: ignore[literal-required]

    """The URLs for this service provider to which the SAML identity provider sends logout requests."""

    certificates: List[CertificateInfo]

    model_config = {"extra": "allow", "populate_by_name": True}

    def to_dict(self) -> SamlServiceProviderMetadataDict:
        """Return the dictionary representation of the model using the field aliases."""
        return cast(
            SamlServiceProviderMetadataDict, self.model_dump(by_alias=True, exclude_none=True)
        )
