#  Copyright 2024 Palantir Technologies, Inc.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.


from __future__ import annotations

from typing import Dict
from typing import Optional
from typing import cast

import pydantic

from foundry.v2.aip_agents.models._agent_markdown_response import AgentMarkdownResponse
from foundry.v2.aip_agents.models._parameter_id import ParameterId
from foundry.v2.aip_agents.models._parameter_value_update import ParameterValueUpdate
from foundry.v2.aip_agents.models._session_exchange_result_dict import (
    SessionExchangeResultDict,
)  # NOQA


class SessionExchangeResult(pydantic.BaseModel):
    """The returned result from the Agent for a session exchange."""

    agent_markdown_response: AgentMarkdownResponse = pydantic.Field(alias=str("agentMarkdownResponse"))  # type: ignore[literal-required]

    """The final text response generated by the Agent. Responses are formatted using markdown."""

    parameter_updates: Dict[ParameterId, ParameterValueUpdate] = pydantic.Field(alias=str("parameterUpdates"))  # type: ignore[literal-required]

    """
    Any updates to application variable values which were generated by the Agent for this exchange.
    Updates can only be generated for application variables configured with `READ_WRITE` access on the Agent in AIP Agent Studio.
    """

    total_tokens_used: Optional[int] = pydantic.Field(alias=str("totalTokensUsed"), default=None)  # type: ignore[literal-required]

    """Total tokens used to compute the result. Omitted if token usage information is not supported by the model used for the session."""

    interrupted_output: bool = pydantic.Field(alias=str("interruptedOutput"))  # type: ignore[literal-required]

    """
    True if the exchange was canceled.
    In that case, the response (if any) was provided by the client as part of the cancellation request rather than by the Agent.
    """

    model_config = {"extra": "allow", "populate_by_name": True}

    def to_dict(self) -> SessionExchangeResultDict:
        """Return the dictionary representation of the model using the field aliases."""
        return cast(SessionExchangeResultDict, self.model_dump(by_alias=True, exclude_none=True))
