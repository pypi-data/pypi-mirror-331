[tool.poetry]
name = "gemini-2.0-api"
version = "0.1.0"
description = "A user-friendly wrapper for the Google Gemini 2.0 API"
authors = ["Your Name <your.email@example.com>"]
readme = "README.md"
license = "MIT"
repository = "https://github.com/yourusername/gemini-2.0-api"
documentation = "https://github.com/yourusername/gemini-2.0-api#readme"
homepage = "https://github.com/yourusername/gemini-2.0-api"
keywords = ["gemini", "api", "wrapper", "ai", "google", "generative ai", "llm"]
classifiers = [
  "Development Status :: 4 - Beta",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
packages = [{ include = "gemini_2_0_api", from = "." }]
include = ["gemini_2_0_api/py.typed"]

[tool.poetry.dependencies]
python = "^3.9"
google-genai = ">=1.0.0"
pillow = ">=10.0.0"
python-dotenv = "^1.0.0"
pydantic = "^2.0.0"
requests = "^2.31.0"

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.0"
pytest-asyncio = "^0.21.0"
pytest-cov = "^4.1.0"
black = "^23.3.0"
isort = "^5.12.0"
mypy = "^1.3.0"
ruff = "^0.3.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
line-length = 88
indent-width = 4
target-version = "py39"

[tool.ruff.lint]
select = ["E", "F", "I", "N", "B", "W", "D", "UP", "ANN", "BLE"]
ignore = ["D203", "D212"]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["D", "ANN"]

[tool.ruff.format]
quote-style = "double"
line-ending = "lf"

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["tests"]
python_files = ["test_*.py"]

[tool.black]
line-length = 88
target-version = ["py39"]

[tool.isort]
profile = "black"
multi_line_output = 3

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true

[tool.coverage.run]
source = ["gemini_2_0_api"]
branch = true

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "def __repr__",
  "if TYPE_CHECKING:",
  "raise NotImplementedError",
]
