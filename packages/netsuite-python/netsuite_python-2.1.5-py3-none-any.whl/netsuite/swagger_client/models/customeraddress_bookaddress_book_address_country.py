# coding: utf-8

"""
    NetSuite REST API

    NetSuite REST Record API generated 2023-01-18 at 19:40:11 UTC for account 472052, user will@theapiguys.com with role Keap Integration.  # noqa: E501

    OpenAPI spec version: v1
    Contact: info@netsuite.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CustomeraddressBookaddressBookAddressCountry(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'ref_name': 'str'
    }

    attribute_map = {
        'id': 'id',
        'ref_name': 'refName'
    }

    def __init__(self, id=None, ref_name=None):  # noqa: E501
        """CustomeraddressBookaddressBookAddressCountry - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._ref_name = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if ref_name is not None:
            self.ref_name = ref_name

    @property
    def id(self):
        """Gets the id of this CustomeraddressBookaddressBookAddressCountry.  # noqa: E501


        :return: The id of this CustomeraddressBookaddressBookAddressCountry.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CustomeraddressBookaddressBookAddressCountry.


        :param id: The id of this CustomeraddressBookaddressBookAddressCountry.  # noqa: E501
        :type: str
        """
        allowed_values = ["PR", "PS", "PT", "PW", "PY", "QA", "AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "RE", "AU", "AW", "AX", "AZ", "RO", "BA", "BB", "RS", "BD", "BE", "RU", "BF", "BG", "RW", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "SA", "SB", "BQ", "BR", "SC", "SD", "BS", "SE", "BT", "BV", "SG", "SH", "BW", "SI", "SJ", "BY", "BZ", "SK", "SL", "SM", "SN", "SO", "CA", "SR", "SS", "CC", "CD", "ST", "CF", "SV", "CG", "CH", "SX", "SY", "CI", "SZ", "CK", "CL", "CM", "CN", "CO", "TC", "CR", "TD", "CS", "TF", "CU", "TG", "CV", "CW", "TH", "CX", "TJ", "CY", "TK", "CZ", "TL", "TM", "TN", "TO", "TR", "TT", "DE", "TV", "TW", "TZ", "DJ", "DK", "DM", "DO", "UA", "UG", "DZ", "UM", "EA", "US", "EC", "EE", "EG", "EH", "UY", "UZ", "VA", "VC", "ER", "ES", "VE", "ET", "VG", "VI", "VN", "VU", "FI", "FJ", "FK", "FM", "FO", "FR", "WF", "GA", "GB", "WS", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "XK", "HK", "HM", "HN", "HR", "YE", "HT", "HU", "IC", "ID", "YT", "IE", "IL", "IM", "IN", "IO", "ZA", "IQ", "IR", "IS", "IT", "ZM", "JE", "ZW", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN"]  # noqa: E501
        if id not in allowed_values:
            raise ValueError(
                "Invalid value for `id` ({0}), must be one of {1}"  # noqa: E501
                .format(id, allowed_values)
            )

        self._id = id

    @property
    def ref_name(self):
        """Gets the ref_name of this CustomeraddressBookaddressBookAddressCountry.  # noqa: E501


        :return: The ref_name of this CustomeraddressBookaddressBookAddressCountry.  # noqa: E501
        :rtype: str
        """
        return self._ref_name

    @ref_name.setter
    def ref_name(self, ref_name):
        """Sets the ref_name of this CustomeraddressBookaddressBookAddressCountry.


        :param ref_name: The ref_name of this CustomeraddressBookaddressBookAddressCountry.  # noqa: E501
        :type: str
        """

        self._ref_name = ref_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CustomeraddressBookaddressBookAddressCountry, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomeraddressBookaddressBookAddressCountry):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
