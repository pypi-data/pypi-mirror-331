# coding: utf-8

"""
    NetSuite REST API

    NetSuite REST Record API generated 2023-01-18 at 19:40:11 UTC for account 472052, user will@theapiguys.com with role Keap Integration.  # noqa: E501

    OpenAPI spec version: v1
    Contact: info@netsuite.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CustomerAddressBookElement(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'links': 'list[NsLink]',
        'internal_id': 'int',
        'default_billing': 'bool',
        'address_book_address_text': 'str',
        'default_shipping': 'bool',
        'is_residential': 'bool',
        'label': 'str',
        'id': 'int',
        'address_id': 'str',
        'ref_name': 'str',
        'address_book_address': 'CustomerAddressBookAddressBookAddress'
    }

    attribute_map = {
        'links': 'links',
        'internal_id': 'internalId',
        'default_billing': 'defaultBilling',
        'address_book_address_text': 'addressBookAddress_text',
        'default_shipping': 'defaultShipping',
        'is_residential': 'isResidential',
        'label': 'label',
        'id': 'id',
        'address_id': 'addressId',
        'ref_name': 'refName',
        'address_book_address': 'addressBookAddress'
    }

    def __init__(self, links=None, internal_id=None, default_billing=None, address_book_address_text=None, default_shipping=None, is_residential=None, label=None, id=None, address_id=None, ref_name=None, address_book_address=None):  # noqa: E501
        """CustomerAddressBookElement - a model defined in Swagger"""  # noqa: E501
        self._links = None
        self._internal_id = None
        self._default_billing = None
        self._address_book_address_text = None
        self._default_shipping = None
        self._is_residential = None
        self._label = None
        self._id = None
        self._address_id = None
        self._ref_name = None
        self._address_book_address = None
        self.discriminator = None
        if links is not None:
            self.links = links
        if internal_id is not None:
            self.internal_id = internal_id
        if default_billing is not None:
            self.default_billing = default_billing
        if address_book_address_text is not None:
            self.address_book_address_text = address_book_address_text
        if default_shipping is not None:
            self.default_shipping = default_shipping
        if is_residential is not None:
            self.is_residential = is_residential
        if label is not None:
            self.label = label
        if id is not None:
            self.id = id
        if address_id is not None:
            self.address_id = address_id
        if ref_name is not None:
            self.ref_name = ref_name
        if address_book_address is not None:
            self.address_book_address = address_book_address

    @property
    def links(self):
        """Gets the links of this CustomerAddressBookElement.  # noqa: E501


        :return: The links of this CustomerAddressBookElement.  # noqa: E501
        :rtype: list[NsLink]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this CustomerAddressBookElement.


        :param links: The links of this CustomerAddressBookElement.  # noqa: E501
        :type: list[NsLink]
        """

        self._links = links

    @property
    def internal_id(self):
        """Gets the internal_id of this CustomerAddressBookElement.  # noqa: E501


        :return: The internal_id of this CustomerAddressBookElement.  # noqa: E501
        :rtype: int
        """
        return self._internal_id

    @internal_id.setter
    def internal_id(self, internal_id):
        """Sets the internal_id of this CustomerAddressBookElement.


        :param internal_id: The internal_id of this CustomerAddressBookElement.  # noqa: E501
        :type: int
        """

        self._internal_id = internal_id

    @property
    def default_billing(self):
        """Gets the default_billing of this CustomerAddressBookElement.  # noqa: E501


        :return: The default_billing of this CustomerAddressBookElement.  # noqa: E501
        :rtype: bool
        """
        return self._default_billing

    @default_billing.setter
    def default_billing(self, default_billing):
        """Sets the default_billing of this CustomerAddressBookElement.


        :param default_billing: The default_billing of this CustomerAddressBookElement.  # noqa: E501
        :type: bool
        """

        self._default_billing = default_billing

    @property
    def address_book_address_text(self):
        """Gets the address_book_address_text of this CustomerAddressBookElement.  # noqa: E501


        :return: The address_book_address_text of this CustomerAddressBookElement.  # noqa: E501
        :rtype: str
        """
        return self._address_book_address_text

    @address_book_address_text.setter
    def address_book_address_text(self, address_book_address_text):
        """Sets the address_book_address_text of this CustomerAddressBookElement.


        :param address_book_address_text: The address_book_address_text of this CustomerAddressBookElement.  # noqa: E501
        :type: str
        """

        self._address_book_address_text = address_book_address_text

    @property
    def default_shipping(self):
        """Gets the default_shipping of this CustomerAddressBookElement.  # noqa: E501


        :return: The default_shipping of this CustomerAddressBookElement.  # noqa: E501
        :rtype: bool
        """
        return self._default_shipping

    @default_shipping.setter
    def default_shipping(self, default_shipping):
        """Sets the default_shipping of this CustomerAddressBookElement.


        :param default_shipping: The default_shipping of this CustomerAddressBookElement.  # noqa: E501
        :type: bool
        """

        self._default_shipping = default_shipping

    @property
    def is_residential(self):
        """Gets the is_residential of this CustomerAddressBookElement.  # noqa: E501


        :return: The is_residential of this CustomerAddressBookElement.  # noqa: E501
        :rtype: bool
        """
        return self._is_residential

    @is_residential.setter
    def is_residential(self, is_residential):
        """Sets the is_residential of this CustomerAddressBookElement.


        :param is_residential: The is_residential of this CustomerAddressBookElement.  # noqa: E501
        :type: bool
        """

        self._is_residential = is_residential

    @property
    def label(self):
        """Gets the label of this CustomerAddressBookElement.  # noqa: E501


        :return: The label of this CustomerAddressBookElement.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this CustomerAddressBookElement.


        :param label: The label of this CustomerAddressBookElement.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def id(self):
        """Gets the id of this CustomerAddressBookElement.  # noqa: E501


        :return: The id of this CustomerAddressBookElement.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CustomerAddressBookElement.


        :param id: The id of this CustomerAddressBookElement.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def address_id(self):
        """Gets the address_id of this CustomerAddressBookElement.  # noqa: E501


        :return: The address_id of this CustomerAddressBookElement.  # noqa: E501
        :rtype: str
        """
        return self._address_id

    @address_id.setter
    def address_id(self, address_id):
        """Sets the address_id of this CustomerAddressBookElement.


        :param address_id: The address_id of this CustomerAddressBookElement.  # noqa: E501
        :type: str
        """

        self._address_id = address_id

    @property
    def ref_name(self):
        """Gets the ref_name of this CustomerAddressBookElement.  # noqa: E501


        :return: The ref_name of this CustomerAddressBookElement.  # noqa: E501
        :rtype: str
        """
        return self._ref_name

    @ref_name.setter
    def ref_name(self, ref_name):
        """Sets the ref_name of this CustomerAddressBookElement.


        :param ref_name: The ref_name of this CustomerAddressBookElement.  # noqa: E501
        :type: str
        """

        self._ref_name = ref_name

    @property
    def address_book_address(self):
        """Gets the address_book_address of this CustomerAddressBookElement.  # noqa: E501


        :return: The address_book_address of this CustomerAddressBookElement.  # noqa: E501
        :rtype: CustomerAddressBookAddressBookAddress
        """
        return self._address_book_address

    @address_book_address.setter
    def address_book_address(self, address_book_address):
        """Sets the address_book_address of this CustomerAddressBookElement.


        :param address_book_address: The address_book_address of this CustomerAddressBookElement.  # noqa: E501
        :type: CustomerAddressBookAddressBookAddress
        """

        self._address_book_address = address_book_address

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CustomerAddressBookElement, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomerAddressBookElement):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
