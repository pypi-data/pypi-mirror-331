# coding: utf-8

"""
    NetSuite REST API

    NetSuite REST Record API generated 2023-01-18 at 19:40:11 UTC for account 472052, user will@theapiguys.com with role Keap Integration.  # noqa: E501

    OpenAPI spec version: v1
    Contact: info@netsuite.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CustomerContactRolesElement(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'links': 'list[NsLink]',
        'give_access': 'bool',
        'contact_name': 'str',
        'password': 'str',
        'password_confirm': 'str',
        'email': 'str',
        'ref_name': 'str',
        'contact': 'Contact',
        'role': 'NsResource'
    }

    attribute_map = {
        'links': 'links',
        'give_access': 'giveAccess',
        'contact_name': 'contactName',
        'password': 'password',
        'password_confirm': 'passwordConfirm',
        'email': 'email',
        'ref_name': 'refName',
        'contact': 'contact',
        'role': 'role'
    }

    def __init__(self, links=None, give_access=None, contact_name=None, password=None, password_confirm=None, email=None, ref_name=None, contact=None, role=None):  # noqa: E501
        """CustomerContactRolesElement - a model defined in Swagger"""  # noqa: E501
        self._links = None
        self._give_access = None
        self._contact_name = None
        self._password = None
        self._password_confirm = None
        self._email = None
        self._ref_name = None
        self._contact = None
        self._role = None
        self.discriminator = None
        if links is not None:
            self.links = links
        if give_access is not None:
            self.give_access = give_access
        if contact_name is not None:
            self.contact_name = contact_name
        if password is not None:
            self.password = password
        if password_confirm is not None:
            self.password_confirm = password_confirm
        if email is not None:
            self.email = email
        if ref_name is not None:
            self.ref_name = ref_name
        if contact is not None:
            self.contact = contact
        if role is not None:
            self.role = role

    @property
    def links(self):
        """Gets the links of this CustomerContactRolesElement.  # noqa: E501


        :return: The links of this CustomerContactRolesElement.  # noqa: E501
        :rtype: list[NsLink]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this CustomerContactRolesElement.


        :param links: The links of this CustomerContactRolesElement.  # noqa: E501
        :type: list[NsLink]
        """

        self._links = links

    @property
    def give_access(self):
        """Gets the give_access of this CustomerContactRolesElement.  # noqa: E501


        :return: The give_access of this CustomerContactRolesElement.  # noqa: E501
        :rtype: bool
        """
        return self._give_access

    @give_access.setter
    def give_access(self, give_access):
        """Sets the give_access of this CustomerContactRolesElement.


        :param give_access: The give_access of this CustomerContactRolesElement.  # noqa: E501
        :type: bool
        """

        self._give_access = give_access

    @property
    def contact_name(self):
        """Gets the contact_name of this CustomerContactRolesElement.  # noqa: E501


        :return: The contact_name of this CustomerContactRolesElement.  # noqa: E501
        :rtype: str
        """
        return self._contact_name

    @contact_name.setter
    def contact_name(self, contact_name):
        """Sets the contact_name of this CustomerContactRolesElement.


        :param contact_name: The contact_name of this CustomerContactRolesElement.  # noqa: E501
        :type: str
        """

        self._contact_name = contact_name

    @property
    def password(self):
        """Gets the password of this CustomerContactRolesElement.  # noqa: E501


        :return: The password of this CustomerContactRolesElement.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this CustomerContactRolesElement.


        :param password: The password of this CustomerContactRolesElement.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def password_confirm(self):
        """Gets the password_confirm of this CustomerContactRolesElement.  # noqa: E501


        :return: The password_confirm of this CustomerContactRolesElement.  # noqa: E501
        :rtype: str
        """
        return self._password_confirm

    @password_confirm.setter
    def password_confirm(self, password_confirm):
        """Sets the password_confirm of this CustomerContactRolesElement.


        :param password_confirm: The password_confirm of this CustomerContactRolesElement.  # noqa: E501
        :type: str
        """

        self._password_confirm = password_confirm

    @property
    def email(self):
        """Gets the email of this CustomerContactRolesElement.  # noqa: E501


        :return: The email of this CustomerContactRolesElement.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this CustomerContactRolesElement.


        :param email: The email of this CustomerContactRolesElement.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def ref_name(self):
        """Gets the ref_name of this CustomerContactRolesElement.  # noqa: E501


        :return: The ref_name of this CustomerContactRolesElement.  # noqa: E501
        :rtype: str
        """
        return self._ref_name

    @ref_name.setter
    def ref_name(self, ref_name):
        """Sets the ref_name of this CustomerContactRolesElement.


        :param ref_name: The ref_name of this CustomerContactRolesElement.  # noqa: E501
        :type: str
        """

        self._ref_name = ref_name

    @property
    def contact(self):
        """Gets the contact of this CustomerContactRolesElement.  # noqa: E501


        :return: The contact of this CustomerContactRolesElement.  # noqa: E501
        :rtype: Contact
        """
        return self._contact

    @contact.setter
    def contact(self, contact):
        """Sets the contact of this CustomerContactRolesElement.


        :param contact: The contact of this CustomerContactRolesElement.  # noqa: E501
        :type: Contact
        """

        self._contact = contact

    @property
    def role(self):
        """Gets the role of this CustomerContactRolesElement.  # noqa: E501


        :return: The role of this CustomerContactRolesElement.  # noqa: E501
        :rtype: NsResource
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this CustomerContactRolesElement.


        :param role: The role of this CustomerContactRolesElement.  # noqa: E501
        :type: NsResource
        """

        self._role = role

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CustomerContactRolesElement, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomerContactRolesElement):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
