"""Exposes the basic methods that LLMs will use to interact with our Shopify store."""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_core.ipynb.

# %% auto 0
__all__ = ['GQLQueries', 'ShopifyStore']

# %% ../nbs/00_core.ipynb 2
from nbdev.showdoc import *
from fastcore.utils import *
from fastcore.xtras import dict2obj

import httpx
import os

# %% ../nbs/00_core.ipynb 3
class GQLQueries:
    variants = """
    query ProductVariantsList { productVariants(first: 100) {
        nodes { id price product { title description } }
    }}"""
    
    variant = """
    query getVariantInfo($id: ID!) { productVariant(id: $id) {
        id price product { title description }
    }}"""
    
    create_order = """
    mutation OrderCreate($order: OrderCreateOrderInput!) { orderCreate(order: $order) {
        userErrors { field message }
        order { id displayFinancialStatus }
    }}"""

    order = """
    query getOrder($id: ID!) { order(id: $id) {
        id displayFinancialStatus
        totalPriceSet { shopMoney { amount } }
        lineItems(first: 1) { nodes { variant { id } } }
    }}"""
    
    mark_paid = """
    mutation orderMarkAsPaid($input: OrderMarkAsPaidInput!) { orderMarkAsPaid(input: $input) {
        userErrors { field message }
    }}"""

class ShopifyStore:
    def __init__(self, 
                store_url="https://special-circumstances-trading-co.myshopify.com",
                token="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"): # test token
    
        token = token if token else os.getenv("SHOPIFY_TOKEN")
        if not token: raise ValueError("No SHOPIFY_TOKEN provided")
        self.gql_url = f"{store_url}/admin/api/2025-01/graphql.json"
        self.headers = {"X-Shopify-Access-Token": token}

    def _gql(self, query, variables=None):
        r = httpx.post(self.gql_url, json={"query": query, "variables": variables}, headers=self.headers)
        if not r.is_success: raise Exception(r.text)
        data = dict2obj(r.json())
        if 'errors' in data: raise Exception(data.errors)
        return data

    # We use variants instead of products to simplify the flow. A product might have multiple variants
    # (e.g. a shirt in different sizes). For the LLM, it doesn't matter whether it's a product or a variant.
    def products(self): 
        return self._gql(GQLQueries.variants).data.productVariants.nodes
    
    def get_product(self, variant_id):
        variables = {"id": variant_id}
        return self._gql(GQLQueries.variant, variables).data.productVariant
    
    def create_paid_order(self, variant_id, qty=1, email="test@example.com", test=True):
        variables = {"order": {
            "lineItems": [{"variantId": variant_id, "quantity": qty}],
            "email": email, "test": test, "financialStatus": "PAID"
        }}
        return self._gql(GQLQueries.create_order, variables).data.orderCreate
    
    def get_order(self, order_id):
        variables = {"id": f"gid://shopify/Order/{order_id}"}
        return self._gql(GQLQueries.order, variables).data.order
    
    # def mark_paid(self, order_id):
    #     variables = {"input": {"id": f"gid://shopify/Order/{order_id}"}}
    #     return self._gql(GQLQueries.mark_paid, variables)

