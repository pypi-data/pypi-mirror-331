"use strict";(self.webpackChunkjupyterlab_nvdashboard=self.webpackChunkjupyterlab_nvdashboard||[]).push([[369],{4369:(e,t,a)=>{a.r(t),a.d(t,{default:()=>Q});var n=a(7765),r=a(381),i=a(6029),s=a.n(i),o=a(3655),l=a(9982),c=a(4253);function m(e,t){if(e.active&&e.payload&&e.payload.length){const{payload:a,label:n}=e,r=t.labelFormatter?t.labelFormatter(n):n,i=a.map((e=>`${e.name}: ${t.valueFormatter?t.valueFormatter(e.value):e.value}`)),o=a.map((e=>e.color)),l=Math.ceil(i.length/5);return s().createElement("div",{className:"custom-tooltip"},s().createElement("div",{className:"tooltip-title"},r),s().createElement("div",{style:{columnCount:l}},i.map(((e,t)=>s().createElement("div",{key:t,className:"tooltip-value",style:o[t]?{color:`${o[t]}`}:{}},e)))))}return null}const d=["#ff7900","#b30000"],u=["#fecc5c","#bd0026"],g="jupyterlab-nvdashboard",h=`${g}:config`,p=`${g}:open-settings`,y="gpu-dashboard-widget:open",v=100,E=1e3;var w=a(9496),x=a(7135),k=a.n(x),b=a(6004),_=a(7651);const f=(e,t,a)=>{t(e.get("updateFrequency").composite||v),a&&a(e.get("maxTimeSeriesDataRecords").composite||E)},N=(e,t,a,n)=>{(0,i.useEffect)((()=>{(async()=>{try{const r=await e.load(h);f(r,t,n),r.changed.connect((()=>{f(r,t,n)})),a(!0)}catch(e){console.error(`An error occurred while loading settings: ${e}`)}})()}),[])},A=(e,t,a,n,r)=>{const s=(0,i.useRef)(null);(0,i.useEffect)((()=>{if(!r)return;s.current=function(e=""){const t=_.ServerConnection.makeSettings().baseUrl.replace(/^http/,"ws"),a=b.URLExt.join(t,"nvdashboard",e),n=new WebSocket(a);return n.onopen=()=>{console.log(`WebSocket connected to ${e}`),n.send(JSON.stringify({message:"Client connected"}))},n.onmessage=t=>{const a=JSON.parse(t.data);console.log(`Data received from ${e}:`,a)},n.onerror=t=>{console.error(`WebSocket error on ${e}:`,t)},n.onclose=()=>{console.log(`WebSocket disconnected from ${e}`)},n}(e);const i=s.current;return i.onopen=()=>{console.log("WebSocket connected")},i.onmessage=e=>{const r=JSON.parse(e.data);"connected"!==r.status?n(r,t):i.send(JSON.stringify({updateFrequency:a,isPaused:t}))},i.onerror=e=>{console.error("WebSocket error:",e)},i.onclose=()=>{console.log("WebSocket disconnected")},()=>{i.close()}}),[r]),(0,i.useEffect)((()=>{s.current&&s.current.readyState===WebSocket.OPEN&&s.current.send(JSON.stringify({updateFrequency:a,isPaused:t}))}),[t,a])},S=({settingRegistry:e})=>{const[t,a]=(0,i.useState)({memory_usage:[],total_memory:[]}),[n,r]=(0,i.useState)(v),[o,u]=(0,i.useState)(!1);N(e,r,u),A("gpu_usage",!1,n,a,o);const g=t.memory_usage.map(((e,a)=>({name:`GPU ${a}`,memory:e,totalMemory:t.total_memory[a]}))),h=(0,c.scaleLinear)().range(d),p=null==g?void 0:g.reduce(((e,t)=>e+t.memory),0),y=e=>`${(0,w.format)(".2s")(e)}B`;return s().createElement("div",{className:"gradient-background"},s().createElement("strong",{className:"chart-title"}," ","GPU Memory: ",y(p)," "),s().createElement(k(),null,(({height:e,width:a})=>s().createElement(l.BarChart,{layout:"vertical",width:.98*a,height:.95*e,data:g},s().createElement(l.CartesianGrid,{horizontal:!1}),s().createElement(l.XAxis,{type:"number",domain:[0,Math.max(...t.total_memory)],tickFormatter:y,className:"nv-axis-custom"}),s().createElement(l.YAxis,{type:"category",dataKey:"name",className:"nv-axis-custom"}),s().createElement(l.Tooltip,{cursor:{fill:"transparent"},content:e=>m(e,{valueFormatter:y})}),s().createElement(l.Bar,{dataKey:"memory",barSize:50,isAnimationActive:!1},g.map(((e,t)=>s().createElement(l.Cell,{key:`cell-${t}`,fill:h(e.memory/e.totalMemory).toString()}))))))))};class R extends o.ReactWidget{constructor(e){super(),this.settingRegistry=e,this.addClass("size-constrained-widgets"),this.settingRegistry=e}render(){return s().createElement(S,{settingRegistry:this.settingRegistry})}}const C=({settingRegistry:e})=>{const[t,a]=(0,i.useState)(),[n,r]=(0,i.useState)(v),[o,u]=(0,i.useState)(!1);N(e,r,u),A("gpu_utilization",!1,n,a,o);const g=null==t?void 0:t.gpu_utilization.map(((e,t)=>({name:`GPU ${t}`,utilization:e}))),h=(0,c.scaleLinear)().domain([0,100]).range(d);return s().createElement("div",{className:"gradient-background"},s().createElement("strong",{className:"chart-title"},"GPU Utilization"),s().createElement(k(),null,(({height:e,width:t})=>s().createElement(l.BarChart,{layout:"vertical",width:.98*t,height:.95*e,data:g},s().createElement(l.CartesianGrid,{horizontal:!1}),s().createElement(l.XAxis,{type:"number",domain:[0,100],tickFormatter:e=>`${e}%`,tick:{fill:"var(--nv-custom-tick-color)"},className:"nv-axis-custom"}),s().createElement(l.YAxis,{type:"category",dataKey:"name",tick:{fill:"var(--nv-custom-tick-color)"},className:"nv-axis-custom"}),s().createElement(l.Tooltip,{cursor:{fill:"transparent"},content:e=>m(e,{valueFormatter:e=>`${e}%`})}),s().createElement(l.Bar,{dataKey:"utilization",barSize:50,isAnimationActive:!1},null==g?void 0:g.map(((e,t)=>s().createElement(l.Cell,{key:`cell-${t}`,fill:h(e.utilization).toString()}))))))))};class L extends o.ReactWidget{constructor(e){super(),this.settingRegistry=e,this.addClass("size-constrained-widgets"),this.settingRegistry=e}render(){return s().createElement(C,{settingRegistry:this.settingRegistry})}}const B=({data:e,title:t="",yDomain:a,xFormatter:n,yFormatter:r,width:i,height:o,syncId:c,children:d})=>s().createElement(s().Fragment,null,s().createElement("strong",{className:"multi-chart-title"},t),s().createElement(l.LineChart,{data:e,width:.95*i,height:o,syncId:c},s().createElement(l.CartesianGrid,{horizontal:!1}),s().createElement(l.XAxis,{dataKey:"time",tickFormatter:n,className:"nv-axis-custom"}),s().createElement(l.YAxis,{domain:a,tickFormatter:r,className:"nv-axis-custom"}),s().createElement(l.Tooltip,{content:e=>m(e,{labelFormatter:n,valueFormatter:r})}),s().createElement(l.Legend,{verticalAlign:"top",align:"right"}),d,s().createElement(l.Brush,{height:.1,startIndex:Math.max(e.length-10,0),className:"hidden-brush-for-sync"})),s().createElement("hr",{className:"gpu-dashboard-divider"})),F=e=>void 0!==e?`${(0,w.format)(".2s")(e)}B`:"",I=e=>e?new Date(e).toLocaleTimeString():"",U=new o.LabIcon({name:"launcher:gpu-icon",svgstr:'<svg width="26" height="11" viewBox="0 0 26 11" fill="none" xmlns="http://www.w3.org/2000/svg">\n<path fill-rule="evenodd" class="jp-icon3" clip-rule="evenodd" d="M26 0H4V9H6V11H15V9H26V0ZM21.5 7C22.8807 7 24 5.88071 24 4.5C24 3.11929 22.8807 2 21.5 2C20.1193 2 19 3.11929 19 4.5C19 5.88071 20.1193 7 21.5 7Z" fill="#E0E0E0"/>\n<path d="M0 0H3V11H1V2H0V0Z" class="jp-icon3" fill="#E0E0E0"/>\n</svg>\n'}),z=new o.LabIcon({name:"launcher:hbar-icon",svgstr:'<svg id="Layer_1" style="enable-background:new 0 0 30 30;" version="1.1" fill="none" viewBox="0 0 30 30" xml:space="preserve" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">\n  <g>\n      <line x1="0" y1="0" x2="0" y2="30" stroke-width="1" />\n\n    <rect height="8" id="XMLID_5_" width="20" x="0" y="1" />\n    <rect height="8" id="XMLID_4_" width="10" x="0" y="11" />\n    <rect height="8" id="XMLID_3_" width="24" x="0" y="21" />\n  </g>\n</svg>\n'}),P=new o.LabIcon({name:"launcher:vbar-icon",svgstr:'\x3c!-- Your SVG code --\x3e\n<svg id="Layer_1" style="enable-background:new 0 0 30 30;" fill="none" version="1.1" viewBox="0 0 30 30" xml:space="preserve" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">\n  <path d="M27,26h-6V5c0-0.552,0.448-1,1-1h4c0-0.552,0.448-1,1-1s1,0.448,1,1V26z" />\n\n  \x3c!-- Additional paths can also use the same CSS variable for stroke color --\x3e\n  <g>\n    <path d="M18,26h-6V13c0-0.552,0.448-1,1-1h4c0-0.552,0.448-1,1-1s1,0.448,1,1V26z" />\n  </g>\n\n  <path d="M9,26H3V9c0-0.552,0.448-1,1-1h4c0-0.552,0.448-1,1-1s1,0.448,1,1V26z" />\n</svg>\n'}),$=new o.LabIcon({name:"launcher:time-series-icon",svgstr:'\x3c!-- Your SVG code --\x3e\n<svg viewBox="0 0 256 256" xmlns="http://www.w3.org/2000/svg">\n  <rect fill="none" height="256" width="256"/>\n  <polyline fill="none" points="224 208 32 208 32 48"  stroke-linecap="round" stroke-linejoin="round" stroke-width="8"/>\n  <polyline fill="none" points="208 64 128 144 96 112 32 176"  stroke-linecap="round" stroke-linejoin="round" stroke-width="8"/>\n  <polyline fill="none" points="208 104 208 64 168 64"  stroke-linecap="round" stroke-linejoin="round" stroke-width="8"/>\n</svg>\n'}),K=new o.LabIcon({name:"launcher:pause-icon",svgstr:'<svg\r\n  xmlns="http://www.w3.org/2000/svg"\r\n  width="20"\r\n  height="20"\r\n  viewBox="0 0 50 50"\r\n  stroke-width="2"\r\n>\r\n  <rect x="10" y="10" width="10" height="30" />\r\n  <rect x="30" y="10" width="10" height="30" />\r\n</svg>\r\n'}),T=new o.LabIcon({name:"launcher:play-icon",svgstr:'<svg\r\n  xmlns="http://www.w3.org/2000/svg"\r\n  width="20"\r\n  height="20"\r\n  viewBox="0 0 50 50"\r\n  stroke-width="2"\r\n>\r\n  <polygon points="10 5, 10 45, 40 25" />\r\n</svg>\r\n'}),D=({settingRegistry:e})=>{var t;const[a,n]=(0,i.useState)([]),[r,m]=(0,i.useState)([]),[d,g]=(0,i.useState)(!1),h=(null===(t=a[0])||void 0===t?void 0:t.gpu_utilization_individual.length)||0,[p,y]=(0,i.useState)(v),[w,x]=(0,i.useState)(E),[b,_]=(0,i.useState)(!1);N(e,y,_,x),A("gpu_resource",d,p,((e,t)=>{t?m((t=>[...t,e])):(n((t=>{let a=r.length>1?[...t,...r,e]:[...t,e];return a.length>w&&(a=a.slice(-w)),a})),m([]))}),b);const f=()=>{g(!d)},S=(0,c.scaleLinear)().domain([0,h]).range(u);return s().createElement("div",{className:"gradient-background"},s().createElement(k(),null,(({height:e,width:t})=>s().createElement("div",{style:{width:t,height:e}},s().createElement(B,{data:a,title:"GPU Utilization (per Device) [%]",yDomain:[0,100],xFormatter:I,yFormatter:e=>`${e}%`,width:t,height:(e-60)/5,syncId:"gpu-resource-sync"},a[0]&&Object.keys(a[0].gpu_utilization_individual).map(((e,t)=>s().createElement(l.Line,{key:t,dataKey:`gpu_utilization_individual[${t}]`,name:`GPU ${t}`,stroke:S(t),type:"monotone",activeDot:{fill:"transparent"},dot:{fill:"transparent"},isAnimationActive:!1})))),s().createElement(B,{data:a,title:"GPU Usage (per Device) [B]",xFormatter:I,yFormatter:F,width:t,height:(e-60)/5,syncId:"gpu-resource-sync"},a[0]&&Object.keys(a[0].gpu_memory_individual).map(((e,t)=>s().createElement(l.Line,{key:t,dataKey:`gpu_memory_individual[${t}]]`,name:`GPU ${t}`,stroke:S(t),type:"monotone",activeDot:{fill:"transparent"},dot:{fill:"transparent"},isAnimationActive:!1})))),s().createElement(B,{data:a,title:"Total Utilization [%]",xFormatter:I,yFormatter:e=>`${e}%`,yDomain:[0,100],width:t,height:(e-60)/5,syncId:"gpu-resource-sync"},s().createElement(l.Line,{dataKey:"gpu_utilization_total",name:"GPU Utilization Total",stroke:S(0),type:"monotone",strokeWidth:2,activeDot:{fill:"transparent"},dot:{fill:"transparent"},isAnimationActive:!1}),s().createElement(l.Line,{dataKey:"gpu_memory_total",name:"GPU Usage Total",stroke:S(h),strokeWidth:2,activeDot:{fill:"transparent"},dot:{fill:"transparent"},type:"monotone",isAnimationActive:!1})),s().createElement(B,{data:a,title:"Total PCI Throughput [B/s]",xFormatter:I,yFormatter:F,width:t,height:(e-60)/5,syncId:"gpu-resource-sync"},s().createElement(l.Line,{dataKey:"rx_total",name:"RX",stroke:S(0),type:"monotone",strokeWidth:2,activeDot:{fill:"transparent"},dot:{fill:"transparent"},isAnimationActive:!1}),s().createElement(l.Line,{dataKey:"tx_total",name:"TX",stroke:S(h),type:"monotone",strokeWidth:2,activeDot:{fill:"transparent"},dot:{fill:"transparent"},isAnimationActive:!1})),s().createElement("div",{style:{display:"flex",alignItems:"center",width:t,height:50}},s().createElement(l.LineChart,{data:a,width:.95*t,syncId:"gpu-resource-sync",height:50,compact:!0},s().createElement(l.XAxis,{dataKey:"time",height:0}),s().createElement(l.YAxis,{height:0}),s().createElement(l.Brush,{dataKey:"time",tickFormatter:I,startIndex:Math.max(a.length-10,0),fill:"none"})),s().createElement(o.Button,{onClick:f,className:"gpu-dashboard-button gpu-dashboard-toolbar-button"},d?s().createElement(T.react,{className:"nv-icon-custom-time-series"}):s().createElement(K.react,{className:"nv-icon-custom-time-series"})))))))};class G extends o.ReactWidget{constructor(e){super(),this.settingRegistry=e,this.addClass("size-constrained-widgets-lg"),this.settingRegistry=e}render(){return s().createElement(D,{settingRegistry:this.settingRegistry})}}const W=({settingRegistry:e})=>{const[t,a]=(0,i.useState)([]),[n,r]=(0,i.useState)([]),[m,d]=(0,i.useState)(!1),[g,h]=(0,i.useState)(v),[p,y]=(0,i.useState)(E),[w,x]=(0,i.useState)(!1);N(e,h,x,y),A("cpu_resource",m,g,((e,i)=>{t.length>0&&(e={...e,disk_read_current:e.disk_read-t[t.length-1].disk_read,disk_write_current:e.disk_write-t[t.length-1].disk_write,network_read_current:e.network_read-t[t.length-1].network_read,network_write_current:e.network_write-t[t.length-1].network_write}),i?r([...n,e]):(a((t=>{let a;return a=n.length>1?[...t,...n,e]:[...t,e],a.length>p&&(a=a.slice(-1*p)),a})),r([]))}),w);const b=()=>{d(!m)},_=(0,c.scaleLinear)().range(u);return s().createElement("div",{className:"gradient-background"},s().createElement(k(),null,(({height:e,width:a})=>s().createElement("div",{style:{width:a,height:e}},s().createElement(B,{data:t,title:"CPU Utilization [%]",yDomain:[0,100],xFormatter:I,yFormatter:e=>`${e}%`,width:a,height:(e-60)/5,syncId:"cpu-resource-sync"},s().createElement(l.Line,{dataKey:"cpu_utilization",name:"CPU Utilization",stroke:_(0),type:"monotone",isAnimationActive:!1})),s().createElement(B,{data:t,title:"Memory Usage [B]",xFormatter:I,yFormatter:F,width:a,height:(e-60)/5,syncId:"cpu-resource-sync"},s().createElement(l.Line,{dataKey:"memory_usage",name:"Memory Usage",stroke:_(1),type:"monotone",isAnimationActive:!1})),s().createElement(B,{data:t,title:"Disk I/O Bandwidth [B/s]",xFormatter:I,yFormatter:F,width:a,height:(e-60)/5,syncId:"cpu-resource-sync"},s().createElement(l.Line,{dataKey:"disk_read_current",name:"Disk Read",stroke:_(0),type:"monotone",isAnimationActive:!1}),s().createElement(l.Line,{dataKey:"disk_write_current",name:"Disk Write",stroke:_(1),type:"monotone",isAnimationActive:!1})),s().createElement(B,{data:t,title:"Network I/O Bandwidth [B/s]",xFormatter:I,yFormatter:F,width:a,height:(e-60)/5,syncId:"cpu-resource-sync"},s().createElement(l.Line,{dataKey:"network_read_current",name:"Network Read",stroke:_(0),type:"monotone",isAnimationActive:!1}),s().createElement(l.Line,{dataKey:"network_write_current",name:"Network Write",stroke:_(1),type:"monotone",isAnimationActive:!1})),s().createElement("div",{style:{width:a,height:50,display:"flex",alignItems:"center"}},s().createElement(l.LineChart,{data:t,width:.95*a,syncId:"cpu-resource-sync",height:50,compact:!0},s().createElement(l.XAxis,{dataKey:"time",height:0}),s().createElement(l.YAxis,{height:0}),s().createElement(l.Brush,{dataKey:"time",tickFormatter:I,startIndex:Math.max(t.length-10,0),fill:"none"})),s().createElement(o.Button,{onClick:b,className:"gpu-dashboard-button gpu-dashboard-toolbar-button"},m?s().createElement(T.react,{className:"nv-icon-custom-time-series"}):s().createElement(K.react,{className:"nv-icon-custom-time-series"})))))))};class M extends o.ReactWidget{constructor(e){super(),this.settingRegistry=e,this.addClass("size-constrained-widgets-lg"),this.settingRegistry=e}render(){return s().createElement(W,{settingRegistry:this.settingRegistry})}}const X=({settingRegistry:e})=>{const[t,a]=(0,i.useState)(),[n,r]=(0,i.useState)(v),[o,u]=(0,i.useState)(!1);N(e,r,u),A("pci_stats",!1,n,a,o);const g=null==t?void 0:t.pci_tx.length,h=Array.from(Array(g).keys()).map((e=>({name:`GPU ${e}`,rx:(null==t?void 0:t.pci_rx[e])||0,tx:(null==t?void 0:t.pci_tx[e])||0,maxTP:(null==t?void 0:t.max_rxtx_tp)||0}))),p=(0,c.scaleLinear)().domain([0,1]).range(d);return s().createElement("div",{className:"gradient-background"},s().createElement(k(),null,(({height:e,width:a})=>s().createElement("div",{style:{width:a,height:e}},s().createElement("strong",{className:"chart-title multi-chart-title"},"TX PCIe [B/s]"),s().createElement(l.BarChart,{width:.98*a,height:.95*e/2,data:h},s().createElement(l.YAxis,{type:"number",domain:[0,(null==t?void 0:t.max_rxtx_tp)||0],tickFormatter:F,className:"nv-axis-custom"}),s().createElement(l.XAxis,{type:"category",dataKey:"name",className:"nv-axis-custom"}),s().createElement(l.Tooltip,{cursor:{fill:"transparent"},content:e=>m(e,{valueFormatter:F})}),s().createElement(l.Bar,{dataKey:"tx",barSize:50,isAnimationActive:!1},h.map(((e,t)=>s().createElement(l.Cell,{key:`cell-${t}`,fill:p(e.tx/e.maxTP)}))))),s().createElement("strong",{className:"chart-title multi-chart-title"},"RX PCIe [B/s]"),s().createElement(l.BarChart,{width:.98*a,height:.95*e/2,data:h},s().createElement(l.YAxis,{type:"number",domain:[0,(null==t?void 0:t.max_rxtx_tp)||0],tickFormatter:F,className:"nv-axis-custom"}),s().createElement(l.XAxis,{type:"category",dataKey:"name",className:"nv-axis-custom"}),s().createElement(l.Tooltip,{cursor:{fill:"transparent"},content:e=>m(e,{valueFormatter:F})}),s().createElement(l.Bar,{dataKey:"rx",barSize:50,isAnimationActive:!1},h.map(((e,t)=>s().createElement(l.Cell,{key:`cell-${t}`,fill:p(e.rx/e.maxTP)})))))))))};class V extends o.ReactWidget{constructor(e){super(),this.settingRegistry=e,this.addClass("size-constrained-widgets"),this.settingRegistry=e}render(){return s().createElement(X,{settingRegistry:this.settingRegistry})}}const O=({settingRegistry:e})=>{const[t,a]=(0,i.useState)(),[n,r]=(0,i.useState)(v),[o,u]=(0,i.useState)(!1);N(e,r,u),A("nvlink_throughput",!1,n,a,o);const g=null==t?void 0:t.nvlink_rx.length,h=Array.from(Array(g).keys()).map((e=>({name:`GPU ${e}`,rx:(null==t?void 0:t.nvlink_rx[e])||0,tx:(null==t?void 0:t.nvlink_tx[e])||0,maxTP:(null==t?void 0:t.max_rxtx_bw)||0}))),p=(0,c.scaleLinear)().domain([0,1]).range(d),y=e=>`${(0,w.format)(".2s")(e)}B`;return s().createElement("div",{className:"gradient-background"},s().createElement(k(),null,(({height:e,width:a})=>s().createElement("div",{style:{width:a,height:e}},s().createElement("strong",{className:"chart-title multi-chart-title"},"TX NvLink [B/s]"),s().createElement(l.BarChart,{width:.98*a,height:.95*e/2,data:h},s().createElement(l.YAxis,{type:"number",domain:[0,(null==t?void 0:t.max_rxtx_bw)||0],tickFormatter:y,className:"nv-axis-custom"}),s().createElement(l.XAxis,{type:"category",dataKey:"name",className:"nv-axis-custom"}),s().createElement(l.Tooltip,{cursor:{fill:"transparent"},content:e=>m(e,{valueFormatter:y})}),s().createElement(l.Bar,{dataKey:"tx",barSize:50,isAnimationActive:!1},h.map(((e,t)=>s().createElement(l.Cell,{key:`cell-${t}`,fill:p(e.tx/e.maxTP)}))))),s().createElement("strong",{className:"chart-title multi-chart-title"},"RX NvLink [B/s]"),s().createElement(l.BarChart,{width:.98*a,height:.95*e/2,data:h},s().createElement(l.YAxis,{type:"number",domain:[0,(null==t?void 0:t.max_rxtx_bw)||0],tickFormatter:y,className:"nv-axis-custom"}),s().createElement(l.XAxis,{type:"category",dataKey:"name",className:"nv-axis-custom"}),s().createElement(l.Tooltip,{cursor:{fill:"transparent"},content:e=>m(e,{valueFormatter:y})}),s().createElement(l.Bar,{dataKey:"rx",barSize:50,isAnimationActive:!1},h.map(((e,t)=>s().createElement(l.Cell,{key:`cell-${t}`,fill:p(e.rx/e.maxTP)})))))))))};class j extends o.ReactWidget{constructor(e){super(),this.settingRegistry=e,this.addClass("size-constrained-widgets"),this.settingRegistry=e}render(){return s().createElement(O,{settingRegistry:this.settingRegistry})}}const Y=({settingRegistry:e})=>{var t;const[a,n]=(0,i.useState)([]),[r,m]=(0,i.useState)([]),[d,g]=(0,i.useState)(!1),h=(null===(t=a[0])||void 0===t?void 0:t.nvlink_tx.length)||0,[p,y]=(0,i.useState)(v),[w,x]=(0,i.useState)(E),[b,_]=(0,i.useState)(!1);N(e,y,_,x),A("nvlink_throughput",d,p,((e,t)=>{e.time=Date.now(),t?m([...r,e]):(n((t=>{let a;return a=r.length>1?[...t,...r,e]:[...t,e],a.length>w&&(a=a.slice(-1*w)),a})),m([]))}),b);const f=()=>{g(!d)},S=(0,c.scaleLinear)().domain([0,h]).range(u);return s().createElement("div",{className:"gradient-background"},s().createElement(k(),null,(({height:e,width:t})=>s().createElement("div",{style:{width:t,height:e}},s().createElement(B,{data:a,title:"TX NvLink (per Device) [B/s]",xFormatter:I,yFormatter:F,width:t,height:e/3,syncId:"gpu-resource-sync"},a[0]&&Object.keys(a[0].nvlink_tx).map(((e,t)=>s().createElement(l.Line,{key:t,dataKey:`nvlink_tx[${t}]`,name:`GPU ${t}`,stroke:S(t),type:"monotone",activeDot:{fill:"transparent"},dot:{fill:"transparent"},isAnimationActive:!1})))),s().createElement(B,{data:a,title:"RX NvLink (per Device) [B/s]",xFormatter:I,yFormatter:F,width:t,height:e/3,syncId:"gpu-resource-sync"},a[0]&&Object.keys(a[0].nvlink_rx).map(((e,t)=>s().createElement(l.Line,{key:t,dataKey:`nvlink_rx[${t}]]`,name:`GPU ${t}`,stroke:S(t),type:"monotone",activeDot:{fill:"transparent"},dot:{fill:"transparent"},isAnimationActive:!1})))),s().createElement("div",{style:{display:"flex",alignItems:"center",width:t,height:50}},s().createElement(l.LineChart,{data:a,width:.95*t,syncId:"gpu-resource-sync",height:50,compact:!0},s().createElement(l.XAxis,{dataKey:"time",height:0}),s().createElement(l.YAxis,{height:0}),s().createElement(l.Brush,{dataKey:"time",tickFormatter:I,startIndex:Math.max(a.length-10,0),fill:"none"})),s().createElement(o.Button,{onClick:f,className:"gpu-dashboard-button gpu-dashboard-toolbar-button"},d?s().createElement(T.react,{className:"nv-icon-custom-time-series"}):s().createElement(K.react,{className:"nv-icon-custom-time-series"})))))))};class H extends o.ReactWidget{constructor(e){super(),this.settingRegistry=e,this.addClass("size-constrained-widgets"),this.settingRegistry=e}render(){return s().createElement(Y,{settingRegistry:this.settingRegistry})}}var J=a(3352);const q=({app:e,labShell:t,tracker:a,settingRegistry:n})=>{const r=[],[l,c]=(0,i.useState)(v),[m,d]=(0,i.useState)(!1);N(n,c,d),e.commands.hasCommand(y)||e.commands.addCommand(y,{label:"Open GPU Dashboard Widget",execute:e=>{const{id:t,title:a}=e;u(t,a)}});const u=(i,s)=>{let o;switch(i){case"gpu-memory-widget":o=()=>new R(n);break;case"gpu-utilization-widget":o=()=>new L(n);break;case"gpu-resource-widget":o=()=>new G(n);break;case"machine-resource-widget":o=()=>new M(n);break;case"pci-throughput-widget":o=()=>new V(n);break;case"nvlink-throughput-widget":o=()=>new j(n);break;case"nvlink-throughput-timeseries-widget":o=()=>new H(n);break;default:return}((n,i,s)=>{const o=a.find((e=>e.id===i));if(o)o.isAttached||t.add(o,"main"),t.activateById(o.id);else{const t=n(),o=new J.MainAreaWidget({content:t});o.title.label=s,o.title.caption=s,o.title.icon=U,o.id=i,e.shell.add(o,"main"),a.add(o),r.push({id:i,title:s,instance:o}),o.disposed.connect((()=>{const e=r.findIndex((e=>e.id===i));console.log(a),-1!==e&&r.splice(e,1)}))}})(o,i,s)},g=(e,t)=>s().createElement("span",{style:{display:"flex"}},s().createElement(e,{className:"nv-icon-custom"}),s().createElement("span",{style:{marginLeft:"10px"}},t));return s().createElement("div",{className:"gpu-dashboard-container"},s().createElement("div",{className:"gpu-dashboard-header"},s().createElement("span",{className:"header-text"},"GPU Dashboards"),s().createElement(o.Button,{className:"header-button",onClick:()=>e.commands.execute(p)},s().createElement("div",{className:"nv-header-icon-text"},"settings"),s().createElement(o.settingsIcon.react,{className:"nv-header-icon"}))),s().createElement("hr",{className:"gpu-dashboard-divider"}),s().createElement(o.Button,{className:"gpu-dashboard-button",onClick:()=>u("gpu-memory-widget","GPU Memory")},g(z.react,"GPU Memory")),s().createElement(o.Button,{className:"gpu-dashboard-button",onClick:()=>u("gpu-utilization-widget","GPU Utilization")},g(z.react,"GPU Utilization")),s().createElement(o.Button,{className:"gpu-dashboard-button",onClick:()=>u("gpu-resource-widget","GPU Resources")},g($.react,"GPU Resources")),s().createElement(o.Button,{className:"gpu-dashboard-button",onClick:()=>u("machine-resource-widget","Machine Resources")},g($.react,"Machine Resources")),s().createElement(o.Button,{className:"gpu-dashboard-button",onClick:()=>u("pci-throughput-widget","PCIe Throughput")},g(P.react,"PCIe Throughput")),s().createElement(o.Button,{className:"gpu-dashboard-button",onClick:()=>u("nvlink-throughput-widget","NVLink Throughput")},g(P.react,"NVLink Throughput")),s().createElement(o.Button,{className:"gpu-dashboard-button",onClick:()=>u("nvlink-throughput-timeseries-widget","NVLink Throughput")},g($.react,"NVLink Throughput")),s().createElement("div",{className:"gpu-dashboard-footer"},s().createElement("hr",{className:"gpu-dashboard-divider"}),s().createElement("span",{className:"gpu-dashboard-footer-body"},m&&`Updated every ${l}ms`)))};class Z extends o.ReactWidget{constructor(e,t,a,n){super(),this.app=e,this.labShell=t,this.tracker=a,this.settingRegistry=n,this.tracker=a,this.settingRegistry=n}render(){return s().createElement(q,{app:this.app,labShell:this.labShell,tracker:this.tracker,settingRegistry:this.settingRegistry})}}const Q={id:g,description:"A minimal JupyterLab extension using a React Widget.",autoStart:!0,requires:[n.ILabShell,r.ISettingRegistry],optional:[n.ILayoutRestorer],activate:(e,t,a,n)=>{const r=new J.WidgetTracker({namespace:"gpu-dashboard-widgets"});e.commands.addCommand(p,{label:"Open Settings",execute:()=>{e.commands.execute("settingeditor:open",{query:g})}}),a.load(h).then((e=>{console.log(`${g} settings loaded`)})).catch((e=>{console.error(`Failed to load settings for ${g}.`,e)}));const i=new Z(e,t,r,a);i.id="gpu-dashboard",i.title.icon=U,i.title.caption="GPU Dashboards",n&&(n.add(i,"gpu-dashboard"),n.restore(r,{command:y,args:e=>({id:e.id,title:e.title.label}),name:e=>e.title.label})),t.add(i,"left",{rank:200})}}}}]);