name: ðŸ”‚ Tests and linting

env:
  COLUMNS: 120 # Makes the error summary table printed by pytest-pretty much easier to read

on:
  push:
    branches: [main, ci/*]
    tags:
      - "v*.*.*"
  pull_request:
    branches: [main]

concurrency:
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  pre:
    runs-on: ubuntu-latest
    # Map a step output to a job output
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
    steps:
      - name: Skip check
        id: skip_check
        uses: fkirc/skip-duplicate-actions@v5
        with:
          concurrent_skipping: "never"
          skip_after_successful_duplicate: "true"
          paths_ignore: '["**/**.md", "**/.vscode/**", "**/.dockerignore", "Makefile"]'
          paths: '["src/**", "tests/**", "uv.lock", "pyproject.toml", ".github/workflows/ci.yaml", "noxfile.py"]'

  generate-jobs-tests:
    name: ðŸ’» Generate test matrix
    needs: pre
    if: github.ref_type == 'tag' || needs.pre.outputs.should_skip != 'true'
    runs-on: ubuntu-latest
    outputs:
      sessions: ${{ steps.set-matrix.outputs.sessions }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup nox
        id: setup-nox
        uses: wntrblm/nox@main

      - name: Generate test matrix
        id: set-matrix
        shell: bash
        run: |
          echo sessions=$(
            nox --json -t tests -l |
            jq 'map(
              {
                session,
                tags,
                name: "\( .name ) on \( .python )\( if .call_spec != {} then " (\(.call_spec | to_entries | map("\(.key)=\(.value)") | join(", ")))" else "" end )"
              }
            )'
          ) | tee --append $GITHUB_OUTPUT

  tests:
    name: ðŸ”¬ ${{ matrix.session.name }}
    needs: [pre, generate-jobs-tests]
    if: github.ref_type == 'tag' || needs.pre.outputs.should_skip != 'true'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        session: ${{ fromJson(needs.generate-jobs-tests.outputs.sessions) }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup nox
        id: setup-nox
        uses: wntrblm/nox@main
        with:
          python-versions: "3.12"

      - name: Set up Docker Buildx
        if: contains(matrix.session.tags, 'docker')
        id: docker-buildx
        uses: docker/setup-buildx-action@v3

      - name: Nox cache
        id: nox-cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache
            ~/.nox
          key: ${{ runner.os }}-nox-${{ matrix.session.session }}-${{hashFiles('**/uv.lock') }}-${{ hashFiles('**/noxfile.py') }}
          restore-keys: |
            ${{ runner.os }}-nox-${{ matrix.session.session }}-
            ${{ runner.os }}-nox-

      - name: Setup uv
        id: setup-uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-suffix: ${{ runner.os }}-${{ matrix.session.session }}

      - name: Run tests
        run: nox -r -t tests -s "${{ matrix.session.session }}" -- --junitxml=./junit.xml

      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        id: upload-coverage-artifacts
        if: ${{ always() }}
        with:
          name: coverage-${{ matrix.session.session }}
          path: |
            coverage.xml
            junit.xml

  upload-coverage:
    name: ðŸ†™ Upload Coverage
    needs: [tests]
    runs-on: ubuntu-latest

    steps:
      - name: Download test artifacts
        uses: actions/download-artifact@v4

      - name: Upload coverage to Codeocv
        id: upload-coverage
        uses: codecov/codecov-action@v5
        with:
          name: drinn-tests
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true
          verbose: true

      - name: Upload test results to Codecov
        id: upload-test-results
        if: ${{ !cancelled() }}
        uses: codecov/test-results-action@v1
        with:
          files: ./junit.xml,!./cache
          name: drinn-test-results
          token: ${{ secrets.CODECOV_TOKEN }}
          verbose: true

  lint:
    name: âœ¨ Lint
    needs: pre
    if: github.ref_type == 'tag' || needs.pre.outputs.should_skip != 'true'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Pip cache
        id: cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache
            ~/.nox
          key: ${{ runner.os }}-nox-lint-${{ matrix.session.session }}-${{hashFiles('**/uv.lock') }} }}
          restore-keys: |
            ${{ runner.os }}-lint-nox-${{ matrix.session.session }}-
            ${{ runner.os }}-lint-nox-

      - name: Setup nox
        id: setup-nox
        uses: wntrblm/nox@main
        with:
          python-versions: "3.12"

      - name: Setup uv
        id: setup-uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-suffix: ${{ runner.os }}-${{ matrix.session.session }}

      - name: Install dependencies
        run: uv sync --group lint

      - name: Add .venv/bin to PATH
        run: echo "$PWD/.venv/bin" >> $GITHUB_PATH

      - run: nox -t lint

  # Ensure the workflow is successful only if all job in matrixes are successful
  result:
    name: âœ… Result
    if: (github.ref_type == 'tag' || needs.pre.outputs.should_skip != 'true') && always()
    runs-on: ubuntu-latest
    needs:
      - pre
      - tests
      - lint
    steps:
      - name: Mark workflow as failed if lint or tests did not pass
        if: needs.tests.result != 'success' || needs.lint.result != 'success'
        run: exit 1
      - name: Invoke release workflow
        if: github.ref_type == 'tag'
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: ðŸš€ Continuous Deployment
