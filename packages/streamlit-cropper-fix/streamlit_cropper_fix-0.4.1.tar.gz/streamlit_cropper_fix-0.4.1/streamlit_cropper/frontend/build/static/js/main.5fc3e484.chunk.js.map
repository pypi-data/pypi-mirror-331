{"version":3,"sources":["streamlit/ArrowTable.ts","streamlit/streamlit.ts","streamlit/StreamlitReact.tsx","StreamlitCropper.tsx","index.tsx"],"names":["ArrowTable","dataBuffer","indexBuffer","columnsBuffer","styler","_this","_classCallCheck","dataTable","indexTable","columnsTable","getCell","rowIndex","columnIndex","isBlankCell","headerRows","headerColumns","isIndexCell","isColumnsCell","classNames","push","type","join","content","dataColumnIndex","getContent","dataRowIndex","id","concat","uuid","displayValuesTable","table","column","getColumnAt","getColumnTypeId","Type","Timestamp","nanosToDate","get","this","Table","from","caption","styles","undefined","_createClass","key","length","numCols","rows","dataRows","columns","dataColumns","value","schema","fields","typeId","nanos","Date","ComponentMessageType","Streamlit","_class","API_VERSION","RENDER_EVENT","events","EventTarget","registeredMessageListener","lastFrameHeight","setComponentReady","window","addEventListener","onMessageEvent","sendBackMsg","COMPONENT_READY","apiVersion","setFrameHeight","height","document","body","scrollHeight","SET_FRAME_HEIGHT","setComponentValue","SET_COMPONENT_VALUE","event","data","onRenderMessage","args","console","error","dataframeArgs","argsDataframeToObject","_objectSpread","eventData","disabled","Boolean","CustomEvent","detail","dispatchEvent","argsDataframe","argsDataframeArrow","map","_ref","toArrowTable","Object","fromEntries","df","_df$data","index","parent","postMessage","isStreamlitMessage","React","PureComponent","withStreamlitConnection","WrappedComponent","ComponentWrapper","_React$PureComponent2","_inherits","_super2","_createSuper","props","call","componentDidMount","onRenderEvent","componentDidUpdate","state","componentError","componentWillUnmount","removeEventListener","renderEvent","setState","renderData","render","createElement","message","width","innerWidth","getDerivedStateFromError","hoistNonReactStatics","_useState","useState","fabric","Canvas","_useState2","_slicedToArray","canvas","setCanvas","_props$args","canvasWidth","canvasHeight","imageData","invisCanvas","ctx","getContext","idata","createImageData","set","putImageData","dataUri","toDataURL","useEffect","_props$args2","rectTop","rectLeft","rectWidth","rectHeight","boxColor","strokeWidth","lockAspect","enableRetinaScaling","backgroundImage","uniScaleTransform","rect","Rect","left","top","fill","objectCaching","stroke","hasRotatingPoint","add","realtimeUpdate","handleEvent","renderAll","rectObj","getObjects","bounds","getBoundingRect","adjustedCoords","coords","on","off","Fragment","ReactDOM","StrictMode","StreamlitCropper","getElementById"],"mappings":"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","file":"static/js/main.5fc3e484.chunk.js","sourcesContent":["/**\n * @license\n * Copyright 2018-2019 Streamlit Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Table, Type } from \"apache-arrow\"\n\ntype CellType = \"blank\" | \"index\" | \"columns\" | \"data\"\n\nexport interface ArrowDataframeProto {\n  data: ArrowTableProto\n  height: string\n  width: string\n}\n\nexport interface ArrowTableProto {\n  data: Uint8Array\n  index: Uint8Array\n  columns: Uint8Array\n  styler: Styler\n}\n\ninterface Cell {\n  classNames: string\n  content: string\n  id?: string\n  type: CellType\n}\n\ninterface Styler {\n  caption?: string\n  displayValuesTable: Table\n  styles?: string\n  uuid: string\n}\n\nexport class ArrowTable {\n  private readonly dataTable: Table\n  private readonly indexTable: Table\n  private readonly columnsTable: Table\n  private readonly styler?: Styler\n\n  constructor(\n    dataBuffer: Uint8Array,\n    indexBuffer: Uint8Array,\n    columnsBuffer: Uint8Array,\n    styler?: any\n  ) {\n    this.dataTable = Table.from(dataBuffer)\n    this.indexTable = Table.from(indexBuffer)\n    this.columnsTable = Table.from(columnsBuffer)\n    this.styler = styler\n      ? {\n          caption: styler.get(\"caption\"),\n          displayValuesTable: Table.from(styler.get(\"displayValues\")),\n          styles: styler.get(\"styles\"),\n          uuid: styler.get(\"uuid\"),\n        }\n      : undefined\n  }\n\n  get rows(): number {\n    return this.indexTable.length + this.columnsTable.numCols\n  }\n\n  get columns(): number {\n    return this.indexTable.numCols + this.columnsTable.length\n  }\n\n  get headerRows(): number {\n    return this.rows - this.dataRows\n  }\n\n  get headerColumns(): number {\n    return this.columns - this.dataColumns\n  }\n\n  get dataRows(): number {\n    return this.dataTable.length\n  }\n\n  get dataColumns(): number {\n    return this.dataTable.numCols\n  }\n\n  get uuid(): string | undefined {\n    return this.styler && this.styler.uuid\n  }\n\n  get caption(): string | undefined {\n    return this.styler && this.styler.caption\n  }\n\n  get styles(): string | undefined {\n    return this.styler && this.styler.styles\n  }\n\n  get table(): Table {\n    return this.dataTable\n  }\n\n  get index(): Table {\n    return this.indexTable\n  }\n\n  get columnTable(): Table {\n    return this.columnsTable\n  }\n\n  public getCell = (rowIndex: number, columnIndex: number): Cell => {\n    const isBlankCell =\n      rowIndex < this.headerRows && columnIndex < this.headerColumns\n    const isIndexCell =\n      rowIndex >= this.headerRows && columnIndex < this.headerColumns\n    const isColumnsCell =\n      rowIndex < this.headerRows && columnIndex >= this.headerColumns\n\n    if (isBlankCell) {\n      const classNames = [\"blank\"]\n      if (columnIndex > 0) {\n        classNames.push(\"level\" + rowIndex)\n      }\n\n      return {\n        type: \"blank\",\n        classNames: classNames.join(\" \"),\n        content: \"\",\n      }\n    } else if (isColumnsCell) {\n      const dataColumnIndex = columnIndex - this.headerColumns\n      const classNames = [\n        \"col_heading\",\n        \"level\" + rowIndex,\n        \"col\" + dataColumnIndex,\n      ]\n\n      return {\n        type: \"columns\",\n        classNames: classNames.join(\" \"),\n        content: this.getContent(this.columnsTable, dataColumnIndex, rowIndex),\n      }\n    } else if (isIndexCell) {\n      const dataRowIndex = rowIndex - this.headerRows\n      const classNames = [\n        \"row_heading\",\n        \"level\" + columnIndex,\n        \"row\" + dataRowIndex,\n      ]\n\n      return {\n        type: \"index\",\n        id: `T_${this.uuid}level${columnIndex}_row${dataRowIndex}`,\n        classNames: classNames.join(\" \"),\n        content: this.getContent(this.indexTable, dataRowIndex, columnIndex),\n      }\n    } else {\n      const dataRowIndex = rowIndex - this.headerRows\n      const dataColumnIndex = columnIndex - this.headerColumns\n      const classNames = [\n        \"data\",\n        \"row\" + dataRowIndex,\n        \"col\" + dataColumnIndex,\n      ]\n      const content = this.styler\n        ? this.getContent(\n            this.styler.displayValuesTable,\n            dataRowIndex,\n            dataColumnIndex\n          )\n        : this.getContent(this.dataTable, dataRowIndex, dataColumnIndex)\n\n      return {\n        type: \"data\",\n        id: `T_${this.uuid}row${dataRowIndex}_col${dataColumnIndex}`,\n        classNames: classNames.join(\" \"),\n        content,\n      }\n    }\n  }\n\n  public getContent = (\n    table: Table,\n    rowIndex: number,\n    columnIndex: number\n  ): any => {\n    const column = table.getColumnAt(columnIndex)\n    if (column === null) {\n      return \"\"\n    }\n\n    const columnTypeId = this.getColumnTypeId(table, columnIndex)\n    switch (columnTypeId) {\n      case Type.Timestamp: {\n        return this.nanosToDate(column.get(rowIndex))\n      }\n      default: {\n        return column.get(rowIndex)\n      }\n    }\n  }\n\n  /**\n   * Returns apache-arrow specific typeId of column.\n   */\n  private getColumnTypeId(table: Table, columnIndex: number): Type {\n    return table.schema.fields[columnIndex].type.typeId\n  }\n\n  private nanosToDate(nanos: number): Date {\n    return new Date(nanos / 1e6)\n  }\n}\n","/**\n * @license\n * Copyright 2018-2020 Streamlit Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Safari doesn't support the EventTarget class, so we use a shim.\nimport { EventTarget } from \"event-target-shim\"\nimport { ArrowDataframeProto, ArrowTable } from \"./ArrowTable\"\n\n/** Data sent in the custom Streamlit render event. */\nexport interface RenderData {\n  args: any\n  disabled: boolean\n}\n\n/** Messages from Component -> Streamlit */\nenum ComponentMessageType {\n  // A component sends this message when it's ready to receive messages\n  // from Streamlit. Streamlit won't send any messages until it gets this.\n  // Data: { apiVersion: number }\n  COMPONENT_READY = \"streamlit:componentReady\",\n\n  // The component has a new widget value. Send it back to Streamlit, which\n  // will then re-run the app.\n  // Data: { value: any }\n  SET_COMPONENT_VALUE = \"streamlit:setComponentValue\",\n\n  // The component has a new height for its iframe.\n  // Data: { height: number }\n  SET_FRAME_HEIGHT = \"streamlit:setFrameHeight\",\n}\n\n/**\n * Streamlit communication API.\n *\n * Components can send data to Streamlit via the functions defined here,\n * and receive data from Streamlit via the `events` property.\n */\nexport class Streamlit {\n  /**\n   * The Streamlit component API version we're targetting.\n   * There's currently only 1!\n   */\n  public static readonly API_VERSION = 1\n\n  public static readonly RENDER_EVENT = \"streamlit:render\"\n\n  /** Dispatches events received from Streamlit. */\n  public static readonly events = new EventTarget()\n\n  private static registeredMessageListener = false\n  private static lastFrameHeight?: number\n\n  /**\n   * Tell Streamlit that the component is ready to start receiving data.\n   * Streamlit will defer emitting RENDER events until it receives the\n   * COMPONENT_READY message.\n   */\n  public static setComponentReady = (): void => {\n    if (!Streamlit.registeredMessageListener) {\n      // Register for message events if we haven't already\n      window.addEventListener(\"message\", Streamlit.onMessageEvent)\n      Streamlit.registeredMessageListener = true\n    }\n\n    Streamlit.sendBackMsg(ComponentMessageType.COMPONENT_READY, {\n      apiVersion: Streamlit.API_VERSION,\n    })\n  }\n\n  /**\n   * Report the component's height to Streamlit.\n   * This should be called every time the component changes its DOM - that is,\n   * when it's first loaded, and any time it updates.\n   */\n  public static setFrameHeight = (height?: number): void => {\n    if (height === undefined) {\n      // `height` is optional. If undefined, it defaults to scrollHeight,\n      // which is the entire height of the element minus its border,\n      // scrollbar, and margin.\n      height = document.body.scrollHeight\n    }\n\n    if (height === Streamlit.lastFrameHeight) {\n      // Don't bother updating if our height hasn't changed.\n      return\n    }\n\n    Streamlit.lastFrameHeight = height\n    Streamlit.sendBackMsg(ComponentMessageType.SET_FRAME_HEIGHT, { height })\n  }\n\n  /**\n   * Set the component's value. This value will be returned to the Python\n   * script, and the script will be re-run.\n   *\n   * For example:\n   *\n   * JavaScript:\n   * Streamlit.setComponentValue(\"ahoy!\")\n   *\n   * Python:\n   * value = st.my_component(...)\n   * st.write(value) # -> \"ahoy!\"\n   *\n   * The value must be serializable into JSON.\n   */\n  public static setComponentValue = (value: any): void => {\n    Streamlit.sendBackMsg(ComponentMessageType.SET_COMPONENT_VALUE, { value })\n  }\n\n  /** Receive a ForwardMsg from the Streamlit app */\n  private static onMessageEvent = (event: MessageEvent): void => {\n    const type = event.data[\"type\"]\n    switch (type) {\n      case Streamlit.RENDER_EVENT:\n        Streamlit.onRenderMessage(event.data)\n        break\n    }\n  }\n\n  /**\n   * Handle an untyped Streamlit render event and redispatch it as a\n   * StreamlitRenderEvent.\n   */\n  private static onRenderMessage = (data: any): void => {\n    let args = data[\"args\"]\n    if (args == null) {\n      console.error(\n        `Got null args in onRenderMessage. This should never happen`\n      )\n      args = {}\n    }\n\n    // Parse our dataframe arguments with arrow, and merge them into our args dict\n    const dataframeArgs =\n      data[\"dfs\"] && data[\"dfs\"].length > 0\n        ? Streamlit.argsDataframeToObject(data[\"dfs\"])\n        : {}\n\n    args = {\n      ...args,\n      ...dataframeArgs,\n    }\n\n    const disabled = Boolean(data[\"disabled\"])\n\n    // Dispatch a render event!\n    const eventData = { disabled, args }\n    const event = new CustomEvent<RenderData>(Streamlit.RENDER_EVENT, {\n      detail: eventData,\n    })\n    Streamlit.events.dispatchEvent(event)\n  }\n\n  private static argsDataframeToObject = (\n    argsDataframe: ArgsDataframe[]\n  ): object => {\n    const argsDataframeArrow = argsDataframe.map(\n      ({ key, value }: ArgsDataframe) => [key, Streamlit.toArrowTable(value)]\n    )\n    return Object.fromEntries(argsDataframeArrow)\n  }\n\n  private static toArrowTable = (df: ArrowDataframeProto): ArrowTable => {\n    const { data, index, columns } = df.data\n    return new ArrowTable(data, index, columns)\n  }\n\n  /** Post a message to the Streamlit app. */\n  private static sendBackMsg = (type: string, data?: any): void => {\n    window.parent.postMessage(\n      {\n        isStreamlitMessage: true,\n        type: type,\n        ...data,\n      },\n      \"*\"\n    )\n  }\n}\n\ninterface ArgsDataframe {\n  key: string\n  value: ArrowDataframeProto\n}\n","import hoistNonReactStatics from \"hoist-non-react-statics\"\nimport React, { ReactNode } from \"react\"\nimport { RenderData, Streamlit } from \"./streamlit\"\n\n/**\n * Props passed to custom Streamlit components.\n */\nexport interface ComponentProps {\n  /** Named dictionary of arguments passed from Python. */\n  args: any\n\n  /** The component's width. */\n  width: number\n\n  /**\n   * True if the component should be disabled.\n   * All components get disabled while the app is being re-run,\n   * and become re-enabled when the re-run has finished.\n   */\n  disabled: boolean\n}\n\n/**\n * Optional Streamlit React-based component base class.\n *\n * You are not required to extend this base class to create a Streamlit\n * component. If you decide not to extend it, you should implement the\n * `componentDidMount` and `componentDidUpdate` functions in your own class,\n * so that your plugin properly resizes.\n */\nexport class StreamlitComponentBase<S = {}> extends React.PureComponent<\n  ComponentProps,\n  S\n> {\n  public componentDidMount(): void {\n    // After we're rendered for the first time, tell Streamlit that our height\n    // has changed.\n    Streamlit.setFrameHeight()\n  }\n\n  public componentDidUpdate(): void {\n    // After we're updated, tell Streamlit that our height may have changed.\n    Streamlit.setFrameHeight()\n  }\n}\n\n/**\n * Wrapper for React-based Streamlit components.\n *\n * Bootstraps the communication interface between Streamlit and the component.\n */\nexport function withStreamlitConnection(\n  WrappedComponent: React.ComponentType<ComponentProps>\n): React.ComponentType {\n  interface WrapperProps {}\n\n  interface WrapperState {\n    renderData?: RenderData\n    componentError?: Error\n  }\n\n  class ComponentWrapper extends React.PureComponent<\n    WrapperProps,\n    WrapperState\n  > {\n    public constructor(props: WrapperProps) {\n      super(props)\n      this.state = {\n        renderData: undefined,\n        componentError: undefined,\n      }\n    }\n\n    /**\n     * Error boundary function. This will be called if our wrapped\n     * component throws an error. We store the caught error in our state,\n     * and display it in the next render().\n     */\n    public static getDerivedStateFromError = (\n      error: Error\n    ): Partial<WrapperState> => {\n      return { componentError: error }\n    }\n\n    public componentDidMount = (): void => {\n      // Set up event listeners, and signal to Streamlit that we're ready.\n      // We won't render the component until we receive the first RENDER_EVENT.\n      Streamlit.events.addEventListener(\n        Streamlit.RENDER_EVENT,\n        this.onRenderEvent\n      )\n      Streamlit.setComponentReady()\n    }\n\n    public componentDidUpdate = (): void => {\n      // If our child threw an error, we display it in render(). In this\n      // case, the child won't be mounted and therefore won't call\n      // `setFrameHeight` on its own. We do it here so that the rendered\n      // error will be visible.\n      if (this.state.componentError != null) {\n        Streamlit.setFrameHeight()\n      }\n    }\n\n    public componentWillUnmount = (): void => {\n      Streamlit.events.removeEventListener(\n        Streamlit.RENDER_EVENT,\n        this.onRenderEvent\n      )\n    }\n\n    /**\n     * Streamlit is telling this component to redraw.\n     * We save the render data in State, so that it can be passed to the\n     * component in our own render() function.\n     */\n    private onRenderEvent = (event: Event): void => {\n      // Update our state with the newest render data\n      const renderEvent = event as CustomEvent<RenderData>\n      this.setState({ renderData: renderEvent.detail })\n    }\n\n    public render = (): ReactNode => {\n      // If our wrapped component threw an error, display it.\n      if (this.state.componentError != null) {\n        return (\n          <div>\n            <h1>Component Error</h1>\n            <span>{this.state.componentError.message}</span>\n          </div>\n        )\n      }\n\n      // Don't render until we've gotten our first RENDER_EVENT from Streamlit.\n      if (this.state.renderData == null) {\n        return null\n      }\n\n      return (\n        <WrappedComponent\n          width={window.innerWidth}\n          disabled={this.state.renderData.disabled}\n          args={this.state.renderData.args}\n        />\n      )\n    }\n  }\n\n  return hoistNonReactStatics(ComponentWrapper, WrappedComponent)\n}\n","\nimport React, {useEffect, useState} from 'react';\nimport {ComponentProps, Streamlit, withStreamlitConnection} from \"./streamlit\";\nimport {fabric} from 'fabric';\n\ninterface PythonArgs {\n    canvasWidth: number\n    canvasHeight: number\n    rectTop: number\n    rectLeft: number\n    rectWidth: number\n    rectHeight: number\n    realtimeUpdate: boolean\n    boxColor: string\n    strokeWidth: number\n    imageData: Uint8ClampedArray\n    lockAspect: boolean\n}\n\nconst StreamlitCropper = (props: ComponentProps) => {\n    const [canvas, setCanvas] = useState(new fabric.Canvas(\"\"))\n    const {canvasWidth, canvasHeight, imageData}: PythonArgs = props.args\n\n    // Create an off-screen canvas and convert imageData to a data URL\n    var invisCanvas = document.createElement(\"canvas\")\n    var ctx = invisCanvas.getContext('2d')\n    invisCanvas.width = canvasWidth\n    invisCanvas.height = canvasHeight\n\n    if (ctx) {\n      var idata = ctx.createImageData(canvasWidth, canvasHeight);\n      idata.data.set(imageData);\n      ctx.putImageData(idata, 0, 0);\n      var dataUri = invisCanvas.toDataURL()\n    } else {\n      var dataUri = \"\"\n    }\n    \n    /**\n     * Initialize canvas on mount and add a rectangle\n     */\n    useEffect(() => {\n        const {rectTop, rectLeft, rectWidth, rectHeight, boxColor, strokeWidth, lockAspect}: PythonArgs = props.args\n        const canvas = new fabric.Canvas('c', {\n            enableRetinaScaling: false,\n            backgroundImage: dataUri,\n            uniScaleTransform: lockAspect\n        })\n\n        var rect = new fabric.Rect({\n            left: rectLeft,\n            top: rectTop,\n            fill: '',\n            width: rectWidth,\n            height: rectHeight,\n            objectCaching: true,\n            stroke: boxColor,\n            strokeWidth: strokeWidth,\n            hasRotatingPoint: false\n        });\n        canvas.add(rect)\n\n        setCanvas(canvas)\n        Streamlit.setFrameHeight()\n    }, [canvasHeight, canvasWidth]);\n\n    /**\n     * On update (either realtime or doubleclick), send the coordinates of the rectangle\n     * back to streamlit, adjusting to remove the stroke width.\n     */\n    useEffect(() => {\n        const {realtimeUpdate}: PythonArgs = props.args\n        if (!canvas) return;\n        \n        const handleEvent = () => {\n            canvas.renderAll();\n            const rectObj = canvas.getObjects()[0];\n            const bounds = rectObj.getBoundingRect();\n            const stroke = rectObj.strokeWidth || 0;\n            // Adjust coordinates: since stroke is drawn centered, subtract full stroke from width/height.\n            const adjustedCoords = {\n              left: bounds.left,\n              top: bounds.top,\n              width: bounds.width - stroke,\n              height: bounds.height - stroke\n            };\n            Streamlit.setComponentValue({coords: adjustedCoords});\n        }\n        \n        if (realtimeUpdate) {\n            canvas.on(\"object:modified\", handleEvent)\n            return () => {\n                canvas.off(\"object:modified\", handleEvent);\n            }\n        } else {\n            canvas.on(\"mouse:dblclick\", handleEvent)\n            return () => {\n                canvas.off(\"mouse:dblclick\", handleEvent);\n            }\n        }\n    })\n\n    return (\n        <>\n            <canvas id=\"c\" width={canvasWidth} height={canvasHeight}/>\n        </>\n    )\n};\n\nexport default withStreamlitConnection(StreamlitCropper);\n\n\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport StreamlitCropper from \"./StreamlitCropper\"\n\nimport \"./index.css\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <StreamlitCropper />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}