"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class BlobMetadata(object):
    """Blob metadata"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.blobCreationDate = (
            None if not fromDict or propDict.get(
                "blobCreationDate"
            ) is None
            else propDict["blobCreationDate"])
        self.blobSize = (
            None if not fromDict or propDict.get(
                "blobSize"
            ) is None
            else propDict["blobSize"])
        self.blobVersion = (
            None if not fromDict or propDict.get(
                "blobVersion"
            ) is None
            else propDict["blobVersion"])
        self.dekMetadata = (
            None if not fromDict or propDict.get(
                "dekMetadata"
            ) is None
            else propDict["dekMetadata"])

    @property
    def blobCreationDate(self):
        """str: Creation date of the BLOB in ISO-8601 format"""
        return self._blobCreationDate

    @blobCreationDate.setter
    def blobCreationDate(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._blobCreationDate = value
        else:
            raise TypeError(
                'Property "blobCreationDate" of type "list<str>" set to wrong'
                ' type'
            )

    @property
    def blobSize(self):
        """long: BLOB size"""
        return self._blobSize

    @blobSize.setter
    def blobSize(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._blobSize = value
        else:
            raise TypeError(
                'Property "blobSize" of type "list<long>" set to wrong type'
            )

    @property
    def blobVersion(self):
        """str: BLOB version"""
        return self._blobVersion

    @blobVersion.setter
    def blobVersion(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._blobVersion = value
        else:
            raise TypeError(
                'Property "blobVersion" of type "list<str>" set to wrong type'
            )

    @property
    def dekMetadata(self):
        """str: DEK metadata of the blob"""
        return self._dekMetadata

    @dekMetadata.setter
    def dekMetadata(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._dekMetadata = value
        else:
            raise TypeError(
                'Property "dekMetadata" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._blobCreationDate is not None:
            result["blobCreationDate"] = \
                self._blobCreationDate
        if self._blobSize is not None:
            result["blobSize"] = \
                self._blobSize
        if self._blobVersion is not None:
            result["blobVersion"] = \
                self._blobVersion
        if self._dekMetadata is not None:
            result["dekMetadata"] = \
                self._dekMetadata
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._blobCreationDate is not None
            and
            not re.match(
                r"\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+Z",
                 self._blobCreationDate)):
            raise ValueError(
                "BlobMetadata.blobCreationDate: " + str(self._blobCreationDate) + 
                " doesnt match requirement: pattern: \d{4}-[01]\d-[0-3]\dT[0-"
                "2]\d:[0-5]\d:[0-5]\d\.\d+Z")
        return True
    

