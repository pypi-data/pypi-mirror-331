# generated by datamodel-codegen:
#   filename:  data_room_action.json

from __future__ import annotations

from enum import Enum
from typing import Optional, Sequence, Union

from pydantic import BaseModel, ConfigDict, Field, RootModel, conint


class Kind(Enum):
    BASE = 'BASE'


class AudienceReference4(BaseModel):
    kind: Kind


class Kind9(Enum):
    CUSTOM = 'CUSTOM'


class AudienceReference5(BaseModel):
    id: str
    kind: Kind9


class Kind10(Enum):
    SEED = 'SEED'


class AudienceReference6(BaseModel):
    audienceType: str
    kind: Kind10


class AudienceReference(
    RootModel[Union[AudienceReference4, AudienceReference5, AudienceReference6]]
):
    root: Union[AudienceReference4, AudienceReference5, AudienceReference6]


class BooleanOp(Enum):
    AND = 'AND'
    OR = 'OR'


class CombineOperator(Enum):
    INTERSECT = 'INTERSECT'
    UNION = 'UNION'
    DIFF = 'DIFF'


class Kind11(Enum):
    LOOKALIKE = 'LOOKALIKE'


class CustomAudienceDefinition(BaseModel):
    excludeSeedAudience: Optional[bool] = None
    kind: Kind11
    reach: conint(ge=0)
    sourceRef: AudienceReference


class Kind12(Enum):
    RULE_BASED = 'RULE_BASED'


class FilterOperator(Enum):
    CONTAINS_ANY_OF = 'CONTAINS_ANY_OF'
    CONTAINS_NONE_OF = 'CONTAINS_NONE_OF'
    CONTAINS_ALL_OF = 'CONTAINS_ALL_OF'
    EMPTY = 'EMPTY'
    NOT_EMPTY = 'NOT_EMPTY'


class UpdateAudiencesDatasetPolicyId(BaseModel):
    policy_id: Optional[str] = None


class MediaDcrAction1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    updateAudiencesDatasetPolicyId: UpdateAudiencesDatasetPolicyId


class UpdateMatchingIdsDatasetPolicyId(UpdateAudiencesDatasetPolicyId):
    pass


class MediaDcrAction2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    updateMatchingIdsDatasetPolicyId: UpdateMatchingIdsDatasetPolicyId


class UpdateDemographicsDatasetPolicyId(UpdateAudiencesDatasetPolicyId):
    pass


class MediaDcrAction3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    updateDemographicsDatasetPolicyId: UpdateDemographicsDatasetPolicyId


class UpdateSegmentsDatasetPolicyId(UpdateAudiencesDatasetPolicyId):
    pass


class MediaDcrAction4(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    updateSegmentsDatasetPolicyId: UpdateSegmentsDatasetPolicyId


class UpdateEmbeddingsDatasetPolicyId(UpdateAudiencesDatasetPolicyId):
    pass


class MediaDcrAction5(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    updateEmbeddingsDatasetPolicyId: UpdateEmbeddingsDatasetPolicyId


class DeleteCustomAudiences(BaseModel):
    audience_id: str
    force_delete_prerequisites: bool


class MediaDcrAction7(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    deleteCustomAudiences: DeleteCustomAudiences


class AudienceFilter(BaseModel):
    attribute: str
    operator: FilterOperator
    values: Optional[Sequence[str]] = None


class AudienceFilters(BaseModel):
    booleanOp: BooleanOp
    filters: Sequence[AudienceFilter]


class AudienceCombinator(BaseModel):
    filters: Optional[AudienceFilters] = None
    operator: CombineOperator
    sourceRef: AudienceReference


class CustomAudienceDefinition5(BaseModel):
    combine: Optional[Sequence[AudienceCombinator]] = None
    filters: Optional[AudienceFilters] = None
    kind: Kind12
    sourceRef: AudienceReference


class CustomAudienceDefinition3(
    RootModel[Union[CustomAudienceDefinition, CustomAudienceDefinition5]]
):
    root: Union[CustomAudienceDefinition, CustomAudienceDefinition5]


class CreateCustomAudience(BaseModel):
    definition: CustomAudienceDefinition3
    name: str
    shared_with: Sequence[str]


class MediaDcrAction6(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    createCustomAudience: CreateCustomAudience


class UpdateCustomAudience(BaseModel):
    audience_id: str
    definition: Optional[CustomAudienceDefinition3] = None
    name: Optional[str] = None
    shared_with: Optional[Sequence[str]] = None


class MediaDcrAction8(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    updateCustomAudience: UpdateCustomAudience


class MediaDcrAction(
    RootModel[
        Union[
            MediaDcrAction1,
            MediaDcrAction2,
            MediaDcrAction3,
            MediaDcrAction4,
            MediaDcrAction5,
            MediaDcrAction6,
            MediaDcrAction7,
            MediaDcrAction8,
        ]
    ]
):
    root: Union[
        MediaDcrAction1,
        MediaDcrAction2,
        MediaDcrAction3,
        MediaDcrAction4,
        MediaDcrAction5,
        MediaDcrAction6,
        MediaDcrAction7,
        MediaDcrAction8,
    ]


class DataRoomAction1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    media: MediaDcrAction


class DataRoomAction(RootModel[DataRoomAction1]):
    root: DataRoomAction1 = Field(..., title='DataRoomAction')
