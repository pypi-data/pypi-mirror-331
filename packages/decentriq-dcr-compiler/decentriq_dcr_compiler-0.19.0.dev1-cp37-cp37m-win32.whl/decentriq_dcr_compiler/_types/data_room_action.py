# generated by datamodel-codegen:
#   filename:  data_room_action.json

from __future__ import annotations

from typing import Optional, Sequence, Union

from typing_extensions import Literal, NotRequired, TypedDict


class AudienceReference4(TypedDict):
    kind: Literal['BASE']


class AudienceReference5(TypedDict):
    id: str
    kind: Literal['CUSTOM']


class AudienceReference6(TypedDict):
    audienceType: str
    kind: Literal['SEED']


AudienceReference = Union[AudienceReference4, AudienceReference5, AudienceReference6]


BooleanOp = Literal['AND', 'OR']


CombineOperator = Literal['INTERSECT', 'UNION', 'DIFF']


class CustomAudienceDefinition(TypedDict):
    excludeSeedAudience: NotRequired[Optional[bool]]
    kind: Literal['LOOKALIKE']
    reach: int
    sourceRef: AudienceReference


FilterOperator = Literal[
    'CONTAINS_ANY_OF', 'CONTAINS_NONE_OF', 'CONTAINS_ALL_OF', 'EMPTY', 'NOT_EMPTY'
]


class UpdateAudiencesDatasetPolicyId(TypedDict):
    policy_id: NotRequired[Optional[str]]


class MediaDcrAction1(TypedDict):
    updateAudiencesDatasetPolicyId: UpdateAudiencesDatasetPolicyId


class UpdateMatchingIdsDatasetPolicyId(UpdateAudiencesDatasetPolicyId):
    pass


class MediaDcrAction2(TypedDict):
    updateMatchingIdsDatasetPolicyId: UpdateMatchingIdsDatasetPolicyId


class UpdateDemographicsDatasetPolicyId(UpdateAudiencesDatasetPolicyId):
    pass


class MediaDcrAction3(TypedDict):
    updateDemographicsDatasetPolicyId: UpdateDemographicsDatasetPolicyId


class UpdateSegmentsDatasetPolicyId(UpdateAudiencesDatasetPolicyId):
    pass


class MediaDcrAction4(TypedDict):
    updateSegmentsDatasetPolicyId: UpdateSegmentsDatasetPolicyId


class UpdateEmbeddingsDatasetPolicyId(UpdateAudiencesDatasetPolicyId):
    pass


class MediaDcrAction5(TypedDict):
    updateEmbeddingsDatasetPolicyId: UpdateEmbeddingsDatasetPolicyId


class DeleteCustomAudiences(TypedDict):
    audience_id: str
    force_delete_prerequisites: bool


class MediaDcrAction7(TypedDict):
    deleteCustomAudiences: DeleteCustomAudiences


class AudienceFilter(TypedDict):
    attribute: str
    operator: FilterOperator
    values: NotRequired[Sequence[str]]


class AudienceFilters(TypedDict):
    booleanOp: BooleanOp
    filters: Sequence[AudienceFilter]


class AudienceCombinator(TypedDict):
    filters: NotRequired[Optional[AudienceFilters]]
    operator: CombineOperator
    sourceRef: AudienceReference


class CustomAudienceDefinition5(TypedDict):
    combine: NotRequired[Sequence[AudienceCombinator]]
    filters: NotRequired[Optional[AudienceFilters]]
    kind: Literal['RULE_BASED']
    sourceRef: AudienceReference


CustomAudienceDefinition3 = Union[CustomAudienceDefinition, CustomAudienceDefinition5]


class CreateCustomAudience(TypedDict):
    definition: CustomAudienceDefinition3
    name: str
    shared_with: Sequence[str]


class MediaDcrAction6(TypedDict):
    createCustomAudience: CreateCustomAudience


class UpdateCustomAudience(TypedDict):
    audience_id: str
    definition: NotRequired[Optional[CustomAudienceDefinition3]]
    name: NotRequired[Optional[str]]
    shared_with: NotRequired[Sequence[str]]


class MediaDcrAction8(TypedDict):
    updateCustomAudience: UpdateCustomAudience


MediaDcrAction = Union[
    MediaDcrAction1,
    MediaDcrAction2,
    MediaDcrAction3,
    MediaDcrAction4,
    MediaDcrAction5,
    MediaDcrAction6,
    MediaDcrAction7,
    MediaDcrAction8,
]


class DataRoomAction1(TypedDict):
    media: MediaDcrAction


DataRoomAction = DataRoomAction1
