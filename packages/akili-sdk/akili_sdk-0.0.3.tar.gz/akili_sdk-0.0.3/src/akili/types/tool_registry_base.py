# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing
from .tool_config import ToolConfig
from ..core.pydantic_utilities import IS_PYDANTIC_V2
import pydantic


class ToolRegistryBase(UniversalBaseModel):
    type: str
    name: typing.Optional[str] = None
    description: typing.Optional[str] = None
    config: typing.Optional[ToolConfig] = None
    multi_use: typing.Optional[bool] = None
    module: str
    module_name: typing.Optional[str] = None
    is_consequential: typing.Optional[bool] = None
    tags: typing.List[typing.Optional[typing.Any]]
    id: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
