# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from ..types.thread_status import ThreadStatus
from ..core.request_options import RequestOptions
from ..types.thread import Thread
from ..core.pydantic_utilities import parse_obj_as
from ..errors.unprocessable_entity_error import UnprocessableEntityError
from ..types.http_validation_error import HttpValidationError
from json.decoder import JSONDecodeError
from ..core.api_error import ApiError
from ..types.if_exists import IfExists
from ..core.jsonable_encoder import jsonable_encoder
from ..types.checkpoint import Checkpoint
from ..core.serialization import convert_and_respect_annotation_metadata
from ..core.client_wrapper import AsyncClientWrapper

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class ThreadsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def list_threads(
        self,
        *,
        status: typing.Optional[ThreadStatus] = None,
        name: typing.Optional[str] = None,
        assistant_id: typing.Optional[str] = None,
        limit: typing.Optional[int] = None,
        offset: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Thread]:
        """
        List all threads for the current user.

        Supports filtering by status, name, and assistant_id.

        Parameters
        ----------
        status : typing.Optional[ThreadStatus]

        name : typing.Optional[str]

        assistant_id : typing.Optional[str]

        limit : typing.Optional[int]
            Maximum number to return.

        offset : typing.Optional[int]
            Offset to start from.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Thread]
            Successful Response

        Examples
        --------
        from akili import AkiliApi

        client = AkiliApi(
            token="YOUR_TOKEN",
        )
        client.threads.list_threads()
        """
        _response = self._client_wrapper.httpx_client.request(
            "threads",
            method="GET",
            params={
                "status": status,
                "name": name,
                "assistant_id": assistant_id,
                "limit": limit,
                "offset": offset,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.List[Thread],
                    parse_obj_as(
                        type_=typing.List[Thread],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create_thread(
        self,
        *,
        name: typing.Optional[str] = OMIT,
        assistant_id: typing.Optional[str] = OMIT,
        metadata: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        if_exists: typing.Optional[IfExists] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Thread:
        """
        Create a thread.

        Parameters
        ----------
        name : typing.Optional[str]
            The name of the thread.

        assistant_id : typing.Optional[str]
            The ID of the assistant to use.

        metadata : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]
            Metadata to add to thread or merge with existing metadata.

        if_exists : typing.Optional[IfExists]
            How to handle duplicate creation. Must be either 'raise' (raise error if duplicate), or 'do_nothing' (return existing thread).

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Thread
            Successful Response

        Examples
        --------
        from akili import AkiliApi

        client = AkiliApi(
            token="YOUR_TOKEN",
        )
        client.threads.create_thread()
        """
        _response = self._client_wrapper.httpx_client.request(
            "threads",
            method="POST",
            json={
                "name": name,
                "assistant_id": assistant_id,
                "metadata": metadata,
                "if_exists": if_exists,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Thread,
                    parse_obj_as(
                        type_=Thread,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_thread(self, tid: str, *, request_options: typing.Optional[RequestOptions] = None) -> Thread:
        """
        Get a thread by ID.

        Parameters
        ----------
        tid : str
            The ID of the thread.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Thread
            Successful Response

        Examples
        --------
        from akili import AkiliApi

        client = AkiliApi(
            token="YOUR_TOKEN",
        )
        client.threads.get_thread(
            tid="tid",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"threads/{jsonable_encoder(tid)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Thread,
                    parse_obj_as(
                        type_=Thread,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def upsert_thread(
        self,
        tid: str,
        *,
        name: typing.Optional[str] = OMIT,
        assistant_id: typing.Optional[str] = OMIT,
        metadata: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        if_exists: typing.Optional[IfExists] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Thread:
        """
        Update a thread.

        Parameters
        ----------
        tid : str
            The ID of the thread.

        name : typing.Optional[str]
            The name of the thread.

        assistant_id : typing.Optional[str]
            The ID of the assistant to use.

        metadata : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]
            Metadata to add to thread or merge with existing metadata.

        if_exists : typing.Optional[IfExists]
            How to handle duplicate creation. Must be either 'raise' (raise error if duplicate), or 'do_nothing' (return existing thread).

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Thread
            Successful Response

        Examples
        --------
        from akili import AkiliApi

        client = AkiliApi(
            token="YOUR_TOKEN",
        )
        client.threads.upsert_thread(
            tid="tid",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"threads/{jsonable_encoder(tid)}",
            method="PUT",
            json={
                "name": name,
                "assistant_id": assistant_id,
                "metadata": metadata,
                "if_exists": if_exists,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Thread,
                    parse_obj_as(
                        type_=Thread,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def delete_thread(
        self, tid: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[typing.Any]:
        """
        Delete a thread by ID.

        Parameters
        ----------
        tid : str
            The ID of the thread.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        from akili import AkiliApi

        client = AkiliApi(
            token="YOUR_TOKEN",
        )
        client.threads.delete_thread(
            tid="tid",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"threads/{jsonable_encoder(tid)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.Optional[typing.Any],
                    parse_obj_as(
                        type_=typing.Optional[typing.Any],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def patch_thread(
        self,
        tid: str,
        *,
        name: typing.Optional[str] = OMIT,
        assistant_id: typing.Optional[str] = OMIT,
        metadata: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        if_exists: typing.Optional[IfExists] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Optional[typing.Any]:
        """
        Update a thread.

        Parameters
        ----------
        tid : str
            The ID of the thread.

        name : typing.Optional[str]
            The name of the thread.

        assistant_id : typing.Optional[str]
            The ID of the assistant to use.

        metadata : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]
            Metadata to add to thread or merge with existing metadata.

        if_exists : typing.Optional[IfExists]
            How to handle duplicate creation. Must be either 'raise' (raise error if duplicate), or 'do_nothing' (return existing thread).

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        from akili import AkiliApi

        client = AkiliApi(
            token="YOUR_TOKEN",
        )
        client.threads.patch_thread(
            tid="tid",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"threads/{jsonable_encoder(tid)}",
            method="PATCH",
            json={
                "name": name,
                "assistant_id": assistant_id,
                "metadata": metadata,
                "if_exists": if_exists,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.Optional[typing.Any],
                    parse_obj_as(
                        type_=typing.Optional[typing.Any],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_thread_state(
        self, tid: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[typing.Any]:
        """
        Get state for a thread.

        Parameters
        ----------
        tid : str
            The ID of the thread.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        from akili import AkiliApi

        client = AkiliApi(
            token="YOUR_TOKEN",
        )
        client.threads.get_thread_state(
            tid="tid",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"threads/{jsonable_encoder(tid)}/state",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.Optional[typing.Any],
                    parse_obj_as(
                        type_=typing.Optional[typing.Any],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def add_thread_state(
        self,
        tid: str,
        *,
        values: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        checkpoint: typing.Optional[Checkpoint] = OMIT,
        checkpoint_id: typing.Optional[str] = OMIT,
        as_node: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Optional[typing.Any]:
        """
        Add state to a thread.

        Parameters
        ----------
        tid : str
            The ID of the thread.

        values : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]
            The values to update the state with.

        checkpoint : typing.Optional[Checkpoint]
            The checkpoint to update the state of.

        checkpoint_id : typing.Optional[str]
            The checkpoint ID to update the state of.

        as_node : typing.Optional[str]
            Update the state as if this node had just executed.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        from akili import AkiliApi

        client = AkiliApi(
            token="YOUR_TOKEN",
        )
        client.threads.add_thread_state(
            tid="tid",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"threads/{jsonable_encoder(tid)}/state",
            method="POST",
            json={
                "values": values,
                "checkpoint": convert_and_respect_annotation_metadata(
                    object_=checkpoint, annotation=Checkpoint, direction="write"
                ),
                "checkpoint_id": checkpoint_id,
                "as_node": as_node,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.Optional[typing.Any],
                    parse_obj_as(
                        type_=typing.Optional[typing.Any],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_thread_history(
        self,
        tid: str,
        *,
        limit: typing.Optional[int] = None,
        before: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Optional[typing.Any]:
        """
        Get all past states for a thread.

        Parameters
        ----------
        tid : str
            The ID of the thread.

        limit : typing.Optional[int]
            Maximum number to return.

        before : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        from akili import AkiliApi

        client = AkiliApi(
            token="YOUR_TOKEN",
        )
        client.threads.get_thread_history(
            tid="tid",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"threads/{jsonable_encoder(tid)}/history",
            method="GET",
            params={
                "limit": limit,
                "before": before,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.Optional[typing.Any],
                    parse_obj_as(
                        type_=typing.Optional[typing.Any],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_thread_checkpoint(
        self,
        tid: str,
        *,
        checkpoint: Checkpoint,
        subgraphs: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Optional[typing.Any]:
        """
        Get state for a thread at a specific checkpoint.

        Parameters
        ----------
        tid : str
            The ID of the thread.

        checkpoint : Checkpoint
            The checkpoint to get the state for.

        subgraphs : typing.Optional[bool]
            Include subgraph states.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        from akili import AkiliApi, Checkpoint

        client = AkiliApi(
            token="YOUR_TOKEN",
        )
        client.threads.get_thread_checkpoint(
            tid="tid",
            checkpoint=Checkpoint(
                thread_id="thread_id",
                checkpoint_ns="checkpoint_ns",
            ),
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"threads/{jsonable_encoder(tid)}/state/checkpoint",
            method="POST",
            json={
                "checkpoint": convert_and_respect_annotation_metadata(
                    object_=checkpoint, annotation=Checkpoint, direction="write"
                ),
                "subgraphs": subgraphs,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.Optional[typing.Any],
                    parse_obj_as(
                        type_=typing.Optional[typing.Any],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def search_threads(
        self,
        *,
        metadata: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        values: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        status: typing.Optional[ThreadStatus] = OMIT,
        name: typing.Optional[str] = OMIT,
        assistant_id: typing.Optional[str] = OMIT,
        limit: typing.Optional[int] = OMIT,
        offset: typing.Optional[int] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Thread]:
        """
        Search for threads.

        This endpoint also functions as the endpoint to list all threads.

        Parameters
        ----------
        metadata : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]
            Metadata to filter by. Exact match filter for each KV pair.

        values : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]
            State values to filter on. Exact match filter for each KV pair.

        status : typing.Optional[ThreadStatus]
            Thread status to filter on.

        name : typing.Optional[str]
            Filter threads by name (case-insensitive partial match).

        assistant_id : typing.Optional[str]
            Filter threads by assistant ID.

        limit : typing.Optional[int]
            Maximum number to return.

        offset : typing.Optional[int]
            Offset to start from.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Thread]
            Successful Response

        Examples
        --------
        from akili import AkiliApi

        client = AkiliApi(
            token="YOUR_TOKEN",
        )
        client.threads.search_threads()
        """
        _response = self._client_wrapper.httpx_client.request(
            "threads/search",
            method="POST",
            json={
                "metadata": metadata,
                "values": values,
                "status": status,
                "name": name,
                "assistant_id": assistant_id,
                "limit": limit,
                "offset": offset,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.List[Thread],
                    parse_obj_as(
                        type_=typing.List[Thread],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncThreadsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def list_threads(
        self,
        *,
        status: typing.Optional[ThreadStatus] = None,
        name: typing.Optional[str] = None,
        assistant_id: typing.Optional[str] = None,
        limit: typing.Optional[int] = None,
        offset: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Thread]:
        """
        List all threads for the current user.

        Supports filtering by status, name, and assistant_id.

        Parameters
        ----------
        status : typing.Optional[ThreadStatus]

        name : typing.Optional[str]

        assistant_id : typing.Optional[str]

        limit : typing.Optional[int]
            Maximum number to return.

        offset : typing.Optional[int]
            Offset to start from.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Thread]
            Successful Response

        Examples
        --------
        import asyncio

        from akili import AsyncAkiliApi

        client = AsyncAkiliApi(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.threads.list_threads()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "threads",
            method="GET",
            params={
                "status": status,
                "name": name,
                "assistant_id": assistant_id,
                "limit": limit,
                "offset": offset,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.List[Thread],
                    parse_obj_as(
                        type_=typing.List[Thread],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def create_thread(
        self,
        *,
        name: typing.Optional[str] = OMIT,
        assistant_id: typing.Optional[str] = OMIT,
        metadata: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        if_exists: typing.Optional[IfExists] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Thread:
        """
        Create a thread.

        Parameters
        ----------
        name : typing.Optional[str]
            The name of the thread.

        assistant_id : typing.Optional[str]
            The ID of the assistant to use.

        metadata : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]
            Metadata to add to thread or merge with existing metadata.

        if_exists : typing.Optional[IfExists]
            How to handle duplicate creation. Must be either 'raise' (raise error if duplicate), or 'do_nothing' (return existing thread).

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Thread
            Successful Response

        Examples
        --------
        import asyncio

        from akili import AsyncAkiliApi

        client = AsyncAkiliApi(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.threads.create_thread()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "threads",
            method="POST",
            json={
                "name": name,
                "assistant_id": assistant_id,
                "metadata": metadata,
                "if_exists": if_exists,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Thread,
                    parse_obj_as(
                        type_=Thread,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_thread(self, tid: str, *, request_options: typing.Optional[RequestOptions] = None) -> Thread:
        """
        Get a thread by ID.

        Parameters
        ----------
        tid : str
            The ID of the thread.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Thread
            Successful Response

        Examples
        --------
        import asyncio

        from akili import AsyncAkiliApi

        client = AsyncAkiliApi(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.threads.get_thread(
                tid="tid",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"threads/{jsonable_encoder(tid)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Thread,
                    parse_obj_as(
                        type_=Thread,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def upsert_thread(
        self,
        tid: str,
        *,
        name: typing.Optional[str] = OMIT,
        assistant_id: typing.Optional[str] = OMIT,
        metadata: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        if_exists: typing.Optional[IfExists] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Thread:
        """
        Update a thread.

        Parameters
        ----------
        tid : str
            The ID of the thread.

        name : typing.Optional[str]
            The name of the thread.

        assistant_id : typing.Optional[str]
            The ID of the assistant to use.

        metadata : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]
            Metadata to add to thread or merge with existing metadata.

        if_exists : typing.Optional[IfExists]
            How to handle duplicate creation. Must be either 'raise' (raise error if duplicate), or 'do_nothing' (return existing thread).

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Thread
            Successful Response

        Examples
        --------
        import asyncio

        from akili import AsyncAkiliApi

        client = AsyncAkiliApi(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.threads.upsert_thread(
                tid="tid",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"threads/{jsonable_encoder(tid)}",
            method="PUT",
            json={
                "name": name,
                "assistant_id": assistant_id,
                "metadata": metadata,
                "if_exists": if_exists,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Thread,
                    parse_obj_as(
                        type_=Thread,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def delete_thread(
        self, tid: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[typing.Any]:
        """
        Delete a thread by ID.

        Parameters
        ----------
        tid : str
            The ID of the thread.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        import asyncio

        from akili import AsyncAkiliApi

        client = AsyncAkiliApi(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.threads.delete_thread(
                tid="tid",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"threads/{jsonable_encoder(tid)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.Optional[typing.Any],
                    parse_obj_as(
                        type_=typing.Optional[typing.Any],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def patch_thread(
        self,
        tid: str,
        *,
        name: typing.Optional[str] = OMIT,
        assistant_id: typing.Optional[str] = OMIT,
        metadata: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        if_exists: typing.Optional[IfExists] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Optional[typing.Any]:
        """
        Update a thread.

        Parameters
        ----------
        tid : str
            The ID of the thread.

        name : typing.Optional[str]
            The name of the thread.

        assistant_id : typing.Optional[str]
            The ID of the assistant to use.

        metadata : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]
            Metadata to add to thread or merge with existing metadata.

        if_exists : typing.Optional[IfExists]
            How to handle duplicate creation. Must be either 'raise' (raise error if duplicate), or 'do_nothing' (return existing thread).

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        import asyncio

        from akili import AsyncAkiliApi

        client = AsyncAkiliApi(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.threads.patch_thread(
                tid="tid",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"threads/{jsonable_encoder(tid)}",
            method="PATCH",
            json={
                "name": name,
                "assistant_id": assistant_id,
                "metadata": metadata,
                "if_exists": if_exists,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.Optional[typing.Any],
                    parse_obj_as(
                        type_=typing.Optional[typing.Any],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_thread_state(
        self, tid: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[typing.Any]:
        """
        Get state for a thread.

        Parameters
        ----------
        tid : str
            The ID of the thread.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        import asyncio

        from akili import AsyncAkiliApi

        client = AsyncAkiliApi(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.threads.get_thread_state(
                tid="tid",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"threads/{jsonable_encoder(tid)}/state",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.Optional[typing.Any],
                    parse_obj_as(
                        type_=typing.Optional[typing.Any],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def add_thread_state(
        self,
        tid: str,
        *,
        values: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        checkpoint: typing.Optional[Checkpoint] = OMIT,
        checkpoint_id: typing.Optional[str] = OMIT,
        as_node: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Optional[typing.Any]:
        """
        Add state to a thread.

        Parameters
        ----------
        tid : str
            The ID of the thread.

        values : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]
            The values to update the state with.

        checkpoint : typing.Optional[Checkpoint]
            The checkpoint to update the state of.

        checkpoint_id : typing.Optional[str]
            The checkpoint ID to update the state of.

        as_node : typing.Optional[str]
            Update the state as if this node had just executed.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        import asyncio

        from akili import AsyncAkiliApi

        client = AsyncAkiliApi(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.threads.add_thread_state(
                tid="tid",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"threads/{jsonable_encoder(tid)}/state",
            method="POST",
            json={
                "values": values,
                "checkpoint": convert_and_respect_annotation_metadata(
                    object_=checkpoint, annotation=Checkpoint, direction="write"
                ),
                "checkpoint_id": checkpoint_id,
                "as_node": as_node,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.Optional[typing.Any],
                    parse_obj_as(
                        type_=typing.Optional[typing.Any],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_thread_history(
        self,
        tid: str,
        *,
        limit: typing.Optional[int] = None,
        before: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Optional[typing.Any]:
        """
        Get all past states for a thread.

        Parameters
        ----------
        tid : str
            The ID of the thread.

        limit : typing.Optional[int]
            Maximum number to return.

        before : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        import asyncio

        from akili import AsyncAkiliApi

        client = AsyncAkiliApi(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.threads.get_thread_history(
                tid="tid",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"threads/{jsonable_encoder(tid)}/history",
            method="GET",
            params={
                "limit": limit,
                "before": before,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.Optional[typing.Any],
                    parse_obj_as(
                        type_=typing.Optional[typing.Any],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_thread_checkpoint(
        self,
        tid: str,
        *,
        checkpoint: Checkpoint,
        subgraphs: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Optional[typing.Any]:
        """
        Get state for a thread at a specific checkpoint.

        Parameters
        ----------
        tid : str
            The ID of the thread.

        checkpoint : Checkpoint
            The checkpoint to get the state for.

        subgraphs : typing.Optional[bool]
            Include subgraph states.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        import asyncio

        from akili import AsyncAkiliApi, Checkpoint

        client = AsyncAkiliApi(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.threads.get_thread_checkpoint(
                tid="tid",
                checkpoint=Checkpoint(
                    thread_id="thread_id",
                    checkpoint_ns="checkpoint_ns",
                ),
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"threads/{jsonable_encoder(tid)}/state/checkpoint",
            method="POST",
            json={
                "checkpoint": convert_and_respect_annotation_metadata(
                    object_=checkpoint, annotation=Checkpoint, direction="write"
                ),
                "subgraphs": subgraphs,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.Optional[typing.Any],
                    parse_obj_as(
                        type_=typing.Optional[typing.Any],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def search_threads(
        self,
        *,
        metadata: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        values: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        status: typing.Optional[ThreadStatus] = OMIT,
        name: typing.Optional[str] = OMIT,
        assistant_id: typing.Optional[str] = OMIT,
        limit: typing.Optional[int] = OMIT,
        offset: typing.Optional[int] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Thread]:
        """
        Search for threads.

        This endpoint also functions as the endpoint to list all threads.

        Parameters
        ----------
        metadata : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]
            Metadata to filter by. Exact match filter for each KV pair.

        values : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]
            State values to filter on. Exact match filter for each KV pair.

        status : typing.Optional[ThreadStatus]
            Thread status to filter on.

        name : typing.Optional[str]
            Filter threads by name (case-insensitive partial match).

        assistant_id : typing.Optional[str]
            Filter threads by assistant ID.

        limit : typing.Optional[int]
            Maximum number to return.

        offset : typing.Optional[int]
            Offset to start from.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Thread]
            Successful Response

        Examples
        --------
        import asyncio

        from akili import AsyncAkiliApi

        client = AsyncAkiliApi(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.threads.search_threads()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "threads/search",
            method="POST",
            json={
                "metadata": metadata,
                "values": values,
                "status": status,
                "name": name,
                "assistant_id": assistant_id,
                "limit": limit,
                "offset": offset,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.List[Thread],
                    parse_obj_as(
                        type_=typing.List[Thread],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
