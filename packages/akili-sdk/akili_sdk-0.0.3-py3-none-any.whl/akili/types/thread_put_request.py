# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing
import pydantic
from .if_exists import IfExists
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class ThreadPutRequest(UniversalBaseModel):
    """
    Payload for creating a thread.
    """

    name: typing.Optional[str] = pydantic.Field(default=None)
    """
    The name of the thread.
    """

    assistant_id: typing.Optional[str] = pydantic.Field(default=None)
    """
    The ID of the assistant to use.
    """

    metadata: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = pydantic.Field(default=None)
    """
    Metadata to add to thread or merge with existing metadata.
    """

    if_exists: typing.Optional[IfExists] = pydantic.Field(default=None)
    """
    How to handle duplicate creation. Must be either 'raise' (raise error if duplicate), or 'do_nothing' (return existing thread).
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
