# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import pydantic
import datetime as dt
import typing
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class Thread(UniversalBaseModel):
    """
    A thread contains the accumulated outputs of a group of runs.
    """

    thread_id: str = pydantic.Field()
    """
    Unique identifier for the thread.
    """

    created_at: dt.datetime = pydantic.Field()
    """
    Timestamp when the thread was created.
    """

    updated_at: typing.Optional[dt.datetime] = pydantic.Field(default=None)
    """
    Timestamp when the thread was last updated.
    """

    metadata: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = pydantic.Field(default=None)
    """
    The metadata of the thread.
    """

    status: typing.Optional[str] = pydantic.Field(default=None)
    """
    The status of the thread.
    """

    config: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = pydantic.Field(default=None)
    """
    The config of the thread.
    """

    values: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = pydantic.Field(default=None)
    """
    The values of the thread.
    """

    assistant_id: typing.Optional[str] = pydantic.Field(default=None)
    """
    ID of the assistant this thread belongs to.
    """

    name: typing.Optional[str] = pydantic.Field(default=None)
    """
    The name of the thread.
    """

    interrupts: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = pydantic.Field(default=None)
    """
    The interrupts of the thread.
    """

    user_id: typing.Optional[str] = pydantic.Field(default=None)
    """
    ID of the user that owns the thread.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
