{
    "config": {
        "step": {
            "broker": {
                "data_description": {
                    "keepalive": "A value less than 90 seconds is advised."
                }
            }
        }
    },
    "exceptions": {
        "addon_start_failed": {
            "message": "Failed to correctly start {addon} add-on."
        },
        "mqtt_broker_error": {
            "message": "Error talking to MQTT: {error_message}."
        },
        "mqtt_not_setup_cannot_unsubscribe_twice": {
            "message": "Cannot unsubscribe topic \"{topic}\" twice."
        },
        "mqtt_topic_not_a_string": {
            "message": "Topic needs to be a string! Got: {topic}."
        },
        "mqtt_trigger_cannot_remove_twice": {
            "message": "Can't remove trigger twice."
        }
    },
    "options": {
        "step": {
            "broker": {
                "data_description": {
                    "keepalive": "A value less than 90 seconds is advised."
                }
            }
        }
    },
    "services": {
        "dump": {
            "description": "Writes all messages on a specific topic into the `mqtt_dump.txt` file in your configuration folder.",
            "fields": {
                "duration": {
                    "description": "How long we should listen for messages in seconds.",
                    "name": "Duration"
                },
                "topic": {
                    "description": "Topic to listen to."
                }
            },
            "name": "Export"
        },
        "publish": {
            "description": "Publishes a message to an MQTT topic.",
            "fields": {
                "evaluate_payload": {
                    "description": "When `payload` is a Python bytes literal, evaluate the bytes literal and publish the raw data."
                },
                "payload": {
                    "name": "Payload"
                },
                "qos": {
                    "name": "QoS"
                },
                "retain": {
                    "description": "If the message should have the retain flag set. If set, the broker stores the most recent message on a topic.",
                    "name": "Retain"
                },
                "topic": {
                    "description": "Topic to publish to."
                }
            },
            "name": "Publish"
        },
        "reload": {
            "description": "Reloads MQTT entities from the YAML-configuration.",
            "name": "Reload"
        }
    }
}