"""
Command models for SmartTerminal.

This module defines models for representing terminal commands, their parameters,
execution results, and AI tool calls.
"""

from enum import Enum
from pydantic import BaseModel, Field
from typing import List, Optional, Dict, Any


class OsType(str, Enum):
    """Supported operating system types."""

    MACOS = "macos"
    LINUX = "linux"
    WINDOWS = "windows"


class Command(BaseModel):
    """
    Represents a terminal command with its parameters and metadata.

    This model is used to represent commands generated by the AI,
    including any placeholders for user input and metadata like
    OS compatibility and admin requirements.
    """

    command: str = Field(
        ..., description="The terminal command string, possibly with placeholders"
    )

    user_inputs: List[str] = Field(
        default_factory=list,
        description="List of input placeholders that need to be filled by the user",
    )

    os: OsType = Field(
        default=OsType.MACOS, description="Target operating system for this command"
    )

    requires_admin: bool = Field(
        default=False,
        description="Whether this command requires administrator/root privileges",
    )

    description: Optional[str] = Field(
        default=None,
        description="A human-readable description of what this command does",
    )

    def has_placeholders(self) -> bool:
        """Check if this command has any placeholders that need to be filled."""
        return len(self.user_inputs) > 0 or "<" in self.command and ">" in self.command

    def replace_placeholder(self, placeholder: str, value: str) -> None:
        """
        Replace a specific placeholder with a value.

        Args:
            placeholder: Placeholder name (without angle brackets)
            value: Value to replace the placeholder with
        """
        self.command = self.command.replace(f"<{placeholder}>", value)

        # Remove from user_inputs if present
        if placeholder in self.user_inputs:
            self.user_inputs.remove(placeholder)


class CommandResult(BaseModel):
    """
    Represents the result of executing a command.

    This model captures the success/failure status, output text,
    and any error information from command execution.
    """

    success: bool = Field(..., description="Whether the command executed successfully")

    output: str = Field(
        default="",
        description="Command output (stdout) if successful, error message if not",
    )

    command: str = Field(..., description="The command that was executed")

    exit_code: Optional[int] = Field(
        default=None, description="Command exit code if available"
    )

    environment_modified: bool = Field(
        default=False, description="Whether this command modified the shell environment"
    )


class ToolCall(BaseModel):
    """
    Represents an AI tool call for command generation.

    This model maps to the tool call objects returned by the AI API,
    with focus on command generation tools.
    """

    id: str = Field(..., description="Unique identifier for this tool call")
    type: str = Field(..., description="Type of tool call (usually 'function')")
    function_name: str = Field(..., description="Name of the function that was called")
    arguments: Dict[str, Any] = Field(
        ..., description="Arguments passed to the function"
    )

    def to_command(self) -> Optional[Command]:
        """
        Convert this tool call to a Command object if possible.

        Returns:
            Command object or None if conversion is not possible
        """
        if self.function_name != "get_command":
            return None

        return Command(
            command=self.arguments.get("command", ""),
            user_inputs=self.arguments.get("user_inputs", []),
            os=self.arguments.get("os", OsType.MACOS),
            requires_admin=self.arguments.get("requires_admin", False),
            description=self.arguments.get("description", None),
        )
