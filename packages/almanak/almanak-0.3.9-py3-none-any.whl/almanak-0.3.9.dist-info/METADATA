Metadata-Version: 2.3
Name: almanak
Version: 0.3.9
Summary: 
Author: engineering@almanak.co
Requires-Python: >=3.11,<3.13
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Provides-Extra: dev
Requires-Dist: aiofiles (>=24.1.0,<25.0.0)
Requires-Dist: aiohttp (>=3.11.11,<4.0.0)
Requires-Dist: almanak-src (>=0.0.1,<0.0.2) ; sys_platform != "darwin"
Requires-Dist: almanak-src (>=0.0.2,<0.0.3) ; sys_platform == "darwin"
Requires-Dist: anyio (>=4.8.0,<5.0.0)
Requires-Dist: bandit (>=1.7.5) ; extra == "dev"
Requires-Dist: build (>=1.2.2.post1) ; extra == "dev"
Requires-Dist: click (>=8.1.8,<9.0.0)
Requires-Dist: coverage (>=7.3.2) ; extra == "dev"
Requires-Dist: eth-abi (>=5.2.0,<6.0.0)
Requires-Dist: eth-typing (>=5.1.0,<6.0.0)
Requires-Dist: google-cloud-bigquery (>=3.29.0,<4.0.0)
Requires-Dist: google-cloud-logging (>=3.11.3,<4.0.0)
Requires-Dist: google-cloud-secret-manager (>=2.22.1,<3.0.0)
Requires-Dist: google-cloud-storage (>=2.19.0,<3.0.0)
Requires-Dist: gql (>=3.5.0,<4.0.0)
Requires-Dist: httpx (>=0.28.1,<0.29.0)
Requires-Dist: isort (>=5.12.0) ; extra == "dev"
Requires-Dist: jsonschema (>=4.23.0,<5.0.0)
Requires-Dist: keyrings-google-artifactregistry-auth (>=1.1.2) ; extra == "dev"
Requires-Dist: md-click-2 (>=0.0.1,<0.0.2) ; extra == "dev"
Requires-Dist: mock (>=5.1.0) ; extra == "dev"
Requires-Dist: mypy (>=1.14.1,<2.0.0) ; extra == "dev"
Requires-Dist: nbformat (>=5.10.4,<6.0.0)
Requires-Dist: numpy (>=1.26.4,<2.0.0)
Requires-Dist: pandas (>=2.2.3,<3.0.0)
Requires-Dist: protobuf (>=5.29.3,<6.0.0)
Requires-Dist: pyarmor (>=9.0.7) ; extra == "dev"
Requires-Dist: pydantic (>=2.10.6,<3.0.0)
Requires-Dist: pydoc-markdown (>=4.8.2) ; extra == "dev"
Requires-Dist: pyjwt (>=2.10.1,<3.0.0)
Requires-Dist: pylint (>=3.0.2) ; extra == "dev"
Requires-Dist: pytest (>=7.4.3) ; extra == "dev"
Requires-Dist: pytest-mock (>=3.14.0) ; extra == "dev"
Requires-Dist: python-dotenv (>=1.0.1,<2.0.0)
Requires-Dist: python-telegram-bot (>=21.10,<22.0)
Requires-Dist: pyyaml (>=6.0.2,<7.0.0)
Requires-Dist: requests (>=2.32.3,<3.0.0)
Requires-Dist: requests-toolbelt (>=1.0.0,<2.0.0)
Requires-Dist: retry (>=0.9.2,<0.10.0)
Requires-Dist: safety (>=2.3.5) ; extra == "dev"
Requires-Dist: setuptools (>=61) ; extra == "dev"
Requires-Dist: sqlmodel (>=0.0.22,<0.0.23)
Requires-Dist: twine (>=6.1.0,<7.0.0) ; extra == "dev"
Requires-Dist: web3 (>=6.7.0,<7.0.0)
Requires-Dist: wheel (==0.34.1) ; extra == "dev"
Requires-Dist: yapf (>=0.40.2) ; extra == "dev"
Description-Content-Type: text/markdown

# Almanak SDK

## Development

Follow these steps to set up your local development environment:

1. Clone the repository:

    ```bash
    git clone git@github.com:almanak-co/almanak-sdk.git
    cd almanak-sdk
    ```

2. Set up your local python environment:

    ```bash
    pip install poetry
    make install-dev
    ```

3. Run the example to ensure everything is set up correctly:

    ```bash
    make run-example
    ```

4. After you make your changes, ensure your changes pass the tests and linters:

    ```bash
    make test
    make lint
    ```

5. Commit your changes and push your branch to GitHub.


## Contributing

We welcome contributions! Please follow these steps to contribute:

1. Fork the repository.
2. Create a new branch for your feature or bugfix:
    ```bash
    git checkout -b feature/your-feature-name
    ```
3. Make your changes and ensure all tests pass:
    ```bash
    make test
    ```
4. Commit your changes and push to your branch:
    ```bash
    git commit -m "Description of your changes"
    git push origin feature/your-feature-name
    ```
5. Open a pull request detailing your changes.


## Using the Makefile

The Makefile provides several useful commands to streamline your workflow:

- **Install dependencies**
    ```bash
    make install-dev
    ```
- **Run tests**
    ```bash
    make test
    ```
- **Run linter**
    ```bash
    make lint
    ```
- **Run security checks**
    ```bash
    make security
    ```
- **Generate documentation**
    ```bash
    make docs
    ```
- **Build package**
    ```bash
    make build
    ```


## Publishing to PyPI

To publish the package to PyPI, follow these steps:

1. Ensure all tests pass:
    ```bash
    make test
    ```
2. Build the package:
    ```bash
    make build
    ```
3. Publish the package using the GitHub Actions workflows:

    - **Private PyPI:** Push to the `dev` or `main` branches to publish to the private PyPI repository.
    
    - **Public PyPI:** Create a Git tag (e.g., `v1.0.0`) to publish to the public PyPI repository.

    Refer to the GitHub Actions workflows:
    - **Publish Workflow:** `.github/workflows/publish.yml`
    - **Dev CI/CD Workflow:** `.github/workflows/dev_cicd.yml`

    For detailed information, see the [GitHub Actions documentation](https://docs.github.com/actions).


## CLI Usage

Refer to the documentation [here](https://almanak.atlassian.net/l/cp/yPepsGU8).


## Package Versioning

The package versioning is managed based on the Git branch and tags to determine where and how the package is published.

### Versioning Strategy

- **Development Versions:**
  - **Branch:** `dev`
  - **Version Source:** `setup.py`
  - **Publishing Repository:** Private PyPI
  - **Process:** When changes are pushed to the `dev` branch, the `dev_cicd.yml` workflow publishes the package to the private PyPI repository using the version specified in `setup.py`.

- **Public Releases:**
  - **Branch:** `main`
  - **Version Source:** Git Tags (e.g., `v1.0.0`)
  - **Publishing Repository:** Public PyPI
  - **Process:** When a Git tag following the `vX.Y.Z` format (e.g., `v1.0.0`) is pushed to the `main` branch, the `publish.yml` workflow extracts the version from the tag and publishes the package to the public PyPI repository.

### How Version is Set

- **For Development (Private PyPI):**
  - The version is defined directly in `setup.py`. 
  - Update the `version` field in `setup.py` for each development release.
  
    ```python
    # setup.py
    from setuptools import setup, find_packages

    setup(
        name="almanak",
        version="0.1.0",  # Update this version for development releases
        packages=find_packages(),
        # ... other configurations ...
    )
    ```

- **For Public Releases (Public PyPI):**
  - Create a Git tag following the format `vX.Y.Z` (e.g., `v1.0.0`).
  - The `publish.yml` workflow automatically extracts the version number from the tag and uses it for the package version during publication.

    ```bash
    git tag v1.0.0
    git push origin v1.0.0
    ```

### Publishing Workflow Summary

- **Pushing to `dev` Branch:**
  - Triggers the `dev_cicd.yml` workflow.
  - Publishes the package to the **private PyPI** repository.
  - Uses the version specified in `setup.py`.

- **Pushing a Tag to `main` Branch:**
  - Triggers the `publish.yml` workflow.
  - Publishes the package to the **public PyPI** repository.
  - Uses the version extracted from the Git tag.

### Best Practices

- **Development:**
  - Regularly update the `version` in `setup.py` to reflect incremental changes.
  - Use semantic versioning (e.g., `0.1.0`, `0.2.0`, etc.) for clarity.

- **Public Releases:**
  - Ensure that all changes intended for public release are merged into the `main` branch.
  - Tag the release appropriately following the `vX.Y.Z` format to automate the publication process.

By following this versioning strategy, the project maintains a clear separation between development and production releases, ensuring that private developments do not inadvertently become public until intentionally tagged and published.

