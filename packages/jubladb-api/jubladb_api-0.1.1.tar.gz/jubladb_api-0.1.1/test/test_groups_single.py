# coding: utf-8

"""
    Hitobito JSON:API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Contact: info@hitobito.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from jubladb_api.models.groups_single import GroupsSingle

class TestGroupsSingle(unittest.TestCase):
    """GroupsSingle unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GroupsSingle:
        """Test GroupsSingle
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GroupsSingle`
        """
        model = GroupsSingle()
        if include_optional:
            return GroupsSingle(
                data = jubladb_api.models.groups_resource.groups_resource(
                    id = '10', 
                    type = 'groups', 
                    attributes = jubladb_api.models.groups.groups(
                        name = '', 
                        short_name = '', 
                        display_name = '', 
                        description = '', 
                        layer = True, 
                        parent_id = 56, 
                        layer_group_id = 56, 
                        type = '', 
                        email = '', 
                        address = '', 
                        zip_code = 56, 
                        town = '', 
                        country = '', 
                        require_person_add_requests = True, 
                        self_registration_url = '', 
                        archived_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        deleted_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        logo = '', ), 
                    relationships = jubladb_api.models.groups_relationships.groups_relationships(
                        contact = jubladb_api.models.courses_relationships_contact.courses_relationships_contact(
                            links = { }, 
                            data = jubladb_api.models.jsonapi_linkage.jsonapi_linkage(
                                type = 'additional_emails', 
                                meta = { }, 
                                id = '44', ), 
                            meta = { }, ), 
                        creator = jubladb_api.models.courses_relationships_contact.courses_relationships_contact(), 
                        updater = , 
                        deleter = , 
                        parent = , 
                        layer_group = , 
                        phone_numbers = jubladb_api.models.courses_relationships_dates.courses_relationships_dates(), 
                        social_accounts = jubladb_api.models.courses_relationships_dates.courses_relationships_dates(), 
                        additional_emails = , ), 
                    links = {
                        'key' : null
                        }, ),
                included = [
                    jubladb_api.models.jsonapi_resource.jsonapi_resource()
                    ],
                meta = { },
                links = None,
                jsonapi = jubladb_api.models.jsonapi_jsonapi.jsonapi_jsonapi(
                    version = '1.0', 
                    meta = { }, )
            )
        else:
            return GroupsSingle(
        )
        """

    def testGroupsSingle(self):
        """Test GroupsSingle"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
