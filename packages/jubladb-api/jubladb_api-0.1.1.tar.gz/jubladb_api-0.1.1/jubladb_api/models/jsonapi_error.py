# coding: utf-8

"""
    Hitobito JSON:API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Contact: oss@basilbader.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from jubladb_api.models.jsonapi_error_source import JsonapiErrorSource
from jubladb_api.models.jsonapi_link import JsonapiLink
from typing import Optional, Set
from typing_extensions import Self

class JsonapiError(BaseModel):
    """
    JsonapiError
    """ # noqa: E501
    links: Optional[Dict[str, JsonapiLink]] = None
    status: Optional[StrictStr] = Field(default=None, description="The HTTP status code applicable to this problem, expressed as a string value.")
    code: Optional[StrictStr] = Field(default=None, description="An application-specific error code, expressed as a string value.")
    title: Optional[StrictStr] = Field(default=None, description="A short, human-readable summary of the problem. It **SHOULD NOT** change from occurrence to occurrence of the problem, except for purposes of localization.")
    detail: Optional[StrictStr] = Field(default=None, description="A human-readable explanation specific to this occurrence of the problem.")
    source: Optional[JsonapiErrorSource] = None
    meta: Optional[Dict[str, Any]] = Field(default=None, description="Non-standard meta-information that can not be represented as an attribute or relationship.")
    __properties: ClassVar[List[str]] = ["links", "status", "code", "title", "detail", "source", "meta"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of JsonapiError from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in links (dict)
        _field_dict = {}
        if self.links:
            for _key_links in self.links:
                if self.links[_key_links]:
                    _field_dict[_key_links] = self.links[_key_links].to_dict()
            _dict['links'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of source
        if self.source:
            _dict['source'] = self.source.to_dict()
        # set to None if links (nullable) is None
        # and model_fields_set contains the field
        if self.links is None and "links" in self.model_fields_set:
            _dict['links'] = None

        # set to None if meta (nullable) is None
        # and model_fields_set contains the field
        if self.meta is None and "meta" in self.model_fields_set:
            _dict['meta'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of JsonapiError from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "links": dict(
                (_k, JsonapiLink.from_dict(_v))
                for _k, _v in obj["links"].items()
            )
            if obj.get("links") is not None
            else None,
            "status": obj.get("status"),
            "code": obj.get("code"),
            "title": obj.get("title"),
            "detail": obj.get("detail"),
            "source": JsonapiErrorSource.from_dict(obj["source"]) if obj.get("source") is not None else None,
            "meta": obj.get("meta")
        })
        return _obj


