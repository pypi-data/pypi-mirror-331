# coding: utf-8

"""
    Hitobito JSON:API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Contact: oss@basilbader.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import date, datetime
from pydantic import Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import List, Optional
from typing_extensions import Annotated
from jubladb_api.models.additional_emails_readable_attribute import AdditionalEmailsReadableAttribute
from jubladb_api.models.groups_readable_attribute import GroupsReadableAttribute
from jubladb_api.models.people_collection import PeopleCollection
from jubladb_api.models.people_readable_attribute import PeopleReadableAttribute
from jubladb_api.models.people_request import PeopleRequest
from jubladb_api.models.people_single import PeopleSingle
from jubladb_api.models.phone_numbers_readable_attribute import PhoneNumbersReadableAttribute
from jubladb_api.models.roles_readable_attribute import RolesReadableAttribute
from jubladb_api.models.social_accounts_readable_attribute import SocialAccountsReadableAttribute

from jubladb_api.api_client import ApiClient, RequestSerialized
from jubladb_api.api_response import ApiResponse
from jubladb_api.rest import RESTResponseType


class PeopleApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_person(
        self,
        id: Annotated[StrictStr, Field(description="ID of the resource")],
        include: Annotated[Optional[List[StrictStr]], Field(description="[Include related resources](https://jsonapi.org/format/#fetching-includes)")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="[Sort people according to one or more criteria](https://jsonapi.org/format/#fetching-sorting)  You should not include both ascending `id` and descending `-id` fields the same time  ")] = None,
        fields_people: Annotated[Optional[List[PeopleReadableAttribute]], Field(description="[Include only specified fields of Person in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)")] = None,
        filter_id_eq: Annotated[Optional[List[StrictInt]], Field(description="[Filter Person by id using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_id_not_eq: Annotated[Optional[List[StrictInt]], Field(description="[Filter Person by id using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_id_gt: Annotated[Optional[List[StrictInt]], Field(description="[Filter Person by id using gt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_id_gte: Annotated[Optional[List[StrictInt]], Field(description="[Filter Person by id using gte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_id_lt: Annotated[Optional[List[StrictInt]], Field(description="[Filter Person by id using lt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_id_lte: Annotated[Optional[List[StrictInt]], Field(description="[Filter Person by id using lte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_first_name_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by first_name using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_first_name_not_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by first_name using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_first_name_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by first_name using eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_first_name_not_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by first_name using not_eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_first_name_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by first_name using prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_first_name_not_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by first_name using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_first_name_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by first_name using suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_first_name_not_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by first_name using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_first_name_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by first_name using match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_first_name_not_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by first_name using not_match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_last_name_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by last_name using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_last_name_not_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by last_name using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_last_name_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by last_name using eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_last_name_not_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by last_name using not_eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_last_name_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by last_name using prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_last_name_not_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by last_name using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_last_name_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by last_name using suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_last_name_not_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by last_name using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_last_name_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by last_name using match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_last_name_not_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by last_name using not_match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_nickname_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by nickname using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_nickname_not_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by nickname using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_nickname_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by nickname using eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_nickname_not_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by nickname using not_eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_nickname_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by nickname using prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_nickname_not_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by nickname using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_nickname_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by nickname using suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_nickname_not_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by nickname using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_nickname_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by nickname using match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_nickname_not_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by nickname using not_match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_company_name_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by company_name using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_company_name_not_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by company_name using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_company_name_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by company_name using eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_company_name_not_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by company_name using not_eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_company_name_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by company_name using prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_company_name_not_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by company_name using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_company_name_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by company_name using suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_company_name_not_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by company_name using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_company_name_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by company_name using match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_company_name_not_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by company_name using not_match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_company_eq: Annotated[Optional[StrictBool], Field(description="[Filter Person by company using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_email_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by email using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_email_not_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by email using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_email_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by email using eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_email_not_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by email using not_eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_email_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by email using prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_email_not_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by email using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_email_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by email using suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_email_not_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by email using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_email_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by email using match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_email_not_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by email using not_match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_address_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by address using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_address_not_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by address using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_address_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by address using eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_address_not_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by address using not_eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_address_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by address using prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_address_not_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by address using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_address_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by address using suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_address_not_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by address using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_address_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by address using match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_address_not_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by address using not_match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_zip_code_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by zip_code using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_zip_code_not_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by zip_code using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_zip_code_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by zip_code using eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_zip_code_not_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by zip_code using not_eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_zip_code_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by zip_code using prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_zip_code_not_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by zip_code using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_zip_code_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by zip_code using suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_zip_code_not_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by zip_code using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_zip_code_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by zip_code using match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_zip_code_not_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by zip_code using not_match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_town_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by town using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_town_not_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by town using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_town_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by town using eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_town_not_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by town using not_eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_town_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by town using prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_town_not_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by town using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_town_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by town using suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_town_not_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by town using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_town_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by town using match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_town_not_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by town using not_match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_country_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by country using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_country_not_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by country using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_country_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by country using eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_country_not_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by country using not_eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_country_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by country using prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_country_not_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by country using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_country_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by country using suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_country_not_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by country using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_country_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by country using match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_country_not_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by country using not_match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_primary_group_id_eq: Annotated[Optional[List[StrictInt]], Field(description="[Filter Person by primary_group_id using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_primary_group_id_not_eq: Annotated[Optional[List[StrictInt]], Field(description="[Filter Person by primary_group_id using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_primary_group_id_gt: Annotated[Optional[List[StrictInt]], Field(description="[Filter Person by primary_group_id using gt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_primary_group_id_gte: Annotated[Optional[List[StrictInt]], Field(description="[Filter Person by primary_group_id using gte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_primary_group_id_lt: Annotated[Optional[List[StrictInt]], Field(description="[Filter Person by primary_group_id using lt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_primary_group_id_lte: Annotated[Optional[List[StrictInt]], Field(description="[Filter Person by primary_group_id using lte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_gender_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by gender using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_gender_not_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by gender using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_gender_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by gender using eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_gender_not_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by gender using not_eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_gender_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by gender using prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_gender_not_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by gender using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_gender_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by gender using suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_gender_not_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by gender using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_gender_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by gender using match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_gender_not_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by gender using not_match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_birthday_eq: Annotated[Optional[List[date]], Field(description="[Filter Person by birthday using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_birthday_not_eq: Annotated[Optional[List[date]], Field(description="[Filter Person by birthday using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_birthday_gt: Annotated[Optional[List[date]], Field(description="[Filter Person by birthday using gt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_birthday_gte: Annotated[Optional[List[date]], Field(description="[Filter Person by birthday using gte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_birthday_lt: Annotated[Optional[List[date]], Field(description="[Filter Person by birthday using lt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_birthday_lte: Annotated[Optional[List[date]], Field(description="[Filter Person by birthday using lte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_language_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by language using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_language_not_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by language using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_language_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by language using eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_language_not_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by language using not_eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_language_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by language using prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_language_not_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by language using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_language_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by language using suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_language_not_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by language using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_language_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by language using match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_language_not_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by language using not_match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_updated_at_eq: Annotated[Optional[List[datetime]], Field(description="[Filter Person by updated_at using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_updated_at_not_eq: Annotated[Optional[List[datetime]], Field(description="[Filter Person by updated_at using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_updated_at_gt: Annotated[Optional[List[datetime]], Field(description="[Filter Person by updated_at using gt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_updated_at_gte: Annotated[Optional[List[datetime]], Field(description="[Filter Person by updated_at using gte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_updated_at_lt: Annotated[Optional[List[datetime]], Field(description="[Filter Person by updated_at using lt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_updated_at_lte: Annotated[Optional[List[datetime]], Field(description="[Filter Person by updated_at using lte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        fields_groups: Annotated[Optional[List[GroupsReadableAttribute]], Field(description="[Include only specified fields of Group in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)")] = None,
        fields_roles: Annotated[Optional[List[RolesReadableAttribute]], Field(description="[Include only specified fields of Role in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)")] = None,
        fields_phone_numbers: Annotated[Optional[List[PhoneNumbersReadableAttribute]], Field(description="[Include only specified fields of Phone number in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)")] = None,
        fields_social_accounts: Annotated[Optional[List[SocialAccountsReadableAttribute]], Field(description="[Include only specified fields of Social account in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)")] = None,
        fields_additional_emails: Annotated[Optional[List[AdditionalEmailsReadableAttribute]], Field(description="[Include only specified fields of Additional email in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
        _additional_query_params: Optional[Dict[StrictStr, Any]] = None,
    ) -> PeopleSingle:
        """Fetch Person


        :param id: ID of the resource (required)
        :type id: str
        :param include: [Include related resources](https://jsonapi.org/format/#fetching-includes)
        :type include: List[str]
        :param sort: [Sort people according to one or more criteria](https://jsonapi.org/format/#fetching-sorting)  You should not include both ascending `id` and descending `-id` fields the same time  
        :type sort: List[str]
        :param fields_people: [Include only specified fields of Person in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)
        :type fields_people: List[PeopleReadableAttribute]
        :param filter_id_eq: [Filter Person by id using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_eq: List[int]
        :param filter_id_not_eq: [Filter Person by id using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_not_eq: List[int]
        :param filter_id_gt: [Filter Person by id using gt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_gt: List[int]
        :param filter_id_gte: [Filter Person by id using gte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_gte: List[int]
        :param filter_id_lt: [Filter Person by id using lt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_lt: List[int]
        :param filter_id_lte: [Filter Person by id using lte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_lte: List[int]
        :param filter_first_name_eq: [Filter Person by first_name using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_first_name_eq: List[str]
        :param filter_first_name_not_eq: [Filter Person by first_name using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_first_name_not_eq: List[str]
        :param filter_first_name_eql: [Filter Person by first_name using eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_first_name_eql: List[str]
        :param filter_first_name_not_eql: [Filter Person by first_name using not_eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_first_name_not_eql: List[str]
        :param filter_first_name_prefix: [Filter Person by first_name using prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_first_name_prefix: List[str]
        :param filter_first_name_not_prefix: [Filter Person by first_name using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_first_name_not_prefix: List[str]
        :param filter_first_name_suffix: [Filter Person by first_name using suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_first_name_suffix: List[str]
        :param filter_first_name_not_suffix: [Filter Person by first_name using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_first_name_not_suffix: List[str]
        :param filter_first_name_match: [Filter Person by first_name using match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_first_name_match: List[str]
        :param filter_first_name_not_match: [Filter Person by first_name using not_match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_first_name_not_match: List[str]
        :param filter_last_name_eq: [Filter Person by last_name using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_last_name_eq: List[str]
        :param filter_last_name_not_eq: [Filter Person by last_name using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_last_name_not_eq: List[str]
        :param filter_last_name_eql: [Filter Person by last_name using eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_last_name_eql: List[str]
        :param filter_last_name_not_eql: [Filter Person by last_name using not_eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_last_name_not_eql: List[str]
        :param filter_last_name_prefix: [Filter Person by last_name using prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_last_name_prefix: List[str]
        :param filter_last_name_not_prefix: [Filter Person by last_name using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_last_name_not_prefix: List[str]
        :param filter_last_name_suffix: [Filter Person by last_name using suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_last_name_suffix: List[str]
        :param filter_last_name_not_suffix: [Filter Person by last_name using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_last_name_not_suffix: List[str]
        :param filter_last_name_match: [Filter Person by last_name using match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_last_name_match: List[str]
        :param filter_last_name_not_match: [Filter Person by last_name using not_match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_last_name_not_match: List[str]
        :param filter_nickname_eq: [Filter Person by nickname using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_nickname_eq: List[str]
        :param filter_nickname_not_eq: [Filter Person by nickname using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_nickname_not_eq: List[str]
        :param filter_nickname_eql: [Filter Person by nickname using eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_nickname_eql: List[str]
        :param filter_nickname_not_eql: [Filter Person by nickname using not_eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_nickname_not_eql: List[str]
        :param filter_nickname_prefix: [Filter Person by nickname using prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_nickname_prefix: List[str]
        :param filter_nickname_not_prefix: [Filter Person by nickname using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_nickname_not_prefix: List[str]
        :param filter_nickname_suffix: [Filter Person by nickname using suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_nickname_suffix: List[str]
        :param filter_nickname_not_suffix: [Filter Person by nickname using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_nickname_not_suffix: List[str]
        :param filter_nickname_match: [Filter Person by nickname using match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_nickname_match: List[str]
        :param filter_nickname_not_match: [Filter Person by nickname using not_match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_nickname_not_match: List[str]
        :param filter_company_name_eq: [Filter Person by company_name using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_company_name_eq: List[str]
        :param filter_company_name_not_eq: [Filter Person by company_name using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_company_name_not_eq: List[str]
        :param filter_company_name_eql: [Filter Person by company_name using eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_company_name_eql: List[str]
        :param filter_company_name_not_eql: [Filter Person by company_name using not_eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_company_name_not_eql: List[str]
        :param filter_company_name_prefix: [Filter Person by company_name using prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_company_name_prefix: List[str]
        :param filter_company_name_not_prefix: [Filter Person by company_name using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_company_name_not_prefix: List[str]
        :param filter_company_name_suffix: [Filter Person by company_name using suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_company_name_suffix: List[str]
        :param filter_company_name_not_suffix: [Filter Person by company_name using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_company_name_not_suffix: List[str]
        :param filter_company_name_match: [Filter Person by company_name using match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_company_name_match: List[str]
        :param filter_company_name_not_match: [Filter Person by company_name using not_match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_company_name_not_match: List[str]
        :param filter_company_eq: [Filter Person by company using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_company_eq: bool
        :param filter_email_eq: [Filter Person by email using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_email_eq: List[str]
        :param filter_email_not_eq: [Filter Person by email using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_email_not_eq: List[str]
        :param filter_email_eql: [Filter Person by email using eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_email_eql: List[str]
        :param filter_email_not_eql: [Filter Person by email using not_eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_email_not_eql: List[str]
        :param filter_email_prefix: [Filter Person by email using prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_email_prefix: List[str]
        :param filter_email_not_prefix: [Filter Person by email using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_email_not_prefix: List[str]
        :param filter_email_suffix: [Filter Person by email using suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_email_suffix: List[str]
        :param filter_email_not_suffix: [Filter Person by email using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_email_not_suffix: List[str]
        :param filter_email_match: [Filter Person by email using match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_email_match: List[str]
        :param filter_email_not_match: [Filter Person by email using not_match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_email_not_match: List[str]
        :param filter_address_eq: [Filter Person by address using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_address_eq: List[str]
        :param filter_address_not_eq: [Filter Person by address using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_address_not_eq: List[str]
        :param filter_address_eql: [Filter Person by address using eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_address_eql: List[str]
        :param filter_address_not_eql: [Filter Person by address using not_eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_address_not_eql: List[str]
        :param filter_address_prefix: [Filter Person by address using prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_address_prefix: List[str]
        :param filter_address_not_prefix: [Filter Person by address using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_address_not_prefix: List[str]
        :param filter_address_suffix: [Filter Person by address using suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_address_suffix: List[str]
        :param filter_address_not_suffix: [Filter Person by address using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_address_not_suffix: List[str]
        :param filter_address_match: [Filter Person by address using match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_address_match: List[str]
        :param filter_address_not_match: [Filter Person by address using not_match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_address_not_match: List[str]
        :param filter_zip_code_eq: [Filter Person by zip_code using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_zip_code_eq: List[str]
        :param filter_zip_code_not_eq: [Filter Person by zip_code using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_zip_code_not_eq: List[str]
        :param filter_zip_code_eql: [Filter Person by zip_code using eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_zip_code_eql: List[str]
        :param filter_zip_code_not_eql: [Filter Person by zip_code using not_eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_zip_code_not_eql: List[str]
        :param filter_zip_code_prefix: [Filter Person by zip_code using prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_zip_code_prefix: List[str]
        :param filter_zip_code_not_prefix: [Filter Person by zip_code using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_zip_code_not_prefix: List[str]
        :param filter_zip_code_suffix: [Filter Person by zip_code using suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_zip_code_suffix: List[str]
        :param filter_zip_code_not_suffix: [Filter Person by zip_code using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_zip_code_not_suffix: List[str]
        :param filter_zip_code_match: [Filter Person by zip_code using match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_zip_code_match: List[str]
        :param filter_zip_code_not_match: [Filter Person by zip_code using not_match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_zip_code_not_match: List[str]
        :param filter_town_eq: [Filter Person by town using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_town_eq: List[str]
        :param filter_town_not_eq: [Filter Person by town using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_town_not_eq: List[str]
        :param filter_town_eql: [Filter Person by town using eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_town_eql: List[str]
        :param filter_town_not_eql: [Filter Person by town using not_eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_town_not_eql: List[str]
        :param filter_town_prefix: [Filter Person by town using prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_town_prefix: List[str]
        :param filter_town_not_prefix: [Filter Person by town using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_town_not_prefix: List[str]
        :param filter_town_suffix: [Filter Person by town using suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_town_suffix: List[str]
        :param filter_town_not_suffix: [Filter Person by town using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_town_not_suffix: List[str]
        :param filter_town_match: [Filter Person by town using match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_town_match: List[str]
        :param filter_town_not_match: [Filter Person by town using not_match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_town_not_match: List[str]
        :param filter_country_eq: [Filter Person by country using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_country_eq: List[str]
        :param filter_country_not_eq: [Filter Person by country using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_country_not_eq: List[str]
        :param filter_country_eql: [Filter Person by country using eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_country_eql: List[str]
        :param filter_country_not_eql: [Filter Person by country using not_eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_country_not_eql: List[str]
        :param filter_country_prefix: [Filter Person by country using prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_country_prefix: List[str]
        :param filter_country_not_prefix: [Filter Person by country using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_country_not_prefix: List[str]
        :param filter_country_suffix: [Filter Person by country using suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_country_suffix: List[str]
        :param filter_country_not_suffix: [Filter Person by country using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_country_not_suffix: List[str]
        :param filter_country_match: [Filter Person by country using match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_country_match: List[str]
        :param filter_country_not_match: [Filter Person by country using not_match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_country_not_match: List[str]
        :param filter_primary_group_id_eq: [Filter Person by primary_group_id using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_primary_group_id_eq: List[int]
        :param filter_primary_group_id_not_eq: [Filter Person by primary_group_id using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_primary_group_id_not_eq: List[int]
        :param filter_primary_group_id_gt: [Filter Person by primary_group_id using gt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_primary_group_id_gt: List[int]
        :param filter_primary_group_id_gte: [Filter Person by primary_group_id using gte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_primary_group_id_gte: List[int]
        :param filter_primary_group_id_lt: [Filter Person by primary_group_id using lt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_primary_group_id_lt: List[int]
        :param filter_primary_group_id_lte: [Filter Person by primary_group_id using lte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_primary_group_id_lte: List[int]
        :param filter_gender_eq: [Filter Person by gender using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_gender_eq: List[str]
        :param filter_gender_not_eq: [Filter Person by gender using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_gender_not_eq: List[str]
        :param filter_gender_eql: [Filter Person by gender using eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_gender_eql: List[str]
        :param filter_gender_not_eql: [Filter Person by gender using not_eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_gender_not_eql: List[str]
        :param filter_gender_prefix: [Filter Person by gender using prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_gender_prefix: List[str]
        :param filter_gender_not_prefix: [Filter Person by gender using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_gender_not_prefix: List[str]
        :param filter_gender_suffix: [Filter Person by gender using suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_gender_suffix: List[str]
        :param filter_gender_not_suffix: [Filter Person by gender using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_gender_not_suffix: List[str]
        :param filter_gender_match: [Filter Person by gender using match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_gender_match: List[str]
        :param filter_gender_not_match: [Filter Person by gender using not_match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_gender_not_match: List[str]
        :param filter_birthday_eq: [Filter Person by birthday using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_birthday_eq: List[date]
        :param filter_birthday_not_eq: [Filter Person by birthday using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_birthday_not_eq: List[date]
        :param filter_birthday_gt: [Filter Person by birthday using gt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_birthday_gt: List[date]
        :param filter_birthday_gte: [Filter Person by birthday using gte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_birthday_gte: List[date]
        :param filter_birthday_lt: [Filter Person by birthday using lt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_birthday_lt: List[date]
        :param filter_birthday_lte: [Filter Person by birthday using lte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_birthday_lte: List[date]
        :param filter_language_eq: [Filter Person by language using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_language_eq: List[str]
        :param filter_language_not_eq: [Filter Person by language using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_language_not_eq: List[str]
        :param filter_language_eql: [Filter Person by language using eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_language_eql: List[str]
        :param filter_language_not_eql: [Filter Person by language using not_eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_language_not_eql: List[str]
        :param filter_language_prefix: [Filter Person by language using prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_language_prefix: List[str]
        :param filter_language_not_prefix: [Filter Person by language using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_language_not_prefix: List[str]
        :param filter_language_suffix: [Filter Person by language using suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_language_suffix: List[str]
        :param filter_language_not_suffix: [Filter Person by language using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_language_not_suffix: List[str]
        :param filter_language_match: [Filter Person by language using match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_language_match: List[str]
        :param filter_language_not_match: [Filter Person by language using not_match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_language_not_match: List[str]
        :param filter_updated_at_eq: [Filter Person by updated_at using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_updated_at_eq: List[datetime]
        :param filter_updated_at_not_eq: [Filter Person by updated_at using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_updated_at_not_eq: List[datetime]
        :param filter_updated_at_gt: [Filter Person by updated_at using gt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_updated_at_gt: List[datetime]
        :param filter_updated_at_gte: [Filter Person by updated_at using gte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_updated_at_gte: List[datetime]
        :param filter_updated_at_lt: [Filter Person by updated_at using lt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_updated_at_lt: List[datetime]
        :param filter_updated_at_lte: [Filter Person by updated_at using lte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_updated_at_lte: List[datetime]
        :param fields_groups: [Include only specified fields of Group in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)
        :type fields_groups: List[GroupsReadableAttribute]
        :param fields_roles: [Include only specified fields of Role in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)
        :type fields_roles: List[RolesReadableAttribute]
        :param fields_phone_numbers: [Include only specified fields of Phone number in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)
        :type fields_phone_numbers: List[PhoneNumbersReadableAttribute]
        :param fields_social_accounts: [Include only specified fields of Social account in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)
        :type fields_social_accounts: List[SocialAccountsReadableAttribute]
        :param fields_additional_emails: [Include only specified fields of Additional email in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)
        :type fields_additional_emails: List[AdditionalEmailsReadableAttribute]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_person_serialize(
            id=id,
            include=include,
            sort=sort,
            fields_people=fields_people,
            filter_id_eq=filter_id_eq,
            filter_id_not_eq=filter_id_not_eq,
            filter_id_gt=filter_id_gt,
            filter_id_gte=filter_id_gte,
            filter_id_lt=filter_id_lt,
            filter_id_lte=filter_id_lte,
            filter_first_name_eq=filter_first_name_eq,
            filter_first_name_not_eq=filter_first_name_not_eq,
            filter_first_name_eql=filter_first_name_eql,
            filter_first_name_not_eql=filter_first_name_not_eql,
            filter_first_name_prefix=filter_first_name_prefix,
            filter_first_name_not_prefix=filter_first_name_not_prefix,
            filter_first_name_suffix=filter_first_name_suffix,
            filter_first_name_not_suffix=filter_first_name_not_suffix,
            filter_first_name_match=filter_first_name_match,
            filter_first_name_not_match=filter_first_name_not_match,
            filter_last_name_eq=filter_last_name_eq,
            filter_last_name_not_eq=filter_last_name_not_eq,
            filter_last_name_eql=filter_last_name_eql,
            filter_last_name_not_eql=filter_last_name_not_eql,
            filter_last_name_prefix=filter_last_name_prefix,
            filter_last_name_not_prefix=filter_last_name_not_prefix,
            filter_last_name_suffix=filter_last_name_suffix,
            filter_last_name_not_suffix=filter_last_name_not_suffix,
            filter_last_name_match=filter_last_name_match,
            filter_last_name_not_match=filter_last_name_not_match,
            filter_nickname_eq=filter_nickname_eq,
            filter_nickname_not_eq=filter_nickname_not_eq,
            filter_nickname_eql=filter_nickname_eql,
            filter_nickname_not_eql=filter_nickname_not_eql,
            filter_nickname_prefix=filter_nickname_prefix,
            filter_nickname_not_prefix=filter_nickname_not_prefix,
            filter_nickname_suffix=filter_nickname_suffix,
            filter_nickname_not_suffix=filter_nickname_not_suffix,
            filter_nickname_match=filter_nickname_match,
            filter_nickname_not_match=filter_nickname_not_match,
            filter_company_name_eq=filter_company_name_eq,
            filter_company_name_not_eq=filter_company_name_not_eq,
            filter_company_name_eql=filter_company_name_eql,
            filter_company_name_not_eql=filter_company_name_not_eql,
            filter_company_name_prefix=filter_company_name_prefix,
            filter_company_name_not_prefix=filter_company_name_not_prefix,
            filter_company_name_suffix=filter_company_name_suffix,
            filter_company_name_not_suffix=filter_company_name_not_suffix,
            filter_company_name_match=filter_company_name_match,
            filter_company_name_not_match=filter_company_name_not_match,
            filter_company_eq=filter_company_eq,
            filter_email_eq=filter_email_eq,
            filter_email_not_eq=filter_email_not_eq,
            filter_email_eql=filter_email_eql,
            filter_email_not_eql=filter_email_not_eql,
            filter_email_prefix=filter_email_prefix,
            filter_email_not_prefix=filter_email_not_prefix,
            filter_email_suffix=filter_email_suffix,
            filter_email_not_suffix=filter_email_not_suffix,
            filter_email_match=filter_email_match,
            filter_email_not_match=filter_email_not_match,
            filter_address_eq=filter_address_eq,
            filter_address_not_eq=filter_address_not_eq,
            filter_address_eql=filter_address_eql,
            filter_address_not_eql=filter_address_not_eql,
            filter_address_prefix=filter_address_prefix,
            filter_address_not_prefix=filter_address_not_prefix,
            filter_address_suffix=filter_address_suffix,
            filter_address_not_suffix=filter_address_not_suffix,
            filter_address_match=filter_address_match,
            filter_address_not_match=filter_address_not_match,
            filter_zip_code_eq=filter_zip_code_eq,
            filter_zip_code_not_eq=filter_zip_code_not_eq,
            filter_zip_code_eql=filter_zip_code_eql,
            filter_zip_code_not_eql=filter_zip_code_not_eql,
            filter_zip_code_prefix=filter_zip_code_prefix,
            filter_zip_code_not_prefix=filter_zip_code_not_prefix,
            filter_zip_code_suffix=filter_zip_code_suffix,
            filter_zip_code_not_suffix=filter_zip_code_not_suffix,
            filter_zip_code_match=filter_zip_code_match,
            filter_zip_code_not_match=filter_zip_code_not_match,
            filter_town_eq=filter_town_eq,
            filter_town_not_eq=filter_town_not_eq,
            filter_town_eql=filter_town_eql,
            filter_town_not_eql=filter_town_not_eql,
            filter_town_prefix=filter_town_prefix,
            filter_town_not_prefix=filter_town_not_prefix,
            filter_town_suffix=filter_town_suffix,
            filter_town_not_suffix=filter_town_not_suffix,
            filter_town_match=filter_town_match,
            filter_town_not_match=filter_town_not_match,
            filter_country_eq=filter_country_eq,
            filter_country_not_eq=filter_country_not_eq,
            filter_country_eql=filter_country_eql,
            filter_country_not_eql=filter_country_not_eql,
            filter_country_prefix=filter_country_prefix,
            filter_country_not_prefix=filter_country_not_prefix,
            filter_country_suffix=filter_country_suffix,
            filter_country_not_suffix=filter_country_not_suffix,
            filter_country_match=filter_country_match,
            filter_country_not_match=filter_country_not_match,
            filter_primary_group_id_eq=filter_primary_group_id_eq,
            filter_primary_group_id_not_eq=filter_primary_group_id_not_eq,
            filter_primary_group_id_gt=filter_primary_group_id_gt,
            filter_primary_group_id_gte=filter_primary_group_id_gte,
            filter_primary_group_id_lt=filter_primary_group_id_lt,
            filter_primary_group_id_lte=filter_primary_group_id_lte,
            filter_gender_eq=filter_gender_eq,
            filter_gender_not_eq=filter_gender_not_eq,
            filter_gender_eql=filter_gender_eql,
            filter_gender_not_eql=filter_gender_not_eql,
            filter_gender_prefix=filter_gender_prefix,
            filter_gender_not_prefix=filter_gender_not_prefix,
            filter_gender_suffix=filter_gender_suffix,
            filter_gender_not_suffix=filter_gender_not_suffix,
            filter_gender_match=filter_gender_match,
            filter_gender_not_match=filter_gender_not_match,
            filter_birthday_eq=filter_birthday_eq,
            filter_birthday_not_eq=filter_birthday_not_eq,
            filter_birthday_gt=filter_birthday_gt,
            filter_birthday_gte=filter_birthday_gte,
            filter_birthday_lt=filter_birthday_lt,
            filter_birthday_lte=filter_birthday_lte,
            filter_language_eq=filter_language_eq,
            filter_language_not_eq=filter_language_not_eq,
            filter_language_eql=filter_language_eql,
            filter_language_not_eql=filter_language_not_eql,
            filter_language_prefix=filter_language_prefix,
            filter_language_not_prefix=filter_language_not_prefix,
            filter_language_suffix=filter_language_suffix,
            filter_language_not_suffix=filter_language_not_suffix,
            filter_language_match=filter_language_match,
            filter_language_not_match=filter_language_not_match,
            filter_updated_at_eq=filter_updated_at_eq,
            filter_updated_at_not_eq=filter_updated_at_not_eq,
            filter_updated_at_gt=filter_updated_at_gt,
            filter_updated_at_gte=filter_updated_at_gte,
            filter_updated_at_lt=filter_updated_at_lt,
            filter_updated_at_lte=filter_updated_at_lte,
            fields_groups=fields_groups,
            fields_roles=fields_roles,
            fields_phone_numbers=fields_phone_numbers,
            fields_social_accounts=fields_social_accounts,
            fields_additional_emails=fields_additional_emails,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
            _additional_query_params=_additional_query_params,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PeopleSingle",
            '401': "JsonapiFailure",
            '403': "JsonapiFailure",
            '404': "JsonapiFailure",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_person_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="ID of the resource")],
        include: Annotated[Optional[List[StrictStr]], Field(description="[Include related resources](https://jsonapi.org/format/#fetching-includes)")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="[Sort people according to one or more criteria](https://jsonapi.org/format/#fetching-sorting)  You should not include both ascending `id` and descending `-id` fields the same time  ")] = None,
        fields_people: Annotated[Optional[List[PeopleReadableAttribute]], Field(description="[Include only specified fields of Person in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)")] = None,
        filter_id_eq: Annotated[Optional[List[StrictInt]], Field(description="[Filter Person by id using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_id_not_eq: Annotated[Optional[List[StrictInt]], Field(description="[Filter Person by id using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_id_gt: Annotated[Optional[List[StrictInt]], Field(description="[Filter Person by id using gt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_id_gte: Annotated[Optional[List[StrictInt]], Field(description="[Filter Person by id using gte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_id_lt: Annotated[Optional[List[StrictInt]], Field(description="[Filter Person by id using lt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_id_lte: Annotated[Optional[List[StrictInt]], Field(description="[Filter Person by id using lte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_first_name_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by first_name using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_first_name_not_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by first_name using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_first_name_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by first_name using eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_first_name_not_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by first_name using not_eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_first_name_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by first_name using prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_first_name_not_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by first_name using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_first_name_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by first_name using suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_first_name_not_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by first_name using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_first_name_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by first_name using match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_first_name_not_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by first_name using not_match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_last_name_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by last_name using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_last_name_not_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by last_name using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_last_name_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by last_name using eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_last_name_not_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by last_name using not_eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_last_name_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by last_name using prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_last_name_not_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by last_name using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_last_name_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by last_name using suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_last_name_not_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by last_name using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_last_name_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by last_name using match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_last_name_not_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by last_name using not_match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_nickname_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by nickname using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_nickname_not_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by nickname using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_nickname_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by nickname using eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_nickname_not_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by nickname using not_eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_nickname_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by nickname using prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_nickname_not_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by nickname using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_nickname_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by nickname using suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_nickname_not_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by nickname using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_nickname_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by nickname using match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_nickname_not_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by nickname using not_match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_company_name_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by company_name using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_company_name_not_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by company_name using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_company_name_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by company_name using eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_company_name_not_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by company_name using not_eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_company_name_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by company_name using prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_company_name_not_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by company_name using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_company_name_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by company_name using suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_company_name_not_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by company_name using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_company_name_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by company_name using match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_company_name_not_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by company_name using not_match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_company_eq: Annotated[Optional[StrictBool], Field(description="[Filter Person by company using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_email_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by email using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_email_not_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by email using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_email_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by email using eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_email_not_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by email using not_eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_email_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by email using prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_email_not_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by email using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_email_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by email using suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_email_not_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by email using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_email_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by email using match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_email_not_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by email using not_match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_address_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by address using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_address_not_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by address using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_address_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by address using eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_address_not_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by address using not_eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_address_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by address using prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_address_not_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by address using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_address_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by address using suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_address_not_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by address using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_address_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by address using match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_address_not_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by address using not_match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_zip_code_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by zip_code using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_zip_code_not_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by zip_code using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_zip_code_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by zip_code using eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_zip_code_not_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by zip_code using not_eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_zip_code_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by zip_code using prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_zip_code_not_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by zip_code using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_zip_code_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by zip_code using suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_zip_code_not_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by zip_code using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_zip_code_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by zip_code using match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_zip_code_not_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by zip_code using not_match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_town_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by town using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_town_not_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by town using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_town_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by town using eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_town_not_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by town using not_eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_town_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by town using prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_town_not_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by town using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_town_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by town using suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_town_not_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by town using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_town_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by town using match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_town_not_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by town using not_match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_country_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by country using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_country_not_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by country using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_country_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by country using eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_country_not_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by country using not_eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_country_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by country using prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_country_not_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by country using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_country_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by country using suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_country_not_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by country using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_country_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by country using match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_country_not_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by country using not_match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_primary_group_id_eq: Annotated[Optional[List[StrictInt]], Field(description="[Filter Person by primary_group_id using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_primary_group_id_not_eq: Annotated[Optional[List[StrictInt]], Field(description="[Filter Person by primary_group_id using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_primary_group_id_gt: Annotated[Optional[List[StrictInt]], Field(description="[Filter Person by primary_group_id using gt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_primary_group_id_gte: Annotated[Optional[List[StrictInt]], Field(description="[Filter Person by primary_group_id using gte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_primary_group_id_lt: Annotated[Optional[List[StrictInt]], Field(description="[Filter Person by primary_group_id using lt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_primary_group_id_lte: Annotated[Optional[List[StrictInt]], Field(description="[Filter Person by primary_group_id using lte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_gender_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by gender using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_gender_not_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by gender using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_gender_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by gender using eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_gender_not_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by gender using not_eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_gender_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by gender using prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_gender_not_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by gender using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_gender_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by gender using suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_gender_not_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by gender using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_gender_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by gender using match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_gender_not_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by gender using not_match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_birthday_eq: Annotated[Optional[List[date]], Field(description="[Filter Person by birthday using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_birthday_not_eq: Annotated[Optional[List[date]], Field(description="[Filter Person by birthday using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_birthday_gt: Annotated[Optional[List[date]], Field(description="[Filter Person by birthday using gt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_birthday_gte: Annotated[Optional[List[date]], Field(description="[Filter Person by birthday using gte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_birthday_lt: Annotated[Optional[List[date]], Field(description="[Filter Person by birthday using lt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_birthday_lte: Annotated[Optional[List[date]], Field(description="[Filter Person by birthday using lte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_language_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by language using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_language_not_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by language using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_language_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by language using eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_language_not_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by language using not_eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_language_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by language using prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_language_not_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by language using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_language_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by language using suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_language_not_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by language using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_language_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by language using match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_language_not_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by language using not_match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_updated_at_eq: Annotated[Optional[List[datetime]], Field(description="[Filter Person by updated_at using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_updated_at_not_eq: Annotated[Optional[List[datetime]], Field(description="[Filter Person by updated_at using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_updated_at_gt: Annotated[Optional[List[datetime]], Field(description="[Filter Person by updated_at using gt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_updated_at_gte: Annotated[Optional[List[datetime]], Field(description="[Filter Person by updated_at using gte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_updated_at_lt: Annotated[Optional[List[datetime]], Field(description="[Filter Person by updated_at using lt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_updated_at_lte: Annotated[Optional[List[datetime]], Field(description="[Filter Person by updated_at using lte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        fields_groups: Annotated[Optional[List[GroupsReadableAttribute]], Field(description="[Include only specified fields of Group in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)")] = None,
        fields_roles: Annotated[Optional[List[RolesReadableAttribute]], Field(description="[Include only specified fields of Role in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)")] = None,
        fields_phone_numbers: Annotated[Optional[List[PhoneNumbersReadableAttribute]], Field(description="[Include only specified fields of Phone number in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)")] = None,
        fields_social_accounts: Annotated[Optional[List[SocialAccountsReadableAttribute]], Field(description="[Include only specified fields of Social account in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)")] = None,
        fields_additional_emails: Annotated[Optional[List[AdditionalEmailsReadableAttribute]], Field(description="[Include only specified fields of Additional email in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
        _additional_query_params: Optional[Dict[StrictStr, Any]] = None,
    ) -> ApiResponse[PeopleSingle]:
        """Fetch Person


        :param id: ID of the resource (required)
        :type id: str
        :param include: [Include related resources](https://jsonapi.org/format/#fetching-includes)
        :type include: List[str]
        :param sort: [Sort people according to one or more criteria](https://jsonapi.org/format/#fetching-sorting)  You should not include both ascending `id` and descending `-id` fields the same time  
        :type sort: List[str]
        :param fields_people: [Include only specified fields of Person in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)
        :type fields_people: List[PeopleReadableAttribute]
        :param filter_id_eq: [Filter Person by id using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_eq: List[int]
        :param filter_id_not_eq: [Filter Person by id using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_not_eq: List[int]
        :param filter_id_gt: [Filter Person by id using gt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_gt: List[int]
        :param filter_id_gte: [Filter Person by id using gte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_gte: List[int]
        :param filter_id_lt: [Filter Person by id using lt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_lt: List[int]
        :param filter_id_lte: [Filter Person by id using lte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_lte: List[int]
        :param filter_first_name_eq: [Filter Person by first_name using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_first_name_eq: List[str]
        :param filter_first_name_not_eq: [Filter Person by first_name using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_first_name_not_eq: List[str]
        :param filter_first_name_eql: [Filter Person by first_name using eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_first_name_eql: List[str]
        :param filter_first_name_not_eql: [Filter Person by first_name using not_eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_first_name_not_eql: List[str]
        :param filter_first_name_prefix: [Filter Person by first_name using prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_first_name_prefix: List[str]
        :param filter_first_name_not_prefix: [Filter Person by first_name using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_first_name_not_prefix: List[str]
        :param filter_first_name_suffix: [Filter Person by first_name using suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_first_name_suffix: List[str]
        :param filter_first_name_not_suffix: [Filter Person by first_name using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_first_name_not_suffix: List[str]
        :param filter_first_name_match: [Filter Person by first_name using match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_first_name_match: List[str]
        :param filter_first_name_not_match: [Filter Person by first_name using not_match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_first_name_not_match: List[str]
        :param filter_last_name_eq: [Filter Person by last_name using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_last_name_eq: List[str]
        :param filter_last_name_not_eq: [Filter Person by last_name using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_last_name_not_eq: List[str]
        :param filter_last_name_eql: [Filter Person by last_name using eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_last_name_eql: List[str]
        :param filter_last_name_not_eql: [Filter Person by last_name using not_eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_last_name_not_eql: List[str]
        :param filter_last_name_prefix: [Filter Person by last_name using prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_last_name_prefix: List[str]
        :param filter_last_name_not_prefix: [Filter Person by last_name using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_last_name_not_prefix: List[str]
        :param filter_last_name_suffix: [Filter Person by last_name using suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_last_name_suffix: List[str]
        :param filter_last_name_not_suffix: [Filter Person by last_name using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_last_name_not_suffix: List[str]
        :param filter_last_name_match: [Filter Person by last_name using match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_last_name_match: List[str]
        :param filter_last_name_not_match: [Filter Person by last_name using not_match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_last_name_not_match: List[str]
        :param filter_nickname_eq: [Filter Person by nickname using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_nickname_eq: List[str]
        :param filter_nickname_not_eq: [Filter Person by nickname using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_nickname_not_eq: List[str]
        :param filter_nickname_eql: [Filter Person by nickname using eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_nickname_eql: List[str]
        :param filter_nickname_not_eql: [Filter Person by nickname using not_eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_nickname_not_eql: List[str]
        :param filter_nickname_prefix: [Filter Person by nickname using prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_nickname_prefix: List[str]
        :param filter_nickname_not_prefix: [Filter Person by nickname using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_nickname_not_prefix: List[str]
        :param filter_nickname_suffix: [Filter Person by nickname using suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_nickname_suffix: List[str]
        :param filter_nickname_not_suffix: [Filter Person by nickname using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_nickname_not_suffix: List[str]
        :param filter_nickname_match: [Filter Person by nickname using match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_nickname_match: List[str]
        :param filter_nickname_not_match: [Filter Person by nickname using not_match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_nickname_not_match: List[str]
        :param filter_company_name_eq: [Filter Person by company_name using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_company_name_eq: List[str]
        :param filter_company_name_not_eq: [Filter Person by company_name using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_company_name_not_eq: List[str]
        :param filter_company_name_eql: [Filter Person by company_name using eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_company_name_eql: List[str]
        :param filter_company_name_not_eql: [Filter Person by company_name using not_eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_company_name_not_eql: List[str]
        :param filter_company_name_prefix: [Filter Person by company_name using prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_company_name_prefix: List[str]
        :param filter_company_name_not_prefix: [Filter Person by company_name using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_company_name_not_prefix: List[str]
        :param filter_company_name_suffix: [Filter Person by company_name using suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_company_name_suffix: List[str]
        :param filter_company_name_not_suffix: [Filter Person by company_name using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_company_name_not_suffix: List[str]
        :param filter_company_name_match: [Filter Person by company_name using match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_company_name_match: List[str]
        :param filter_company_name_not_match: [Filter Person by company_name using not_match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_company_name_not_match: List[str]
        :param filter_company_eq: [Filter Person by company using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_company_eq: bool
        :param filter_email_eq: [Filter Person by email using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_email_eq: List[str]
        :param filter_email_not_eq: [Filter Person by email using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_email_not_eq: List[str]
        :param filter_email_eql: [Filter Person by email using eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_email_eql: List[str]
        :param filter_email_not_eql: [Filter Person by email using not_eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_email_not_eql: List[str]
        :param filter_email_prefix: [Filter Person by email using prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_email_prefix: List[str]
        :param filter_email_not_prefix: [Filter Person by email using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_email_not_prefix: List[str]
        :param filter_email_suffix: [Filter Person by email using suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_email_suffix: List[str]
        :param filter_email_not_suffix: [Filter Person by email using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_email_not_suffix: List[str]
        :param filter_email_match: [Filter Person by email using match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_email_match: List[str]
        :param filter_email_not_match: [Filter Person by email using not_match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_email_not_match: List[str]
        :param filter_address_eq: [Filter Person by address using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_address_eq: List[str]
        :param filter_address_not_eq: [Filter Person by address using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_address_not_eq: List[str]
        :param filter_address_eql: [Filter Person by address using eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_address_eql: List[str]
        :param filter_address_not_eql: [Filter Person by address using not_eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_address_not_eql: List[str]
        :param filter_address_prefix: [Filter Person by address using prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_address_prefix: List[str]
        :param filter_address_not_prefix: [Filter Person by address using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_address_not_prefix: List[str]
        :param filter_address_suffix: [Filter Person by address using suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_address_suffix: List[str]
        :param filter_address_not_suffix: [Filter Person by address using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_address_not_suffix: List[str]
        :param filter_address_match: [Filter Person by address using match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_address_match: List[str]
        :param filter_address_not_match: [Filter Person by address using not_match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_address_not_match: List[str]
        :param filter_zip_code_eq: [Filter Person by zip_code using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_zip_code_eq: List[str]
        :param filter_zip_code_not_eq: [Filter Person by zip_code using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_zip_code_not_eq: List[str]
        :param filter_zip_code_eql: [Filter Person by zip_code using eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_zip_code_eql: List[str]
        :param filter_zip_code_not_eql: [Filter Person by zip_code using not_eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_zip_code_not_eql: List[str]
        :param filter_zip_code_prefix: [Filter Person by zip_code using prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_zip_code_prefix: List[str]
        :param filter_zip_code_not_prefix: [Filter Person by zip_code using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_zip_code_not_prefix: List[str]
        :param filter_zip_code_suffix: [Filter Person by zip_code using suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_zip_code_suffix: List[str]
        :param filter_zip_code_not_suffix: [Filter Person by zip_code using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_zip_code_not_suffix: List[str]
        :param filter_zip_code_match: [Filter Person by zip_code using match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_zip_code_match: List[str]
        :param filter_zip_code_not_match: [Filter Person by zip_code using not_match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_zip_code_not_match: List[str]
        :param filter_town_eq: [Filter Person by town using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_town_eq: List[str]
        :param filter_town_not_eq: [Filter Person by town using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_town_not_eq: List[str]
        :param filter_town_eql: [Filter Person by town using eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_town_eql: List[str]
        :param filter_town_not_eql: [Filter Person by town using not_eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_town_not_eql: List[str]
        :param filter_town_prefix: [Filter Person by town using prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_town_prefix: List[str]
        :param filter_town_not_prefix: [Filter Person by town using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_town_not_prefix: List[str]
        :param filter_town_suffix: [Filter Person by town using suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_town_suffix: List[str]
        :param filter_town_not_suffix: [Filter Person by town using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_town_not_suffix: List[str]
        :param filter_town_match: [Filter Person by town using match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_town_match: List[str]
        :param filter_town_not_match: [Filter Person by town using not_match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_town_not_match: List[str]
        :param filter_country_eq: [Filter Person by country using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_country_eq: List[str]
        :param filter_country_not_eq: [Filter Person by country using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_country_not_eq: List[str]
        :param filter_country_eql: [Filter Person by country using eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_country_eql: List[str]
        :param filter_country_not_eql: [Filter Person by country using not_eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_country_not_eql: List[str]
        :param filter_country_prefix: [Filter Person by country using prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_country_prefix: List[str]
        :param filter_country_not_prefix: [Filter Person by country using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_country_not_prefix: List[str]
        :param filter_country_suffix: [Filter Person by country using suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_country_suffix: List[str]
        :param filter_country_not_suffix: [Filter Person by country using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_country_not_suffix: List[str]
        :param filter_country_match: [Filter Person by country using match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_country_match: List[str]
        :param filter_country_not_match: [Filter Person by country using not_match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_country_not_match: List[str]
        :param filter_primary_group_id_eq: [Filter Person by primary_group_id using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_primary_group_id_eq: List[int]
        :param filter_primary_group_id_not_eq: [Filter Person by primary_group_id using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_primary_group_id_not_eq: List[int]
        :param filter_primary_group_id_gt: [Filter Person by primary_group_id using gt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_primary_group_id_gt: List[int]
        :param filter_primary_group_id_gte: [Filter Person by primary_group_id using gte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_primary_group_id_gte: List[int]
        :param filter_primary_group_id_lt: [Filter Person by primary_group_id using lt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_primary_group_id_lt: List[int]
        :param filter_primary_group_id_lte: [Filter Person by primary_group_id using lte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_primary_group_id_lte: List[int]
        :param filter_gender_eq: [Filter Person by gender using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_gender_eq: List[str]
        :param filter_gender_not_eq: [Filter Person by gender using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_gender_not_eq: List[str]
        :param filter_gender_eql: [Filter Person by gender using eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_gender_eql: List[str]
        :param filter_gender_not_eql: [Filter Person by gender using not_eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_gender_not_eql: List[str]
        :param filter_gender_prefix: [Filter Person by gender using prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_gender_prefix: List[str]
        :param filter_gender_not_prefix: [Filter Person by gender using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_gender_not_prefix: List[str]
        :param filter_gender_suffix: [Filter Person by gender using suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_gender_suffix: List[str]
        :param filter_gender_not_suffix: [Filter Person by gender using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_gender_not_suffix: List[str]
        :param filter_gender_match: [Filter Person by gender using match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_gender_match: List[str]
        :param filter_gender_not_match: [Filter Person by gender using not_match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_gender_not_match: List[str]
        :param filter_birthday_eq: [Filter Person by birthday using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_birthday_eq: List[date]
        :param filter_birthday_not_eq: [Filter Person by birthday using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_birthday_not_eq: List[date]
        :param filter_birthday_gt: [Filter Person by birthday using gt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_birthday_gt: List[date]
        :param filter_birthday_gte: [Filter Person by birthday using gte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_birthday_gte: List[date]
        :param filter_birthday_lt: [Filter Person by birthday using lt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_birthday_lt: List[date]
        :param filter_birthday_lte: [Filter Person by birthday using lte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_birthday_lte: List[date]
        :param filter_language_eq: [Filter Person by language using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_language_eq: List[str]
        :param filter_language_not_eq: [Filter Person by language using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_language_not_eq: List[str]
        :param filter_language_eql: [Filter Person by language using eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_language_eql: List[str]
        :param filter_language_not_eql: [Filter Person by language using not_eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_language_not_eql: List[str]
        :param filter_language_prefix: [Filter Person by language using prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_language_prefix: List[str]
        :param filter_language_not_prefix: [Filter Person by language using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_language_not_prefix: List[str]
        :param filter_language_suffix: [Filter Person by language using suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_language_suffix: List[str]
        :param filter_language_not_suffix: [Filter Person by language using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_language_not_suffix: List[str]
        :param filter_language_match: [Filter Person by language using match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_language_match: List[str]
        :param filter_language_not_match: [Filter Person by language using not_match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_language_not_match: List[str]
        :param filter_updated_at_eq: [Filter Person by updated_at using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_updated_at_eq: List[datetime]
        :param filter_updated_at_not_eq: [Filter Person by updated_at using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_updated_at_not_eq: List[datetime]
        :param filter_updated_at_gt: [Filter Person by updated_at using gt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_updated_at_gt: List[datetime]
        :param filter_updated_at_gte: [Filter Person by updated_at using gte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_updated_at_gte: List[datetime]
        :param filter_updated_at_lt: [Filter Person by updated_at using lt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_updated_at_lt: List[datetime]
        :param filter_updated_at_lte: [Filter Person by updated_at using lte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_updated_at_lte: List[datetime]
        :param fields_groups: [Include only specified fields of Group in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)
        :type fields_groups: List[GroupsReadableAttribute]
        :param fields_roles: [Include only specified fields of Role in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)
        :type fields_roles: List[RolesReadableAttribute]
        :param fields_phone_numbers: [Include only specified fields of Phone number in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)
        :type fields_phone_numbers: List[PhoneNumbersReadableAttribute]
        :param fields_social_accounts: [Include only specified fields of Social account in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)
        :type fields_social_accounts: List[SocialAccountsReadableAttribute]
        :param fields_additional_emails: [Include only specified fields of Additional email in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)
        :type fields_additional_emails: List[AdditionalEmailsReadableAttribute]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_person_serialize(
            id=id,
            include=include,
            sort=sort,
            fields_people=fields_people,
            filter_id_eq=filter_id_eq,
            filter_id_not_eq=filter_id_not_eq,
            filter_id_gt=filter_id_gt,
            filter_id_gte=filter_id_gte,
            filter_id_lt=filter_id_lt,
            filter_id_lte=filter_id_lte,
            filter_first_name_eq=filter_first_name_eq,
            filter_first_name_not_eq=filter_first_name_not_eq,
            filter_first_name_eql=filter_first_name_eql,
            filter_first_name_not_eql=filter_first_name_not_eql,
            filter_first_name_prefix=filter_first_name_prefix,
            filter_first_name_not_prefix=filter_first_name_not_prefix,
            filter_first_name_suffix=filter_first_name_suffix,
            filter_first_name_not_suffix=filter_first_name_not_suffix,
            filter_first_name_match=filter_first_name_match,
            filter_first_name_not_match=filter_first_name_not_match,
            filter_last_name_eq=filter_last_name_eq,
            filter_last_name_not_eq=filter_last_name_not_eq,
            filter_last_name_eql=filter_last_name_eql,
            filter_last_name_not_eql=filter_last_name_not_eql,
            filter_last_name_prefix=filter_last_name_prefix,
            filter_last_name_not_prefix=filter_last_name_not_prefix,
            filter_last_name_suffix=filter_last_name_suffix,
            filter_last_name_not_suffix=filter_last_name_not_suffix,
            filter_last_name_match=filter_last_name_match,
            filter_last_name_not_match=filter_last_name_not_match,
            filter_nickname_eq=filter_nickname_eq,
            filter_nickname_not_eq=filter_nickname_not_eq,
            filter_nickname_eql=filter_nickname_eql,
            filter_nickname_not_eql=filter_nickname_not_eql,
            filter_nickname_prefix=filter_nickname_prefix,
            filter_nickname_not_prefix=filter_nickname_not_prefix,
            filter_nickname_suffix=filter_nickname_suffix,
            filter_nickname_not_suffix=filter_nickname_not_suffix,
            filter_nickname_match=filter_nickname_match,
            filter_nickname_not_match=filter_nickname_not_match,
            filter_company_name_eq=filter_company_name_eq,
            filter_company_name_not_eq=filter_company_name_not_eq,
            filter_company_name_eql=filter_company_name_eql,
            filter_company_name_not_eql=filter_company_name_not_eql,
            filter_company_name_prefix=filter_company_name_prefix,
            filter_company_name_not_prefix=filter_company_name_not_prefix,
            filter_company_name_suffix=filter_company_name_suffix,
            filter_company_name_not_suffix=filter_company_name_not_suffix,
            filter_company_name_match=filter_company_name_match,
            filter_company_name_not_match=filter_company_name_not_match,
            filter_company_eq=filter_company_eq,
            filter_email_eq=filter_email_eq,
            filter_email_not_eq=filter_email_not_eq,
            filter_email_eql=filter_email_eql,
            filter_email_not_eql=filter_email_not_eql,
            filter_email_prefix=filter_email_prefix,
            filter_email_not_prefix=filter_email_not_prefix,
            filter_email_suffix=filter_email_suffix,
            filter_email_not_suffix=filter_email_not_suffix,
            filter_email_match=filter_email_match,
            filter_email_not_match=filter_email_not_match,
            filter_address_eq=filter_address_eq,
            filter_address_not_eq=filter_address_not_eq,
            filter_address_eql=filter_address_eql,
            filter_address_not_eql=filter_address_not_eql,
            filter_address_prefix=filter_address_prefix,
            filter_address_not_prefix=filter_address_not_prefix,
            filter_address_suffix=filter_address_suffix,
            filter_address_not_suffix=filter_address_not_suffix,
            filter_address_match=filter_address_match,
            filter_address_not_match=filter_address_not_match,
            filter_zip_code_eq=filter_zip_code_eq,
            filter_zip_code_not_eq=filter_zip_code_not_eq,
            filter_zip_code_eql=filter_zip_code_eql,
            filter_zip_code_not_eql=filter_zip_code_not_eql,
            filter_zip_code_prefix=filter_zip_code_prefix,
            filter_zip_code_not_prefix=filter_zip_code_not_prefix,
            filter_zip_code_suffix=filter_zip_code_suffix,
            filter_zip_code_not_suffix=filter_zip_code_not_suffix,
            filter_zip_code_match=filter_zip_code_match,
            filter_zip_code_not_match=filter_zip_code_not_match,
            filter_town_eq=filter_town_eq,
            filter_town_not_eq=filter_town_not_eq,
            filter_town_eql=filter_town_eql,
            filter_town_not_eql=filter_town_not_eql,
            filter_town_prefix=filter_town_prefix,
            filter_town_not_prefix=filter_town_not_prefix,
            filter_town_suffix=filter_town_suffix,
            filter_town_not_suffix=filter_town_not_suffix,
            filter_town_match=filter_town_match,
            filter_town_not_match=filter_town_not_match,
            filter_country_eq=filter_country_eq,
            filter_country_not_eq=filter_country_not_eq,
            filter_country_eql=filter_country_eql,
            filter_country_not_eql=filter_country_not_eql,
            filter_country_prefix=filter_country_prefix,
            filter_country_not_prefix=filter_country_not_prefix,
            filter_country_suffix=filter_country_suffix,
            filter_country_not_suffix=filter_country_not_suffix,
            filter_country_match=filter_country_match,
            filter_country_not_match=filter_country_not_match,
            filter_primary_group_id_eq=filter_primary_group_id_eq,
            filter_primary_group_id_not_eq=filter_primary_group_id_not_eq,
            filter_primary_group_id_gt=filter_primary_group_id_gt,
            filter_primary_group_id_gte=filter_primary_group_id_gte,
            filter_primary_group_id_lt=filter_primary_group_id_lt,
            filter_primary_group_id_lte=filter_primary_group_id_lte,
            filter_gender_eq=filter_gender_eq,
            filter_gender_not_eq=filter_gender_not_eq,
            filter_gender_eql=filter_gender_eql,
            filter_gender_not_eql=filter_gender_not_eql,
            filter_gender_prefix=filter_gender_prefix,
            filter_gender_not_prefix=filter_gender_not_prefix,
            filter_gender_suffix=filter_gender_suffix,
            filter_gender_not_suffix=filter_gender_not_suffix,
            filter_gender_match=filter_gender_match,
            filter_gender_not_match=filter_gender_not_match,
            filter_birthday_eq=filter_birthday_eq,
            filter_birthday_not_eq=filter_birthday_not_eq,
            filter_birthday_gt=filter_birthday_gt,
            filter_birthday_gte=filter_birthday_gte,
            filter_birthday_lt=filter_birthday_lt,
            filter_birthday_lte=filter_birthday_lte,
            filter_language_eq=filter_language_eq,
            filter_language_not_eq=filter_language_not_eq,
            filter_language_eql=filter_language_eql,
            filter_language_not_eql=filter_language_not_eql,
            filter_language_prefix=filter_language_prefix,
            filter_language_not_prefix=filter_language_not_prefix,
            filter_language_suffix=filter_language_suffix,
            filter_language_not_suffix=filter_language_not_suffix,
            filter_language_match=filter_language_match,
            filter_language_not_match=filter_language_not_match,
            filter_updated_at_eq=filter_updated_at_eq,
            filter_updated_at_not_eq=filter_updated_at_not_eq,
            filter_updated_at_gt=filter_updated_at_gt,
            filter_updated_at_gte=filter_updated_at_gte,
            filter_updated_at_lt=filter_updated_at_lt,
            filter_updated_at_lte=filter_updated_at_lte,
            fields_groups=fields_groups,
            fields_roles=fields_roles,
            fields_phone_numbers=fields_phone_numbers,
            fields_social_accounts=fields_social_accounts,
            fields_additional_emails=fields_additional_emails,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
            _additional_query_params=_additional_query_params,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PeopleSingle",
            '401': "JsonapiFailure",
            '403': "JsonapiFailure",
            '404': "JsonapiFailure",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_person_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="ID of the resource")],
        include: Annotated[Optional[List[StrictStr]], Field(description="[Include related resources](https://jsonapi.org/format/#fetching-includes)")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="[Sort people according to one or more criteria](https://jsonapi.org/format/#fetching-sorting)  You should not include both ascending `id` and descending `-id` fields the same time  ")] = None,
        fields_people: Annotated[Optional[List[PeopleReadableAttribute]], Field(description="[Include only specified fields of Person in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)")] = None,
        filter_id_eq: Annotated[Optional[List[StrictInt]], Field(description="[Filter Person by id using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_id_not_eq: Annotated[Optional[List[StrictInt]], Field(description="[Filter Person by id using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_id_gt: Annotated[Optional[List[StrictInt]], Field(description="[Filter Person by id using gt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_id_gte: Annotated[Optional[List[StrictInt]], Field(description="[Filter Person by id using gte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_id_lt: Annotated[Optional[List[StrictInt]], Field(description="[Filter Person by id using lt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_id_lte: Annotated[Optional[List[StrictInt]], Field(description="[Filter Person by id using lte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_first_name_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by first_name using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_first_name_not_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by first_name using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_first_name_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by first_name using eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_first_name_not_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by first_name using not_eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_first_name_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by first_name using prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_first_name_not_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by first_name using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_first_name_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by first_name using suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_first_name_not_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by first_name using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_first_name_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by first_name using match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_first_name_not_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by first_name using not_match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_last_name_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by last_name using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_last_name_not_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by last_name using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_last_name_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by last_name using eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_last_name_not_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by last_name using not_eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_last_name_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by last_name using prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_last_name_not_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by last_name using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_last_name_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by last_name using suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_last_name_not_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by last_name using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_last_name_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by last_name using match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_last_name_not_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by last_name using not_match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_nickname_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by nickname using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_nickname_not_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by nickname using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_nickname_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by nickname using eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_nickname_not_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by nickname using not_eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_nickname_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by nickname using prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_nickname_not_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by nickname using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_nickname_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by nickname using suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_nickname_not_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by nickname using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_nickname_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by nickname using match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_nickname_not_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by nickname using not_match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_company_name_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by company_name using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_company_name_not_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by company_name using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_company_name_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by company_name using eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_company_name_not_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by company_name using not_eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_company_name_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by company_name using prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_company_name_not_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by company_name using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_company_name_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by company_name using suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_company_name_not_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by company_name using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_company_name_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by company_name using match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_company_name_not_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by company_name using not_match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_company_eq: Annotated[Optional[StrictBool], Field(description="[Filter Person by company using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_email_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by email using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_email_not_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by email using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_email_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by email using eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_email_not_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by email using not_eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_email_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by email using prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_email_not_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by email using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_email_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by email using suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_email_not_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by email using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_email_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by email using match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_email_not_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by email using not_match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_address_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by address using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_address_not_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by address using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_address_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by address using eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_address_not_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by address using not_eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_address_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by address using prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_address_not_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by address using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_address_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by address using suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_address_not_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by address using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_address_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by address using match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_address_not_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by address using not_match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_zip_code_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by zip_code using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_zip_code_not_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by zip_code using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_zip_code_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by zip_code using eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_zip_code_not_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by zip_code using not_eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_zip_code_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by zip_code using prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_zip_code_not_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by zip_code using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_zip_code_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by zip_code using suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_zip_code_not_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by zip_code using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_zip_code_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by zip_code using match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_zip_code_not_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by zip_code using not_match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_town_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by town using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_town_not_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by town using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_town_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by town using eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_town_not_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by town using not_eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_town_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by town using prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_town_not_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by town using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_town_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by town using suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_town_not_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by town using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_town_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by town using match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_town_not_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by town using not_match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_country_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by country using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_country_not_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by country using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_country_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by country using eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_country_not_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by country using not_eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_country_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by country using prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_country_not_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by country using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_country_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by country using suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_country_not_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by country using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_country_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by country using match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_country_not_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by country using not_match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_primary_group_id_eq: Annotated[Optional[List[StrictInt]], Field(description="[Filter Person by primary_group_id using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_primary_group_id_not_eq: Annotated[Optional[List[StrictInt]], Field(description="[Filter Person by primary_group_id using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_primary_group_id_gt: Annotated[Optional[List[StrictInt]], Field(description="[Filter Person by primary_group_id using gt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_primary_group_id_gte: Annotated[Optional[List[StrictInt]], Field(description="[Filter Person by primary_group_id using gte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_primary_group_id_lt: Annotated[Optional[List[StrictInt]], Field(description="[Filter Person by primary_group_id using lt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_primary_group_id_lte: Annotated[Optional[List[StrictInt]], Field(description="[Filter Person by primary_group_id using lte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_gender_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by gender using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_gender_not_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by gender using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_gender_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by gender using eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_gender_not_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by gender using not_eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_gender_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by gender using prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_gender_not_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by gender using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_gender_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by gender using suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_gender_not_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by gender using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_gender_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by gender using match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_gender_not_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by gender using not_match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_birthday_eq: Annotated[Optional[List[date]], Field(description="[Filter Person by birthday using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_birthday_not_eq: Annotated[Optional[List[date]], Field(description="[Filter Person by birthday using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_birthday_gt: Annotated[Optional[List[date]], Field(description="[Filter Person by birthday using gt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_birthday_gte: Annotated[Optional[List[date]], Field(description="[Filter Person by birthday using gte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_birthday_lt: Annotated[Optional[List[date]], Field(description="[Filter Person by birthday using lt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_birthday_lte: Annotated[Optional[List[date]], Field(description="[Filter Person by birthday using lte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_language_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by language using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_language_not_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by language using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_language_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by language using eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_language_not_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by language using not_eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_language_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by language using prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_language_not_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by language using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_language_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by language using suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_language_not_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by language using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_language_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by language using match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_language_not_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by language using not_match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_updated_at_eq: Annotated[Optional[List[datetime]], Field(description="[Filter Person by updated_at using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_updated_at_not_eq: Annotated[Optional[List[datetime]], Field(description="[Filter Person by updated_at using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_updated_at_gt: Annotated[Optional[List[datetime]], Field(description="[Filter Person by updated_at using gt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_updated_at_gte: Annotated[Optional[List[datetime]], Field(description="[Filter Person by updated_at using gte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_updated_at_lt: Annotated[Optional[List[datetime]], Field(description="[Filter Person by updated_at using lt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_updated_at_lte: Annotated[Optional[List[datetime]], Field(description="[Filter Person by updated_at using lte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        fields_groups: Annotated[Optional[List[GroupsReadableAttribute]], Field(description="[Include only specified fields of Group in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)")] = None,
        fields_roles: Annotated[Optional[List[RolesReadableAttribute]], Field(description="[Include only specified fields of Role in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)")] = None,
        fields_phone_numbers: Annotated[Optional[List[PhoneNumbersReadableAttribute]], Field(description="[Include only specified fields of Phone number in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)")] = None,
        fields_social_accounts: Annotated[Optional[List[SocialAccountsReadableAttribute]], Field(description="[Include only specified fields of Social account in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)")] = None,
        fields_additional_emails: Annotated[Optional[List[AdditionalEmailsReadableAttribute]], Field(description="[Include only specified fields of Additional email in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
        _additional_query_params: Optional[Dict[StrictStr, Any]] = None,
    ) -> RESTResponseType:
        """Fetch Person


        :param id: ID of the resource (required)
        :type id: str
        :param include: [Include related resources](https://jsonapi.org/format/#fetching-includes)
        :type include: List[str]
        :param sort: [Sort people according to one or more criteria](https://jsonapi.org/format/#fetching-sorting)  You should not include both ascending `id` and descending `-id` fields the same time  
        :type sort: List[str]
        :param fields_people: [Include only specified fields of Person in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)
        :type fields_people: List[PeopleReadableAttribute]
        :param filter_id_eq: [Filter Person by id using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_eq: List[int]
        :param filter_id_not_eq: [Filter Person by id using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_not_eq: List[int]
        :param filter_id_gt: [Filter Person by id using gt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_gt: List[int]
        :param filter_id_gte: [Filter Person by id using gte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_gte: List[int]
        :param filter_id_lt: [Filter Person by id using lt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_lt: List[int]
        :param filter_id_lte: [Filter Person by id using lte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_lte: List[int]
        :param filter_first_name_eq: [Filter Person by first_name using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_first_name_eq: List[str]
        :param filter_first_name_not_eq: [Filter Person by first_name using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_first_name_not_eq: List[str]
        :param filter_first_name_eql: [Filter Person by first_name using eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_first_name_eql: List[str]
        :param filter_first_name_not_eql: [Filter Person by first_name using not_eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_first_name_not_eql: List[str]
        :param filter_first_name_prefix: [Filter Person by first_name using prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_first_name_prefix: List[str]
        :param filter_first_name_not_prefix: [Filter Person by first_name using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_first_name_not_prefix: List[str]
        :param filter_first_name_suffix: [Filter Person by first_name using suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_first_name_suffix: List[str]
        :param filter_first_name_not_suffix: [Filter Person by first_name using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_first_name_not_suffix: List[str]
        :param filter_first_name_match: [Filter Person by first_name using match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_first_name_match: List[str]
        :param filter_first_name_not_match: [Filter Person by first_name using not_match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_first_name_not_match: List[str]
        :param filter_last_name_eq: [Filter Person by last_name using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_last_name_eq: List[str]
        :param filter_last_name_not_eq: [Filter Person by last_name using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_last_name_not_eq: List[str]
        :param filter_last_name_eql: [Filter Person by last_name using eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_last_name_eql: List[str]
        :param filter_last_name_not_eql: [Filter Person by last_name using not_eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_last_name_not_eql: List[str]
        :param filter_last_name_prefix: [Filter Person by last_name using prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_last_name_prefix: List[str]
        :param filter_last_name_not_prefix: [Filter Person by last_name using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_last_name_not_prefix: List[str]
        :param filter_last_name_suffix: [Filter Person by last_name using suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_last_name_suffix: List[str]
        :param filter_last_name_not_suffix: [Filter Person by last_name using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_last_name_not_suffix: List[str]
        :param filter_last_name_match: [Filter Person by last_name using match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_last_name_match: List[str]
        :param filter_last_name_not_match: [Filter Person by last_name using not_match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_last_name_not_match: List[str]
        :param filter_nickname_eq: [Filter Person by nickname using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_nickname_eq: List[str]
        :param filter_nickname_not_eq: [Filter Person by nickname using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_nickname_not_eq: List[str]
        :param filter_nickname_eql: [Filter Person by nickname using eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_nickname_eql: List[str]
        :param filter_nickname_not_eql: [Filter Person by nickname using not_eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_nickname_not_eql: List[str]
        :param filter_nickname_prefix: [Filter Person by nickname using prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_nickname_prefix: List[str]
        :param filter_nickname_not_prefix: [Filter Person by nickname using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_nickname_not_prefix: List[str]
        :param filter_nickname_suffix: [Filter Person by nickname using suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_nickname_suffix: List[str]
        :param filter_nickname_not_suffix: [Filter Person by nickname using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_nickname_not_suffix: List[str]
        :param filter_nickname_match: [Filter Person by nickname using match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_nickname_match: List[str]
        :param filter_nickname_not_match: [Filter Person by nickname using not_match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_nickname_not_match: List[str]
        :param filter_company_name_eq: [Filter Person by company_name using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_company_name_eq: List[str]
        :param filter_company_name_not_eq: [Filter Person by company_name using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_company_name_not_eq: List[str]
        :param filter_company_name_eql: [Filter Person by company_name using eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_company_name_eql: List[str]
        :param filter_company_name_not_eql: [Filter Person by company_name using not_eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_company_name_not_eql: List[str]
        :param filter_company_name_prefix: [Filter Person by company_name using prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_company_name_prefix: List[str]
        :param filter_company_name_not_prefix: [Filter Person by company_name using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_company_name_not_prefix: List[str]
        :param filter_company_name_suffix: [Filter Person by company_name using suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_company_name_suffix: List[str]
        :param filter_company_name_not_suffix: [Filter Person by company_name using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_company_name_not_suffix: List[str]
        :param filter_company_name_match: [Filter Person by company_name using match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_company_name_match: List[str]
        :param filter_company_name_not_match: [Filter Person by company_name using not_match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_company_name_not_match: List[str]
        :param filter_company_eq: [Filter Person by company using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_company_eq: bool
        :param filter_email_eq: [Filter Person by email using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_email_eq: List[str]
        :param filter_email_not_eq: [Filter Person by email using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_email_not_eq: List[str]
        :param filter_email_eql: [Filter Person by email using eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_email_eql: List[str]
        :param filter_email_not_eql: [Filter Person by email using not_eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_email_not_eql: List[str]
        :param filter_email_prefix: [Filter Person by email using prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_email_prefix: List[str]
        :param filter_email_not_prefix: [Filter Person by email using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_email_not_prefix: List[str]
        :param filter_email_suffix: [Filter Person by email using suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_email_suffix: List[str]
        :param filter_email_not_suffix: [Filter Person by email using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_email_not_suffix: List[str]
        :param filter_email_match: [Filter Person by email using match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_email_match: List[str]
        :param filter_email_not_match: [Filter Person by email using not_match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_email_not_match: List[str]
        :param filter_address_eq: [Filter Person by address using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_address_eq: List[str]
        :param filter_address_not_eq: [Filter Person by address using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_address_not_eq: List[str]
        :param filter_address_eql: [Filter Person by address using eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_address_eql: List[str]
        :param filter_address_not_eql: [Filter Person by address using not_eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_address_not_eql: List[str]
        :param filter_address_prefix: [Filter Person by address using prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_address_prefix: List[str]
        :param filter_address_not_prefix: [Filter Person by address using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_address_not_prefix: List[str]
        :param filter_address_suffix: [Filter Person by address using suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_address_suffix: List[str]
        :param filter_address_not_suffix: [Filter Person by address using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_address_not_suffix: List[str]
        :param filter_address_match: [Filter Person by address using match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_address_match: List[str]
        :param filter_address_not_match: [Filter Person by address using not_match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_address_not_match: List[str]
        :param filter_zip_code_eq: [Filter Person by zip_code using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_zip_code_eq: List[str]
        :param filter_zip_code_not_eq: [Filter Person by zip_code using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_zip_code_not_eq: List[str]
        :param filter_zip_code_eql: [Filter Person by zip_code using eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_zip_code_eql: List[str]
        :param filter_zip_code_not_eql: [Filter Person by zip_code using not_eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_zip_code_not_eql: List[str]
        :param filter_zip_code_prefix: [Filter Person by zip_code using prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_zip_code_prefix: List[str]
        :param filter_zip_code_not_prefix: [Filter Person by zip_code using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_zip_code_not_prefix: List[str]
        :param filter_zip_code_suffix: [Filter Person by zip_code using suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_zip_code_suffix: List[str]
        :param filter_zip_code_not_suffix: [Filter Person by zip_code using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_zip_code_not_suffix: List[str]
        :param filter_zip_code_match: [Filter Person by zip_code using match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_zip_code_match: List[str]
        :param filter_zip_code_not_match: [Filter Person by zip_code using not_match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_zip_code_not_match: List[str]
        :param filter_town_eq: [Filter Person by town using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_town_eq: List[str]
        :param filter_town_not_eq: [Filter Person by town using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_town_not_eq: List[str]
        :param filter_town_eql: [Filter Person by town using eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_town_eql: List[str]
        :param filter_town_not_eql: [Filter Person by town using not_eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_town_not_eql: List[str]
        :param filter_town_prefix: [Filter Person by town using prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_town_prefix: List[str]
        :param filter_town_not_prefix: [Filter Person by town using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_town_not_prefix: List[str]
        :param filter_town_suffix: [Filter Person by town using suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_town_suffix: List[str]
        :param filter_town_not_suffix: [Filter Person by town using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_town_not_suffix: List[str]
        :param filter_town_match: [Filter Person by town using match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_town_match: List[str]
        :param filter_town_not_match: [Filter Person by town using not_match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_town_not_match: List[str]
        :param filter_country_eq: [Filter Person by country using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_country_eq: List[str]
        :param filter_country_not_eq: [Filter Person by country using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_country_not_eq: List[str]
        :param filter_country_eql: [Filter Person by country using eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_country_eql: List[str]
        :param filter_country_not_eql: [Filter Person by country using not_eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_country_not_eql: List[str]
        :param filter_country_prefix: [Filter Person by country using prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_country_prefix: List[str]
        :param filter_country_not_prefix: [Filter Person by country using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_country_not_prefix: List[str]
        :param filter_country_suffix: [Filter Person by country using suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_country_suffix: List[str]
        :param filter_country_not_suffix: [Filter Person by country using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_country_not_suffix: List[str]
        :param filter_country_match: [Filter Person by country using match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_country_match: List[str]
        :param filter_country_not_match: [Filter Person by country using not_match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_country_not_match: List[str]
        :param filter_primary_group_id_eq: [Filter Person by primary_group_id using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_primary_group_id_eq: List[int]
        :param filter_primary_group_id_not_eq: [Filter Person by primary_group_id using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_primary_group_id_not_eq: List[int]
        :param filter_primary_group_id_gt: [Filter Person by primary_group_id using gt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_primary_group_id_gt: List[int]
        :param filter_primary_group_id_gte: [Filter Person by primary_group_id using gte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_primary_group_id_gte: List[int]
        :param filter_primary_group_id_lt: [Filter Person by primary_group_id using lt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_primary_group_id_lt: List[int]
        :param filter_primary_group_id_lte: [Filter Person by primary_group_id using lte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_primary_group_id_lte: List[int]
        :param filter_gender_eq: [Filter Person by gender using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_gender_eq: List[str]
        :param filter_gender_not_eq: [Filter Person by gender using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_gender_not_eq: List[str]
        :param filter_gender_eql: [Filter Person by gender using eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_gender_eql: List[str]
        :param filter_gender_not_eql: [Filter Person by gender using not_eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_gender_not_eql: List[str]
        :param filter_gender_prefix: [Filter Person by gender using prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_gender_prefix: List[str]
        :param filter_gender_not_prefix: [Filter Person by gender using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_gender_not_prefix: List[str]
        :param filter_gender_suffix: [Filter Person by gender using suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_gender_suffix: List[str]
        :param filter_gender_not_suffix: [Filter Person by gender using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_gender_not_suffix: List[str]
        :param filter_gender_match: [Filter Person by gender using match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_gender_match: List[str]
        :param filter_gender_not_match: [Filter Person by gender using not_match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_gender_not_match: List[str]
        :param filter_birthday_eq: [Filter Person by birthday using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_birthday_eq: List[date]
        :param filter_birthday_not_eq: [Filter Person by birthday using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_birthday_not_eq: List[date]
        :param filter_birthday_gt: [Filter Person by birthday using gt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_birthday_gt: List[date]
        :param filter_birthday_gte: [Filter Person by birthday using gte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_birthday_gte: List[date]
        :param filter_birthday_lt: [Filter Person by birthday using lt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_birthday_lt: List[date]
        :param filter_birthday_lte: [Filter Person by birthday using lte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_birthday_lte: List[date]
        :param filter_language_eq: [Filter Person by language using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_language_eq: List[str]
        :param filter_language_not_eq: [Filter Person by language using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_language_not_eq: List[str]
        :param filter_language_eql: [Filter Person by language using eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_language_eql: List[str]
        :param filter_language_not_eql: [Filter Person by language using not_eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_language_not_eql: List[str]
        :param filter_language_prefix: [Filter Person by language using prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_language_prefix: List[str]
        :param filter_language_not_prefix: [Filter Person by language using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_language_not_prefix: List[str]
        :param filter_language_suffix: [Filter Person by language using suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_language_suffix: List[str]
        :param filter_language_not_suffix: [Filter Person by language using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_language_not_suffix: List[str]
        :param filter_language_match: [Filter Person by language using match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_language_match: List[str]
        :param filter_language_not_match: [Filter Person by language using not_match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_language_not_match: List[str]
        :param filter_updated_at_eq: [Filter Person by updated_at using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_updated_at_eq: List[datetime]
        :param filter_updated_at_not_eq: [Filter Person by updated_at using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_updated_at_not_eq: List[datetime]
        :param filter_updated_at_gt: [Filter Person by updated_at using gt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_updated_at_gt: List[datetime]
        :param filter_updated_at_gte: [Filter Person by updated_at using gte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_updated_at_gte: List[datetime]
        :param filter_updated_at_lt: [Filter Person by updated_at using lt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_updated_at_lt: List[datetime]
        :param filter_updated_at_lte: [Filter Person by updated_at using lte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_updated_at_lte: List[datetime]
        :param fields_groups: [Include only specified fields of Group in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)
        :type fields_groups: List[GroupsReadableAttribute]
        :param fields_roles: [Include only specified fields of Role in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)
        :type fields_roles: List[RolesReadableAttribute]
        :param fields_phone_numbers: [Include only specified fields of Phone number in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)
        :type fields_phone_numbers: List[PhoneNumbersReadableAttribute]
        :param fields_social_accounts: [Include only specified fields of Social account in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)
        :type fields_social_accounts: List[SocialAccountsReadableAttribute]
        :param fields_additional_emails: [Include only specified fields of Additional email in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)
        :type fields_additional_emails: List[AdditionalEmailsReadableAttribute]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_person_serialize(
            id=id,
            include=include,
            sort=sort,
            fields_people=fields_people,
            filter_id_eq=filter_id_eq,
            filter_id_not_eq=filter_id_not_eq,
            filter_id_gt=filter_id_gt,
            filter_id_gte=filter_id_gte,
            filter_id_lt=filter_id_lt,
            filter_id_lte=filter_id_lte,
            filter_first_name_eq=filter_first_name_eq,
            filter_first_name_not_eq=filter_first_name_not_eq,
            filter_first_name_eql=filter_first_name_eql,
            filter_first_name_not_eql=filter_first_name_not_eql,
            filter_first_name_prefix=filter_first_name_prefix,
            filter_first_name_not_prefix=filter_first_name_not_prefix,
            filter_first_name_suffix=filter_first_name_suffix,
            filter_first_name_not_suffix=filter_first_name_not_suffix,
            filter_first_name_match=filter_first_name_match,
            filter_first_name_not_match=filter_first_name_not_match,
            filter_last_name_eq=filter_last_name_eq,
            filter_last_name_not_eq=filter_last_name_not_eq,
            filter_last_name_eql=filter_last_name_eql,
            filter_last_name_not_eql=filter_last_name_not_eql,
            filter_last_name_prefix=filter_last_name_prefix,
            filter_last_name_not_prefix=filter_last_name_not_prefix,
            filter_last_name_suffix=filter_last_name_suffix,
            filter_last_name_not_suffix=filter_last_name_not_suffix,
            filter_last_name_match=filter_last_name_match,
            filter_last_name_not_match=filter_last_name_not_match,
            filter_nickname_eq=filter_nickname_eq,
            filter_nickname_not_eq=filter_nickname_not_eq,
            filter_nickname_eql=filter_nickname_eql,
            filter_nickname_not_eql=filter_nickname_not_eql,
            filter_nickname_prefix=filter_nickname_prefix,
            filter_nickname_not_prefix=filter_nickname_not_prefix,
            filter_nickname_suffix=filter_nickname_suffix,
            filter_nickname_not_suffix=filter_nickname_not_suffix,
            filter_nickname_match=filter_nickname_match,
            filter_nickname_not_match=filter_nickname_not_match,
            filter_company_name_eq=filter_company_name_eq,
            filter_company_name_not_eq=filter_company_name_not_eq,
            filter_company_name_eql=filter_company_name_eql,
            filter_company_name_not_eql=filter_company_name_not_eql,
            filter_company_name_prefix=filter_company_name_prefix,
            filter_company_name_not_prefix=filter_company_name_not_prefix,
            filter_company_name_suffix=filter_company_name_suffix,
            filter_company_name_not_suffix=filter_company_name_not_suffix,
            filter_company_name_match=filter_company_name_match,
            filter_company_name_not_match=filter_company_name_not_match,
            filter_company_eq=filter_company_eq,
            filter_email_eq=filter_email_eq,
            filter_email_not_eq=filter_email_not_eq,
            filter_email_eql=filter_email_eql,
            filter_email_not_eql=filter_email_not_eql,
            filter_email_prefix=filter_email_prefix,
            filter_email_not_prefix=filter_email_not_prefix,
            filter_email_suffix=filter_email_suffix,
            filter_email_not_suffix=filter_email_not_suffix,
            filter_email_match=filter_email_match,
            filter_email_not_match=filter_email_not_match,
            filter_address_eq=filter_address_eq,
            filter_address_not_eq=filter_address_not_eq,
            filter_address_eql=filter_address_eql,
            filter_address_not_eql=filter_address_not_eql,
            filter_address_prefix=filter_address_prefix,
            filter_address_not_prefix=filter_address_not_prefix,
            filter_address_suffix=filter_address_suffix,
            filter_address_not_suffix=filter_address_not_suffix,
            filter_address_match=filter_address_match,
            filter_address_not_match=filter_address_not_match,
            filter_zip_code_eq=filter_zip_code_eq,
            filter_zip_code_not_eq=filter_zip_code_not_eq,
            filter_zip_code_eql=filter_zip_code_eql,
            filter_zip_code_not_eql=filter_zip_code_not_eql,
            filter_zip_code_prefix=filter_zip_code_prefix,
            filter_zip_code_not_prefix=filter_zip_code_not_prefix,
            filter_zip_code_suffix=filter_zip_code_suffix,
            filter_zip_code_not_suffix=filter_zip_code_not_suffix,
            filter_zip_code_match=filter_zip_code_match,
            filter_zip_code_not_match=filter_zip_code_not_match,
            filter_town_eq=filter_town_eq,
            filter_town_not_eq=filter_town_not_eq,
            filter_town_eql=filter_town_eql,
            filter_town_not_eql=filter_town_not_eql,
            filter_town_prefix=filter_town_prefix,
            filter_town_not_prefix=filter_town_not_prefix,
            filter_town_suffix=filter_town_suffix,
            filter_town_not_suffix=filter_town_not_suffix,
            filter_town_match=filter_town_match,
            filter_town_not_match=filter_town_not_match,
            filter_country_eq=filter_country_eq,
            filter_country_not_eq=filter_country_not_eq,
            filter_country_eql=filter_country_eql,
            filter_country_not_eql=filter_country_not_eql,
            filter_country_prefix=filter_country_prefix,
            filter_country_not_prefix=filter_country_not_prefix,
            filter_country_suffix=filter_country_suffix,
            filter_country_not_suffix=filter_country_not_suffix,
            filter_country_match=filter_country_match,
            filter_country_not_match=filter_country_not_match,
            filter_primary_group_id_eq=filter_primary_group_id_eq,
            filter_primary_group_id_not_eq=filter_primary_group_id_not_eq,
            filter_primary_group_id_gt=filter_primary_group_id_gt,
            filter_primary_group_id_gte=filter_primary_group_id_gte,
            filter_primary_group_id_lt=filter_primary_group_id_lt,
            filter_primary_group_id_lte=filter_primary_group_id_lte,
            filter_gender_eq=filter_gender_eq,
            filter_gender_not_eq=filter_gender_not_eq,
            filter_gender_eql=filter_gender_eql,
            filter_gender_not_eql=filter_gender_not_eql,
            filter_gender_prefix=filter_gender_prefix,
            filter_gender_not_prefix=filter_gender_not_prefix,
            filter_gender_suffix=filter_gender_suffix,
            filter_gender_not_suffix=filter_gender_not_suffix,
            filter_gender_match=filter_gender_match,
            filter_gender_not_match=filter_gender_not_match,
            filter_birthday_eq=filter_birthday_eq,
            filter_birthday_not_eq=filter_birthday_not_eq,
            filter_birthday_gt=filter_birthday_gt,
            filter_birthday_gte=filter_birthday_gte,
            filter_birthday_lt=filter_birthday_lt,
            filter_birthday_lte=filter_birthday_lte,
            filter_language_eq=filter_language_eq,
            filter_language_not_eq=filter_language_not_eq,
            filter_language_eql=filter_language_eql,
            filter_language_not_eql=filter_language_not_eql,
            filter_language_prefix=filter_language_prefix,
            filter_language_not_prefix=filter_language_not_prefix,
            filter_language_suffix=filter_language_suffix,
            filter_language_not_suffix=filter_language_not_suffix,
            filter_language_match=filter_language_match,
            filter_language_not_match=filter_language_not_match,
            filter_updated_at_eq=filter_updated_at_eq,
            filter_updated_at_not_eq=filter_updated_at_not_eq,
            filter_updated_at_gt=filter_updated_at_gt,
            filter_updated_at_gte=filter_updated_at_gte,
            filter_updated_at_lt=filter_updated_at_lt,
            filter_updated_at_lte=filter_updated_at_lte,
            fields_groups=fields_groups,
            fields_roles=fields_roles,
            fields_phone_numbers=fields_phone_numbers,
            fields_social_accounts=fields_social_accounts,
            fields_additional_emails=fields_additional_emails,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
            _additional_query_params=_additional_query_params,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PeopleSingle",
            '401': "JsonapiFailure",
            '403': "JsonapiFailure",
            '404': "JsonapiFailure",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_person_serialize(
        self,
        id,
        include,
        sort,
        fields_people,
        filter_id_eq,
        filter_id_not_eq,
        filter_id_gt,
        filter_id_gte,
        filter_id_lt,
        filter_id_lte,
        filter_first_name_eq,
        filter_first_name_not_eq,
        filter_first_name_eql,
        filter_first_name_not_eql,
        filter_first_name_prefix,
        filter_first_name_not_prefix,
        filter_first_name_suffix,
        filter_first_name_not_suffix,
        filter_first_name_match,
        filter_first_name_not_match,
        filter_last_name_eq,
        filter_last_name_not_eq,
        filter_last_name_eql,
        filter_last_name_not_eql,
        filter_last_name_prefix,
        filter_last_name_not_prefix,
        filter_last_name_suffix,
        filter_last_name_not_suffix,
        filter_last_name_match,
        filter_last_name_not_match,
        filter_nickname_eq,
        filter_nickname_not_eq,
        filter_nickname_eql,
        filter_nickname_not_eql,
        filter_nickname_prefix,
        filter_nickname_not_prefix,
        filter_nickname_suffix,
        filter_nickname_not_suffix,
        filter_nickname_match,
        filter_nickname_not_match,
        filter_company_name_eq,
        filter_company_name_not_eq,
        filter_company_name_eql,
        filter_company_name_not_eql,
        filter_company_name_prefix,
        filter_company_name_not_prefix,
        filter_company_name_suffix,
        filter_company_name_not_suffix,
        filter_company_name_match,
        filter_company_name_not_match,
        filter_company_eq,
        filter_email_eq,
        filter_email_not_eq,
        filter_email_eql,
        filter_email_not_eql,
        filter_email_prefix,
        filter_email_not_prefix,
        filter_email_suffix,
        filter_email_not_suffix,
        filter_email_match,
        filter_email_not_match,
        filter_address_eq,
        filter_address_not_eq,
        filter_address_eql,
        filter_address_not_eql,
        filter_address_prefix,
        filter_address_not_prefix,
        filter_address_suffix,
        filter_address_not_suffix,
        filter_address_match,
        filter_address_not_match,
        filter_zip_code_eq,
        filter_zip_code_not_eq,
        filter_zip_code_eql,
        filter_zip_code_not_eql,
        filter_zip_code_prefix,
        filter_zip_code_not_prefix,
        filter_zip_code_suffix,
        filter_zip_code_not_suffix,
        filter_zip_code_match,
        filter_zip_code_not_match,
        filter_town_eq,
        filter_town_not_eq,
        filter_town_eql,
        filter_town_not_eql,
        filter_town_prefix,
        filter_town_not_prefix,
        filter_town_suffix,
        filter_town_not_suffix,
        filter_town_match,
        filter_town_not_match,
        filter_country_eq,
        filter_country_not_eq,
        filter_country_eql,
        filter_country_not_eql,
        filter_country_prefix,
        filter_country_not_prefix,
        filter_country_suffix,
        filter_country_not_suffix,
        filter_country_match,
        filter_country_not_match,
        filter_primary_group_id_eq,
        filter_primary_group_id_not_eq,
        filter_primary_group_id_gt,
        filter_primary_group_id_gte,
        filter_primary_group_id_lt,
        filter_primary_group_id_lte,
        filter_gender_eq,
        filter_gender_not_eq,
        filter_gender_eql,
        filter_gender_not_eql,
        filter_gender_prefix,
        filter_gender_not_prefix,
        filter_gender_suffix,
        filter_gender_not_suffix,
        filter_gender_match,
        filter_gender_not_match,
        filter_birthday_eq,
        filter_birthday_not_eq,
        filter_birthday_gt,
        filter_birthday_gte,
        filter_birthday_lt,
        filter_birthday_lte,
        filter_language_eq,
        filter_language_not_eq,
        filter_language_eql,
        filter_language_not_eql,
        filter_language_prefix,
        filter_language_not_prefix,
        filter_language_suffix,
        filter_language_not_suffix,
        filter_language_match,
        filter_language_not_match,
        filter_updated_at_eq,
        filter_updated_at_not_eq,
        filter_updated_at_gt,
        filter_updated_at_gte,
        filter_updated_at_lt,
        filter_updated_at_lte,
        fields_groups,
        fields_roles,
        fields_phone_numbers,
        fields_social_accounts,
        fields_additional_emails,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
        _additional_query_params: Optional[Dict[StrictStr, Any]] = None,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'include': 'csv',
            'sort': 'csv',
            'fields[people]': 'csv',
            'filter[id][eq]': 'csv',
            'filter[id][not_eq]': 'csv',
            'filter[id][gt]': 'csv',
            'filter[id][gte]': 'csv',
            'filter[id][lt]': 'csv',
            'filter[id][lte]': 'csv',
            'filter[first_name][eq]': 'csv',
            'filter[first_name][not_eq]': 'csv',
            'filter[first_name][eql]': 'csv',
            'filter[first_name][not_eql]': 'csv',
            'filter[first_name][prefix]': 'csv',
            'filter[first_name][not_prefix]': 'csv',
            'filter[first_name][suffix]': 'csv',
            'filter[first_name][not_suffix]': 'csv',
            'filter[first_name][match]': 'csv',
            'filter[first_name][not_match]': 'csv',
            'filter[last_name][eq]': 'csv',
            'filter[last_name][not_eq]': 'csv',
            'filter[last_name][eql]': 'csv',
            'filter[last_name][not_eql]': 'csv',
            'filter[last_name][prefix]': 'csv',
            'filter[last_name][not_prefix]': 'csv',
            'filter[last_name][suffix]': 'csv',
            'filter[last_name][not_suffix]': 'csv',
            'filter[last_name][match]': 'csv',
            'filter[last_name][not_match]': 'csv',
            'filter[nickname][eq]': 'csv',
            'filter[nickname][not_eq]': 'csv',
            'filter[nickname][eql]': 'csv',
            'filter[nickname][not_eql]': 'csv',
            'filter[nickname][prefix]': 'csv',
            'filter[nickname][not_prefix]': 'csv',
            'filter[nickname][suffix]': 'csv',
            'filter[nickname][not_suffix]': 'csv',
            'filter[nickname][match]': 'csv',
            'filter[nickname][not_match]': 'csv',
            'filter[company_name][eq]': 'csv',
            'filter[company_name][not_eq]': 'csv',
            'filter[company_name][eql]': 'csv',
            'filter[company_name][not_eql]': 'csv',
            'filter[company_name][prefix]': 'csv',
            'filter[company_name][not_prefix]': 'csv',
            'filter[company_name][suffix]': 'csv',
            'filter[company_name][not_suffix]': 'csv',
            'filter[company_name][match]': 'csv',
            'filter[company_name][not_match]': 'csv',
            'filter[email][eq]': 'csv',
            'filter[email][not_eq]': 'csv',
            'filter[email][eql]': 'csv',
            'filter[email][not_eql]': 'csv',
            'filter[email][prefix]': 'csv',
            'filter[email][not_prefix]': 'csv',
            'filter[email][suffix]': 'csv',
            'filter[email][not_suffix]': 'csv',
            'filter[email][match]': 'csv',
            'filter[email][not_match]': 'csv',
            'filter[address][eq]': 'csv',
            'filter[address][not_eq]': 'csv',
            'filter[address][eql]': 'csv',
            'filter[address][not_eql]': 'csv',
            'filter[address][prefix]': 'csv',
            'filter[address][not_prefix]': 'csv',
            'filter[address][suffix]': 'csv',
            'filter[address][not_suffix]': 'csv',
            'filter[address][match]': 'csv',
            'filter[address][not_match]': 'csv',
            'filter[zip_code][eq]': 'csv',
            'filter[zip_code][not_eq]': 'csv',
            'filter[zip_code][eql]': 'csv',
            'filter[zip_code][not_eql]': 'csv',
            'filter[zip_code][prefix]': 'csv',
            'filter[zip_code][not_prefix]': 'csv',
            'filter[zip_code][suffix]': 'csv',
            'filter[zip_code][not_suffix]': 'csv',
            'filter[zip_code][match]': 'csv',
            'filter[zip_code][not_match]': 'csv',
            'filter[town][eq]': 'csv',
            'filter[town][not_eq]': 'csv',
            'filter[town][eql]': 'csv',
            'filter[town][not_eql]': 'csv',
            'filter[town][prefix]': 'csv',
            'filter[town][not_prefix]': 'csv',
            'filter[town][suffix]': 'csv',
            'filter[town][not_suffix]': 'csv',
            'filter[town][match]': 'csv',
            'filter[town][not_match]': 'csv',
            'filter[country][eq]': 'csv',
            'filter[country][not_eq]': 'csv',
            'filter[country][eql]': 'csv',
            'filter[country][not_eql]': 'csv',
            'filter[country][prefix]': 'csv',
            'filter[country][not_prefix]': 'csv',
            'filter[country][suffix]': 'csv',
            'filter[country][not_suffix]': 'csv',
            'filter[country][match]': 'csv',
            'filter[country][not_match]': 'csv',
            'filter[primary_group_id][eq]': 'csv',
            'filter[primary_group_id][not_eq]': 'csv',
            'filter[primary_group_id][gt]': 'csv',
            'filter[primary_group_id][gte]': 'csv',
            'filter[primary_group_id][lt]': 'csv',
            'filter[primary_group_id][lte]': 'csv',
            'filter[gender][eq]': 'csv',
            'filter[gender][not_eq]': 'csv',
            'filter[gender][eql]': 'csv',
            'filter[gender][not_eql]': 'csv',
            'filter[gender][prefix]': 'csv',
            'filter[gender][not_prefix]': 'csv',
            'filter[gender][suffix]': 'csv',
            'filter[gender][not_suffix]': 'csv',
            'filter[gender][match]': 'csv',
            'filter[gender][not_match]': 'csv',
            'filter[birthday][eq]': 'csv',
            'filter[birthday][not_eq]': 'csv',
            'filter[birthday][gt]': 'csv',
            'filter[birthday][gte]': 'csv',
            'filter[birthday][lt]': 'csv',
            'filter[birthday][lte]': 'csv',
            'filter[language][eq]': 'csv',
            'filter[language][not_eq]': 'csv',
            'filter[language][eql]': 'csv',
            'filter[language][not_eql]': 'csv',
            'filter[language][prefix]': 'csv',
            'filter[language][not_prefix]': 'csv',
            'filter[language][suffix]': 'csv',
            'filter[language][not_suffix]': 'csv',
            'filter[language][match]': 'csv',
            'filter[language][not_match]': 'csv',
            'filter[updated_at][eq]': 'csv',
            'filter[updated_at][not_eq]': 'csv',
            'filter[updated_at][gt]': 'csv',
            'filter[updated_at][gte]': 'csv',
            'filter[updated_at][lt]': 'csv',
            'filter[updated_at][lte]': 'csv',
            'fields[groups]': 'csv',
            'fields[roles]': 'csv',
            'fields[phone_numbers]': 'csv',
            'fields[social_accounts]': 'csv',
            'fields[additional_emails]': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters

        if _additional_query_params is not None:
            _query_params.extend((key, value) for key, value in _additional_query_params.items())

        if include is not None:
            
            _query_params.append(('include', include))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if fields_people is not None:
            
            _query_params.append(('fields[people]', fields_people))
            
        if filter_id_eq is not None:
            
            _query_params.append(('filter[id][eq]', filter_id_eq))
            
        if filter_id_not_eq is not None:
            
            _query_params.append(('filter[id][not_eq]', filter_id_not_eq))
            
        if filter_id_gt is not None:
            
            _query_params.append(('filter[id][gt]', filter_id_gt))
            
        if filter_id_gte is not None:
            
            _query_params.append(('filter[id][gte]', filter_id_gte))
            
        if filter_id_lt is not None:
            
            _query_params.append(('filter[id][lt]', filter_id_lt))
            
        if filter_id_lte is not None:
            
            _query_params.append(('filter[id][lte]', filter_id_lte))
            
        if filter_first_name_eq is not None:
            
            _query_params.append(('filter[first_name][eq]', filter_first_name_eq))
            
        if filter_first_name_not_eq is not None:
            
            _query_params.append(('filter[first_name][not_eq]', filter_first_name_not_eq))
            
        if filter_first_name_eql is not None:
            
            _query_params.append(('filter[first_name][eql]', filter_first_name_eql))
            
        if filter_first_name_not_eql is not None:
            
            _query_params.append(('filter[first_name][not_eql]', filter_first_name_not_eql))
            
        if filter_first_name_prefix is not None:
            
            _query_params.append(('filter[first_name][prefix]', filter_first_name_prefix))
            
        if filter_first_name_not_prefix is not None:
            
            _query_params.append(('filter[first_name][not_prefix]', filter_first_name_not_prefix))
            
        if filter_first_name_suffix is not None:
            
            _query_params.append(('filter[first_name][suffix]', filter_first_name_suffix))
            
        if filter_first_name_not_suffix is not None:
            
            _query_params.append(('filter[first_name][not_suffix]', filter_first_name_not_suffix))
            
        if filter_first_name_match is not None:
            
            _query_params.append(('filter[first_name][match]', filter_first_name_match))
            
        if filter_first_name_not_match is not None:
            
            _query_params.append(('filter[first_name][not_match]', filter_first_name_not_match))
            
        if filter_last_name_eq is not None:
            
            _query_params.append(('filter[last_name][eq]', filter_last_name_eq))
            
        if filter_last_name_not_eq is not None:
            
            _query_params.append(('filter[last_name][not_eq]', filter_last_name_not_eq))
            
        if filter_last_name_eql is not None:
            
            _query_params.append(('filter[last_name][eql]', filter_last_name_eql))
            
        if filter_last_name_not_eql is not None:
            
            _query_params.append(('filter[last_name][not_eql]', filter_last_name_not_eql))
            
        if filter_last_name_prefix is not None:
            
            _query_params.append(('filter[last_name][prefix]', filter_last_name_prefix))
            
        if filter_last_name_not_prefix is not None:
            
            _query_params.append(('filter[last_name][not_prefix]', filter_last_name_not_prefix))
            
        if filter_last_name_suffix is not None:
            
            _query_params.append(('filter[last_name][suffix]', filter_last_name_suffix))
            
        if filter_last_name_not_suffix is not None:
            
            _query_params.append(('filter[last_name][not_suffix]', filter_last_name_not_suffix))
            
        if filter_last_name_match is not None:
            
            _query_params.append(('filter[last_name][match]', filter_last_name_match))
            
        if filter_last_name_not_match is not None:
            
            _query_params.append(('filter[last_name][not_match]', filter_last_name_not_match))
            
        if filter_nickname_eq is not None:
            
            _query_params.append(('filter[nickname][eq]', filter_nickname_eq))
            
        if filter_nickname_not_eq is not None:
            
            _query_params.append(('filter[nickname][not_eq]', filter_nickname_not_eq))
            
        if filter_nickname_eql is not None:
            
            _query_params.append(('filter[nickname][eql]', filter_nickname_eql))
            
        if filter_nickname_not_eql is not None:
            
            _query_params.append(('filter[nickname][not_eql]', filter_nickname_not_eql))
            
        if filter_nickname_prefix is not None:
            
            _query_params.append(('filter[nickname][prefix]', filter_nickname_prefix))
            
        if filter_nickname_not_prefix is not None:
            
            _query_params.append(('filter[nickname][not_prefix]', filter_nickname_not_prefix))
            
        if filter_nickname_suffix is not None:
            
            _query_params.append(('filter[nickname][suffix]', filter_nickname_suffix))
            
        if filter_nickname_not_suffix is not None:
            
            _query_params.append(('filter[nickname][not_suffix]', filter_nickname_not_suffix))
            
        if filter_nickname_match is not None:
            
            _query_params.append(('filter[nickname][match]', filter_nickname_match))
            
        if filter_nickname_not_match is not None:
            
            _query_params.append(('filter[nickname][not_match]', filter_nickname_not_match))
            
        if filter_company_name_eq is not None:
            
            _query_params.append(('filter[company_name][eq]', filter_company_name_eq))
            
        if filter_company_name_not_eq is not None:
            
            _query_params.append(('filter[company_name][not_eq]', filter_company_name_not_eq))
            
        if filter_company_name_eql is not None:
            
            _query_params.append(('filter[company_name][eql]', filter_company_name_eql))
            
        if filter_company_name_not_eql is not None:
            
            _query_params.append(('filter[company_name][not_eql]', filter_company_name_not_eql))
            
        if filter_company_name_prefix is not None:
            
            _query_params.append(('filter[company_name][prefix]', filter_company_name_prefix))
            
        if filter_company_name_not_prefix is not None:
            
            _query_params.append(('filter[company_name][not_prefix]', filter_company_name_not_prefix))
            
        if filter_company_name_suffix is not None:
            
            _query_params.append(('filter[company_name][suffix]', filter_company_name_suffix))
            
        if filter_company_name_not_suffix is not None:
            
            _query_params.append(('filter[company_name][not_suffix]', filter_company_name_not_suffix))
            
        if filter_company_name_match is not None:
            
            _query_params.append(('filter[company_name][match]', filter_company_name_match))
            
        if filter_company_name_not_match is not None:
            
            _query_params.append(('filter[company_name][not_match]', filter_company_name_not_match))
            
        if filter_company_eq is not None:
            
            _query_params.append(('filter[company][eq]', filter_company_eq))
            
        if filter_email_eq is not None:
            
            _query_params.append(('filter[email][eq]', filter_email_eq))
            
        if filter_email_not_eq is not None:
            
            _query_params.append(('filter[email][not_eq]', filter_email_not_eq))
            
        if filter_email_eql is not None:
            
            _query_params.append(('filter[email][eql]', filter_email_eql))
            
        if filter_email_not_eql is not None:
            
            _query_params.append(('filter[email][not_eql]', filter_email_not_eql))
            
        if filter_email_prefix is not None:
            
            _query_params.append(('filter[email][prefix]', filter_email_prefix))
            
        if filter_email_not_prefix is not None:
            
            _query_params.append(('filter[email][not_prefix]', filter_email_not_prefix))
            
        if filter_email_suffix is not None:
            
            _query_params.append(('filter[email][suffix]', filter_email_suffix))
            
        if filter_email_not_suffix is not None:
            
            _query_params.append(('filter[email][not_suffix]', filter_email_not_suffix))
            
        if filter_email_match is not None:
            
            _query_params.append(('filter[email][match]', filter_email_match))
            
        if filter_email_not_match is not None:
            
            _query_params.append(('filter[email][not_match]', filter_email_not_match))
            
        if filter_address_eq is not None:
            
            _query_params.append(('filter[address][eq]', filter_address_eq))
            
        if filter_address_not_eq is not None:
            
            _query_params.append(('filter[address][not_eq]', filter_address_not_eq))
            
        if filter_address_eql is not None:
            
            _query_params.append(('filter[address][eql]', filter_address_eql))
            
        if filter_address_not_eql is not None:
            
            _query_params.append(('filter[address][not_eql]', filter_address_not_eql))
            
        if filter_address_prefix is not None:
            
            _query_params.append(('filter[address][prefix]', filter_address_prefix))
            
        if filter_address_not_prefix is not None:
            
            _query_params.append(('filter[address][not_prefix]', filter_address_not_prefix))
            
        if filter_address_suffix is not None:
            
            _query_params.append(('filter[address][suffix]', filter_address_suffix))
            
        if filter_address_not_suffix is not None:
            
            _query_params.append(('filter[address][not_suffix]', filter_address_not_suffix))
            
        if filter_address_match is not None:
            
            _query_params.append(('filter[address][match]', filter_address_match))
            
        if filter_address_not_match is not None:
            
            _query_params.append(('filter[address][not_match]', filter_address_not_match))
            
        if filter_zip_code_eq is not None:
            
            _query_params.append(('filter[zip_code][eq]', filter_zip_code_eq))
            
        if filter_zip_code_not_eq is not None:
            
            _query_params.append(('filter[zip_code][not_eq]', filter_zip_code_not_eq))
            
        if filter_zip_code_eql is not None:
            
            _query_params.append(('filter[zip_code][eql]', filter_zip_code_eql))
            
        if filter_zip_code_not_eql is not None:
            
            _query_params.append(('filter[zip_code][not_eql]', filter_zip_code_not_eql))
            
        if filter_zip_code_prefix is not None:
            
            _query_params.append(('filter[zip_code][prefix]', filter_zip_code_prefix))
            
        if filter_zip_code_not_prefix is not None:
            
            _query_params.append(('filter[zip_code][not_prefix]', filter_zip_code_not_prefix))
            
        if filter_zip_code_suffix is not None:
            
            _query_params.append(('filter[zip_code][suffix]', filter_zip_code_suffix))
            
        if filter_zip_code_not_suffix is not None:
            
            _query_params.append(('filter[zip_code][not_suffix]', filter_zip_code_not_suffix))
            
        if filter_zip_code_match is not None:
            
            _query_params.append(('filter[zip_code][match]', filter_zip_code_match))
            
        if filter_zip_code_not_match is not None:
            
            _query_params.append(('filter[zip_code][not_match]', filter_zip_code_not_match))
            
        if filter_town_eq is not None:
            
            _query_params.append(('filter[town][eq]', filter_town_eq))
            
        if filter_town_not_eq is not None:
            
            _query_params.append(('filter[town][not_eq]', filter_town_not_eq))
            
        if filter_town_eql is not None:
            
            _query_params.append(('filter[town][eql]', filter_town_eql))
            
        if filter_town_not_eql is not None:
            
            _query_params.append(('filter[town][not_eql]', filter_town_not_eql))
            
        if filter_town_prefix is not None:
            
            _query_params.append(('filter[town][prefix]', filter_town_prefix))
            
        if filter_town_not_prefix is not None:
            
            _query_params.append(('filter[town][not_prefix]', filter_town_not_prefix))
            
        if filter_town_suffix is not None:
            
            _query_params.append(('filter[town][suffix]', filter_town_suffix))
            
        if filter_town_not_suffix is not None:
            
            _query_params.append(('filter[town][not_suffix]', filter_town_not_suffix))
            
        if filter_town_match is not None:
            
            _query_params.append(('filter[town][match]', filter_town_match))
            
        if filter_town_not_match is not None:
            
            _query_params.append(('filter[town][not_match]', filter_town_not_match))
            
        if filter_country_eq is not None:
            
            _query_params.append(('filter[country][eq]', filter_country_eq))
            
        if filter_country_not_eq is not None:
            
            _query_params.append(('filter[country][not_eq]', filter_country_not_eq))
            
        if filter_country_eql is not None:
            
            _query_params.append(('filter[country][eql]', filter_country_eql))
            
        if filter_country_not_eql is not None:
            
            _query_params.append(('filter[country][not_eql]', filter_country_not_eql))
            
        if filter_country_prefix is not None:
            
            _query_params.append(('filter[country][prefix]', filter_country_prefix))
            
        if filter_country_not_prefix is not None:
            
            _query_params.append(('filter[country][not_prefix]', filter_country_not_prefix))
            
        if filter_country_suffix is not None:
            
            _query_params.append(('filter[country][suffix]', filter_country_suffix))
            
        if filter_country_not_suffix is not None:
            
            _query_params.append(('filter[country][not_suffix]', filter_country_not_suffix))
            
        if filter_country_match is not None:
            
            _query_params.append(('filter[country][match]', filter_country_match))
            
        if filter_country_not_match is not None:
            
            _query_params.append(('filter[country][not_match]', filter_country_not_match))
            
        if filter_primary_group_id_eq is not None:
            
            _query_params.append(('filter[primary_group_id][eq]', filter_primary_group_id_eq))
            
        if filter_primary_group_id_not_eq is not None:
            
            _query_params.append(('filter[primary_group_id][not_eq]', filter_primary_group_id_not_eq))
            
        if filter_primary_group_id_gt is not None:
            
            _query_params.append(('filter[primary_group_id][gt]', filter_primary_group_id_gt))
            
        if filter_primary_group_id_gte is not None:
            
            _query_params.append(('filter[primary_group_id][gte]', filter_primary_group_id_gte))
            
        if filter_primary_group_id_lt is not None:
            
            _query_params.append(('filter[primary_group_id][lt]', filter_primary_group_id_lt))
            
        if filter_primary_group_id_lte is not None:
            
            _query_params.append(('filter[primary_group_id][lte]', filter_primary_group_id_lte))
            
        if filter_gender_eq is not None:
            
            _query_params.append(('filter[gender][eq]', filter_gender_eq))
            
        if filter_gender_not_eq is not None:
            
            _query_params.append(('filter[gender][not_eq]', filter_gender_not_eq))
            
        if filter_gender_eql is not None:
            
            _query_params.append(('filter[gender][eql]', filter_gender_eql))
            
        if filter_gender_not_eql is not None:
            
            _query_params.append(('filter[gender][not_eql]', filter_gender_not_eql))
            
        if filter_gender_prefix is not None:
            
            _query_params.append(('filter[gender][prefix]', filter_gender_prefix))
            
        if filter_gender_not_prefix is not None:
            
            _query_params.append(('filter[gender][not_prefix]', filter_gender_not_prefix))
            
        if filter_gender_suffix is not None:
            
            _query_params.append(('filter[gender][suffix]', filter_gender_suffix))
            
        if filter_gender_not_suffix is not None:
            
            _query_params.append(('filter[gender][not_suffix]', filter_gender_not_suffix))
            
        if filter_gender_match is not None:
            
            _query_params.append(('filter[gender][match]', filter_gender_match))
            
        if filter_gender_not_match is not None:
            
            _query_params.append(('filter[gender][not_match]', filter_gender_not_match))
            
        if filter_birthday_eq is not None:
            
            _query_params.append(('filter[birthday][eq]', filter_birthday_eq))
            
        if filter_birthday_not_eq is not None:
            
            _query_params.append(('filter[birthday][not_eq]', filter_birthday_not_eq))
            
        if filter_birthday_gt is not None:
            
            _query_params.append(('filter[birthday][gt]', filter_birthday_gt))
            
        if filter_birthday_gte is not None:
            
            _query_params.append(('filter[birthday][gte]', filter_birthday_gte))
            
        if filter_birthday_lt is not None:
            
            _query_params.append(('filter[birthday][lt]', filter_birthday_lt))
            
        if filter_birthday_lte is not None:
            
            _query_params.append(('filter[birthday][lte]', filter_birthday_lte))
            
        if filter_language_eq is not None:
            
            _query_params.append(('filter[language][eq]', filter_language_eq))
            
        if filter_language_not_eq is not None:
            
            _query_params.append(('filter[language][not_eq]', filter_language_not_eq))
            
        if filter_language_eql is not None:
            
            _query_params.append(('filter[language][eql]', filter_language_eql))
            
        if filter_language_not_eql is not None:
            
            _query_params.append(('filter[language][not_eql]', filter_language_not_eql))
            
        if filter_language_prefix is not None:
            
            _query_params.append(('filter[language][prefix]', filter_language_prefix))
            
        if filter_language_not_prefix is not None:
            
            _query_params.append(('filter[language][not_prefix]', filter_language_not_prefix))
            
        if filter_language_suffix is not None:
            
            _query_params.append(('filter[language][suffix]', filter_language_suffix))
            
        if filter_language_not_suffix is not None:
            
            _query_params.append(('filter[language][not_suffix]', filter_language_not_suffix))
            
        if filter_language_match is not None:
            
            _query_params.append(('filter[language][match]', filter_language_match))
            
        if filter_language_not_match is not None:
            
            _query_params.append(('filter[language][not_match]', filter_language_not_match))
            
        if filter_updated_at_eq is not None:
            
            _query_params.append(('filter[updated_at][eq]', filter_updated_at_eq))
            
        if filter_updated_at_not_eq is not None:
            
            _query_params.append(('filter[updated_at][not_eq]', filter_updated_at_not_eq))
            
        if filter_updated_at_gt is not None:
            
            _query_params.append(('filter[updated_at][gt]', filter_updated_at_gt))
            
        if filter_updated_at_gte is not None:
            
            _query_params.append(('filter[updated_at][gte]', filter_updated_at_gte))
            
        if filter_updated_at_lt is not None:
            
            _query_params.append(('filter[updated_at][lt]', filter_updated_at_lt))
            
        if filter_updated_at_lte is not None:
            
            _query_params.append(('filter[updated_at][lte]', filter_updated_at_lte))
            
        if fields_groups is not None:
            
            _query_params.append(('fields[groups]', fields_groups))
            
        if fields_roles is not None:
            
            _query_params.append(('fields[roles]', fields_roles))
            
        if fields_phone_numbers is not None:
            
            _query_params.append(('fields[phone_numbers]', fields_phone_numbers))
            
        if fields_social_accounts is not None:
            
            _query_params.append(('fields[social_accounts]', fields_social_accounts))
            
        if fields_additional_emails is not None:
            
            _query_params.append(('fields[additional_emails]', fields_additional_emails))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/vnd.api+json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'ServiceTokenAuthHeader', 
            'ServiceTokenAuthParam'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/people/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def list_people(
        self,
        include: Annotated[Optional[List[StrictStr]], Field(description="[Include related resources](https://jsonapi.org/format/#fetching-includes)")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="[Sort people according to one or more criteria](https://jsonapi.org/format/#fetching-sorting)  You should not include both ascending `id` and descending `-id` fields the same time  ")] = None,
        fields_people: Annotated[Optional[List[PeopleReadableAttribute]], Field(description="[Include only specified fields of Person in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)")] = None,
        filter_id_eq: Annotated[Optional[List[StrictInt]], Field(description="[Filter Person by id using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_id_not_eq: Annotated[Optional[List[StrictInt]], Field(description="[Filter Person by id using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_id_gt: Annotated[Optional[List[StrictInt]], Field(description="[Filter Person by id using gt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_id_gte: Annotated[Optional[List[StrictInt]], Field(description="[Filter Person by id using gte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_id_lt: Annotated[Optional[List[StrictInt]], Field(description="[Filter Person by id using lt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_id_lte: Annotated[Optional[List[StrictInt]], Field(description="[Filter Person by id using lte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_first_name_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by first_name using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_first_name_not_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by first_name using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_first_name_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by first_name using eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_first_name_not_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by first_name using not_eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_first_name_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by first_name using prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_first_name_not_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by first_name using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_first_name_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by first_name using suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_first_name_not_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by first_name using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_first_name_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by first_name using match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_first_name_not_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by first_name using not_match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_last_name_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by last_name using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_last_name_not_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by last_name using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_last_name_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by last_name using eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_last_name_not_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by last_name using not_eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_last_name_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by last_name using prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_last_name_not_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by last_name using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_last_name_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by last_name using suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_last_name_not_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by last_name using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_last_name_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by last_name using match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_last_name_not_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by last_name using not_match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_nickname_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by nickname using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_nickname_not_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by nickname using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_nickname_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by nickname using eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_nickname_not_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by nickname using not_eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_nickname_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by nickname using prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_nickname_not_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by nickname using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_nickname_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by nickname using suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_nickname_not_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by nickname using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_nickname_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by nickname using match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_nickname_not_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by nickname using not_match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_company_name_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by company_name using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_company_name_not_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by company_name using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_company_name_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by company_name using eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_company_name_not_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by company_name using not_eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_company_name_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by company_name using prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_company_name_not_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by company_name using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_company_name_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by company_name using suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_company_name_not_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by company_name using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_company_name_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by company_name using match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_company_name_not_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by company_name using not_match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_company_eq: Annotated[Optional[StrictBool], Field(description="[Filter Person by company using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_email_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by email using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_email_not_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by email using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_email_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by email using eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_email_not_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by email using not_eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_email_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by email using prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_email_not_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by email using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_email_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by email using suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_email_not_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by email using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_email_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by email using match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_email_not_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by email using not_match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_address_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by address using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_address_not_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by address using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_address_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by address using eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_address_not_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by address using not_eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_address_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by address using prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_address_not_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by address using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_address_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by address using suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_address_not_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by address using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_address_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by address using match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_address_not_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by address using not_match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_zip_code_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by zip_code using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_zip_code_not_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by zip_code using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_zip_code_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by zip_code using eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_zip_code_not_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by zip_code using not_eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_zip_code_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by zip_code using prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_zip_code_not_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by zip_code using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_zip_code_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by zip_code using suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_zip_code_not_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by zip_code using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_zip_code_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by zip_code using match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_zip_code_not_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by zip_code using not_match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_town_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by town using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_town_not_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by town using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_town_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by town using eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_town_not_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by town using not_eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_town_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by town using prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_town_not_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by town using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_town_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by town using suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_town_not_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by town using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_town_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by town using match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_town_not_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by town using not_match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_country_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by country using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_country_not_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by country using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_country_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by country using eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_country_not_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by country using not_eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_country_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by country using prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_country_not_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by country using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_country_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by country using suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_country_not_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by country using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_country_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by country using match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_country_not_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by country using not_match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_primary_group_id_eq: Annotated[Optional[List[StrictInt]], Field(description="[Filter Person by primary_group_id using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_primary_group_id_not_eq: Annotated[Optional[List[StrictInt]], Field(description="[Filter Person by primary_group_id using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_primary_group_id_gt: Annotated[Optional[List[StrictInt]], Field(description="[Filter Person by primary_group_id using gt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_primary_group_id_gte: Annotated[Optional[List[StrictInt]], Field(description="[Filter Person by primary_group_id using gte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_primary_group_id_lt: Annotated[Optional[List[StrictInt]], Field(description="[Filter Person by primary_group_id using lt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_primary_group_id_lte: Annotated[Optional[List[StrictInt]], Field(description="[Filter Person by primary_group_id using lte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_gender_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by gender using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_gender_not_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by gender using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_gender_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by gender using eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_gender_not_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by gender using not_eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_gender_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by gender using prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_gender_not_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by gender using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_gender_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by gender using suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_gender_not_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by gender using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_gender_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by gender using match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_gender_not_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by gender using not_match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_birthday_eq: Annotated[Optional[List[date]], Field(description="[Filter Person by birthday using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_birthday_not_eq: Annotated[Optional[List[date]], Field(description="[Filter Person by birthday using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_birthday_gt: Annotated[Optional[List[date]], Field(description="[Filter Person by birthday using gt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_birthday_gte: Annotated[Optional[List[date]], Field(description="[Filter Person by birthday using gte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_birthday_lt: Annotated[Optional[List[date]], Field(description="[Filter Person by birthday using lt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_birthday_lte: Annotated[Optional[List[date]], Field(description="[Filter Person by birthday using lte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_language_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by language using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_language_not_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by language using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_language_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by language using eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_language_not_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by language using not_eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_language_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by language using prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_language_not_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by language using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_language_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by language using suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_language_not_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by language using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_language_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by language using match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_language_not_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by language using not_match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_updated_at_eq: Annotated[Optional[List[datetime]], Field(description="[Filter Person by updated_at using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_updated_at_not_eq: Annotated[Optional[List[datetime]], Field(description="[Filter Person by updated_at using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_updated_at_gt: Annotated[Optional[List[datetime]], Field(description="[Filter Person by updated_at using gt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_updated_at_gte: Annotated[Optional[List[datetime]], Field(description="[Filter Person by updated_at using gte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_updated_at_lt: Annotated[Optional[List[datetime]], Field(description="[Filter Person by updated_at using lt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_updated_at_lte: Annotated[Optional[List[datetime]], Field(description="[Filter Person by updated_at using lte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        fields_groups: Annotated[Optional[List[GroupsReadableAttribute]], Field(description="[Include only specified fields of Group in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)")] = None,
        fields_roles: Annotated[Optional[List[RolesReadableAttribute]], Field(description="[Include only specified fields of Role in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)")] = None,
        fields_phone_numbers: Annotated[Optional[List[PhoneNumbersReadableAttribute]], Field(description="[Include only specified fields of Phone number in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)")] = None,
        fields_social_accounts: Annotated[Optional[List[SocialAccountsReadableAttribute]], Field(description="[Include only specified fields of Social account in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)")] = None,
        fields_additional_emails: Annotated[Optional[List[AdditionalEmailsReadableAttribute]], Field(description="[Include only specified fields of Additional email in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
        _additional_query_params: Optional[Dict[StrictStr, Any]] = None,
    ) -> PeopleCollection:
        """List People


        :param include: [Include related resources](https://jsonapi.org/format/#fetching-includes)
        :type include: List[str]
        :param sort: [Sort people according to one or more criteria](https://jsonapi.org/format/#fetching-sorting)  You should not include both ascending `id` and descending `-id` fields the same time  
        :type sort: List[str]
        :param fields_people: [Include only specified fields of Person in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)
        :type fields_people: List[PeopleReadableAttribute]
        :param filter_id_eq: [Filter Person by id using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_eq: List[int]
        :param filter_id_not_eq: [Filter Person by id using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_not_eq: List[int]
        :param filter_id_gt: [Filter Person by id using gt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_gt: List[int]
        :param filter_id_gte: [Filter Person by id using gte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_gte: List[int]
        :param filter_id_lt: [Filter Person by id using lt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_lt: List[int]
        :param filter_id_lte: [Filter Person by id using lte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_lte: List[int]
        :param filter_first_name_eq: [Filter Person by first_name using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_first_name_eq: List[str]
        :param filter_first_name_not_eq: [Filter Person by first_name using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_first_name_not_eq: List[str]
        :param filter_first_name_eql: [Filter Person by first_name using eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_first_name_eql: List[str]
        :param filter_first_name_not_eql: [Filter Person by first_name using not_eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_first_name_not_eql: List[str]
        :param filter_first_name_prefix: [Filter Person by first_name using prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_first_name_prefix: List[str]
        :param filter_first_name_not_prefix: [Filter Person by first_name using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_first_name_not_prefix: List[str]
        :param filter_first_name_suffix: [Filter Person by first_name using suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_first_name_suffix: List[str]
        :param filter_first_name_not_suffix: [Filter Person by first_name using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_first_name_not_suffix: List[str]
        :param filter_first_name_match: [Filter Person by first_name using match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_first_name_match: List[str]
        :param filter_first_name_not_match: [Filter Person by first_name using not_match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_first_name_not_match: List[str]
        :param filter_last_name_eq: [Filter Person by last_name using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_last_name_eq: List[str]
        :param filter_last_name_not_eq: [Filter Person by last_name using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_last_name_not_eq: List[str]
        :param filter_last_name_eql: [Filter Person by last_name using eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_last_name_eql: List[str]
        :param filter_last_name_not_eql: [Filter Person by last_name using not_eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_last_name_not_eql: List[str]
        :param filter_last_name_prefix: [Filter Person by last_name using prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_last_name_prefix: List[str]
        :param filter_last_name_not_prefix: [Filter Person by last_name using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_last_name_not_prefix: List[str]
        :param filter_last_name_suffix: [Filter Person by last_name using suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_last_name_suffix: List[str]
        :param filter_last_name_not_suffix: [Filter Person by last_name using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_last_name_not_suffix: List[str]
        :param filter_last_name_match: [Filter Person by last_name using match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_last_name_match: List[str]
        :param filter_last_name_not_match: [Filter Person by last_name using not_match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_last_name_not_match: List[str]
        :param filter_nickname_eq: [Filter Person by nickname using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_nickname_eq: List[str]
        :param filter_nickname_not_eq: [Filter Person by nickname using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_nickname_not_eq: List[str]
        :param filter_nickname_eql: [Filter Person by nickname using eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_nickname_eql: List[str]
        :param filter_nickname_not_eql: [Filter Person by nickname using not_eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_nickname_not_eql: List[str]
        :param filter_nickname_prefix: [Filter Person by nickname using prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_nickname_prefix: List[str]
        :param filter_nickname_not_prefix: [Filter Person by nickname using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_nickname_not_prefix: List[str]
        :param filter_nickname_suffix: [Filter Person by nickname using suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_nickname_suffix: List[str]
        :param filter_nickname_not_suffix: [Filter Person by nickname using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_nickname_not_suffix: List[str]
        :param filter_nickname_match: [Filter Person by nickname using match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_nickname_match: List[str]
        :param filter_nickname_not_match: [Filter Person by nickname using not_match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_nickname_not_match: List[str]
        :param filter_company_name_eq: [Filter Person by company_name using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_company_name_eq: List[str]
        :param filter_company_name_not_eq: [Filter Person by company_name using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_company_name_not_eq: List[str]
        :param filter_company_name_eql: [Filter Person by company_name using eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_company_name_eql: List[str]
        :param filter_company_name_not_eql: [Filter Person by company_name using not_eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_company_name_not_eql: List[str]
        :param filter_company_name_prefix: [Filter Person by company_name using prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_company_name_prefix: List[str]
        :param filter_company_name_not_prefix: [Filter Person by company_name using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_company_name_not_prefix: List[str]
        :param filter_company_name_suffix: [Filter Person by company_name using suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_company_name_suffix: List[str]
        :param filter_company_name_not_suffix: [Filter Person by company_name using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_company_name_not_suffix: List[str]
        :param filter_company_name_match: [Filter Person by company_name using match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_company_name_match: List[str]
        :param filter_company_name_not_match: [Filter Person by company_name using not_match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_company_name_not_match: List[str]
        :param filter_company_eq: [Filter Person by company using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_company_eq: bool
        :param filter_email_eq: [Filter Person by email using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_email_eq: List[str]
        :param filter_email_not_eq: [Filter Person by email using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_email_not_eq: List[str]
        :param filter_email_eql: [Filter Person by email using eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_email_eql: List[str]
        :param filter_email_not_eql: [Filter Person by email using not_eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_email_not_eql: List[str]
        :param filter_email_prefix: [Filter Person by email using prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_email_prefix: List[str]
        :param filter_email_not_prefix: [Filter Person by email using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_email_not_prefix: List[str]
        :param filter_email_suffix: [Filter Person by email using suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_email_suffix: List[str]
        :param filter_email_not_suffix: [Filter Person by email using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_email_not_suffix: List[str]
        :param filter_email_match: [Filter Person by email using match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_email_match: List[str]
        :param filter_email_not_match: [Filter Person by email using not_match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_email_not_match: List[str]
        :param filter_address_eq: [Filter Person by address using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_address_eq: List[str]
        :param filter_address_not_eq: [Filter Person by address using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_address_not_eq: List[str]
        :param filter_address_eql: [Filter Person by address using eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_address_eql: List[str]
        :param filter_address_not_eql: [Filter Person by address using not_eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_address_not_eql: List[str]
        :param filter_address_prefix: [Filter Person by address using prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_address_prefix: List[str]
        :param filter_address_not_prefix: [Filter Person by address using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_address_not_prefix: List[str]
        :param filter_address_suffix: [Filter Person by address using suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_address_suffix: List[str]
        :param filter_address_not_suffix: [Filter Person by address using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_address_not_suffix: List[str]
        :param filter_address_match: [Filter Person by address using match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_address_match: List[str]
        :param filter_address_not_match: [Filter Person by address using not_match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_address_not_match: List[str]
        :param filter_zip_code_eq: [Filter Person by zip_code using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_zip_code_eq: List[str]
        :param filter_zip_code_not_eq: [Filter Person by zip_code using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_zip_code_not_eq: List[str]
        :param filter_zip_code_eql: [Filter Person by zip_code using eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_zip_code_eql: List[str]
        :param filter_zip_code_not_eql: [Filter Person by zip_code using not_eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_zip_code_not_eql: List[str]
        :param filter_zip_code_prefix: [Filter Person by zip_code using prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_zip_code_prefix: List[str]
        :param filter_zip_code_not_prefix: [Filter Person by zip_code using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_zip_code_not_prefix: List[str]
        :param filter_zip_code_suffix: [Filter Person by zip_code using suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_zip_code_suffix: List[str]
        :param filter_zip_code_not_suffix: [Filter Person by zip_code using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_zip_code_not_suffix: List[str]
        :param filter_zip_code_match: [Filter Person by zip_code using match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_zip_code_match: List[str]
        :param filter_zip_code_not_match: [Filter Person by zip_code using not_match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_zip_code_not_match: List[str]
        :param filter_town_eq: [Filter Person by town using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_town_eq: List[str]
        :param filter_town_not_eq: [Filter Person by town using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_town_not_eq: List[str]
        :param filter_town_eql: [Filter Person by town using eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_town_eql: List[str]
        :param filter_town_not_eql: [Filter Person by town using not_eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_town_not_eql: List[str]
        :param filter_town_prefix: [Filter Person by town using prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_town_prefix: List[str]
        :param filter_town_not_prefix: [Filter Person by town using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_town_not_prefix: List[str]
        :param filter_town_suffix: [Filter Person by town using suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_town_suffix: List[str]
        :param filter_town_not_suffix: [Filter Person by town using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_town_not_suffix: List[str]
        :param filter_town_match: [Filter Person by town using match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_town_match: List[str]
        :param filter_town_not_match: [Filter Person by town using not_match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_town_not_match: List[str]
        :param filter_country_eq: [Filter Person by country using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_country_eq: List[str]
        :param filter_country_not_eq: [Filter Person by country using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_country_not_eq: List[str]
        :param filter_country_eql: [Filter Person by country using eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_country_eql: List[str]
        :param filter_country_not_eql: [Filter Person by country using not_eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_country_not_eql: List[str]
        :param filter_country_prefix: [Filter Person by country using prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_country_prefix: List[str]
        :param filter_country_not_prefix: [Filter Person by country using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_country_not_prefix: List[str]
        :param filter_country_suffix: [Filter Person by country using suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_country_suffix: List[str]
        :param filter_country_not_suffix: [Filter Person by country using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_country_not_suffix: List[str]
        :param filter_country_match: [Filter Person by country using match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_country_match: List[str]
        :param filter_country_not_match: [Filter Person by country using not_match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_country_not_match: List[str]
        :param filter_primary_group_id_eq: [Filter Person by primary_group_id using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_primary_group_id_eq: List[int]
        :param filter_primary_group_id_not_eq: [Filter Person by primary_group_id using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_primary_group_id_not_eq: List[int]
        :param filter_primary_group_id_gt: [Filter Person by primary_group_id using gt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_primary_group_id_gt: List[int]
        :param filter_primary_group_id_gte: [Filter Person by primary_group_id using gte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_primary_group_id_gte: List[int]
        :param filter_primary_group_id_lt: [Filter Person by primary_group_id using lt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_primary_group_id_lt: List[int]
        :param filter_primary_group_id_lte: [Filter Person by primary_group_id using lte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_primary_group_id_lte: List[int]
        :param filter_gender_eq: [Filter Person by gender using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_gender_eq: List[str]
        :param filter_gender_not_eq: [Filter Person by gender using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_gender_not_eq: List[str]
        :param filter_gender_eql: [Filter Person by gender using eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_gender_eql: List[str]
        :param filter_gender_not_eql: [Filter Person by gender using not_eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_gender_not_eql: List[str]
        :param filter_gender_prefix: [Filter Person by gender using prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_gender_prefix: List[str]
        :param filter_gender_not_prefix: [Filter Person by gender using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_gender_not_prefix: List[str]
        :param filter_gender_suffix: [Filter Person by gender using suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_gender_suffix: List[str]
        :param filter_gender_not_suffix: [Filter Person by gender using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_gender_not_suffix: List[str]
        :param filter_gender_match: [Filter Person by gender using match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_gender_match: List[str]
        :param filter_gender_not_match: [Filter Person by gender using not_match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_gender_not_match: List[str]
        :param filter_birthday_eq: [Filter Person by birthday using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_birthday_eq: List[date]
        :param filter_birthday_not_eq: [Filter Person by birthday using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_birthday_not_eq: List[date]
        :param filter_birthday_gt: [Filter Person by birthday using gt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_birthday_gt: List[date]
        :param filter_birthday_gte: [Filter Person by birthday using gte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_birthday_gte: List[date]
        :param filter_birthday_lt: [Filter Person by birthday using lt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_birthday_lt: List[date]
        :param filter_birthday_lte: [Filter Person by birthday using lte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_birthday_lte: List[date]
        :param filter_language_eq: [Filter Person by language using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_language_eq: List[str]
        :param filter_language_not_eq: [Filter Person by language using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_language_not_eq: List[str]
        :param filter_language_eql: [Filter Person by language using eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_language_eql: List[str]
        :param filter_language_not_eql: [Filter Person by language using not_eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_language_not_eql: List[str]
        :param filter_language_prefix: [Filter Person by language using prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_language_prefix: List[str]
        :param filter_language_not_prefix: [Filter Person by language using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_language_not_prefix: List[str]
        :param filter_language_suffix: [Filter Person by language using suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_language_suffix: List[str]
        :param filter_language_not_suffix: [Filter Person by language using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_language_not_suffix: List[str]
        :param filter_language_match: [Filter Person by language using match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_language_match: List[str]
        :param filter_language_not_match: [Filter Person by language using not_match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_language_not_match: List[str]
        :param filter_updated_at_eq: [Filter Person by updated_at using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_updated_at_eq: List[datetime]
        :param filter_updated_at_not_eq: [Filter Person by updated_at using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_updated_at_not_eq: List[datetime]
        :param filter_updated_at_gt: [Filter Person by updated_at using gt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_updated_at_gt: List[datetime]
        :param filter_updated_at_gte: [Filter Person by updated_at using gte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_updated_at_gte: List[datetime]
        :param filter_updated_at_lt: [Filter Person by updated_at using lt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_updated_at_lt: List[datetime]
        :param filter_updated_at_lte: [Filter Person by updated_at using lte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_updated_at_lte: List[datetime]
        :param fields_groups: [Include only specified fields of Group in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)
        :type fields_groups: List[GroupsReadableAttribute]
        :param fields_roles: [Include only specified fields of Role in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)
        :type fields_roles: List[RolesReadableAttribute]
        :param fields_phone_numbers: [Include only specified fields of Phone number in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)
        :type fields_phone_numbers: List[PhoneNumbersReadableAttribute]
        :param fields_social_accounts: [Include only specified fields of Social account in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)
        :type fields_social_accounts: List[SocialAccountsReadableAttribute]
        :param fields_additional_emails: [Include only specified fields of Additional email in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)
        :type fields_additional_emails: List[AdditionalEmailsReadableAttribute]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_people_serialize(
            include=include,
            sort=sort,
            fields_people=fields_people,
            filter_id_eq=filter_id_eq,
            filter_id_not_eq=filter_id_not_eq,
            filter_id_gt=filter_id_gt,
            filter_id_gte=filter_id_gte,
            filter_id_lt=filter_id_lt,
            filter_id_lte=filter_id_lte,
            filter_first_name_eq=filter_first_name_eq,
            filter_first_name_not_eq=filter_first_name_not_eq,
            filter_first_name_eql=filter_first_name_eql,
            filter_first_name_not_eql=filter_first_name_not_eql,
            filter_first_name_prefix=filter_first_name_prefix,
            filter_first_name_not_prefix=filter_first_name_not_prefix,
            filter_first_name_suffix=filter_first_name_suffix,
            filter_first_name_not_suffix=filter_first_name_not_suffix,
            filter_first_name_match=filter_first_name_match,
            filter_first_name_not_match=filter_first_name_not_match,
            filter_last_name_eq=filter_last_name_eq,
            filter_last_name_not_eq=filter_last_name_not_eq,
            filter_last_name_eql=filter_last_name_eql,
            filter_last_name_not_eql=filter_last_name_not_eql,
            filter_last_name_prefix=filter_last_name_prefix,
            filter_last_name_not_prefix=filter_last_name_not_prefix,
            filter_last_name_suffix=filter_last_name_suffix,
            filter_last_name_not_suffix=filter_last_name_not_suffix,
            filter_last_name_match=filter_last_name_match,
            filter_last_name_not_match=filter_last_name_not_match,
            filter_nickname_eq=filter_nickname_eq,
            filter_nickname_not_eq=filter_nickname_not_eq,
            filter_nickname_eql=filter_nickname_eql,
            filter_nickname_not_eql=filter_nickname_not_eql,
            filter_nickname_prefix=filter_nickname_prefix,
            filter_nickname_not_prefix=filter_nickname_not_prefix,
            filter_nickname_suffix=filter_nickname_suffix,
            filter_nickname_not_suffix=filter_nickname_not_suffix,
            filter_nickname_match=filter_nickname_match,
            filter_nickname_not_match=filter_nickname_not_match,
            filter_company_name_eq=filter_company_name_eq,
            filter_company_name_not_eq=filter_company_name_not_eq,
            filter_company_name_eql=filter_company_name_eql,
            filter_company_name_not_eql=filter_company_name_not_eql,
            filter_company_name_prefix=filter_company_name_prefix,
            filter_company_name_not_prefix=filter_company_name_not_prefix,
            filter_company_name_suffix=filter_company_name_suffix,
            filter_company_name_not_suffix=filter_company_name_not_suffix,
            filter_company_name_match=filter_company_name_match,
            filter_company_name_not_match=filter_company_name_not_match,
            filter_company_eq=filter_company_eq,
            filter_email_eq=filter_email_eq,
            filter_email_not_eq=filter_email_not_eq,
            filter_email_eql=filter_email_eql,
            filter_email_not_eql=filter_email_not_eql,
            filter_email_prefix=filter_email_prefix,
            filter_email_not_prefix=filter_email_not_prefix,
            filter_email_suffix=filter_email_suffix,
            filter_email_not_suffix=filter_email_not_suffix,
            filter_email_match=filter_email_match,
            filter_email_not_match=filter_email_not_match,
            filter_address_eq=filter_address_eq,
            filter_address_not_eq=filter_address_not_eq,
            filter_address_eql=filter_address_eql,
            filter_address_not_eql=filter_address_not_eql,
            filter_address_prefix=filter_address_prefix,
            filter_address_not_prefix=filter_address_not_prefix,
            filter_address_suffix=filter_address_suffix,
            filter_address_not_suffix=filter_address_not_suffix,
            filter_address_match=filter_address_match,
            filter_address_not_match=filter_address_not_match,
            filter_zip_code_eq=filter_zip_code_eq,
            filter_zip_code_not_eq=filter_zip_code_not_eq,
            filter_zip_code_eql=filter_zip_code_eql,
            filter_zip_code_not_eql=filter_zip_code_not_eql,
            filter_zip_code_prefix=filter_zip_code_prefix,
            filter_zip_code_not_prefix=filter_zip_code_not_prefix,
            filter_zip_code_suffix=filter_zip_code_suffix,
            filter_zip_code_not_suffix=filter_zip_code_not_suffix,
            filter_zip_code_match=filter_zip_code_match,
            filter_zip_code_not_match=filter_zip_code_not_match,
            filter_town_eq=filter_town_eq,
            filter_town_not_eq=filter_town_not_eq,
            filter_town_eql=filter_town_eql,
            filter_town_not_eql=filter_town_not_eql,
            filter_town_prefix=filter_town_prefix,
            filter_town_not_prefix=filter_town_not_prefix,
            filter_town_suffix=filter_town_suffix,
            filter_town_not_suffix=filter_town_not_suffix,
            filter_town_match=filter_town_match,
            filter_town_not_match=filter_town_not_match,
            filter_country_eq=filter_country_eq,
            filter_country_not_eq=filter_country_not_eq,
            filter_country_eql=filter_country_eql,
            filter_country_not_eql=filter_country_not_eql,
            filter_country_prefix=filter_country_prefix,
            filter_country_not_prefix=filter_country_not_prefix,
            filter_country_suffix=filter_country_suffix,
            filter_country_not_suffix=filter_country_not_suffix,
            filter_country_match=filter_country_match,
            filter_country_not_match=filter_country_not_match,
            filter_primary_group_id_eq=filter_primary_group_id_eq,
            filter_primary_group_id_not_eq=filter_primary_group_id_not_eq,
            filter_primary_group_id_gt=filter_primary_group_id_gt,
            filter_primary_group_id_gte=filter_primary_group_id_gte,
            filter_primary_group_id_lt=filter_primary_group_id_lt,
            filter_primary_group_id_lte=filter_primary_group_id_lte,
            filter_gender_eq=filter_gender_eq,
            filter_gender_not_eq=filter_gender_not_eq,
            filter_gender_eql=filter_gender_eql,
            filter_gender_not_eql=filter_gender_not_eql,
            filter_gender_prefix=filter_gender_prefix,
            filter_gender_not_prefix=filter_gender_not_prefix,
            filter_gender_suffix=filter_gender_suffix,
            filter_gender_not_suffix=filter_gender_not_suffix,
            filter_gender_match=filter_gender_match,
            filter_gender_not_match=filter_gender_not_match,
            filter_birthday_eq=filter_birthday_eq,
            filter_birthday_not_eq=filter_birthday_not_eq,
            filter_birthday_gt=filter_birthday_gt,
            filter_birthday_gte=filter_birthday_gte,
            filter_birthday_lt=filter_birthday_lt,
            filter_birthday_lte=filter_birthday_lte,
            filter_language_eq=filter_language_eq,
            filter_language_not_eq=filter_language_not_eq,
            filter_language_eql=filter_language_eql,
            filter_language_not_eql=filter_language_not_eql,
            filter_language_prefix=filter_language_prefix,
            filter_language_not_prefix=filter_language_not_prefix,
            filter_language_suffix=filter_language_suffix,
            filter_language_not_suffix=filter_language_not_suffix,
            filter_language_match=filter_language_match,
            filter_language_not_match=filter_language_not_match,
            filter_updated_at_eq=filter_updated_at_eq,
            filter_updated_at_not_eq=filter_updated_at_not_eq,
            filter_updated_at_gt=filter_updated_at_gt,
            filter_updated_at_gte=filter_updated_at_gte,
            filter_updated_at_lt=filter_updated_at_lt,
            filter_updated_at_lte=filter_updated_at_lte,
            fields_groups=fields_groups,
            fields_roles=fields_roles,
            fields_phone_numbers=fields_phone_numbers,
            fields_social_accounts=fields_social_accounts,
            fields_additional_emails=fields_additional_emails,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
            _additional_query_params=_additional_query_params,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PeopleCollection",
            '401': "JsonapiFailure",
            '403': "JsonapiFailure",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def list_people_with_http_info(
        self,
        include: Annotated[Optional[List[StrictStr]], Field(description="[Include related resources](https://jsonapi.org/format/#fetching-includes)")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="[Sort people according to one or more criteria](https://jsonapi.org/format/#fetching-sorting)  You should not include both ascending `id` and descending `-id` fields the same time  ")] = None,
        fields_people: Annotated[Optional[List[PeopleReadableAttribute]], Field(description="[Include only specified fields of Person in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)")] = None,
        filter_id_eq: Annotated[Optional[List[StrictInt]], Field(description="[Filter Person by id using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_id_not_eq: Annotated[Optional[List[StrictInt]], Field(description="[Filter Person by id using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_id_gt: Annotated[Optional[List[StrictInt]], Field(description="[Filter Person by id using gt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_id_gte: Annotated[Optional[List[StrictInt]], Field(description="[Filter Person by id using gte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_id_lt: Annotated[Optional[List[StrictInt]], Field(description="[Filter Person by id using lt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_id_lte: Annotated[Optional[List[StrictInt]], Field(description="[Filter Person by id using lte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_first_name_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by first_name using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_first_name_not_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by first_name using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_first_name_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by first_name using eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_first_name_not_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by first_name using not_eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_first_name_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by first_name using prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_first_name_not_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by first_name using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_first_name_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by first_name using suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_first_name_not_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by first_name using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_first_name_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by first_name using match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_first_name_not_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by first_name using not_match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_last_name_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by last_name using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_last_name_not_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by last_name using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_last_name_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by last_name using eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_last_name_not_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by last_name using not_eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_last_name_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by last_name using prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_last_name_not_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by last_name using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_last_name_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by last_name using suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_last_name_not_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by last_name using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_last_name_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by last_name using match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_last_name_not_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by last_name using not_match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_nickname_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by nickname using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_nickname_not_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by nickname using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_nickname_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by nickname using eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_nickname_not_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by nickname using not_eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_nickname_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by nickname using prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_nickname_not_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by nickname using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_nickname_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by nickname using suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_nickname_not_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by nickname using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_nickname_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by nickname using match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_nickname_not_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by nickname using not_match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_company_name_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by company_name using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_company_name_not_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by company_name using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_company_name_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by company_name using eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_company_name_not_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by company_name using not_eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_company_name_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by company_name using prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_company_name_not_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by company_name using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_company_name_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by company_name using suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_company_name_not_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by company_name using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_company_name_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by company_name using match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_company_name_not_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by company_name using not_match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_company_eq: Annotated[Optional[StrictBool], Field(description="[Filter Person by company using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_email_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by email using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_email_not_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by email using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_email_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by email using eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_email_not_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by email using not_eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_email_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by email using prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_email_not_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by email using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_email_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by email using suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_email_not_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by email using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_email_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by email using match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_email_not_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by email using not_match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_address_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by address using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_address_not_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by address using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_address_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by address using eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_address_not_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by address using not_eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_address_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by address using prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_address_not_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by address using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_address_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by address using suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_address_not_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by address using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_address_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by address using match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_address_not_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by address using not_match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_zip_code_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by zip_code using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_zip_code_not_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by zip_code using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_zip_code_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by zip_code using eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_zip_code_not_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by zip_code using not_eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_zip_code_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by zip_code using prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_zip_code_not_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by zip_code using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_zip_code_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by zip_code using suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_zip_code_not_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by zip_code using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_zip_code_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by zip_code using match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_zip_code_not_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by zip_code using not_match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_town_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by town using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_town_not_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by town using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_town_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by town using eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_town_not_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by town using not_eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_town_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by town using prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_town_not_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by town using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_town_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by town using suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_town_not_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by town using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_town_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by town using match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_town_not_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by town using not_match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_country_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by country using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_country_not_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by country using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_country_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by country using eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_country_not_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by country using not_eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_country_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by country using prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_country_not_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by country using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_country_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by country using suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_country_not_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by country using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_country_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by country using match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_country_not_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by country using not_match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_primary_group_id_eq: Annotated[Optional[List[StrictInt]], Field(description="[Filter Person by primary_group_id using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_primary_group_id_not_eq: Annotated[Optional[List[StrictInt]], Field(description="[Filter Person by primary_group_id using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_primary_group_id_gt: Annotated[Optional[List[StrictInt]], Field(description="[Filter Person by primary_group_id using gt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_primary_group_id_gte: Annotated[Optional[List[StrictInt]], Field(description="[Filter Person by primary_group_id using gte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_primary_group_id_lt: Annotated[Optional[List[StrictInt]], Field(description="[Filter Person by primary_group_id using lt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_primary_group_id_lte: Annotated[Optional[List[StrictInt]], Field(description="[Filter Person by primary_group_id using lte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_gender_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by gender using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_gender_not_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by gender using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_gender_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by gender using eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_gender_not_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by gender using not_eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_gender_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by gender using prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_gender_not_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by gender using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_gender_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by gender using suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_gender_not_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by gender using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_gender_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by gender using match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_gender_not_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by gender using not_match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_birthday_eq: Annotated[Optional[List[date]], Field(description="[Filter Person by birthday using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_birthday_not_eq: Annotated[Optional[List[date]], Field(description="[Filter Person by birthday using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_birthday_gt: Annotated[Optional[List[date]], Field(description="[Filter Person by birthday using gt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_birthday_gte: Annotated[Optional[List[date]], Field(description="[Filter Person by birthday using gte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_birthday_lt: Annotated[Optional[List[date]], Field(description="[Filter Person by birthday using lt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_birthday_lte: Annotated[Optional[List[date]], Field(description="[Filter Person by birthday using lte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_language_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by language using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_language_not_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by language using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_language_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by language using eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_language_not_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by language using not_eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_language_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by language using prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_language_not_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by language using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_language_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by language using suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_language_not_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by language using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_language_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by language using match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_language_not_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by language using not_match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_updated_at_eq: Annotated[Optional[List[datetime]], Field(description="[Filter Person by updated_at using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_updated_at_not_eq: Annotated[Optional[List[datetime]], Field(description="[Filter Person by updated_at using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_updated_at_gt: Annotated[Optional[List[datetime]], Field(description="[Filter Person by updated_at using gt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_updated_at_gte: Annotated[Optional[List[datetime]], Field(description="[Filter Person by updated_at using gte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_updated_at_lt: Annotated[Optional[List[datetime]], Field(description="[Filter Person by updated_at using lt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_updated_at_lte: Annotated[Optional[List[datetime]], Field(description="[Filter Person by updated_at using lte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        fields_groups: Annotated[Optional[List[GroupsReadableAttribute]], Field(description="[Include only specified fields of Group in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)")] = None,
        fields_roles: Annotated[Optional[List[RolesReadableAttribute]], Field(description="[Include only specified fields of Role in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)")] = None,
        fields_phone_numbers: Annotated[Optional[List[PhoneNumbersReadableAttribute]], Field(description="[Include only specified fields of Phone number in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)")] = None,
        fields_social_accounts: Annotated[Optional[List[SocialAccountsReadableAttribute]], Field(description="[Include only specified fields of Social account in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)")] = None,
        fields_additional_emails: Annotated[Optional[List[AdditionalEmailsReadableAttribute]], Field(description="[Include only specified fields of Additional email in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
        _additional_query_params: Optional[Dict[StrictStr, Any]] = None,
    ) -> ApiResponse[PeopleCollection]:
        """List People


        :param include: [Include related resources](https://jsonapi.org/format/#fetching-includes)
        :type include: List[str]
        :param sort: [Sort people according to one or more criteria](https://jsonapi.org/format/#fetching-sorting)  You should not include both ascending `id` and descending `-id` fields the same time  
        :type sort: List[str]
        :param fields_people: [Include only specified fields of Person in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)
        :type fields_people: List[PeopleReadableAttribute]
        :param filter_id_eq: [Filter Person by id using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_eq: List[int]
        :param filter_id_not_eq: [Filter Person by id using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_not_eq: List[int]
        :param filter_id_gt: [Filter Person by id using gt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_gt: List[int]
        :param filter_id_gte: [Filter Person by id using gte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_gte: List[int]
        :param filter_id_lt: [Filter Person by id using lt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_lt: List[int]
        :param filter_id_lte: [Filter Person by id using lte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_lte: List[int]
        :param filter_first_name_eq: [Filter Person by first_name using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_first_name_eq: List[str]
        :param filter_first_name_not_eq: [Filter Person by first_name using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_first_name_not_eq: List[str]
        :param filter_first_name_eql: [Filter Person by first_name using eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_first_name_eql: List[str]
        :param filter_first_name_not_eql: [Filter Person by first_name using not_eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_first_name_not_eql: List[str]
        :param filter_first_name_prefix: [Filter Person by first_name using prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_first_name_prefix: List[str]
        :param filter_first_name_not_prefix: [Filter Person by first_name using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_first_name_not_prefix: List[str]
        :param filter_first_name_suffix: [Filter Person by first_name using suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_first_name_suffix: List[str]
        :param filter_first_name_not_suffix: [Filter Person by first_name using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_first_name_not_suffix: List[str]
        :param filter_first_name_match: [Filter Person by first_name using match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_first_name_match: List[str]
        :param filter_first_name_not_match: [Filter Person by first_name using not_match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_first_name_not_match: List[str]
        :param filter_last_name_eq: [Filter Person by last_name using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_last_name_eq: List[str]
        :param filter_last_name_not_eq: [Filter Person by last_name using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_last_name_not_eq: List[str]
        :param filter_last_name_eql: [Filter Person by last_name using eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_last_name_eql: List[str]
        :param filter_last_name_not_eql: [Filter Person by last_name using not_eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_last_name_not_eql: List[str]
        :param filter_last_name_prefix: [Filter Person by last_name using prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_last_name_prefix: List[str]
        :param filter_last_name_not_prefix: [Filter Person by last_name using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_last_name_not_prefix: List[str]
        :param filter_last_name_suffix: [Filter Person by last_name using suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_last_name_suffix: List[str]
        :param filter_last_name_not_suffix: [Filter Person by last_name using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_last_name_not_suffix: List[str]
        :param filter_last_name_match: [Filter Person by last_name using match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_last_name_match: List[str]
        :param filter_last_name_not_match: [Filter Person by last_name using not_match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_last_name_not_match: List[str]
        :param filter_nickname_eq: [Filter Person by nickname using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_nickname_eq: List[str]
        :param filter_nickname_not_eq: [Filter Person by nickname using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_nickname_not_eq: List[str]
        :param filter_nickname_eql: [Filter Person by nickname using eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_nickname_eql: List[str]
        :param filter_nickname_not_eql: [Filter Person by nickname using not_eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_nickname_not_eql: List[str]
        :param filter_nickname_prefix: [Filter Person by nickname using prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_nickname_prefix: List[str]
        :param filter_nickname_not_prefix: [Filter Person by nickname using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_nickname_not_prefix: List[str]
        :param filter_nickname_suffix: [Filter Person by nickname using suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_nickname_suffix: List[str]
        :param filter_nickname_not_suffix: [Filter Person by nickname using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_nickname_not_suffix: List[str]
        :param filter_nickname_match: [Filter Person by nickname using match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_nickname_match: List[str]
        :param filter_nickname_not_match: [Filter Person by nickname using not_match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_nickname_not_match: List[str]
        :param filter_company_name_eq: [Filter Person by company_name using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_company_name_eq: List[str]
        :param filter_company_name_not_eq: [Filter Person by company_name using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_company_name_not_eq: List[str]
        :param filter_company_name_eql: [Filter Person by company_name using eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_company_name_eql: List[str]
        :param filter_company_name_not_eql: [Filter Person by company_name using not_eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_company_name_not_eql: List[str]
        :param filter_company_name_prefix: [Filter Person by company_name using prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_company_name_prefix: List[str]
        :param filter_company_name_not_prefix: [Filter Person by company_name using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_company_name_not_prefix: List[str]
        :param filter_company_name_suffix: [Filter Person by company_name using suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_company_name_suffix: List[str]
        :param filter_company_name_not_suffix: [Filter Person by company_name using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_company_name_not_suffix: List[str]
        :param filter_company_name_match: [Filter Person by company_name using match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_company_name_match: List[str]
        :param filter_company_name_not_match: [Filter Person by company_name using not_match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_company_name_not_match: List[str]
        :param filter_company_eq: [Filter Person by company using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_company_eq: bool
        :param filter_email_eq: [Filter Person by email using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_email_eq: List[str]
        :param filter_email_not_eq: [Filter Person by email using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_email_not_eq: List[str]
        :param filter_email_eql: [Filter Person by email using eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_email_eql: List[str]
        :param filter_email_not_eql: [Filter Person by email using not_eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_email_not_eql: List[str]
        :param filter_email_prefix: [Filter Person by email using prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_email_prefix: List[str]
        :param filter_email_not_prefix: [Filter Person by email using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_email_not_prefix: List[str]
        :param filter_email_suffix: [Filter Person by email using suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_email_suffix: List[str]
        :param filter_email_not_suffix: [Filter Person by email using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_email_not_suffix: List[str]
        :param filter_email_match: [Filter Person by email using match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_email_match: List[str]
        :param filter_email_not_match: [Filter Person by email using not_match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_email_not_match: List[str]
        :param filter_address_eq: [Filter Person by address using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_address_eq: List[str]
        :param filter_address_not_eq: [Filter Person by address using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_address_not_eq: List[str]
        :param filter_address_eql: [Filter Person by address using eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_address_eql: List[str]
        :param filter_address_not_eql: [Filter Person by address using not_eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_address_not_eql: List[str]
        :param filter_address_prefix: [Filter Person by address using prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_address_prefix: List[str]
        :param filter_address_not_prefix: [Filter Person by address using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_address_not_prefix: List[str]
        :param filter_address_suffix: [Filter Person by address using suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_address_suffix: List[str]
        :param filter_address_not_suffix: [Filter Person by address using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_address_not_suffix: List[str]
        :param filter_address_match: [Filter Person by address using match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_address_match: List[str]
        :param filter_address_not_match: [Filter Person by address using not_match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_address_not_match: List[str]
        :param filter_zip_code_eq: [Filter Person by zip_code using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_zip_code_eq: List[str]
        :param filter_zip_code_not_eq: [Filter Person by zip_code using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_zip_code_not_eq: List[str]
        :param filter_zip_code_eql: [Filter Person by zip_code using eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_zip_code_eql: List[str]
        :param filter_zip_code_not_eql: [Filter Person by zip_code using not_eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_zip_code_not_eql: List[str]
        :param filter_zip_code_prefix: [Filter Person by zip_code using prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_zip_code_prefix: List[str]
        :param filter_zip_code_not_prefix: [Filter Person by zip_code using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_zip_code_not_prefix: List[str]
        :param filter_zip_code_suffix: [Filter Person by zip_code using suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_zip_code_suffix: List[str]
        :param filter_zip_code_not_suffix: [Filter Person by zip_code using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_zip_code_not_suffix: List[str]
        :param filter_zip_code_match: [Filter Person by zip_code using match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_zip_code_match: List[str]
        :param filter_zip_code_not_match: [Filter Person by zip_code using not_match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_zip_code_not_match: List[str]
        :param filter_town_eq: [Filter Person by town using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_town_eq: List[str]
        :param filter_town_not_eq: [Filter Person by town using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_town_not_eq: List[str]
        :param filter_town_eql: [Filter Person by town using eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_town_eql: List[str]
        :param filter_town_not_eql: [Filter Person by town using not_eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_town_not_eql: List[str]
        :param filter_town_prefix: [Filter Person by town using prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_town_prefix: List[str]
        :param filter_town_not_prefix: [Filter Person by town using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_town_not_prefix: List[str]
        :param filter_town_suffix: [Filter Person by town using suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_town_suffix: List[str]
        :param filter_town_not_suffix: [Filter Person by town using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_town_not_suffix: List[str]
        :param filter_town_match: [Filter Person by town using match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_town_match: List[str]
        :param filter_town_not_match: [Filter Person by town using not_match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_town_not_match: List[str]
        :param filter_country_eq: [Filter Person by country using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_country_eq: List[str]
        :param filter_country_not_eq: [Filter Person by country using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_country_not_eq: List[str]
        :param filter_country_eql: [Filter Person by country using eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_country_eql: List[str]
        :param filter_country_not_eql: [Filter Person by country using not_eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_country_not_eql: List[str]
        :param filter_country_prefix: [Filter Person by country using prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_country_prefix: List[str]
        :param filter_country_not_prefix: [Filter Person by country using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_country_not_prefix: List[str]
        :param filter_country_suffix: [Filter Person by country using suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_country_suffix: List[str]
        :param filter_country_not_suffix: [Filter Person by country using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_country_not_suffix: List[str]
        :param filter_country_match: [Filter Person by country using match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_country_match: List[str]
        :param filter_country_not_match: [Filter Person by country using not_match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_country_not_match: List[str]
        :param filter_primary_group_id_eq: [Filter Person by primary_group_id using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_primary_group_id_eq: List[int]
        :param filter_primary_group_id_not_eq: [Filter Person by primary_group_id using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_primary_group_id_not_eq: List[int]
        :param filter_primary_group_id_gt: [Filter Person by primary_group_id using gt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_primary_group_id_gt: List[int]
        :param filter_primary_group_id_gte: [Filter Person by primary_group_id using gte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_primary_group_id_gte: List[int]
        :param filter_primary_group_id_lt: [Filter Person by primary_group_id using lt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_primary_group_id_lt: List[int]
        :param filter_primary_group_id_lte: [Filter Person by primary_group_id using lte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_primary_group_id_lte: List[int]
        :param filter_gender_eq: [Filter Person by gender using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_gender_eq: List[str]
        :param filter_gender_not_eq: [Filter Person by gender using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_gender_not_eq: List[str]
        :param filter_gender_eql: [Filter Person by gender using eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_gender_eql: List[str]
        :param filter_gender_not_eql: [Filter Person by gender using not_eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_gender_not_eql: List[str]
        :param filter_gender_prefix: [Filter Person by gender using prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_gender_prefix: List[str]
        :param filter_gender_not_prefix: [Filter Person by gender using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_gender_not_prefix: List[str]
        :param filter_gender_suffix: [Filter Person by gender using suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_gender_suffix: List[str]
        :param filter_gender_not_suffix: [Filter Person by gender using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_gender_not_suffix: List[str]
        :param filter_gender_match: [Filter Person by gender using match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_gender_match: List[str]
        :param filter_gender_not_match: [Filter Person by gender using not_match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_gender_not_match: List[str]
        :param filter_birthday_eq: [Filter Person by birthday using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_birthday_eq: List[date]
        :param filter_birthday_not_eq: [Filter Person by birthday using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_birthday_not_eq: List[date]
        :param filter_birthday_gt: [Filter Person by birthday using gt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_birthday_gt: List[date]
        :param filter_birthday_gte: [Filter Person by birthday using gte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_birthday_gte: List[date]
        :param filter_birthday_lt: [Filter Person by birthday using lt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_birthday_lt: List[date]
        :param filter_birthday_lte: [Filter Person by birthday using lte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_birthday_lte: List[date]
        :param filter_language_eq: [Filter Person by language using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_language_eq: List[str]
        :param filter_language_not_eq: [Filter Person by language using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_language_not_eq: List[str]
        :param filter_language_eql: [Filter Person by language using eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_language_eql: List[str]
        :param filter_language_not_eql: [Filter Person by language using not_eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_language_not_eql: List[str]
        :param filter_language_prefix: [Filter Person by language using prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_language_prefix: List[str]
        :param filter_language_not_prefix: [Filter Person by language using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_language_not_prefix: List[str]
        :param filter_language_suffix: [Filter Person by language using suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_language_suffix: List[str]
        :param filter_language_not_suffix: [Filter Person by language using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_language_not_suffix: List[str]
        :param filter_language_match: [Filter Person by language using match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_language_match: List[str]
        :param filter_language_not_match: [Filter Person by language using not_match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_language_not_match: List[str]
        :param filter_updated_at_eq: [Filter Person by updated_at using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_updated_at_eq: List[datetime]
        :param filter_updated_at_not_eq: [Filter Person by updated_at using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_updated_at_not_eq: List[datetime]
        :param filter_updated_at_gt: [Filter Person by updated_at using gt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_updated_at_gt: List[datetime]
        :param filter_updated_at_gte: [Filter Person by updated_at using gte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_updated_at_gte: List[datetime]
        :param filter_updated_at_lt: [Filter Person by updated_at using lt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_updated_at_lt: List[datetime]
        :param filter_updated_at_lte: [Filter Person by updated_at using lte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_updated_at_lte: List[datetime]
        :param fields_groups: [Include only specified fields of Group in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)
        :type fields_groups: List[GroupsReadableAttribute]
        :param fields_roles: [Include only specified fields of Role in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)
        :type fields_roles: List[RolesReadableAttribute]
        :param fields_phone_numbers: [Include only specified fields of Phone number in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)
        :type fields_phone_numbers: List[PhoneNumbersReadableAttribute]
        :param fields_social_accounts: [Include only specified fields of Social account in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)
        :type fields_social_accounts: List[SocialAccountsReadableAttribute]
        :param fields_additional_emails: [Include only specified fields of Additional email in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)
        :type fields_additional_emails: List[AdditionalEmailsReadableAttribute]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_people_serialize(
            include=include,
            sort=sort,
            fields_people=fields_people,
            filter_id_eq=filter_id_eq,
            filter_id_not_eq=filter_id_not_eq,
            filter_id_gt=filter_id_gt,
            filter_id_gte=filter_id_gte,
            filter_id_lt=filter_id_lt,
            filter_id_lte=filter_id_lte,
            filter_first_name_eq=filter_first_name_eq,
            filter_first_name_not_eq=filter_first_name_not_eq,
            filter_first_name_eql=filter_first_name_eql,
            filter_first_name_not_eql=filter_first_name_not_eql,
            filter_first_name_prefix=filter_first_name_prefix,
            filter_first_name_not_prefix=filter_first_name_not_prefix,
            filter_first_name_suffix=filter_first_name_suffix,
            filter_first_name_not_suffix=filter_first_name_not_suffix,
            filter_first_name_match=filter_first_name_match,
            filter_first_name_not_match=filter_first_name_not_match,
            filter_last_name_eq=filter_last_name_eq,
            filter_last_name_not_eq=filter_last_name_not_eq,
            filter_last_name_eql=filter_last_name_eql,
            filter_last_name_not_eql=filter_last_name_not_eql,
            filter_last_name_prefix=filter_last_name_prefix,
            filter_last_name_not_prefix=filter_last_name_not_prefix,
            filter_last_name_suffix=filter_last_name_suffix,
            filter_last_name_not_suffix=filter_last_name_not_suffix,
            filter_last_name_match=filter_last_name_match,
            filter_last_name_not_match=filter_last_name_not_match,
            filter_nickname_eq=filter_nickname_eq,
            filter_nickname_not_eq=filter_nickname_not_eq,
            filter_nickname_eql=filter_nickname_eql,
            filter_nickname_not_eql=filter_nickname_not_eql,
            filter_nickname_prefix=filter_nickname_prefix,
            filter_nickname_not_prefix=filter_nickname_not_prefix,
            filter_nickname_suffix=filter_nickname_suffix,
            filter_nickname_not_suffix=filter_nickname_not_suffix,
            filter_nickname_match=filter_nickname_match,
            filter_nickname_not_match=filter_nickname_not_match,
            filter_company_name_eq=filter_company_name_eq,
            filter_company_name_not_eq=filter_company_name_not_eq,
            filter_company_name_eql=filter_company_name_eql,
            filter_company_name_not_eql=filter_company_name_not_eql,
            filter_company_name_prefix=filter_company_name_prefix,
            filter_company_name_not_prefix=filter_company_name_not_prefix,
            filter_company_name_suffix=filter_company_name_suffix,
            filter_company_name_not_suffix=filter_company_name_not_suffix,
            filter_company_name_match=filter_company_name_match,
            filter_company_name_not_match=filter_company_name_not_match,
            filter_company_eq=filter_company_eq,
            filter_email_eq=filter_email_eq,
            filter_email_not_eq=filter_email_not_eq,
            filter_email_eql=filter_email_eql,
            filter_email_not_eql=filter_email_not_eql,
            filter_email_prefix=filter_email_prefix,
            filter_email_not_prefix=filter_email_not_prefix,
            filter_email_suffix=filter_email_suffix,
            filter_email_not_suffix=filter_email_not_suffix,
            filter_email_match=filter_email_match,
            filter_email_not_match=filter_email_not_match,
            filter_address_eq=filter_address_eq,
            filter_address_not_eq=filter_address_not_eq,
            filter_address_eql=filter_address_eql,
            filter_address_not_eql=filter_address_not_eql,
            filter_address_prefix=filter_address_prefix,
            filter_address_not_prefix=filter_address_not_prefix,
            filter_address_suffix=filter_address_suffix,
            filter_address_not_suffix=filter_address_not_suffix,
            filter_address_match=filter_address_match,
            filter_address_not_match=filter_address_not_match,
            filter_zip_code_eq=filter_zip_code_eq,
            filter_zip_code_not_eq=filter_zip_code_not_eq,
            filter_zip_code_eql=filter_zip_code_eql,
            filter_zip_code_not_eql=filter_zip_code_not_eql,
            filter_zip_code_prefix=filter_zip_code_prefix,
            filter_zip_code_not_prefix=filter_zip_code_not_prefix,
            filter_zip_code_suffix=filter_zip_code_suffix,
            filter_zip_code_not_suffix=filter_zip_code_not_suffix,
            filter_zip_code_match=filter_zip_code_match,
            filter_zip_code_not_match=filter_zip_code_not_match,
            filter_town_eq=filter_town_eq,
            filter_town_not_eq=filter_town_not_eq,
            filter_town_eql=filter_town_eql,
            filter_town_not_eql=filter_town_not_eql,
            filter_town_prefix=filter_town_prefix,
            filter_town_not_prefix=filter_town_not_prefix,
            filter_town_suffix=filter_town_suffix,
            filter_town_not_suffix=filter_town_not_suffix,
            filter_town_match=filter_town_match,
            filter_town_not_match=filter_town_not_match,
            filter_country_eq=filter_country_eq,
            filter_country_not_eq=filter_country_not_eq,
            filter_country_eql=filter_country_eql,
            filter_country_not_eql=filter_country_not_eql,
            filter_country_prefix=filter_country_prefix,
            filter_country_not_prefix=filter_country_not_prefix,
            filter_country_suffix=filter_country_suffix,
            filter_country_not_suffix=filter_country_not_suffix,
            filter_country_match=filter_country_match,
            filter_country_not_match=filter_country_not_match,
            filter_primary_group_id_eq=filter_primary_group_id_eq,
            filter_primary_group_id_not_eq=filter_primary_group_id_not_eq,
            filter_primary_group_id_gt=filter_primary_group_id_gt,
            filter_primary_group_id_gte=filter_primary_group_id_gte,
            filter_primary_group_id_lt=filter_primary_group_id_lt,
            filter_primary_group_id_lte=filter_primary_group_id_lte,
            filter_gender_eq=filter_gender_eq,
            filter_gender_not_eq=filter_gender_not_eq,
            filter_gender_eql=filter_gender_eql,
            filter_gender_not_eql=filter_gender_not_eql,
            filter_gender_prefix=filter_gender_prefix,
            filter_gender_not_prefix=filter_gender_not_prefix,
            filter_gender_suffix=filter_gender_suffix,
            filter_gender_not_suffix=filter_gender_not_suffix,
            filter_gender_match=filter_gender_match,
            filter_gender_not_match=filter_gender_not_match,
            filter_birthday_eq=filter_birthday_eq,
            filter_birthday_not_eq=filter_birthday_not_eq,
            filter_birthday_gt=filter_birthday_gt,
            filter_birthday_gte=filter_birthday_gte,
            filter_birthday_lt=filter_birthday_lt,
            filter_birthday_lte=filter_birthday_lte,
            filter_language_eq=filter_language_eq,
            filter_language_not_eq=filter_language_not_eq,
            filter_language_eql=filter_language_eql,
            filter_language_not_eql=filter_language_not_eql,
            filter_language_prefix=filter_language_prefix,
            filter_language_not_prefix=filter_language_not_prefix,
            filter_language_suffix=filter_language_suffix,
            filter_language_not_suffix=filter_language_not_suffix,
            filter_language_match=filter_language_match,
            filter_language_not_match=filter_language_not_match,
            filter_updated_at_eq=filter_updated_at_eq,
            filter_updated_at_not_eq=filter_updated_at_not_eq,
            filter_updated_at_gt=filter_updated_at_gt,
            filter_updated_at_gte=filter_updated_at_gte,
            filter_updated_at_lt=filter_updated_at_lt,
            filter_updated_at_lte=filter_updated_at_lte,
            fields_groups=fields_groups,
            fields_roles=fields_roles,
            fields_phone_numbers=fields_phone_numbers,
            fields_social_accounts=fields_social_accounts,
            fields_additional_emails=fields_additional_emails,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
            _additional_query_params=_additional_query_params,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PeopleCollection",
            '401': "JsonapiFailure",
            '403': "JsonapiFailure",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def list_people_without_preload_content(
        self,
        include: Annotated[Optional[List[StrictStr]], Field(description="[Include related resources](https://jsonapi.org/format/#fetching-includes)")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="[Sort people according to one or more criteria](https://jsonapi.org/format/#fetching-sorting)  You should not include both ascending `id` and descending `-id` fields the same time  ")] = None,
        fields_people: Annotated[Optional[List[PeopleReadableAttribute]], Field(description="[Include only specified fields of Person in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)")] = None,
        filter_id_eq: Annotated[Optional[List[StrictInt]], Field(description="[Filter Person by id using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_id_not_eq: Annotated[Optional[List[StrictInt]], Field(description="[Filter Person by id using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_id_gt: Annotated[Optional[List[StrictInt]], Field(description="[Filter Person by id using gt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_id_gte: Annotated[Optional[List[StrictInt]], Field(description="[Filter Person by id using gte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_id_lt: Annotated[Optional[List[StrictInt]], Field(description="[Filter Person by id using lt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_id_lte: Annotated[Optional[List[StrictInt]], Field(description="[Filter Person by id using lte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_first_name_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by first_name using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_first_name_not_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by first_name using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_first_name_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by first_name using eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_first_name_not_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by first_name using not_eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_first_name_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by first_name using prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_first_name_not_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by first_name using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_first_name_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by first_name using suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_first_name_not_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by first_name using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_first_name_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by first_name using match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_first_name_not_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by first_name using not_match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_last_name_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by last_name using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_last_name_not_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by last_name using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_last_name_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by last_name using eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_last_name_not_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by last_name using not_eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_last_name_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by last_name using prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_last_name_not_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by last_name using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_last_name_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by last_name using suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_last_name_not_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by last_name using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_last_name_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by last_name using match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_last_name_not_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by last_name using not_match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_nickname_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by nickname using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_nickname_not_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by nickname using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_nickname_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by nickname using eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_nickname_not_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by nickname using not_eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_nickname_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by nickname using prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_nickname_not_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by nickname using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_nickname_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by nickname using suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_nickname_not_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by nickname using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_nickname_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by nickname using match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_nickname_not_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by nickname using not_match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_company_name_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by company_name using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_company_name_not_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by company_name using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_company_name_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by company_name using eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_company_name_not_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by company_name using not_eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_company_name_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by company_name using prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_company_name_not_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by company_name using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_company_name_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by company_name using suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_company_name_not_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by company_name using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_company_name_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by company_name using match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_company_name_not_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by company_name using not_match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_company_eq: Annotated[Optional[StrictBool], Field(description="[Filter Person by company using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_email_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by email using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_email_not_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by email using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_email_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by email using eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_email_not_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by email using not_eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_email_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by email using prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_email_not_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by email using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_email_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by email using suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_email_not_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by email using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_email_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by email using match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_email_not_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by email using not_match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_address_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by address using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_address_not_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by address using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_address_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by address using eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_address_not_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by address using not_eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_address_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by address using prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_address_not_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by address using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_address_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by address using suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_address_not_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by address using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_address_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by address using match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_address_not_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by address using not_match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_zip_code_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by zip_code using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_zip_code_not_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by zip_code using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_zip_code_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by zip_code using eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_zip_code_not_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by zip_code using not_eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_zip_code_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by zip_code using prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_zip_code_not_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by zip_code using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_zip_code_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by zip_code using suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_zip_code_not_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by zip_code using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_zip_code_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by zip_code using match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_zip_code_not_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by zip_code using not_match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_town_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by town using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_town_not_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by town using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_town_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by town using eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_town_not_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by town using not_eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_town_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by town using prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_town_not_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by town using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_town_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by town using suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_town_not_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by town using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_town_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by town using match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_town_not_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by town using not_match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_country_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by country using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_country_not_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by country using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_country_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by country using eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_country_not_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by country using not_eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_country_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by country using prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_country_not_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by country using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_country_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by country using suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_country_not_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by country using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_country_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by country using match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_country_not_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by country using not_match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_primary_group_id_eq: Annotated[Optional[List[StrictInt]], Field(description="[Filter Person by primary_group_id using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_primary_group_id_not_eq: Annotated[Optional[List[StrictInt]], Field(description="[Filter Person by primary_group_id using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_primary_group_id_gt: Annotated[Optional[List[StrictInt]], Field(description="[Filter Person by primary_group_id using gt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_primary_group_id_gte: Annotated[Optional[List[StrictInt]], Field(description="[Filter Person by primary_group_id using gte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_primary_group_id_lt: Annotated[Optional[List[StrictInt]], Field(description="[Filter Person by primary_group_id using lt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_primary_group_id_lte: Annotated[Optional[List[StrictInt]], Field(description="[Filter Person by primary_group_id using lte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_gender_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by gender using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_gender_not_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by gender using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_gender_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by gender using eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_gender_not_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by gender using not_eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_gender_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by gender using prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_gender_not_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by gender using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_gender_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by gender using suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_gender_not_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by gender using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_gender_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by gender using match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_gender_not_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by gender using not_match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_birthday_eq: Annotated[Optional[List[date]], Field(description="[Filter Person by birthday using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_birthday_not_eq: Annotated[Optional[List[date]], Field(description="[Filter Person by birthday using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_birthday_gt: Annotated[Optional[List[date]], Field(description="[Filter Person by birthday using gt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_birthday_gte: Annotated[Optional[List[date]], Field(description="[Filter Person by birthday using gte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_birthday_lt: Annotated[Optional[List[date]], Field(description="[Filter Person by birthday using lt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_birthday_lte: Annotated[Optional[List[date]], Field(description="[Filter Person by birthday using lte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_language_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by language using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_language_not_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by language using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_language_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by language using eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_language_not_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by language using not_eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_language_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by language using prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_language_not_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by language using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_language_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by language using suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_language_not_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by language using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_language_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by language using match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_language_not_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by language using not_match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_updated_at_eq: Annotated[Optional[List[datetime]], Field(description="[Filter Person by updated_at using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_updated_at_not_eq: Annotated[Optional[List[datetime]], Field(description="[Filter Person by updated_at using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_updated_at_gt: Annotated[Optional[List[datetime]], Field(description="[Filter Person by updated_at using gt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_updated_at_gte: Annotated[Optional[List[datetime]], Field(description="[Filter Person by updated_at using gte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_updated_at_lt: Annotated[Optional[List[datetime]], Field(description="[Filter Person by updated_at using lt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_updated_at_lte: Annotated[Optional[List[datetime]], Field(description="[Filter Person by updated_at using lte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        fields_groups: Annotated[Optional[List[GroupsReadableAttribute]], Field(description="[Include only specified fields of Group in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)")] = None,
        fields_roles: Annotated[Optional[List[RolesReadableAttribute]], Field(description="[Include only specified fields of Role in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)")] = None,
        fields_phone_numbers: Annotated[Optional[List[PhoneNumbersReadableAttribute]], Field(description="[Include only specified fields of Phone number in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)")] = None,
        fields_social_accounts: Annotated[Optional[List[SocialAccountsReadableAttribute]], Field(description="[Include only specified fields of Social account in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)")] = None,
        fields_additional_emails: Annotated[Optional[List[AdditionalEmailsReadableAttribute]], Field(description="[Include only specified fields of Additional email in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
        _additional_query_params: Optional[Dict[StrictStr, Any]] = None,
    ) -> RESTResponseType:
        """List People


        :param include: [Include related resources](https://jsonapi.org/format/#fetching-includes)
        :type include: List[str]
        :param sort: [Sort people according to one or more criteria](https://jsonapi.org/format/#fetching-sorting)  You should not include both ascending `id` and descending `-id` fields the same time  
        :type sort: List[str]
        :param fields_people: [Include only specified fields of Person in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)
        :type fields_people: List[PeopleReadableAttribute]
        :param filter_id_eq: [Filter Person by id using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_eq: List[int]
        :param filter_id_not_eq: [Filter Person by id using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_not_eq: List[int]
        :param filter_id_gt: [Filter Person by id using gt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_gt: List[int]
        :param filter_id_gte: [Filter Person by id using gte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_gte: List[int]
        :param filter_id_lt: [Filter Person by id using lt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_lt: List[int]
        :param filter_id_lte: [Filter Person by id using lte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_lte: List[int]
        :param filter_first_name_eq: [Filter Person by first_name using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_first_name_eq: List[str]
        :param filter_first_name_not_eq: [Filter Person by first_name using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_first_name_not_eq: List[str]
        :param filter_first_name_eql: [Filter Person by first_name using eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_first_name_eql: List[str]
        :param filter_first_name_not_eql: [Filter Person by first_name using not_eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_first_name_not_eql: List[str]
        :param filter_first_name_prefix: [Filter Person by first_name using prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_first_name_prefix: List[str]
        :param filter_first_name_not_prefix: [Filter Person by first_name using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_first_name_not_prefix: List[str]
        :param filter_first_name_suffix: [Filter Person by first_name using suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_first_name_suffix: List[str]
        :param filter_first_name_not_suffix: [Filter Person by first_name using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_first_name_not_suffix: List[str]
        :param filter_first_name_match: [Filter Person by first_name using match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_first_name_match: List[str]
        :param filter_first_name_not_match: [Filter Person by first_name using not_match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_first_name_not_match: List[str]
        :param filter_last_name_eq: [Filter Person by last_name using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_last_name_eq: List[str]
        :param filter_last_name_not_eq: [Filter Person by last_name using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_last_name_not_eq: List[str]
        :param filter_last_name_eql: [Filter Person by last_name using eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_last_name_eql: List[str]
        :param filter_last_name_not_eql: [Filter Person by last_name using not_eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_last_name_not_eql: List[str]
        :param filter_last_name_prefix: [Filter Person by last_name using prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_last_name_prefix: List[str]
        :param filter_last_name_not_prefix: [Filter Person by last_name using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_last_name_not_prefix: List[str]
        :param filter_last_name_suffix: [Filter Person by last_name using suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_last_name_suffix: List[str]
        :param filter_last_name_not_suffix: [Filter Person by last_name using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_last_name_not_suffix: List[str]
        :param filter_last_name_match: [Filter Person by last_name using match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_last_name_match: List[str]
        :param filter_last_name_not_match: [Filter Person by last_name using not_match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_last_name_not_match: List[str]
        :param filter_nickname_eq: [Filter Person by nickname using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_nickname_eq: List[str]
        :param filter_nickname_not_eq: [Filter Person by nickname using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_nickname_not_eq: List[str]
        :param filter_nickname_eql: [Filter Person by nickname using eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_nickname_eql: List[str]
        :param filter_nickname_not_eql: [Filter Person by nickname using not_eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_nickname_not_eql: List[str]
        :param filter_nickname_prefix: [Filter Person by nickname using prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_nickname_prefix: List[str]
        :param filter_nickname_not_prefix: [Filter Person by nickname using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_nickname_not_prefix: List[str]
        :param filter_nickname_suffix: [Filter Person by nickname using suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_nickname_suffix: List[str]
        :param filter_nickname_not_suffix: [Filter Person by nickname using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_nickname_not_suffix: List[str]
        :param filter_nickname_match: [Filter Person by nickname using match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_nickname_match: List[str]
        :param filter_nickname_not_match: [Filter Person by nickname using not_match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_nickname_not_match: List[str]
        :param filter_company_name_eq: [Filter Person by company_name using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_company_name_eq: List[str]
        :param filter_company_name_not_eq: [Filter Person by company_name using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_company_name_not_eq: List[str]
        :param filter_company_name_eql: [Filter Person by company_name using eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_company_name_eql: List[str]
        :param filter_company_name_not_eql: [Filter Person by company_name using not_eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_company_name_not_eql: List[str]
        :param filter_company_name_prefix: [Filter Person by company_name using prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_company_name_prefix: List[str]
        :param filter_company_name_not_prefix: [Filter Person by company_name using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_company_name_not_prefix: List[str]
        :param filter_company_name_suffix: [Filter Person by company_name using suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_company_name_suffix: List[str]
        :param filter_company_name_not_suffix: [Filter Person by company_name using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_company_name_not_suffix: List[str]
        :param filter_company_name_match: [Filter Person by company_name using match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_company_name_match: List[str]
        :param filter_company_name_not_match: [Filter Person by company_name using not_match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_company_name_not_match: List[str]
        :param filter_company_eq: [Filter Person by company using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_company_eq: bool
        :param filter_email_eq: [Filter Person by email using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_email_eq: List[str]
        :param filter_email_not_eq: [Filter Person by email using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_email_not_eq: List[str]
        :param filter_email_eql: [Filter Person by email using eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_email_eql: List[str]
        :param filter_email_not_eql: [Filter Person by email using not_eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_email_not_eql: List[str]
        :param filter_email_prefix: [Filter Person by email using prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_email_prefix: List[str]
        :param filter_email_not_prefix: [Filter Person by email using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_email_not_prefix: List[str]
        :param filter_email_suffix: [Filter Person by email using suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_email_suffix: List[str]
        :param filter_email_not_suffix: [Filter Person by email using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_email_not_suffix: List[str]
        :param filter_email_match: [Filter Person by email using match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_email_match: List[str]
        :param filter_email_not_match: [Filter Person by email using not_match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_email_not_match: List[str]
        :param filter_address_eq: [Filter Person by address using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_address_eq: List[str]
        :param filter_address_not_eq: [Filter Person by address using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_address_not_eq: List[str]
        :param filter_address_eql: [Filter Person by address using eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_address_eql: List[str]
        :param filter_address_not_eql: [Filter Person by address using not_eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_address_not_eql: List[str]
        :param filter_address_prefix: [Filter Person by address using prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_address_prefix: List[str]
        :param filter_address_not_prefix: [Filter Person by address using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_address_not_prefix: List[str]
        :param filter_address_suffix: [Filter Person by address using suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_address_suffix: List[str]
        :param filter_address_not_suffix: [Filter Person by address using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_address_not_suffix: List[str]
        :param filter_address_match: [Filter Person by address using match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_address_match: List[str]
        :param filter_address_not_match: [Filter Person by address using not_match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_address_not_match: List[str]
        :param filter_zip_code_eq: [Filter Person by zip_code using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_zip_code_eq: List[str]
        :param filter_zip_code_not_eq: [Filter Person by zip_code using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_zip_code_not_eq: List[str]
        :param filter_zip_code_eql: [Filter Person by zip_code using eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_zip_code_eql: List[str]
        :param filter_zip_code_not_eql: [Filter Person by zip_code using not_eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_zip_code_not_eql: List[str]
        :param filter_zip_code_prefix: [Filter Person by zip_code using prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_zip_code_prefix: List[str]
        :param filter_zip_code_not_prefix: [Filter Person by zip_code using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_zip_code_not_prefix: List[str]
        :param filter_zip_code_suffix: [Filter Person by zip_code using suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_zip_code_suffix: List[str]
        :param filter_zip_code_not_suffix: [Filter Person by zip_code using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_zip_code_not_suffix: List[str]
        :param filter_zip_code_match: [Filter Person by zip_code using match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_zip_code_match: List[str]
        :param filter_zip_code_not_match: [Filter Person by zip_code using not_match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_zip_code_not_match: List[str]
        :param filter_town_eq: [Filter Person by town using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_town_eq: List[str]
        :param filter_town_not_eq: [Filter Person by town using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_town_not_eq: List[str]
        :param filter_town_eql: [Filter Person by town using eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_town_eql: List[str]
        :param filter_town_not_eql: [Filter Person by town using not_eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_town_not_eql: List[str]
        :param filter_town_prefix: [Filter Person by town using prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_town_prefix: List[str]
        :param filter_town_not_prefix: [Filter Person by town using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_town_not_prefix: List[str]
        :param filter_town_suffix: [Filter Person by town using suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_town_suffix: List[str]
        :param filter_town_not_suffix: [Filter Person by town using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_town_not_suffix: List[str]
        :param filter_town_match: [Filter Person by town using match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_town_match: List[str]
        :param filter_town_not_match: [Filter Person by town using not_match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_town_not_match: List[str]
        :param filter_country_eq: [Filter Person by country using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_country_eq: List[str]
        :param filter_country_not_eq: [Filter Person by country using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_country_not_eq: List[str]
        :param filter_country_eql: [Filter Person by country using eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_country_eql: List[str]
        :param filter_country_not_eql: [Filter Person by country using not_eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_country_not_eql: List[str]
        :param filter_country_prefix: [Filter Person by country using prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_country_prefix: List[str]
        :param filter_country_not_prefix: [Filter Person by country using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_country_not_prefix: List[str]
        :param filter_country_suffix: [Filter Person by country using suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_country_suffix: List[str]
        :param filter_country_not_suffix: [Filter Person by country using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_country_not_suffix: List[str]
        :param filter_country_match: [Filter Person by country using match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_country_match: List[str]
        :param filter_country_not_match: [Filter Person by country using not_match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_country_not_match: List[str]
        :param filter_primary_group_id_eq: [Filter Person by primary_group_id using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_primary_group_id_eq: List[int]
        :param filter_primary_group_id_not_eq: [Filter Person by primary_group_id using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_primary_group_id_not_eq: List[int]
        :param filter_primary_group_id_gt: [Filter Person by primary_group_id using gt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_primary_group_id_gt: List[int]
        :param filter_primary_group_id_gte: [Filter Person by primary_group_id using gte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_primary_group_id_gte: List[int]
        :param filter_primary_group_id_lt: [Filter Person by primary_group_id using lt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_primary_group_id_lt: List[int]
        :param filter_primary_group_id_lte: [Filter Person by primary_group_id using lte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_primary_group_id_lte: List[int]
        :param filter_gender_eq: [Filter Person by gender using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_gender_eq: List[str]
        :param filter_gender_not_eq: [Filter Person by gender using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_gender_not_eq: List[str]
        :param filter_gender_eql: [Filter Person by gender using eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_gender_eql: List[str]
        :param filter_gender_not_eql: [Filter Person by gender using not_eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_gender_not_eql: List[str]
        :param filter_gender_prefix: [Filter Person by gender using prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_gender_prefix: List[str]
        :param filter_gender_not_prefix: [Filter Person by gender using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_gender_not_prefix: List[str]
        :param filter_gender_suffix: [Filter Person by gender using suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_gender_suffix: List[str]
        :param filter_gender_not_suffix: [Filter Person by gender using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_gender_not_suffix: List[str]
        :param filter_gender_match: [Filter Person by gender using match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_gender_match: List[str]
        :param filter_gender_not_match: [Filter Person by gender using not_match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_gender_not_match: List[str]
        :param filter_birthday_eq: [Filter Person by birthday using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_birthday_eq: List[date]
        :param filter_birthday_not_eq: [Filter Person by birthday using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_birthday_not_eq: List[date]
        :param filter_birthday_gt: [Filter Person by birthday using gt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_birthday_gt: List[date]
        :param filter_birthday_gte: [Filter Person by birthday using gte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_birthday_gte: List[date]
        :param filter_birthday_lt: [Filter Person by birthday using lt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_birthday_lt: List[date]
        :param filter_birthday_lte: [Filter Person by birthday using lte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_birthday_lte: List[date]
        :param filter_language_eq: [Filter Person by language using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_language_eq: List[str]
        :param filter_language_not_eq: [Filter Person by language using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_language_not_eq: List[str]
        :param filter_language_eql: [Filter Person by language using eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_language_eql: List[str]
        :param filter_language_not_eql: [Filter Person by language using not_eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_language_not_eql: List[str]
        :param filter_language_prefix: [Filter Person by language using prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_language_prefix: List[str]
        :param filter_language_not_prefix: [Filter Person by language using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_language_not_prefix: List[str]
        :param filter_language_suffix: [Filter Person by language using suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_language_suffix: List[str]
        :param filter_language_not_suffix: [Filter Person by language using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_language_not_suffix: List[str]
        :param filter_language_match: [Filter Person by language using match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_language_match: List[str]
        :param filter_language_not_match: [Filter Person by language using not_match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_language_not_match: List[str]
        :param filter_updated_at_eq: [Filter Person by updated_at using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_updated_at_eq: List[datetime]
        :param filter_updated_at_not_eq: [Filter Person by updated_at using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_updated_at_not_eq: List[datetime]
        :param filter_updated_at_gt: [Filter Person by updated_at using gt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_updated_at_gt: List[datetime]
        :param filter_updated_at_gte: [Filter Person by updated_at using gte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_updated_at_gte: List[datetime]
        :param filter_updated_at_lt: [Filter Person by updated_at using lt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_updated_at_lt: List[datetime]
        :param filter_updated_at_lte: [Filter Person by updated_at using lte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_updated_at_lte: List[datetime]
        :param fields_groups: [Include only specified fields of Group in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)
        :type fields_groups: List[GroupsReadableAttribute]
        :param fields_roles: [Include only specified fields of Role in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)
        :type fields_roles: List[RolesReadableAttribute]
        :param fields_phone_numbers: [Include only specified fields of Phone number in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)
        :type fields_phone_numbers: List[PhoneNumbersReadableAttribute]
        :param fields_social_accounts: [Include only specified fields of Social account in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)
        :type fields_social_accounts: List[SocialAccountsReadableAttribute]
        :param fields_additional_emails: [Include only specified fields of Additional email in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)
        :type fields_additional_emails: List[AdditionalEmailsReadableAttribute]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_people_serialize(
            include=include,
            sort=sort,
            fields_people=fields_people,
            filter_id_eq=filter_id_eq,
            filter_id_not_eq=filter_id_not_eq,
            filter_id_gt=filter_id_gt,
            filter_id_gte=filter_id_gte,
            filter_id_lt=filter_id_lt,
            filter_id_lte=filter_id_lte,
            filter_first_name_eq=filter_first_name_eq,
            filter_first_name_not_eq=filter_first_name_not_eq,
            filter_first_name_eql=filter_first_name_eql,
            filter_first_name_not_eql=filter_first_name_not_eql,
            filter_first_name_prefix=filter_first_name_prefix,
            filter_first_name_not_prefix=filter_first_name_not_prefix,
            filter_first_name_suffix=filter_first_name_suffix,
            filter_first_name_not_suffix=filter_first_name_not_suffix,
            filter_first_name_match=filter_first_name_match,
            filter_first_name_not_match=filter_first_name_not_match,
            filter_last_name_eq=filter_last_name_eq,
            filter_last_name_not_eq=filter_last_name_not_eq,
            filter_last_name_eql=filter_last_name_eql,
            filter_last_name_not_eql=filter_last_name_not_eql,
            filter_last_name_prefix=filter_last_name_prefix,
            filter_last_name_not_prefix=filter_last_name_not_prefix,
            filter_last_name_suffix=filter_last_name_suffix,
            filter_last_name_not_suffix=filter_last_name_not_suffix,
            filter_last_name_match=filter_last_name_match,
            filter_last_name_not_match=filter_last_name_not_match,
            filter_nickname_eq=filter_nickname_eq,
            filter_nickname_not_eq=filter_nickname_not_eq,
            filter_nickname_eql=filter_nickname_eql,
            filter_nickname_not_eql=filter_nickname_not_eql,
            filter_nickname_prefix=filter_nickname_prefix,
            filter_nickname_not_prefix=filter_nickname_not_prefix,
            filter_nickname_suffix=filter_nickname_suffix,
            filter_nickname_not_suffix=filter_nickname_not_suffix,
            filter_nickname_match=filter_nickname_match,
            filter_nickname_not_match=filter_nickname_not_match,
            filter_company_name_eq=filter_company_name_eq,
            filter_company_name_not_eq=filter_company_name_not_eq,
            filter_company_name_eql=filter_company_name_eql,
            filter_company_name_not_eql=filter_company_name_not_eql,
            filter_company_name_prefix=filter_company_name_prefix,
            filter_company_name_not_prefix=filter_company_name_not_prefix,
            filter_company_name_suffix=filter_company_name_suffix,
            filter_company_name_not_suffix=filter_company_name_not_suffix,
            filter_company_name_match=filter_company_name_match,
            filter_company_name_not_match=filter_company_name_not_match,
            filter_company_eq=filter_company_eq,
            filter_email_eq=filter_email_eq,
            filter_email_not_eq=filter_email_not_eq,
            filter_email_eql=filter_email_eql,
            filter_email_not_eql=filter_email_not_eql,
            filter_email_prefix=filter_email_prefix,
            filter_email_not_prefix=filter_email_not_prefix,
            filter_email_suffix=filter_email_suffix,
            filter_email_not_suffix=filter_email_not_suffix,
            filter_email_match=filter_email_match,
            filter_email_not_match=filter_email_not_match,
            filter_address_eq=filter_address_eq,
            filter_address_not_eq=filter_address_not_eq,
            filter_address_eql=filter_address_eql,
            filter_address_not_eql=filter_address_not_eql,
            filter_address_prefix=filter_address_prefix,
            filter_address_not_prefix=filter_address_not_prefix,
            filter_address_suffix=filter_address_suffix,
            filter_address_not_suffix=filter_address_not_suffix,
            filter_address_match=filter_address_match,
            filter_address_not_match=filter_address_not_match,
            filter_zip_code_eq=filter_zip_code_eq,
            filter_zip_code_not_eq=filter_zip_code_not_eq,
            filter_zip_code_eql=filter_zip_code_eql,
            filter_zip_code_not_eql=filter_zip_code_not_eql,
            filter_zip_code_prefix=filter_zip_code_prefix,
            filter_zip_code_not_prefix=filter_zip_code_not_prefix,
            filter_zip_code_suffix=filter_zip_code_suffix,
            filter_zip_code_not_suffix=filter_zip_code_not_suffix,
            filter_zip_code_match=filter_zip_code_match,
            filter_zip_code_not_match=filter_zip_code_not_match,
            filter_town_eq=filter_town_eq,
            filter_town_not_eq=filter_town_not_eq,
            filter_town_eql=filter_town_eql,
            filter_town_not_eql=filter_town_not_eql,
            filter_town_prefix=filter_town_prefix,
            filter_town_not_prefix=filter_town_not_prefix,
            filter_town_suffix=filter_town_suffix,
            filter_town_not_suffix=filter_town_not_suffix,
            filter_town_match=filter_town_match,
            filter_town_not_match=filter_town_not_match,
            filter_country_eq=filter_country_eq,
            filter_country_not_eq=filter_country_not_eq,
            filter_country_eql=filter_country_eql,
            filter_country_not_eql=filter_country_not_eql,
            filter_country_prefix=filter_country_prefix,
            filter_country_not_prefix=filter_country_not_prefix,
            filter_country_suffix=filter_country_suffix,
            filter_country_not_suffix=filter_country_not_suffix,
            filter_country_match=filter_country_match,
            filter_country_not_match=filter_country_not_match,
            filter_primary_group_id_eq=filter_primary_group_id_eq,
            filter_primary_group_id_not_eq=filter_primary_group_id_not_eq,
            filter_primary_group_id_gt=filter_primary_group_id_gt,
            filter_primary_group_id_gte=filter_primary_group_id_gte,
            filter_primary_group_id_lt=filter_primary_group_id_lt,
            filter_primary_group_id_lte=filter_primary_group_id_lte,
            filter_gender_eq=filter_gender_eq,
            filter_gender_not_eq=filter_gender_not_eq,
            filter_gender_eql=filter_gender_eql,
            filter_gender_not_eql=filter_gender_not_eql,
            filter_gender_prefix=filter_gender_prefix,
            filter_gender_not_prefix=filter_gender_not_prefix,
            filter_gender_suffix=filter_gender_suffix,
            filter_gender_not_suffix=filter_gender_not_suffix,
            filter_gender_match=filter_gender_match,
            filter_gender_not_match=filter_gender_not_match,
            filter_birthday_eq=filter_birthday_eq,
            filter_birthday_not_eq=filter_birthday_not_eq,
            filter_birthday_gt=filter_birthday_gt,
            filter_birthday_gte=filter_birthday_gte,
            filter_birthday_lt=filter_birthday_lt,
            filter_birthday_lte=filter_birthday_lte,
            filter_language_eq=filter_language_eq,
            filter_language_not_eq=filter_language_not_eq,
            filter_language_eql=filter_language_eql,
            filter_language_not_eql=filter_language_not_eql,
            filter_language_prefix=filter_language_prefix,
            filter_language_not_prefix=filter_language_not_prefix,
            filter_language_suffix=filter_language_suffix,
            filter_language_not_suffix=filter_language_not_suffix,
            filter_language_match=filter_language_match,
            filter_language_not_match=filter_language_not_match,
            filter_updated_at_eq=filter_updated_at_eq,
            filter_updated_at_not_eq=filter_updated_at_not_eq,
            filter_updated_at_gt=filter_updated_at_gt,
            filter_updated_at_gte=filter_updated_at_gte,
            filter_updated_at_lt=filter_updated_at_lt,
            filter_updated_at_lte=filter_updated_at_lte,
            fields_groups=fields_groups,
            fields_roles=fields_roles,
            fields_phone_numbers=fields_phone_numbers,
            fields_social_accounts=fields_social_accounts,
            fields_additional_emails=fields_additional_emails,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
            _additional_query_params=_additional_query_params,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PeopleCollection",
            '401': "JsonapiFailure",
            '403': "JsonapiFailure",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _list_people_serialize(
        self,
        include,
        sort,
        fields_people,
        filter_id_eq,
        filter_id_not_eq,
        filter_id_gt,
        filter_id_gte,
        filter_id_lt,
        filter_id_lte,
        filter_first_name_eq,
        filter_first_name_not_eq,
        filter_first_name_eql,
        filter_first_name_not_eql,
        filter_first_name_prefix,
        filter_first_name_not_prefix,
        filter_first_name_suffix,
        filter_first_name_not_suffix,
        filter_first_name_match,
        filter_first_name_not_match,
        filter_last_name_eq,
        filter_last_name_not_eq,
        filter_last_name_eql,
        filter_last_name_not_eql,
        filter_last_name_prefix,
        filter_last_name_not_prefix,
        filter_last_name_suffix,
        filter_last_name_not_suffix,
        filter_last_name_match,
        filter_last_name_not_match,
        filter_nickname_eq,
        filter_nickname_not_eq,
        filter_nickname_eql,
        filter_nickname_not_eql,
        filter_nickname_prefix,
        filter_nickname_not_prefix,
        filter_nickname_suffix,
        filter_nickname_not_suffix,
        filter_nickname_match,
        filter_nickname_not_match,
        filter_company_name_eq,
        filter_company_name_not_eq,
        filter_company_name_eql,
        filter_company_name_not_eql,
        filter_company_name_prefix,
        filter_company_name_not_prefix,
        filter_company_name_suffix,
        filter_company_name_not_suffix,
        filter_company_name_match,
        filter_company_name_not_match,
        filter_company_eq,
        filter_email_eq,
        filter_email_not_eq,
        filter_email_eql,
        filter_email_not_eql,
        filter_email_prefix,
        filter_email_not_prefix,
        filter_email_suffix,
        filter_email_not_suffix,
        filter_email_match,
        filter_email_not_match,
        filter_address_eq,
        filter_address_not_eq,
        filter_address_eql,
        filter_address_not_eql,
        filter_address_prefix,
        filter_address_not_prefix,
        filter_address_suffix,
        filter_address_not_suffix,
        filter_address_match,
        filter_address_not_match,
        filter_zip_code_eq,
        filter_zip_code_not_eq,
        filter_zip_code_eql,
        filter_zip_code_not_eql,
        filter_zip_code_prefix,
        filter_zip_code_not_prefix,
        filter_zip_code_suffix,
        filter_zip_code_not_suffix,
        filter_zip_code_match,
        filter_zip_code_not_match,
        filter_town_eq,
        filter_town_not_eq,
        filter_town_eql,
        filter_town_not_eql,
        filter_town_prefix,
        filter_town_not_prefix,
        filter_town_suffix,
        filter_town_not_suffix,
        filter_town_match,
        filter_town_not_match,
        filter_country_eq,
        filter_country_not_eq,
        filter_country_eql,
        filter_country_not_eql,
        filter_country_prefix,
        filter_country_not_prefix,
        filter_country_suffix,
        filter_country_not_suffix,
        filter_country_match,
        filter_country_not_match,
        filter_primary_group_id_eq,
        filter_primary_group_id_not_eq,
        filter_primary_group_id_gt,
        filter_primary_group_id_gte,
        filter_primary_group_id_lt,
        filter_primary_group_id_lte,
        filter_gender_eq,
        filter_gender_not_eq,
        filter_gender_eql,
        filter_gender_not_eql,
        filter_gender_prefix,
        filter_gender_not_prefix,
        filter_gender_suffix,
        filter_gender_not_suffix,
        filter_gender_match,
        filter_gender_not_match,
        filter_birthday_eq,
        filter_birthday_not_eq,
        filter_birthday_gt,
        filter_birthday_gte,
        filter_birthday_lt,
        filter_birthday_lte,
        filter_language_eq,
        filter_language_not_eq,
        filter_language_eql,
        filter_language_not_eql,
        filter_language_prefix,
        filter_language_not_prefix,
        filter_language_suffix,
        filter_language_not_suffix,
        filter_language_match,
        filter_language_not_match,
        filter_updated_at_eq,
        filter_updated_at_not_eq,
        filter_updated_at_gt,
        filter_updated_at_gte,
        filter_updated_at_lt,
        filter_updated_at_lte,
        fields_groups,
        fields_roles,
        fields_phone_numbers,
        fields_social_accounts,
        fields_additional_emails,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
        _additional_query_params: Optional[Dict[StrictStr, Any]] = None,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'include': 'csv',
            'sort': 'csv',
            'fields[people]': 'csv',
            'filter[id][eq]': 'csv',
            'filter[id][not_eq]': 'csv',
            'filter[id][gt]': 'csv',
            'filter[id][gte]': 'csv',
            'filter[id][lt]': 'csv',
            'filter[id][lte]': 'csv',
            'filter[first_name][eq]': 'csv',
            'filter[first_name][not_eq]': 'csv',
            'filter[first_name][eql]': 'csv',
            'filter[first_name][not_eql]': 'csv',
            'filter[first_name][prefix]': 'csv',
            'filter[first_name][not_prefix]': 'csv',
            'filter[first_name][suffix]': 'csv',
            'filter[first_name][not_suffix]': 'csv',
            'filter[first_name][match]': 'csv',
            'filter[first_name][not_match]': 'csv',
            'filter[last_name][eq]': 'csv',
            'filter[last_name][not_eq]': 'csv',
            'filter[last_name][eql]': 'csv',
            'filter[last_name][not_eql]': 'csv',
            'filter[last_name][prefix]': 'csv',
            'filter[last_name][not_prefix]': 'csv',
            'filter[last_name][suffix]': 'csv',
            'filter[last_name][not_suffix]': 'csv',
            'filter[last_name][match]': 'csv',
            'filter[last_name][not_match]': 'csv',
            'filter[nickname][eq]': 'csv',
            'filter[nickname][not_eq]': 'csv',
            'filter[nickname][eql]': 'csv',
            'filter[nickname][not_eql]': 'csv',
            'filter[nickname][prefix]': 'csv',
            'filter[nickname][not_prefix]': 'csv',
            'filter[nickname][suffix]': 'csv',
            'filter[nickname][not_suffix]': 'csv',
            'filter[nickname][match]': 'csv',
            'filter[nickname][not_match]': 'csv',
            'filter[company_name][eq]': 'csv',
            'filter[company_name][not_eq]': 'csv',
            'filter[company_name][eql]': 'csv',
            'filter[company_name][not_eql]': 'csv',
            'filter[company_name][prefix]': 'csv',
            'filter[company_name][not_prefix]': 'csv',
            'filter[company_name][suffix]': 'csv',
            'filter[company_name][not_suffix]': 'csv',
            'filter[company_name][match]': 'csv',
            'filter[company_name][not_match]': 'csv',
            'filter[email][eq]': 'csv',
            'filter[email][not_eq]': 'csv',
            'filter[email][eql]': 'csv',
            'filter[email][not_eql]': 'csv',
            'filter[email][prefix]': 'csv',
            'filter[email][not_prefix]': 'csv',
            'filter[email][suffix]': 'csv',
            'filter[email][not_suffix]': 'csv',
            'filter[email][match]': 'csv',
            'filter[email][not_match]': 'csv',
            'filter[address][eq]': 'csv',
            'filter[address][not_eq]': 'csv',
            'filter[address][eql]': 'csv',
            'filter[address][not_eql]': 'csv',
            'filter[address][prefix]': 'csv',
            'filter[address][not_prefix]': 'csv',
            'filter[address][suffix]': 'csv',
            'filter[address][not_suffix]': 'csv',
            'filter[address][match]': 'csv',
            'filter[address][not_match]': 'csv',
            'filter[zip_code][eq]': 'csv',
            'filter[zip_code][not_eq]': 'csv',
            'filter[zip_code][eql]': 'csv',
            'filter[zip_code][not_eql]': 'csv',
            'filter[zip_code][prefix]': 'csv',
            'filter[zip_code][not_prefix]': 'csv',
            'filter[zip_code][suffix]': 'csv',
            'filter[zip_code][not_suffix]': 'csv',
            'filter[zip_code][match]': 'csv',
            'filter[zip_code][not_match]': 'csv',
            'filter[town][eq]': 'csv',
            'filter[town][not_eq]': 'csv',
            'filter[town][eql]': 'csv',
            'filter[town][not_eql]': 'csv',
            'filter[town][prefix]': 'csv',
            'filter[town][not_prefix]': 'csv',
            'filter[town][suffix]': 'csv',
            'filter[town][not_suffix]': 'csv',
            'filter[town][match]': 'csv',
            'filter[town][not_match]': 'csv',
            'filter[country][eq]': 'csv',
            'filter[country][not_eq]': 'csv',
            'filter[country][eql]': 'csv',
            'filter[country][not_eql]': 'csv',
            'filter[country][prefix]': 'csv',
            'filter[country][not_prefix]': 'csv',
            'filter[country][suffix]': 'csv',
            'filter[country][not_suffix]': 'csv',
            'filter[country][match]': 'csv',
            'filter[country][not_match]': 'csv',
            'filter[primary_group_id][eq]': 'csv',
            'filter[primary_group_id][not_eq]': 'csv',
            'filter[primary_group_id][gt]': 'csv',
            'filter[primary_group_id][gte]': 'csv',
            'filter[primary_group_id][lt]': 'csv',
            'filter[primary_group_id][lte]': 'csv',
            'filter[gender][eq]': 'csv',
            'filter[gender][not_eq]': 'csv',
            'filter[gender][eql]': 'csv',
            'filter[gender][not_eql]': 'csv',
            'filter[gender][prefix]': 'csv',
            'filter[gender][not_prefix]': 'csv',
            'filter[gender][suffix]': 'csv',
            'filter[gender][not_suffix]': 'csv',
            'filter[gender][match]': 'csv',
            'filter[gender][not_match]': 'csv',
            'filter[birthday][eq]': 'csv',
            'filter[birthday][not_eq]': 'csv',
            'filter[birthday][gt]': 'csv',
            'filter[birthday][gte]': 'csv',
            'filter[birthday][lt]': 'csv',
            'filter[birthday][lte]': 'csv',
            'filter[language][eq]': 'csv',
            'filter[language][not_eq]': 'csv',
            'filter[language][eql]': 'csv',
            'filter[language][not_eql]': 'csv',
            'filter[language][prefix]': 'csv',
            'filter[language][not_prefix]': 'csv',
            'filter[language][suffix]': 'csv',
            'filter[language][not_suffix]': 'csv',
            'filter[language][match]': 'csv',
            'filter[language][not_match]': 'csv',
            'filter[updated_at][eq]': 'csv',
            'filter[updated_at][not_eq]': 'csv',
            'filter[updated_at][gt]': 'csv',
            'filter[updated_at][gte]': 'csv',
            'filter[updated_at][lt]': 'csv',
            'filter[updated_at][lte]': 'csv',
            'fields[groups]': 'csv',
            'fields[roles]': 'csv',
            'fields[phone_numbers]': 'csv',
            'fields[social_accounts]': 'csv',
            'fields[additional_emails]': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters

        if _additional_query_params is not None:
            _query_params.extend((key, value) for key, value in _additional_query_params.items())

        if include is not None:
            
            _query_params.append(('include', include))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if fields_people is not None:
            
            _query_params.append(('fields[people]', fields_people))
            
        if filter_id_eq is not None:
            
            _query_params.append(('filter[id][eq]', filter_id_eq))
            
        if filter_id_not_eq is not None:
            
            _query_params.append(('filter[id][not_eq]', filter_id_not_eq))
            
        if filter_id_gt is not None:
            
            _query_params.append(('filter[id][gt]', filter_id_gt))
            
        if filter_id_gte is not None:
            
            _query_params.append(('filter[id][gte]', filter_id_gte))
            
        if filter_id_lt is not None:
            
            _query_params.append(('filter[id][lt]', filter_id_lt))
            
        if filter_id_lte is not None:
            
            _query_params.append(('filter[id][lte]', filter_id_lte))
            
        if filter_first_name_eq is not None:
            
            _query_params.append(('filter[first_name][eq]', filter_first_name_eq))
            
        if filter_first_name_not_eq is not None:
            
            _query_params.append(('filter[first_name][not_eq]', filter_first_name_not_eq))
            
        if filter_first_name_eql is not None:
            
            _query_params.append(('filter[first_name][eql]', filter_first_name_eql))
            
        if filter_first_name_not_eql is not None:
            
            _query_params.append(('filter[first_name][not_eql]', filter_first_name_not_eql))
            
        if filter_first_name_prefix is not None:
            
            _query_params.append(('filter[first_name][prefix]', filter_first_name_prefix))
            
        if filter_first_name_not_prefix is not None:
            
            _query_params.append(('filter[first_name][not_prefix]', filter_first_name_not_prefix))
            
        if filter_first_name_suffix is not None:
            
            _query_params.append(('filter[first_name][suffix]', filter_first_name_suffix))
            
        if filter_first_name_not_suffix is not None:
            
            _query_params.append(('filter[first_name][not_suffix]', filter_first_name_not_suffix))
            
        if filter_first_name_match is not None:
            
            _query_params.append(('filter[first_name][match]', filter_first_name_match))
            
        if filter_first_name_not_match is not None:
            
            _query_params.append(('filter[first_name][not_match]', filter_first_name_not_match))
            
        if filter_last_name_eq is not None:
            
            _query_params.append(('filter[last_name][eq]', filter_last_name_eq))
            
        if filter_last_name_not_eq is not None:
            
            _query_params.append(('filter[last_name][not_eq]', filter_last_name_not_eq))
            
        if filter_last_name_eql is not None:
            
            _query_params.append(('filter[last_name][eql]', filter_last_name_eql))
            
        if filter_last_name_not_eql is not None:
            
            _query_params.append(('filter[last_name][not_eql]', filter_last_name_not_eql))
            
        if filter_last_name_prefix is not None:
            
            _query_params.append(('filter[last_name][prefix]', filter_last_name_prefix))
            
        if filter_last_name_not_prefix is not None:
            
            _query_params.append(('filter[last_name][not_prefix]', filter_last_name_not_prefix))
            
        if filter_last_name_suffix is not None:
            
            _query_params.append(('filter[last_name][suffix]', filter_last_name_suffix))
            
        if filter_last_name_not_suffix is not None:
            
            _query_params.append(('filter[last_name][not_suffix]', filter_last_name_not_suffix))
            
        if filter_last_name_match is not None:
            
            _query_params.append(('filter[last_name][match]', filter_last_name_match))
            
        if filter_last_name_not_match is not None:
            
            _query_params.append(('filter[last_name][not_match]', filter_last_name_not_match))
            
        if filter_nickname_eq is not None:
            
            _query_params.append(('filter[nickname][eq]', filter_nickname_eq))
            
        if filter_nickname_not_eq is not None:
            
            _query_params.append(('filter[nickname][not_eq]', filter_nickname_not_eq))
            
        if filter_nickname_eql is not None:
            
            _query_params.append(('filter[nickname][eql]', filter_nickname_eql))
            
        if filter_nickname_not_eql is not None:
            
            _query_params.append(('filter[nickname][not_eql]', filter_nickname_not_eql))
            
        if filter_nickname_prefix is not None:
            
            _query_params.append(('filter[nickname][prefix]', filter_nickname_prefix))
            
        if filter_nickname_not_prefix is not None:
            
            _query_params.append(('filter[nickname][not_prefix]', filter_nickname_not_prefix))
            
        if filter_nickname_suffix is not None:
            
            _query_params.append(('filter[nickname][suffix]', filter_nickname_suffix))
            
        if filter_nickname_not_suffix is not None:
            
            _query_params.append(('filter[nickname][not_suffix]', filter_nickname_not_suffix))
            
        if filter_nickname_match is not None:
            
            _query_params.append(('filter[nickname][match]', filter_nickname_match))
            
        if filter_nickname_not_match is not None:
            
            _query_params.append(('filter[nickname][not_match]', filter_nickname_not_match))
            
        if filter_company_name_eq is not None:
            
            _query_params.append(('filter[company_name][eq]', filter_company_name_eq))
            
        if filter_company_name_not_eq is not None:
            
            _query_params.append(('filter[company_name][not_eq]', filter_company_name_not_eq))
            
        if filter_company_name_eql is not None:
            
            _query_params.append(('filter[company_name][eql]', filter_company_name_eql))
            
        if filter_company_name_not_eql is not None:
            
            _query_params.append(('filter[company_name][not_eql]', filter_company_name_not_eql))
            
        if filter_company_name_prefix is not None:
            
            _query_params.append(('filter[company_name][prefix]', filter_company_name_prefix))
            
        if filter_company_name_not_prefix is not None:
            
            _query_params.append(('filter[company_name][not_prefix]', filter_company_name_not_prefix))
            
        if filter_company_name_suffix is not None:
            
            _query_params.append(('filter[company_name][suffix]', filter_company_name_suffix))
            
        if filter_company_name_not_suffix is not None:
            
            _query_params.append(('filter[company_name][not_suffix]', filter_company_name_not_suffix))
            
        if filter_company_name_match is not None:
            
            _query_params.append(('filter[company_name][match]', filter_company_name_match))
            
        if filter_company_name_not_match is not None:
            
            _query_params.append(('filter[company_name][not_match]', filter_company_name_not_match))
            
        if filter_company_eq is not None:
            
            _query_params.append(('filter[company][eq]', filter_company_eq))
            
        if filter_email_eq is not None:
            
            _query_params.append(('filter[email][eq]', filter_email_eq))
            
        if filter_email_not_eq is not None:
            
            _query_params.append(('filter[email][not_eq]', filter_email_not_eq))
            
        if filter_email_eql is not None:
            
            _query_params.append(('filter[email][eql]', filter_email_eql))
            
        if filter_email_not_eql is not None:
            
            _query_params.append(('filter[email][not_eql]', filter_email_not_eql))
            
        if filter_email_prefix is not None:
            
            _query_params.append(('filter[email][prefix]', filter_email_prefix))
            
        if filter_email_not_prefix is not None:
            
            _query_params.append(('filter[email][not_prefix]', filter_email_not_prefix))
            
        if filter_email_suffix is not None:
            
            _query_params.append(('filter[email][suffix]', filter_email_suffix))
            
        if filter_email_not_suffix is not None:
            
            _query_params.append(('filter[email][not_suffix]', filter_email_not_suffix))
            
        if filter_email_match is not None:
            
            _query_params.append(('filter[email][match]', filter_email_match))
            
        if filter_email_not_match is not None:
            
            _query_params.append(('filter[email][not_match]', filter_email_not_match))
            
        if filter_address_eq is not None:
            
            _query_params.append(('filter[address][eq]', filter_address_eq))
            
        if filter_address_not_eq is not None:
            
            _query_params.append(('filter[address][not_eq]', filter_address_not_eq))
            
        if filter_address_eql is not None:
            
            _query_params.append(('filter[address][eql]', filter_address_eql))
            
        if filter_address_not_eql is not None:
            
            _query_params.append(('filter[address][not_eql]', filter_address_not_eql))
            
        if filter_address_prefix is not None:
            
            _query_params.append(('filter[address][prefix]', filter_address_prefix))
            
        if filter_address_not_prefix is not None:
            
            _query_params.append(('filter[address][not_prefix]', filter_address_not_prefix))
            
        if filter_address_suffix is not None:
            
            _query_params.append(('filter[address][suffix]', filter_address_suffix))
            
        if filter_address_not_suffix is not None:
            
            _query_params.append(('filter[address][not_suffix]', filter_address_not_suffix))
            
        if filter_address_match is not None:
            
            _query_params.append(('filter[address][match]', filter_address_match))
            
        if filter_address_not_match is not None:
            
            _query_params.append(('filter[address][not_match]', filter_address_not_match))
            
        if filter_zip_code_eq is not None:
            
            _query_params.append(('filter[zip_code][eq]', filter_zip_code_eq))
            
        if filter_zip_code_not_eq is not None:
            
            _query_params.append(('filter[zip_code][not_eq]', filter_zip_code_not_eq))
            
        if filter_zip_code_eql is not None:
            
            _query_params.append(('filter[zip_code][eql]', filter_zip_code_eql))
            
        if filter_zip_code_not_eql is not None:
            
            _query_params.append(('filter[zip_code][not_eql]', filter_zip_code_not_eql))
            
        if filter_zip_code_prefix is not None:
            
            _query_params.append(('filter[zip_code][prefix]', filter_zip_code_prefix))
            
        if filter_zip_code_not_prefix is not None:
            
            _query_params.append(('filter[zip_code][not_prefix]', filter_zip_code_not_prefix))
            
        if filter_zip_code_suffix is not None:
            
            _query_params.append(('filter[zip_code][suffix]', filter_zip_code_suffix))
            
        if filter_zip_code_not_suffix is not None:
            
            _query_params.append(('filter[zip_code][not_suffix]', filter_zip_code_not_suffix))
            
        if filter_zip_code_match is not None:
            
            _query_params.append(('filter[zip_code][match]', filter_zip_code_match))
            
        if filter_zip_code_not_match is not None:
            
            _query_params.append(('filter[zip_code][not_match]', filter_zip_code_not_match))
            
        if filter_town_eq is not None:
            
            _query_params.append(('filter[town][eq]', filter_town_eq))
            
        if filter_town_not_eq is not None:
            
            _query_params.append(('filter[town][not_eq]', filter_town_not_eq))
            
        if filter_town_eql is not None:
            
            _query_params.append(('filter[town][eql]', filter_town_eql))
            
        if filter_town_not_eql is not None:
            
            _query_params.append(('filter[town][not_eql]', filter_town_not_eql))
            
        if filter_town_prefix is not None:
            
            _query_params.append(('filter[town][prefix]', filter_town_prefix))
            
        if filter_town_not_prefix is not None:
            
            _query_params.append(('filter[town][not_prefix]', filter_town_not_prefix))
            
        if filter_town_suffix is not None:
            
            _query_params.append(('filter[town][suffix]', filter_town_suffix))
            
        if filter_town_not_suffix is not None:
            
            _query_params.append(('filter[town][not_suffix]', filter_town_not_suffix))
            
        if filter_town_match is not None:
            
            _query_params.append(('filter[town][match]', filter_town_match))
            
        if filter_town_not_match is not None:
            
            _query_params.append(('filter[town][not_match]', filter_town_not_match))
            
        if filter_country_eq is not None:
            
            _query_params.append(('filter[country][eq]', filter_country_eq))
            
        if filter_country_not_eq is not None:
            
            _query_params.append(('filter[country][not_eq]', filter_country_not_eq))
            
        if filter_country_eql is not None:
            
            _query_params.append(('filter[country][eql]', filter_country_eql))
            
        if filter_country_not_eql is not None:
            
            _query_params.append(('filter[country][not_eql]', filter_country_not_eql))
            
        if filter_country_prefix is not None:
            
            _query_params.append(('filter[country][prefix]', filter_country_prefix))
            
        if filter_country_not_prefix is not None:
            
            _query_params.append(('filter[country][not_prefix]', filter_country_not_prefix))
            
        if filter_country_suffix is not None:
            
            _query_params.append(('filter[country][suffix]', filter_country_suffix))
            
        if filter_country_not_suffix is not None:
            
            _query_params.append(('filter[country][not_suffix]', filter_country_not_suffix))
            
        if filter_country_match is not None:
            
            _query_params.append(('filter[country][match]', filter_country_match))
            
        if filter_country_not_match is not None:
            
            _query_params.append(('filter[country][not_match]', filter_country_not_match))
            
        if filter_primary_group_id_eq is not None:
            
            _query_params.append(('filter[primary_group_id][eq]', filter_primary_group_id_eq))
            
        if filter_primary_group_id_not_eq is not None:
            
            _query_params.append(('filter[primary_group_id][not_eq]', filter_primary_group_id_not_eq))
            
        if filter_primary_group_id_gt is not None:
            
            _query_params.append(('filter[primary_group_id][gt]', filter_primary_group_id_gt))
            
        if filter_primary_group_id_gte is not None:
            
            _query_params.append(('filter[primary_group_id][gte]', filter_primary_group_id_gte))
            
        if filter_primary_group_id_lt is not None:
            
            _query_params.append(('filter[primary_group_id][lt]', filter_primary_group_id_lt))
            
        if filter_primary_group_id_lte is not None:
            
            _query_params.append(('filter[primary_group_id][lte]', filter_primary_group_id_lte))
            
        if filter_gender_eq is not None:
            
            _query_params.append(('filter[gender][eq]', filter_gender_eq))
            
        if filter_gender_not_eq is not None:
            
            _query_params.append(('filter[gender][not_eq]', filter_gender_not_eq))
            
        if filter_gender_eql is not None:
            
            _query_params.append(('filter[gender][eql]', filter_gender_eql))
            
        if filter_gender_not_eql is not None:
            
            _query_params.append(('filter[gender][not_eql]', filter_gender_not_eql))
            
        if filter_gender_prefix is not None:
            
            _query_params.append(('filter[gender][prefix]', filter_gender_prefix))
            
        if filter_gender_not_prefix is not None:
            
            _query_params.append(('filter[gender][not_prefix]', filter_gender_not_prefix))
            
        if filter_gender_suffix is not None:
            
            _query_params.append(('filter[gender][suffix]', filter_gender_suffix))
            
        if filter_gender_not_suffix is not None:
            
            _query_params.append(('filter[gender][not_suffix]', filter_gender_not_suffix))
            
        if filter_gender_match is not None:
            
            _query_params.append(('filter[gender][match]', filter_gender_match))
            
        if filter_gender_not_match is not None:
            
            _query_params.append(('filter[gender][not_match]', filter_gender_not_match))
            
        if filter_birthday_eq is not None:
            
            _query_params.append(('filter[birthday][eq]', filter_birthday_eq))
            
        if filter_birthday_not_eq is not None:
            
            _query_params.append(('filter[birthday][not_eq]', filter_birthday_not_eq))
            
        if filter_birthday_gt is not None:
            
            _query_params.append(('filter[birthday][gt]', filter_birthday_gt))
            
        if filter_birthday_gte is not None:
            
            _query_params.append(('filter[birthday][gte]', filter_birthday_gte))
            
        if filter_birthday_lt is not None:
            
            _query_params.append(('filter[birthday][lt]', filter_birthday_lt))
            
        if filter_birthday_lte is not None:
            
            _query_params.append(('filter[birthday][lte]', filter_birthday_lte))
            
        if filter_language_eq is not None:
            
            _query_params.append(('filter[language][eq]', filter_language_eq))
            
        if filter_language_not_eq is not None:
            
            _query_params.append(('filter[language][not_eq]', filter_language_not_eq))
            
        if filter_language_eql is not None:
            
            _query_params.append(('filter[language][eql]', filter_language_eql))
            
        if filter_language_not_eql is not None:
            
            _query_params.append(('filter[language][not_eql]', filter_language_not_eql))
            
        if filter_language_prefix is not None:
            
            _query_params.append(('filter[language][prefix]', filter_language_prefix))
            
        if filter_language_not_prefix is not None:
            
            _query_params.append(('filter[language][not_prefix]', filter_language_not_prefix))
            
        if filter_language_suffix is not None:
            
            _query_params.append(('filter[language][suffix]', filter_language_suffix))
            
        if filter_language_not_suffix is not None:
            
            _query_params.append(('filter[language][not_suffix]', filter_language_not_suffix))
            
        if filter_language_match is not None:
            
            _query_params.append(('filter[language][match]', filter_language_match))
            
        if filter_language_not_match is not None:
            
            _query_params.append(('filter[language][not_match]', filter_language_not_match))
            
        if filter_updated_at_eq is not None:
            
            _query_params.append(('filter[updated_at][eq]', filter_updated_at_eq))
            
        if filter_updated_at_not_eq is not None:
            
            _query_params.append(('filter[updated_at][not_eq]', filter_updated_at_not_eq))
            
        if filter_updated_at_gt is not None:
            
            _query_params.append(('filter[updated_at][gt]', filter_updated_at_gt))
            
        if filter_updated_at_gte is not None:
            
            _query_params.append(('filter[updated_at][gte]', filter_updated_at_gte))
            
        if filter_updated_at_lt is not None:
            
            _query_params.append(('filter[updated_at][lt]', filter_updated_at_lt))
            
        if filter_updated_at_lte is not None:
            
            _query_params.append(('filter[updated_at][lte]', filter_updated_at_lte))
            
        if fields_groups is not None:
            
            _query_params.append(('fields[groups]', fields_groups))
            
        if fields_roles is not None:
            
            _query_params.append(('fields[roles]', fields_roles))
            
        if fields_phone_numbers is not None:
            
            _query_params.append(('fields[phone_numbers]', fields_phone_numbers))
            
        if fields_social_accounts is not None:
            
            _query_params.append(('fields[social_accounts]', fields_social_accounts))
            
        if fields_additional_emails is not None:
            
            _query_params.append(('fields[additional_emails]', fields_additional_emails))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/vnd.api+json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'ServiceTokenAuthHeader', 
            'ServiceTokenAuthParam'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/people',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_person(
        self,
        id: Annotated[StrictStr, Field(description="ID of the resource")],
        people_request: PeopleRequest,
        include: Annotated[Optional[List[StrictStr]], Field(description="[Include related resources](https://jsonapi.org/format/#fetching-includes)")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="[Sort people according to one or more criteria](https://jsonapi.org/format/#fetching-sorting)  You should not include both ascending `id` and descending `-id` fields the same time  ")] = None,
        fields_people: Annotated[Optional[List[PeopleReadableAttribute]], Field(description="[Include only specified fields of Person in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)")] = None,
        filter_id_eq: Annotated[Optional[List[StrictInt]], Field(description="[Filter Person by id using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_id_not_eq: Annotated[Optional[List[StrictInt]], Field(description="[Filter Person by id using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_id_gt: Annotated[Optional[List[StrictInt]], Field(description="[Filter Person by id using gt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_id_gte: Annotated[Optional[List[StrictInt]], Field(description="[Filter Person by id using gte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_id_lt: Annotated[Optional[List[StrictInt]], Field(description="[Filter Person by id using lt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_id_lte: Annotated[Optional[List[StrictInt]], Field(description="[Filter Person by id using lte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_first_name_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by first_name using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_first_name_not_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by first_name using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_first_name_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by first_name using eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_first_name_not_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by first_name using not_eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_first_name_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by first_name using prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_first_name_not_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by first_name using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_first_name_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by first_name using suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_first_name_not_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by first_name using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_first_name_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by first_name using match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_first_name_not_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by first_name using not_match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_last_name_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by last_name using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_last_name_not_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by last_name using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_last_name_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by last_name using eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_last_name_not_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by last_name using not_eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_last_name_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by last_name using prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_last_name_not_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by last_name using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_last_name_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by last_name using suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_last_name_not_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by last_name using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_last_name_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by last_name using match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_last_name_not_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by last_name using not_match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_nickname_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by nickname using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_nickname_not_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by nickname using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_nickname_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by nickname using eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_nickname_not_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by nickname using not_eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_nickname_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by nickname using prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_nickname_not_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by nickname using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_nickname_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by nickname using suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_nickname_not_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by nickname using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_nickname_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by nickname using match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_nickname_not_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by nickname using not_match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_company_name_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by company_name using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_company_name_not_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by company_name using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_company_name_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by company_name using eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_company_name_not_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by company_name using not_eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_company_name_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by company_name using prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_company_name_not_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by company_name using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_company_name_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by company_name using suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_company_name_not_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by company_name using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_company_name_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by company_name using match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_company_name_not_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by company_name using not_match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_company_eq: Annotated[Optional[StrictBool], Field(description="[Filter Person by company using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_email_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by email using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_email_not_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by email using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_email_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by email using eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_email_not_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by email using not_eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_email_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by email using prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_email_not_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by email using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_email_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by email using suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_email_not_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by email using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_email_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by email using match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_email_not_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by email using not_match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_address_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by address using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_address_not_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by address using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_address_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by address using eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_address_not_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by address using not_eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_address_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by address using prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_address_not_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by address using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_address_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by address using suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_address_not_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by address using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_address_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by address using match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_address_not_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by address using not_match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_zip_code_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by zip_code using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_zip_code_not_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by zip_code using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_zip_code_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by zip_code using eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_zip_code_not_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by zip_code using not_eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_zip_code_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by zip_code using prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_zip_code_not_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by zip_code using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_zip_code_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by zip_code using suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_zip_code_not_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by zip_code using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_zip_code_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by zip_code using match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_zip_code_not_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by zip_code using not_match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_town_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by town using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_town_not_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by town using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_town_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by town using eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_town_not_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by town using not_eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_town_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by town using prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_town_not_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by town using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_town_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by town using suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_town_not_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by town using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_town_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by town using match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_town_not_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by town using not_match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_country_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by country using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_country_not_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by country using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_country_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by country using eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_country_not_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by country using not_eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_country_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by country using prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_country_not_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by country using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_country_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by country using suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_country_not_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by country using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_country_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by country using match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_country_not_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by country using not_match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_primary_group_id_eq: Annotated[Optional[List[StrictInt]], Field(description="[Filter Person by primary_group_id using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_primary_group_id_not_eq: Annotated[Optional[List[StrictInt]], Field(description="[Filter Person by primary_group_id using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_primary_group_id_gt: Annotated[Optional[List[StrictInt]], Field(description="[Filter Person by primary_group_id using gt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_primary_group_id_gte: Annotated[Optional[List[StrictInt]], Field(description="[Filter Person by primary_group_id using gte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_primary_group_id_lt: Annotated[Optional[List[StrictInt]], Field(description="[Filter Person by primary_group_id using lt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_primary_group_id_lte: Annotated[Optional[List[StrictInt]], Field(description="[Filter Person by primary_group_id using lte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_gender_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by gender using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_gender_not_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by gender using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_gender_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by gender using eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_gender_not_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by gender using not_eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_gender_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by gender using prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_gender_not_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by gender using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_gender_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by gender using suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_gender_not_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by gender using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_gender_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by gender using match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_gender_not_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by gender using not_match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_birthday_eq: Annotated[Optional[List[date]], Field(description="[Filter Person by birthday using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_birthday_not_eq: Annotated[Optional[List[date]], Field(description="[Filter Person by birthday using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_birthday_gt: Annotated[Optional[List[date]], Field(description="[Filter Person by birthday using gt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_birthday_gte: Annotated[Optional[List[date]], Field(description="[Filter Person by birthday using gte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_birthday_lt: Annotated[Optional[List[date]], Field(description="[Filter Person by birthday using lt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_birthday_lte: Annotated[Optional[List[date]], Field(description="[Filter Person by birthday using lte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_language_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by language using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_language_not_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by language using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_language_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by language using eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_language_not_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by language using not_eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_language_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by language using prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_language_not_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by language using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_language_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by language using suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_language_not_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by language using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_language_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by language using match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_language_not_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by language using not_match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_updated_at_eq: Annotated[Optional[List[datetime]], Field(description="[Filter Person by updated_at using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_updated_at_not_eq: Annotated[Optional[List[datetime]], Field(description="[Filter Person by updated_at using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_updated_at_gt: Annotated[Optional[List[datetime]], Field(description="[Filter Person by updated_at using gt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_updated_at_gte: Annotated[Optional[List[datetime]], Field(description="[Filter Person by updated_at using gte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_updated_at_lt: Annotated[Optional[List[datetime]], Field(description="[Filter Person by updated_at using lt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_updated_at_lte: Annotated[Optional[List[datetime]], Field(description="[Filter Person by updated_at using lte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        fields_groups: Annotated[Optional[List[GroupsReadableAttribute]], Field(description="[Include only specified fields of Group in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)")] = None,
        fields_roles: Annotated[Optional[List[RolesReadableAttribute]], Field(description="[Include only specified fields of Role in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)")] = None,
        fields_phone_numbers: Annotated[Optional[List[PhoneNumbersReadableAttribute]], Field(description="[Include only specified fields of Phone number in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)")] = None,
        fields_social_accounts: Annotated[Optional[List[SocialAccountsReadableAttribute]], Field(description="[Include only specified fields of Social account in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)")] = None,
        fields_additional_emails: Annotated[Optional[List[AdditionalEmailsReadableAttribute]], Field(description="[Include only specified fields of Additional email in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
        _additional_query_params: Optional[Dict[StrictStr, Any]] = None,
    ) -> PeopleSingle:
        """Update Person


        :param id: ID of the resource (required)
        :type id: str
        :param people_request: (required)
        :type people_request: PeopleRequest
        :param include: [Include related resources](https://jsonapi.org/format/#fetching-includes)
        :type include: List[str]
        :param sort: [Sort people according to one or more criteria](https://jsonapi.org/format/#fetching-sorting)  You should not include both ascending `id` and descending `-id` fields the same time  
        :type sort: List[str]
        :param fields_people: [Include only specified fields of Person in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)
        :type fields_people: List[PeopleReadableAttribute]
        :param filter_id_eq: [Filter Person by id using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_eq: List[int]
        :param filter_id_not_eq: [Filter Person by id using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_not_eq: List[int]
        :param filter_id_gt: [Filter Person by id using gt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_gt: List[int]
        :param filter_id_gte: [Filter Person by id using gte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_gte: List[int]
        :param filter_id_lt: [Filter Person by id using lt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_lt: List[int]
        :param filter_id_lte: [Filter Person by id using lte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_lte: List[int]
        :param filter_first_name_eq: [Filter Person by first_name using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_first_name_eq: List[str]
        :param filter_first_name_not_eq: [Filter Person by first_name using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_first_name_not_eq: List[str]
        :param filter_first_name_eql: [Filter Person by first_name using eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_first_name_eql: List[str]
        :param filter_first_name_not_eql: [Filter Person by first_name using not_eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_first_name_not_eql: List[str]
        :param filter_first_name_prefix: [Filter Person by first_name using prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_first_name_prefix: List[str]
        :param filter_first_name_not_prefix: [Filter Person by first_name using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_first_name_not_prefix: List[str]
        :param filter_first_name_suffix: [Filter Person by first_name using suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_first_name_suffix: List[str]
        :param filter_first_name_not_suffix: [Filter Person by first_name using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_first_name_not_suffix: List[str]
        :param filter_first_name_match: [Filter Person by first_name using match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_first_name_match: List[str]
        :param filter_first_name_not_match: [Filter Person by first_name using not_match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_first_name_not_match: List[str]
        :param filter_last_name_eq: [Filter Person by last_name using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_last_name_eq: List[str]
        :param filter_last_name_not_eq: [Filter Person by last_name using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_last_name_not_eq: List[str]
        :param filter_last_name_eql: [Filter Person by last_name using eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_last_name_eql: List[str]
        :param filter_last_name_not_eql: [Filter Person by last_name using not_eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_last_name_not_eql: List[str]
        :param filter_last_name_prefix: [Filter Person by last_name using prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_last_name_prefix: List[str]
        :param filter_last_name_not_prefix: [Filter Person by last_name using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_last_name_not_prefix: List[str]
        :param filter_last_name_suffix: [Filter Person by last_name using suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_last_name_suffix: List[str]
        :param filter_last_name_not_suffix: [Filter Person by last_name using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_last_name_not_suffix: List[str]
        :param filter_last_name_match: [Filter Person by last_name using match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_last_name_match: List[str]
        :param filter_last_name_not_match: [Filter Person by last_name using not_match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_last_name_not_match: List[str]
        :param filter_nickname_eq: [Filter Person by nickname using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_nickname_eq: List[str]
        :param filter_nickname_not_eq: [Filter Person by nickname using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_nickname_not_eq: List[str]
        :param filter_nickname_eql: [Filter Person by nickname using eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_nickname_eql: List[str]
        :param filter_nickname_not_eql: [Filter Person by nickname using not_eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_nickname_not_eql: List[str]
        :param filter_nickname_prefix: [Filter Person by nickname using prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_nickname_prefix: List[str]
        :param filter_nickname_not_prefix: [Filter Person by nickname using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_nickname_not_prefix: List[str]
        :param filter_nickname_suffix: [Filter Person by nickname using suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_nickname_suffix: List[str]
        :param filter_nickname_not_suffix: [Filter Person by nickname using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_nickname_not_suffix: List[str]
        :param filter_nickname_match: [Filter Person by nickname using match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_nickname_match: List[str]
        :param filter_nickname_not_match: [Filter Person by nickname using not_match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_nickname_not_match: List[str]
        :param filter_company_name_eq: [Filter Person by company_name using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_company_name_eq: List[str]
        :param filter_company_name_not_eq: [Filter Person by company_name using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_company_name_not_eq: List[str]
        :param filter_company_name_eql: [Filter Person by company_name using eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_company_name_eql: List[str]
        :param filter_company_name_not_eql: [Filter Person by company_name using not_eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_company_name_not_eql: List[str]
        :param filter_company_name_prefix: [Filter Person by company_name using prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_company_name_prefix: List[str]
        :param filter_company_name_not_prefix: [Filter Person by company_name using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_company_name_not_prefix: List[str]
        :param filter_company_name_suffix: [Filter Person by company_name using suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_company_name_suffix: List[str]
        :param filter_company_name_not_suffix: [Filter Person by company_name using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_company_name_not_suffix: List[str]
        :param filter_company_name_match: [Filter Person by company_name using match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_company_name_match: List[str]
        :param filter_company_name_not_match: [Filter Person by company_name using not_match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_company_name_not_match: List[str]
        :param filter_company_eq: [Filter Person by company using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_company_eq: bool
        :param filter_email_eq: [Filter Person by email using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_email_eq: List[str]
        :param filter_email_not_eq: [Filter Person by email using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_email_not_eq: List[str]
        :param filter_email_eql: [Filter Person by email using eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_email_eql: List[str]
        :param filter_email_not_eql: [Filter Person by email using not_eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_email_not_eql: List[str]
        :param filter_email_prefix: [Filter Person by email using prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_email_prefix: List[str]
        :param filter_email_not_prefix: [Filter Person by email using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_email_not_prefix: List[str]
        :param filter_email_suffix: [Filter Person by email using suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_email_suffix: List[str]
        :param filter_email_not_suffix: [Filter Person by email using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_email_not_suffix: List[str]
        :param filter_email_match: [Filter Person by email using match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_email_match: List[str]
        :param filter_email_not_match: [Filter Person by email using not_match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_email_not_match: List[str]
        :param filter_address_eq: [Filter Person by address using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_address_eq: List[str]
        :param filter_address_not_eq: [Filter Person by address using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_address_not_eq: List[str]
        :param filter_address_eql: [Filter Person by address using eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_address_eql: List[str]
        :param filter_address_not_eql: [Filter Person by address using not_eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_address_not_eql: List[str]
        :param filter_address_prefix: [Filter Person by address using prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_address_prefix: List[str]
        :param filter_address_not_prefix: [Filter Person by address using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_address_not_prefix: List[str]
        :param filter_address_suffix: [Filter Person by address using suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_address_suffix: List[str]
        :param filter_address_not_suffix: [Filter Person by address using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_address_not_suffix: List[str]
        :param filter_address_match: [Filter Person by address using match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_address_match: List[str]
        :param filter_address_not_match: [Filter Person by address using not_match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_address_not_match: List[str]
        :param filter_zip_code_eq: [Filter Person by zip_code using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_zip_code_eq: List[str]
        :param filter_zip_code_not_eq: [Filter Person by zip_code using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_zip_code_not_eq: List[str]
        :param filter_zip_code_eql: [Filter Person by zip_code using eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_zip_code_eql: List[str]
        :param filter_zip_code_not_eql: [Filter Person by zip_code using not_eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_zip_code_not_eql: List[str]
        :param filter_zip_code_prefix: [Filter Person by zip_code using prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_zip_code_prefix: List[str]
        :param filter_zip_code_not_prefix: [Filter Person by zip_code using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_zip_code_not_prefix: List[str]
        :param filter_zip_code_suffix: [Filter Person by zip_code using suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_zip_code_suffix: List[str]
        :param filter_zip_code_not_suffix: [Filter Person by zip_code using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_zip_code_not_suffix: List[str]
        :param filter_zip_code_match: [Filter Person by zip_code using match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_zip_code_match: List[str]
        :param filter_zip_code_not_match: [Filter Person by zip_code using not_match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_zip_code_not_match: List[str]
        :param filter_town_eq: [Filter Person by town using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_town_eq: List[str]
        :param filter_town_not_eq: [Filter Person by town using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_town_not_eq: List[str]
        :param filter_town_eql: [Filter Person by town using eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_town_eql: List[str]
        :param filter_town_not_eql: [Filter Person by town using not_eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_town_not_eql: List[str]
        :param filter_town_prefix: [Filter Person by town using prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_town_prefix: List[str]
        :param filter_town_not_prefix: [Filter Person by town using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_town_not_prefix: List[str]
        :param filter_town_suffix: [Filter Person by town using suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_town_suffix: List[str]
        :param filter_town_not_suffix: [Filter Person by town using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_town_not_suffix: List[str]
        :param filter_town_match: [Filter Person by town using match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_town_match: List[str]
        :param filter_town_not_match: [Filter Person by town using not_match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_town_not_match: List[str]
        :param filter_country_eq: [Filter Person by country using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_country_eq: List[str]
        :param filter_country_not_eq: [Filter Person by country using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_country_not_eq: List[str]
        :param filter_country_eql: [Filter Person by country using eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_country_eql: List[str]
        :param filter_country_not_eql: [Filter Person by country using not_eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_country_not_eql: List[str]
        :param filter_country_prefix: [Filter Person by country using prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_country_prefix: List[str]
        :param filter_country_not_prefix: [Filter Person by country using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_country_not_prefix: List[str]
        :param filter_country_suffix: [Filter Person by country using suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_country_suffix: List[str]
        :param filter_country_not_suffix: [Filter Person by country using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_country_not_suffix: List[str]
        :param filter_country_match: [Filter Person by country using match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_country_match: List[str]
        :param filter_country_not_match: [Filter Person by country using not_match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_country_not_match: List[str]
        :param filter_primary_group_id_eq: [Filter Person by primary_group_id using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_primary_group_id_eq: List[int]
        :param filter_primary_group_id_not_eq: [Filter Person by primary_group_id using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_primary_group_id_not_eq: List[int]
        :param filter_primary_group_id_gt: [Filter Person by primary_group_id using gt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_primary_group_id_gt: List[int]
        :param filter_primary_group_id_gte: [Filter Person by primary_group_id using gte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_primary_group_id_gte: List[int]
        :param filter_primary_group_id_lt: [Filter Person by primary_group_id using lt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_primary_group_id_lt: List[int]
        :param filter_primary_group_id_lte: [Filter Person by primary_group_id using lte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_primary_group_id_lte: List[int]
        :param filter_gender_eq: [Filter Person by gender using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_gender_eq: List[str]
        :param filter_gender_not_eq: [Filter Person by gender using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_gender_not_eq: List[str]
        :param filter_gender_eql: [Filter Person by gender using eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_gender_eql: List[str]
        :param filter_gender_not_eql: [Filter Person by gender using not_eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_gender_not_eql: List[str]
        :param filter_gender_prefix: [Filter Person by gender using prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_gender_prefix: List[str]
        :param filter_gender_not_prefix: [Filter Person by gender using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_gender_not_prefix: List[str]
        :param filter_gender_suffix: [Filter Person by gender using suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_gender_suffix: List[str]
        :param filter_gender_not_suffix: [Filter Person by gender using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_gender_not_suffix: List[str]
        :param filter_gender_match: [Filter Person by gender using match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_gender_match: List[str]
        :param filter_gender_not_match: [Filter Person by gender using not_match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_gender_not_match: List[str]
        :param filter_birthday_eq: [Filter Person by birthday using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_birthday_eq: List[date]
        :param filter_birthday_not_eq: [Filter Person by birthday using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_birthday_not_eq: List[date]
        :param filter_birthday_gt: [Filter Person by birthday using gt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_birthday_gt: List[date]
        :param filter_birthday_gte: [Filter Person by birthday using gte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_birthday_gte: List[date]
        :param filter_birthday_lt: [Filter Person by birthday using lt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_birthday_lt: List[date]
        :param filter_birthday_lte: [Filter Person by birthday using lte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_birthday_lte: List[date]
        :param filter_language_eq: [Filter Person by language using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_language_eq: List[str]
        :param filter_language_not_eq: [Filter Person by language using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_language_not_eq: List[str]
        :param filter_language_eql: [Filter Person by language using eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_language_eql: List[str]
        :param filter_language_not_eql: [Filter Person by language using not_eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_language_not_eql: List[str]
        :param filter_language_prefix: [Filter Person by language using prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_language_prefix: List[str]
        :param filter_language_not_prefix: [Filter Person by language using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_language_not_prefix: List[str]
        :param filter_language_suffix: [Filter Person by language using suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_language_suffix: List[str]
        :param filter_language_not_suffix: [Filter Person by language using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_language_not_suffix: List[str]
        :param filter_language_match: [Filter Person by language using match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_language_match: List[str]
        :param filter_language_not_match: [Filter Person by language using not_match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_language_not_match: List[str]
        :param filter_updated_at_eq: [Filter Person by updated_at using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_updated_at_eq: List[datetime]
        :param filter_updated_at_not_eq: [Filter Person by updated_at using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_updated_at_not_eq: List[datetime]
        :param filter_updated_at_gt: [Filter Person by updated_at using gt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_updated_at_gt: List[datetime]
        :param filter_updated_at_gte: [Filter Person by updated_at using gte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_updated_at_gte: List[datetime]
        :param filter_updated_at_lt: [Filter Person by updated_at using lt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_updated_at_lt: List[datetime]
        :param filter_updated_at_lte: [Filter Person by updated_at using lte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_updated_at_lte: List[datetime]
        :param fields_groups: [Include only specified fields of Group in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)
        :type fields_groups: List[GroupsReadableAttribute]
        :param fields_roles: [Include only specified fields of Role in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)
        :type fields_roles: List[RolesReadableAttribute]
        :param fields_phone_numbers: [Include only specified fields of Phone number in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)
        :type fields_phone_numbers: List[PhoneNumbersReadableAttribute]
        :param fields_social_accounts: [Include only specified fields of Social account in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)
        :type fields_social_accounts: List[SocialAccountsReadableAttribute]
        :param fields_additional_emails: [Include only specified fields of Additional email in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)
        :type fields_additional_emails: List[AdditionalEmailsReadableAttribute]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_person_serialize(
            id=id,
            people_request=people_request,
            include=include,
            sort=sort,
            fields_people=fields_people,
            filter_id_eq=filter_id_eq,
            filter_id_not_eq=filter_id_not_eq,
            filter_id_gt=filter_id_gt,
            filter_id_gte=filter_id_gte,
            filter_id_lt=filter_id_lt,
            filter_id_lte=filter_id_lte,
            filter_first_name_eq=filter_first_name_eq,
            filter_first_name_not_eq=filter_first_name_not_eq,
            filter_first_name_eql=filter_first_name_eql,
            filter_first_name_not_eql=filter_first_name_not_eql,
            filter_first_name_prefix=filter_first_name_prefix,
            filter_first_name_not_prefix=filter_first_name_not_prefix,
            filter_first_name_suffix=filter_first_name_suffix,
            filter_first_name_not_suffix=filter_first_name_not_suffix,
            filter_first_name_match=filter_first_name_match,
            filter_first_name_not_match=filter_first_name_not_match,
            filter_last_name_eq=filter_last_name_eq,
            filter_last_name_not_eq=filter_last_name_not_eq,
            filter_last_name_eql=filter_last_name_eql,
            filter_last_name_not_eql=filter_last_name_not_eql,
            filter_last_name_prefix=filter_last_name_prefix,
            filter_last_name_not_prefix=filter_last_name_not_prefix,
            filter_last_name_suffix=filter_last_name_suffix,
            filter_last_name_not_suffix=filter_last_name_not_suffix,
            filter_last_name_match=filter_last_name_match,
            filter_last_name_not_match=filter_last_name_not_match,
            filter_nickname_eq=filter_nickname_eq,
            filter_nickname_not_eq=filter_nickname_not_eq,
            filter_nickname_eql=filter_nickname_eql,
            filter_nickname_not_eql=filter_nickname_not_eql,
            filter_nickname_prefix=filter_nickname_prefix,
            filter_nickname_not_prefix=filter_nickname_not_prefix,
            filter_nickname_suffix=filter_nickname_suffix,
            filter_nickname_not_suffix=filter_nickname_not_suffix,
            filter_nickname_match=filter_nickname_match,
            filter_nickname_not_match=filter_nickname_not_match,
            filter_company_name_eq=filter_company_name_eq,
            filter_company_name_not_eq=filter_company_name_not_eq,
            filter_company_name_eql=filter_company_name_eql,
            filter_company_name_not_eql=filter_company_name_not_eql,
            filter_company_name_prefix=filter_company_name_prefix,
            filter_company_name_not_prefix=filter_company_name_not_prefix,
            filter_company_name_suffix=filter_company_name_suffix,
            filter_company_name_not_suffix=filter_company_name_not_suffix,
            filter_company_name_match=filter_company_name_match,
            filter_company_name_not_match=filter_company_name_not_match,
            filter_company_eq=filter_company_eq,
            filter_email_eq=filter_email_eq,
            filter_email_not_eq=filter_email_not_eq,
            filter_email_eql=filter_email_eql,
            filter_email_not_eql=filter_email_not_eql,
            filter_email_prefix=filter_email_prefix,
            filter_email_not_prefix=filter_email_not_prefix,
            filter_email_suffix=filter_email_suffix,
            filter_email_not_suffix=filter_email_not_suffix,
            filter_email_match=filter_email_match,
            filter_email_not_match=filter_email_not_match,
            filter_address_eq=filter_address_eq,
            filter_address_not_eq=filter_address_not_eq,
            filter_address_eql=filter_address_eql,
            filter_address_not_eql=filter_address_not_eql,
            filter_address_prefix=filter_address_prefix,
            filter_address_not_prefix=filter_address_not_prefix,
            filter_address_suffix=filter_address_suffix,
            filter_address_not_suffix=filter_address_not_suffix,
            filter_address_match=filter_address_match,
            filter_address_not_match=filter_address_not_match,
            filter_zip_code_eq=filter_zip_code_eq,
            filter_zip_code_not_eq=filter_zip_code_not_eq,
            filter_zip_code_eql=filter_zip_code_eql,
            filter_zip_code_not_eql=filter_zip_code_not_eql,
            filter_zip_code_prefix=filter_zip_code_prefix,
            filter_zip_code_not_prefix=filter_zip_code_not_prefix,
            filter_zip_code_suffix=filter_zip_code_suffix,
            filter_zip_code_not_suffix=filter_zip_code_not_suffix,
            filter_zip_code_match=filter_zip_code_match,
            filter_zip_code_not_match=filter_zip_code_not_match,
            filter_town_eq=filter_town_eq,
            filter_town_not_eq=filter_town_not_eq,
            filter_town_eql=filter_town_eql,
            filter_town_not_eql=filter_town_not_eql,
            filter_town_prefix=filter_town_prefix,
            filter_town_not_prefix=filter_town_not_prefix,
            filter_town_suffix=filter_town_suffix,
            filter_town_not_suffix=filter_town_not_suffix,
            filter_town_match=filter_town_match,
            filter_town_not_match=filter_town_not_match,
            filter_country_eq=filter_country_eq,
            filter_country_not_eq=filter_country_not_eq,
            filter_country_eql=filter_country_eql,
            filter_country_not_eql=filter_country_not_eql,
            filter_country_prefix=filter_country_prefix,
            filter_country_not_prefix=filter_country_not_prefix,
            filter_country_suffix=filter_country_suffix,
            filter_country_not_suffix=filter_country_not_suffix,
            filter_country_match=filter_country_match,
            filter_country_not_match=filter_country_not_match,
            filter_primary_group_id_eq=filter_primary_group_id_eq,
            filter_primary_group_id_not_eq=filter_primary_group_id_not_eq,
            filter_primary_group_id_gt=filter_primary_group_id_gt,
            filter_primary_group_id_gte=filter_primary_group_id_gte,
            filter_primary_group_id_lt=filter_primary_group_id_lt,
            filter_primary_group_id_lte=filter_primary_group_id_lte,
            filter_gender_eq=filter_gender_eq,
            filter_gender_not_eq=filter_gender_not_eq,
            filter_gender_eql=filter_gender_eql,
            filter_gender_not_eql=filter_gender_not_eql,
            filter_gender_prefix=filter_gender_prefix,
            filter_gender_not_prefix=filter_gender_not_prefix,
            filter_gender_suffix=filter_gender_suffix,
            filter_gender_not_suffix=filter_gender_not_suffix,
            filter_gender_match=filter_gender_match,
            filter_gender_not_match=filter_gender_not_match,
            filter_birthday_eq=filter_birthday_eq,
            filter_birthday_not_eq=filter_birthday_not_eq,
            filter_birthday_gt=filter_birthday_gt,
            filter_birthday_gte=filter_birthday_gte,
            filter_birthday_lt=filter_birthday_lt,
            filter_birthday_lte=filter_birthday_lte,
            filter_language_eq=filter_language_eq,
            filter_language_not_eq=filter_language_not_eq,
            filter_language_eql=filter_language_eql,
            filter_language_not_eql=filter_language_not_eql,
            filter_language_prefix=filter_language_prefix,
            filter_language_not_prefix=filter_language_not_prefix,
            filter_language_suffix=filter_language_suffix,
            filter_language_not_suffix=filter_language_not_suffix,
            filter_language_match=filter_language_match,
            filter_language_not_match=filter_language_not_match,
            filter_updated_at_eq=filter_updated_at_eq,
            filter_updated_at_not_eq=filter_updated_at_not_eq,
            filter_updated_at_gt=filter_updated_at_gt,
            filter_updated_at_gte=filter_updated_at_gte,
            filter_updated_at_lt=filter_updated_at_lt,
            filter_updated_at_lte=filter_updated_at_lte,
            fields_groups=fields_groups,
            fields_roles=fields_roles,
            fields_phone_numbers=fields_phone_numbers,
            fields_social_accounts=fields_social_accounts,
            fields_additional_emails=fields_additional_emails,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
            _additional_query_params=_additional_query_params,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PeopleSingle",
            '202': None,
            '204': None,
            '401': "JsonapiFailure",
            '403': "JsonapiFailure",
            '404': "JsonapiFailure",
            '422': "JsonapiFailure",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_person_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="ID of the resource")],
        people_request: PeopleRequest,
        include: Annotated[Optional[List[StrictStr]], Field(description="[Include related resources](https://jsonapi.org/format/#fetching-includes)")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="[Sort people according to one or more criteria](https://jsonapi.org/format/#fetching-sorting)  You should not include both ascending `id` and descending `-id` fields the same time  ")] = None,
        fields_people: Annotated[Optional[List[PeopleReadableAttribute]], Field(description="[Include only specified fields of Person in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)")] = None,
        filter_id_eq: Annotated[Optional[List[StrictInt]], Field(description="[Filter Person by id using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_id_not_eq: Annotated[Optional[List[StrictInt]], Field(description="[Filter Person by id using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_id_gt: Annotated[Optional[List[StrictInt]], Field(description="[Filter Person by id using gt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_id_gte: Annotated[Optional[List[StrictInt]], Field(description="[Filter Person by id using gte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_id_lt: Annotated[Optional[List[StrictInt]], Field(description="[Filter Person by id using lt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_id_lte: Annotated[Optional[List[StrictInt]], Field(description="[Filter Person by id using lte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_first_name_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by first_name using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_first_name_not_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by first_name using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_first_name_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by first_name using eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_first_name_not_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by first_name using not_eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_first_name_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by first_name using prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_first_name_not_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by first_name using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_first_name_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by first_name using suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_first_name_not_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by first_name using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_first_name_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by first_name using match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_first_name_not_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by first_name using not_match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_last_name_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by last_name using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_last_name_not_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by last_name using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_last_name_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by last_name using eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_last_name_not_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by last_name using not_eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_last_name_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by last_name using prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_last_name_not_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by last_name using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_last_name_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by last_name using suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_last_name_not_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by last_name using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_last_name_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by last_name using match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_last_name_not_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by last_name using not_match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_nickname_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by nickname using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_nickname_not_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by nickname using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_nickname_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by nickname using eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_nickname_not_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by nickname using not_eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_nickname_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by nickname using prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_nickname_not_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by nickname using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_nickname_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by nickname using suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_nickname_not_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by nickname using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_nickname_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by nickname using match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_nickname_not_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by nickname using not_match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_company_name_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by company_name using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_company_name_not_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by company_name using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_company_name_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by company_name using eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_company_name_not_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by company_name using not_eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_company_name_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by company_name using prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_company_name_not_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by company_name using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_company_name_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by company_name using suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_company_name_not_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by company_name using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_company_name_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by company_name using match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_company_name_not_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by company_name using not_match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_company_eq: Annotated[Optional[StrictBool], Field(description="[Filter Person by company using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_email_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by email using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_email_not_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by email using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_email_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by email using eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_email_not_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by email using not_eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_email_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by email using prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_email_not_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by email using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_email_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by email using suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_email_not_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by email using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_email_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by email using match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_email_not_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by email using not_match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_address_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by address using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_address_not_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by address using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_address_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by address using eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_address_not_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by address using not_eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_address_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by address using prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_address_not_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by address using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_address_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by address using suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_address_not_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by address using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_address_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by address using match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_address_not_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by address using not_match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_zip_code_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by zip_code using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_zip_code_not_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by zip_code using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_zip_code_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by zip_code using eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_zip_code_not_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by zip_code using not_eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_zip_code_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by zip_code using prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_zip_code_not_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by zip_code using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_zip_code_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by zip_code using suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_zip_code_not_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by zip_code using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_zip_code_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by zip_code using match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_zip_code_not_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by zip_code using not_match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_town_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by town using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_town_not_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by town using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_town_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by town using eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_town_not_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by town using not_eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_town_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by town using prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_town_not_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by town using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_town_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by town using suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_town_not_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by town using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_town_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by town using match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_town_not_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by town using not_match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_country_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by country using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_country_not_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by country using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_country_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by country using eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_country_not_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by country using not_eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_country_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by country using prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_country_not_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by country using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_country_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by country using suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_country_not_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by country using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_country_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by country using match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_country_not_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by country using not_match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_primary_group_id_eq: Annotated[Optional[List[StrictInt]], Field(description="[Filter Person by primary_group_id using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_primary_group_id_not_eq: Annotated[Optional[List[StrictInt]], Field(description="[Filter Person by primary_group_id using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_primary_group_id_gt: Annotated[Optional[List[StrictInt]], Field(description="[Filter Person by primary_group_id using gt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_primary_group_id_gte: Annotated[Optional[List[StrictInt]], Field(description="[Filter Person by primary_group_id using gte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_primary_group_id_lt: Annotated[Optional[List[StrictInt]], Field(description="[Filter Person by primary_group_id using lt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_primary_group_id_lte: Annotated[Optional[List[StrictInt]], Field(description="[Filter Person by primary_group_id using lte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_gender_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by gender using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_gender_not_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by gender using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_gender_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by gender using eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_gender_not_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by gender using not_eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_gender_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by gender using prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_gender_not_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by gender using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_gender_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by gender using suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_gender_not_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by gender using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_gender_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by gender using match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_gender_not_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by gender using not_match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_birthday_eq: Annotated[Optional[List[date]], Field(description="[Filter Person by birthday using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_birthday_not_eq: Annotated[Optional[List[date]], Field(description="[Filter Person by birthday using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_birthday_gt: Annotated[Optional[List[date]], Field(description="[Filter Person by birthday using gt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_birthday_gte: Annotated[Optional[List[date]], Field(description="[Filter Person by birthday using gte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_birthday_lt: Annotated[Optional[List[date]], Field(description="[Filter Person by birthday using lt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_birthday_lte: Annotated[Optional[List[date]], Field(description="[Filter Person by birthday using lte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_language_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by language using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_language_not_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by language using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_language_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by language using eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_language_not_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by language using not_eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_language_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by language using prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_language_not_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by language using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_language_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by language using suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_language_not_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by language using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_language_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by language using match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_language_not_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by language using not_match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_updated_at_eq: Annotated[Optional[List[datetime]], Field(description="[Filter Person by updated_at using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_updated_at_not_eq: Annotated[Optional[List[datetime]], Field(description="[Filter Person by updated_at using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_updated_at_gt: Annotated[Optional[List[datetime]], Field(description="[Filter Person by updated_at using gt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_updated_at_gte: Annotated[Optional[List[datetime]], Field(description="[Filter Person by updated_at using gte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_updated_at_lt: Annotated[Optional[List[datetime]], Field(description="[Filter Person by updated_at using lt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_updated_at_lte: Annotated[Optional[List[datetime]], Field(description="[Filter Person by updated_at using lte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        fields_groups: Annotated[Optional[List[GroupsReadableAttribute]], Field(description="[Include only specified fields of Group in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)")] = None,
        fields_roles: Annotated[Optional[List[RolesReadableAttribute]], Field(description="[Include only specified fields of Role in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)")] = None,
        fields_phone_numbers: Annotated[Optional[List[PhoneNumbersReadableAttribute]], Field(description="[Include only specified fields of Phone number in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)")] = None,
        fields_social_accounts: Annotated[Optional[List[SocialAccountsReadableAttribute]], Field(description="[Include only specified fields of Social account in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)")] = None,
        fields_additional_emails: Annotated[Optional[List[AdditionalEmailsReadableAttribute]], Field(description="[Include only specified fields of Additional email in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
        _additional_query_params: Optional[Dict[StrictStr, Any]] = None,
    ) -> ApiResponse[PeopleSingle]:
        """Update Person


        :param id: ID of the resource (required)
        :type id: str
        :param people_request: (required)
        :type people_request: PeopleRequest
        :param include: [Include related resources](https://jsonapi.org/format/#fetching-includes)
        :type include: List[str]
        :param sort: [Sort people according to one or more criteria](https://jsonapi.org/format/#fetching-sorting)  You should not include both ascending `id` and descending `-id` fields the same time  
        :type sort: List[str]
        :param fields_people: [Include only specified fields of Person in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)
        :type fields_people: List[PeopleReadableAttribute]
        :param filter_id_eq: [Filter Person by id using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_eq: List[int]
        :param filter_id_not_eq: [Filter Person by id using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_not_eq: List[int]
        :param filter_id_gt: [Filter Person by id using gt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_gt: List[int]
        :param filter_id_gte: [Filter Person by id using gte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_gte: List[int]
        :param filter_id_lt: [Filter Person by id using lt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_lt: List[int]
        :param filter_id_lte: [Filter Person by id using lte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_lte: List[int]
        :param filter_first_name_eq: [Filter Person by first_name using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_first_name_eq: List[str]
        :param filter_first_name_not_eq: [Filter Person by first_name using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_first_name_not_eq: List[str]
        :param filter_first_name_eql: [Filter Person by first_name using eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_first_name_eql: List[str]
        :param filter_first_name_not_eql: [Filter Person by first_name using not_eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_first_name_not_eql: List[str]
        :param filter_first_name_prefix: [Filter Person by first_name using prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_first_name_prefix: List[str]
        :param filter_first_name_not_prefix: [Filter Person by first_name using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_first_name_not_prefix: List[str]
        :param filter_first_name_suffix: [Filter Person by first_name using suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_first_name_suffix: List[str]
        :param filter_first_name_not_suffix: [Filter Person by first_name using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_first_name_not_suffix: List[str]
        :param filter_first_name_match: [Filter Person by first_name using match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_first_name_match: List[str]
        :param filter_first_name_not_match: [Filter Person by first_name using not_match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_first_name_not_match: List[str]
        :param filter_last_name_eq: [Filter Person by last_name using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_last_name_eq: List[str]
        :param filter_last_name_not_eq: [Filter Person by last_name using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_last_name_not_eq: List[str]
        :param filter_last_name_eql: [Filter Person by last_name using eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_last_name_eql: List[str]
        :param filter_last_name_not_eql: [Filter Person by last_name using not_eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_last_name_not_eql: List[str]
        :param filter_last_name_prefix: [Filter Person by last_name using prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_last_name_prefix: List[str]
        :param filter_last_name_not_prefix: [Filter Person by last_name using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_last_name_not_prefix: List[str]
        :param filter_last_name_suffix: [Filter Person by last_name using suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_last_name_suffix: List[str]
        :param filter_last_name_not_suffix: [Filter Person by last_name using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_last_name_not_suffix: List[str]
        :param filter_last_name_match: [Filter Person by last_name using match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_last_name_match: List[str]
        :param filter_last_name_not_match: [Filter Person by last_name using not_match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_last_name_not_match: List[str]
        :param filter_nickname_eq: [Filter Person by nickname using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_nickname_eq: List[str]
        :param filter_nickname_not_eq: [Filter Person by nickname using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_nickname_not_eq: List[str]
        :param filter_nickname_eql: [Filter Person by nickname using eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_nickname_eql: List[str]
        :param filter_nickname_not_eql: [Filter Person by nickname using not_eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_nickname_not_eql: List[str]
        :param filter_nickname_prefix: [Filter Person by nickname using prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_nickname_prefix: List[str]
        :param filter_nickname_not_prefix: [Filter Person by nickname using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_nickname_not_prefix: List[str]
        :param filter_nickname_suffix: [Filter Person by nickname using suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_nickname_suffix: List[str]
        :param filter_nickname_not_suffix: [Filter Person by nickname using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_nickname_not_suffix: List[str]
        :param filter_nickname_match: [Filter Person by nickname using match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_nickname_match: List[str]
        :param filter_nickname_not_match: [Filter Person by nickname using not_match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_nickname_not_match: List[str]
        :param filter_company_name_eq: [Filter Person by company_name using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_company_name_eq: List[str]
        :param filter_company_name_not_eq: [Filter Person by company_name using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_company_name_not_eq: List[str]
        :param filter_company_name_eql: [Filter Person by company_name using eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_company_name_eql: List[str]
        :param filter_company_name_not_eql: [Filter Person by company_name using not_eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_company_name_not_eql: List[str]
        :param filter_company_name_prefix: [Filter Person by company_name using prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_company_name_prefix: List[str]
        :param filter_company_name_not_prefix: [Filter Person by company_name using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_company_name_not_prefix: List[str]
        :param filter_company_name_suffix: [Filter Person by company_name using suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_company_name_suffix: List[str]
        :param filter_company_name_not_suffix: [Filter Person by company_name using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_company_name_not_suffix: List[str]
        :param filter_company_name_match: [Filter Person by company_name using match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_company_name_match: List[str]
        :param filter_company_name_not_match: [Filter Person by company_name using not_match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_company_name_not_match: List[str]
        :param filter_company_eq: [Filter Person by company using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_company_eq: bool
        :param filter_email_eq: [Filter Person by email using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_email_eq: List[str]
        :param filter_email_not_eq: [Filter Person by email using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_email_not_eq: List[str]
        :param filter_email_eql: [Filter Person by email using eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_email_eql: List[str]
        :param filter_email_not_eql: [Filter Person by email using not_eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_email_not_eql: List[str]
        :param filter_email_prefix: [Filter Person by email using prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_email_prefix: List[str]
        :param filter_email_not_prefix: [Filter Person by email using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_email_not_prefix: List[str]
        :param filter_email_suffix: [Filter Person by email using suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_email_suffix: List[str]
        :param filter_email_not_suffix: [Filter Person by email using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_email_not_suffix: List[str]
        :param filter_email_match: [Filter Person by email using match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_email_match: List[str]
        :param filter_email_not_match: [Filter Person by email using not_match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_email_not_match: List[str]
        :param filter_address_eq: [Filter Person by address using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_address_eq: List[str]
        :param filter_address_not_eq: [Filter Person by address using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_address_not_eq: List[str]
        :param filter_address_eql: [Filter Person by address using eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_address_eql: List[str]
        :param filter_address_not_eql: [Filter Person by address using not_eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_address_not_eql: List[str]
        :param filter_address_prefix: [Filter Person by address using prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_address_prefix: List[str]
        :param filter_address_not_prefix: [Filter Person by address using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_address_not_prefix: List[str]
        :param filter_address_suffix: [Filter Person by address using suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_address_suffix: List[str]
        :param filter_address_not_suffix: [Filter Person by address using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_address_not_suffix: List[str]
        :param filter_address_match: [Filter Person by address using match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_address_match: List[str]
        :param filter_address_not_match: [Filter Person by address using not_match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_address_not_match: List[str]
        :param filter_zip_code_eq: [Filter Person by zip_code using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_zip_code_eq: List[str]
        :param filter_zip_code_not_eq: [Filter Person by zip_code using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_zip_code_not_eq: List[str]
        :param filter_zip_code_eql: [Filter Person by zip_code using eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_zip_code_eql: List[str]
        :param filter_zip_code_not_eql: [Filter Person by zip_code using not_eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_zip_code_not_eql: List[str]
        :param filter_zip_code_prefix: [Filter Person by zip_code using prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_zip_code_prefix: List[str]
        :param filter_zip_code_not_prefix: [Filter Person by zip_code using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_zip_code_not_prefix: List[str]
        :param filter_zip_code_suffix: [Filter Person by zip_code using suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_zip_code_suffix: List[str]
        :param filter_zip_code_not_suffix: [Filter Person by zip_code using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_zip_code_not_suffix: List[str]
        :param filter_zip_code_match: [Filter Person by zip_code using match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_zip_code_match: List[str]
        :param filter_zip_code_not_match: [Filter Person by zip_code using not_match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_zip_code_not_match: List[str]
        :param filter_town_eq: [Filter Person by town using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_town_eq: List[str]
        :param filter_town_not_eq: [Filter Person by town using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_town_not_eq: List[str]
        :param filter_town_eql: [Filter Person by town using eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_town_eql: List[str]
        :param filter_town_not_eql: [Filter Person by town using not_eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_town_not_eql: List[str]
        :param filter_town_prefix: [Filter Person by town using prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_town_prefix: List[str]
        :param filter_town_not_prefix: [Filter Person by town using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_town_not_prefix: List[str]
        :param filter_town_suffix: [Filter Person by town using suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_town_suffix: List[str]
        :param filter_town_not_suffix: [Filter Person by town using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_town_not_suffix: List[str]
        :param filter_town_match: [Filter Person by town using match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_town_match: List[str]
        :param filter_town_not_match: [Filter Person by town using not_match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_town_not_match: List[str]
        :param filter_country_eq: [Filter Person by country using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_country_eq: List[str]
        :param filter_country_not_eq: [Filter Person by country using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_country_not_eq: List[str]
        :param filter_country_eql: [Filter Person by country using eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_country_eql: List[str]
        :param filter_country_not_eql: [Filter Person by country using not_eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_country_not_eql: List[str]
        :param filter_country_prefix: [Filter Person by country using prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_country_prefix: List[str]
        :param filter_country_not_prefix: [Filter Person by country using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_country_not_prefix: List[str]
        :param filter_country_suffix: [Filter Person by country using suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_country_suffix: List[str]
        :param filter_country_not_suffix: [Filter Person by country using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_country_not_suffix: List[str]
        :param filter_country_match: [Filter Person by country using match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_country_match: List[str]
        :param filter_country_not_match: [Filter Person by country using not_match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_country_not_match: List[str]
        :param filter_primary_group_id_eq: [Filter Person by primary_group_id using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_primary_group_id_eq: List[int]
        :param filter_primary_group_id_not_eq: [Filter Person by primary_group_id using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_primary_group_id_not_eq: List[int]
        :param filter_primary_group_id_gt: [Filter Person by primary_group_id using gt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_primary_group_id_gt: List[int]
        :param filter_primary_group_id_gte: [Filter Person by primary_group_id using gte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_primary_group_id_gte: List[int]
        :param filter_primary_group_id_lt: [Filter Person by primary_group_id using lt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_primary_group_id_lt: List[int]
        :param filter_primary_group_id_lte: [Filter Person by primary_group_id using lte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_primary_group_id_lte: List[int]
        :param filter_gender_eq: [Filter Person by gender using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_gender_eq: List[str]
        :param filter_gender_not_eq: [Filter Person by gender using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_gender_not_eq: List[str]
        :param filter_gender_eql: [Filter Person by gender using eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_gender_eql: List[str]
        :param filter_gender_not_eql: [Filter Person by gender using not_eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_gender_not_eql: List[str]
        :param filter_gender_prefix: [Filter Person by gender using prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_gender_prefix: List[str]
        :param filter_gender_not_prefix: [Filter Person by gender using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_gender_not_prefix: List[str]
        :param filter_gender_suffix: [Filter Person by gender using suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_gender_suffix: List[str]
        :param filter_gender_not_suffix: [Filter Person by gender using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_gender_not_suffix: List[str]
        :param filter_gender_match: [Filter Person by gender using match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_gender_match: List[str]
        :param filter_gender_not_match: [Filter Person by gender using not_match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_gender_not_match: List[str]
        :param filter_birthday_eq: [Filter Person by birthday using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_birthday_eq: List[date]
        :param filter_birthday_not_eq: [Filter Person by birthday using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_birthday_not_eq: List[date]
        :param filter_birthday_gt: [Filter Person by birthday using gt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_birthday_gt: List[date]
        :param filter_birthday_gte: [Filter Person by birthday using gte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_birthday_gte: List[date]
        :param filter_birthday_lt: [Filter Person by birthday using lt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_birthday_lt: List[date]
        :param filter_birthday_lte: [Filter Person by birthday using lte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_birthday_lte: List[date]
        :param filter_language_eq: [Filter Person by language using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_language_eq: List[str]
        :param filter_language_not_eq: [Filter Person by language using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_language_not_eq: List[str]
        :param filter_language_eql: [Filter Person by language using eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_language_eql: List[str]
        :param filter_language_not_eql: [Filter Person by language using not_eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_language_not_eql: List[str]
        :param filter_language_prefix: [Filter Person by language using prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_language_prefix: List[str]
        :param filter_language_not_prefix: [Filter Person by language using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_language_not_prefix: List[str]
        :param filter_language_suffix: [Filter Person by language using suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_language_suffix: List[str]
        :param filter_language_not_suffix: [Filter Person by language using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_language_not_suffix: List[str]
        :param filter_language_match: [Filter Person by language using match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_language_match: List[str]
        :param filter_language_not_match: [Filter Person by language using not_match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_language_not_match: List[str]
        :param filter_updated_at_eq: [Filter Person by updated_at using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_updated_at_eq: List[datetime]
        :param filter_updated_at_not_eq: [Filter Person by updated_at using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_updated_at_not_eq: List[datetime]
        :param filter_updated_at_gt: [Filter Person by updated_at using gt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_updated_at_gt: List[datetime]
        :param filter_updated_at_gte: [Filter Person by updated_at using gte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_updated_at_gte: List[datetime]
        :param filter_updated_at_lt: [Filter Person by updated_at using lt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_updated_at_lt: List[datetime]
        :param filter_updated_at_lte: [Filter Person by updated_at using lte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_updated_at_lte: List[datetime]
        :param fields_groups: [Include only specified fields of Group in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)
        :type fields_groups: List[GroupsReadableAttribute]
        :param fields_roles: [Include only specified fields of Role in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)
        :type fields_roles: List[RolesReadableAttribute]
        :param fields_phone_numbers: [Include only specified fields of Phone number in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)
        :type fields_phone_numbers: List[PhoneNumbersReadableAttribute]
        :param fields_social_accounts: [Include only specified fields of Social account in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)
        :type fields_social_accounts: List[SocialAccountsReadableAttribute]
        :param fields_additional_emails: [Include only specified fields of Additional email in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)
        :type fields_additional_emails: List[AdditionalEmailsReadableAttribute]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_person_serialize(
            id=id,
            people_request=people_request,
            include=include,
            sort=sort,
            fields_people=fields_people,
            filter_id_eq=filter_id_eq,
            filter_id_not_eq=filter_id_not_eq,
            filter_id_gt=filter_id_gt,
            filter_id_gte=filter_id_gte,
            filter_id_lt=filter_id_lt,
            filter_id_lte=filter_id_lte,
            filter_first_name_eq=filter_first_name_eq,
            filter_first_name_not_eq=filter_first_name_not_eq,
            filter_first_name_eql=filter_first_name_eql,
            filter_first_name_not_eql=filter_first_name_not_eql,
            filter_first_name_prefix=filter_first_name_prefix,
            filter_first_name_not_prefix=filter_first_name_not_prefix,
            filter_first_name_suffix=filter_first_name_suffix,
            filter_first_name_not_suffix=filter_first_name_not_suffix,
            filter_first_name_match=filter_first_name_match,
            filter_first_name_not_match=filter_first_name_not_match,
            filter_last_name_eq=filter_last_name_eq,
            filter_last_name_not_eq=filter_last_name_not_eq,
            filter_last_name_eql=filter_last_name_eql,
            filter_last_name_not_eql=filter_last_name_not_eql,
            filter_last_name_prefix=filter_last_name_prefix,
            filter_last_name_not_prefix=filter_last_name_not_prefix,
            filter_last_name_suffix=filter_last_name_suffix,
            filter_last_name_not_suffix=filter_last_name_not_suffix,
            filter_last_name_match=filter_last_name_match,
            filter_last_name_not_match=filter_last_name_not_match,
            filter_nickname_eq=filter_nickname_eq,
            filter_nickname_not_eq=filter_nickname_not_eq,
            filter_nickname_eql=filter_nickname_eql,
            filter_nickname_not_eql=filter_nickname_not_eql,
            filter_nickname_prefix=filter_nickname_prefix,
            filter_nickname_not_prefix=filter_nickname_not_prefix,
            filter_nickname_suffix=filter_nickname_suffix,
            filter_nickname_not_suffix=filter_nickname_not_suffix,
            filter_nickname_match=filter_nickname_match,
            filter_nickname_not_match=filter_nickname_not_match,
            filter_company_name_eq=filter_company_name_eq,
            filter_company_name_not_eq=filter_company_name_not_eq,
            filter_company_name_eql=filter_company_name_eql,
            filter_company_name_not_eql=filter_company_name_not_eql,
            filter_company_name_prefix=filter_company_name_prefix,
            filter_company_name_not_prefix=filter_company_name_not_prefix,
            filter_company_name_suffix=filter_company_name_suffix,
            filter_company_name_not_suffix=filter_company_name_not_suffix,
            filter_company_name_match=filter_company_name_match,
            filter_company_name_not_match=filter_company_name_not_match,
            filter_company_eq=filter_company_eq,
            filter_email_eq=filter_email_eq,
            filter_email_not_eq=filter_email_not_eq,
            filter_email_eql=filter_email_eql,
            filter_email_not_eql=filter_email_not_eql,
            filter_email_prefix=filter_email_prefix,
            filter_email_not_prefix=filter_email_not_prefix,
            filter_email_suffix=filter_email_suffix,
            filter_email_not_suffix=filter_email_not_suffix,
            filter_email_match=filter_email_match,
            filter_email_not_match=filter_email_not_match,
            filter_address_eq=filter_address_eq,
            filter_address_not_eq=filter_address_not_eq,
            filter_address_eql=filter_address_eql,
            filter_address_not_eql=filter_address_not_eql,
            filter_address_prefix=filter_address_prefix,
            filter_address_not_prefix=filter_address_not_prefix,
            filter_address_suffix=filter_address_suffix,
            filter_address_not_suffix=filter_address_not_suffix,
            filter_address_match=filter_address_match,
            filter_address_not_match=filter_address_not_match,
            filter_zip_code_eq=filter_zip_code_eq,
            filter_zip_code_not_eq=filter_zip_code_not_eq,
            filter_zip_code_eql=filter_zip_code_eql,
            filter_zip_code_not_eql=filter_zip_code_not_eql,
            filter_zip_code_prefix=filter_zip_code_prefix,
            filter_zip_code_not_prefix=filter_zip_code_not_prefix,
            filter_zip_code_suffix=filter_zip_code_suffix,
            filter_zip_code_not_suffix=filter_zip_code_not_suffix,
            filter_zip_code_match=filter_zip_code_match,
            filter_zip_code_not_match=filter_zip_code_not_match,
            filter_town_eq=filter_town_eq,
            filter_town_not_eq=filter_town_not_eq,
            filter_town_eql=filter_town_eql,
            filter_town_not_eql=filter_town_not_eql,
            filter_town_prefix=filter_town_prefix,
            filter_town_not_prefix=filter_town_not_prefix,
            filter_town_suffix=filter_town_suffix,
            filter_town_not_suffix=filter_town_not_suffix,
            filter_town_match=filter_town_match,
            filter_town_not_match=filter_town_not_match,
            filter_country_eq=filter_country_eq,
            filter_country_not_eq=filter_country_not_eq,
            filter_country_eql=filter_country_eql,
            filter_country_not_eql=filter_country_not_eql,
            filter_country_prefix=filter_country_prefix,
            filter_country_not_prefix=filter_country_not_prefix,
            filter_country_suffix=filter_country_suffix,
            filter_country_not_suffix=filter_country_not_suffix,
            filter_country_match=filter_country_match,
            filter_country_not_match=filter_country_not_match,
            filter_primary_group_id_eq=filter_primary_group_id_eq,
            filter_primary_group_id_not_eq=filter_primary_group_id_not_eq,
            filter_primary_group_id_gt=filter_primary_group_id_gt,
            filter_primary_group_id_gte=filter_primary_group_id_gte,
            filter_primary_group_id_lt=filter_primary_group_id_lt,
            filter_primary_group_id_lte=filter_primary_group_id_lte,
            filter_gender_eq=filter_gender_eq,
            filter_gender_not_eq=filter_gender_not_eq,
            filter_gender_eql=filter_gender_eql,
            filter_gender_not_eql=filter_gender_not_eql,
            filter_gender_prefix=filter_gender_prefix,
            filter_gender_not_prefix=filter_gender_not_prefix,
            filter_gender_suffix=filter_gender_suffix,
            filter_gender_not_suffix=filter_gender_not_suffix,
            filter_gender_match=filter_gender_match,
            filter_gender_not_match=filter_gender_not_match,
            filter_birthday_eq=filter_birthday_eq,
            filter_birthday_not_eq=filter_birthday_not_eq,
            filter_birthday_gt=filter_birthday_gt,
            filter_birthday_gte=filter_birthday_gte,
            filter_birthday_lt=filter_birthday_lt,
            filter_birthday_lte=filter_birthday_lte,
            filter_language_eq=filter_language_eq,
            filter_language_not_eq=filter_language_not_eq,
            filter_language_eql=filter_language_eql,
            filter_language_not_eql=filter_language_not_eql,
            filter_language_prefix=filter_language_prefix,
            filter_language_not_prefix=filter_language_not_prefix,
            filter_language_suffix=filter_language_suffix,
            filter_language_not_suffix=filter_language_not_suffix,
            filter_language_match=filter_language_match,
            filter_language_not_match=filter_language_not_match,
            filter_updated_at_eq=filter_updated_at_eq,
            filter_updated_at_not_eq=filter_updated_at_not_eq,
            filter_updated_at_gt=filter_updated_at_gt,
            filter_updated_at_gte=filter_updated_at_gte,
            filter_updated_at_lt=filter_updated_at_lt,
            filter_updated_at_lte=filter_updated_at_lte,
            fields_groups=fields_groups,
            fields_roles=fields_roles,
            fields_phone_numbers=fields_phone_numbers,
            fields_social_accounts=fields_social_accounts,
            fields_additional_emails=fields_additional_emails,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
            _additional_query_params=_additional_query_params,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PeopleSingle",
            '202': None,
            '204': None,
            '401': "JsonapiFailure",
            '403': "JsonapiFailure",
            '404': "JsonapiFailure",
            '422': "JsonapiFailure",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_person_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="ID of the resource")],
        people_request: PeopleRequest,
        include: Annotated[Optional[List[StrictStr]], Field(description="[Include related resources](https://jsonapi.org/format/#fetching-includes)")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="[Sort people according to one or more criteria](https://jsonapi.org/format/#fetching-sorting)  You should not include both ascending `id` and descending `-id` fields the same time  ")] = None,
        fields_people: Annotated[Optional[List[PeopleReadableAttribute]], Field(description="[Include only specified fields of Person in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)")] = None,
        filter_id_eq: Annotated[Optional[List[StrictInt]], Field(description="[Filter Person by id using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_id_not_eq: Annotated[Optional[List[StrictInt]], Field(description="[Filter Person by id using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_id_gt: Annotated[Optional[List[StrictInt]], Field(description="[Filter Person by id using gt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_id_gte: Annotated[Optional[List[StrictInt]], Field(description="[Filter Person by id using gte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_id_lt: Annotated[Optional[List[StrictInt]], Field(description="[Filter Person by id using lt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_id_lte: Annotated[Optional[List[StrictInt]], Field(description="[Filter Person by id using lte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_first_name_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by first_name using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_first_name_not_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by first_name using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_first_name_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by first_name using eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_first_name_not_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by first_name using not_eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_first_name_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by first_name using prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_first_name_not_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by first_name using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_first_name_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by first_name using suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_first_name_not_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by first_name using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_first_name_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by first_name using match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_first_name_not_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by first_name using not_match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_last_name_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by last_name using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_last_name_not_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by last_name using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_last_name_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by last_name using eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_last_name_not_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by last_name using not_eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_last_name_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by last_name using prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_last_name_not_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by last_name using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_last_name_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by last_name using suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_last_name_not_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by last_name using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_last_name_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by last_name using match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_last_name_not_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by last_name using not_match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_nickname_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by nickname using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_nickname_not_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by nickname using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_nickname_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by nickname using eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_nickname_not_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by nickname using not_eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_nickname_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by nickname using prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_nickname_not_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by nickname using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_nickname_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by nickname using suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_nickname_not_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by nickname using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_nickname_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by nickname using match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_nickname_not_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by nickname using not_match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_company_name_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by company_name using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_company_name_not_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by company_name using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_company_name_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by company_name using eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_company_name_not_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by company_name using not_eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_company_name_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by company_name using prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_company_name_not_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by company_name using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_company_name_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by company_name using suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_company_name_not_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by company_name using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_company_name_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by company_name using match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_company_name_not_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by company_name using not_match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_company_eq: Annotated[Optional[StrictBool], Field(description="[Filter Person by company using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_email_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by email using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_email_not_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by email using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_email_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by email using eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_email_not_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by email using not_eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_email_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by email using prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_email_not_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by email using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_email_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by email using suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_email_not_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by email using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_email_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by email using match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_email_not_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by email using not_match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_address_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by address using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_address_not_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by address using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_address_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by address using eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_address_not_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by address using not_eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_address_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by address using prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_address_not_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by address using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_address_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by address using suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_address_not_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by address using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_address_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by address using match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_address_not_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by address using not_match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_zip_code_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by zip_code using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_zip_code_not_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by zip_code using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_zip_code_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by zip_code using eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_zip_code_not_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by zip_code using not_eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_zip_code_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by zip_code using prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_zip_code_not_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by zip_code using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_zip_code_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by zip_code using suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_zip_code_not_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by zip_code using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_zip_code_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by zip_code using match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_zip_code_not_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by zip_code using not_match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_town_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by town using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_town_not_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by town using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_town_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by town using eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_town_not_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by town using not_eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_town_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by town using prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_town_not_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by town using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_town_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by town using suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_town_not_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by town using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_town_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by town using match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_town_not_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by town using not_match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_country_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by country using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_country_not_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by country using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_country_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by country using eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_country_not_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by country using not_eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_country_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by country using prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_country_not_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by country using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_country_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by country using suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_country_not_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by country using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_country_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by country using match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_country_not_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by country using not_match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_primary_group_id_eq: Annotated[Optional[List[StrictInt]], Field(description="[Filter Person by primary_group_id using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_primary_group_id_not_eq: Annotated[Optional[List[StrictInt]], Field(description="[Filter Person by primary_group_id using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_primary_group_id_gt: Annotated[Optional[List[StrictInt]], Field(description="[Filter Person by primary_group_id using gt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_primary_group_id_gte: Annotated[Optional[List[StrictInt]], Field(description="[Filter Person by primary_group_id using gte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_primary_group_id_lt: Annotated[Optional[List[StrictInt]], Field(description="[Filter Person by primary_group_id using lt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_primary_group_id_lte: Annotated[Optional[List[StrictInt]], Field(description="[Filter Person by primary_group_id using lte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_gender_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by gender using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_gender_not_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by gender using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_gender_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by gender using eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_gender_not_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by gender using not_eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_gender_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by gender using prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_gender_not_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by gender using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_gender_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by gender using suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_gender_not_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by gender using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_gender_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by gender using match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_gender_not_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by gender using not_match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_birthday_eq: Annotated[Optional[List[date]], Field(description="[Filter Person by birthday using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_birthday_not_eq: Annotated[Optional[List[date]], Field(description="[Filter Person by birthday using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_birthday_gt: Annotated[Optional[List[date]], Field(description="[Filter Person by birthday using gt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_birthday_gte: Annotated[Optional[List[date]], Field(description="[Filter Person by birthday using gte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_birthday_lt: Annotated[Optional[List[date]], Field(description="[Filter Person by birthday using lt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_birthday_lte: Annotated[Optional[List[date]], Field(description="[Filter Person by birthday using lte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_language_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by language using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_language_not_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by language using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_language_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by language using eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_language_not_eql: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by language using not_eql operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_language_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by language using prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_language_not_prefix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by language using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_language_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by language using suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_language_not_suffix: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by language using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_language_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by language using match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_language_not_match: Annotated[Optional[List[StrictStr]], Field(description="[Filter Person by language using not_match operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_updated_at_eq: Annotated[Optional[List[datetime]], Field(description="[Filter Person by updated_at using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_updated_at_not_eq: Annotated[Optional[List[datetime]], Field(description="[Filter Person by updated_at using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_updated_at_gt: Annotated[Optional[List[datetime]], Field(description="[Filter Person by updated_at using gt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_updated_at_gte: Annotated[Optional[List[datetime]], Field(description="[Filter Person by updated_at using gte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_updated_at_lt: Annotated[Optional[List[datetime]], Field(description="[Filter Person by updated_at using lt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_updated_at_lte: Annotated[Optional[List[datetime]], Field(description="[Filter Person by updated_at using lte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        fields_groups: Annotated[Optional[List[GroupsReadableAttribute]], Field(description="[Include only specified fields of Group in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)")] = None,
        fields_roles: Annotated[Optional[List[RolesReadableAttribute]], Field(description="[Include only specified fields of Role in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)")] = None,
        fields_phone_numbers: Annotated[Optional[List[PhoneNumbersReadableAttribute]], Field(description="[Include only specified fields of Phone number in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)")] = None,
        fields_social_accounts: Annotated[Optional[List[SocialAccountsReadableAttribute]], Field(description="[Include only specified fields of Social account in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)")] = None,
        fields_additional_emails: Annotated[Optional[List[AdditionalEmailsReadableAttribute]], Field(description="[Include only specified fields of Additional email in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
        _additional_query_params: Optional[Dict[StrictStr, Any]] = None,
    ) -> RESTResponseType:
        """Update Person


        :param id: ID of the resource (required)
        :type id: str
        :param people_request: (required)
        :type people_request: PeopleRequest
        :param include: [Include related resources](https://jsonapi.org/format/#fetching-includes)
        :type include: List[str]
        :param sort: [Sort people according to one or more criteria](https://jsonapi.org/format/#fetching-sorting)  You should not include both ascending `id` and descending `-id` fields the same time  
        :type sort: List[str]
        :param fields_people: [Include only specified fields of Person in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)
        :type fields_people: List[PeopleReadableAttribute]
        :param filter_id_eq: [Filter Person by id using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_eq: List[int]
        :param filter_id_not_eq: [Filter Person by id using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_not_eq: List[int]
        :param filter_id_gt: [Filter Person by id using gt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_gt: List[int]
        :param filter_id_gte: [Filter Person by id using gte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_gte: List[int]
        :param filter_id_lt: [Filter Person by id using lt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_lt: List[int]
        :param filter_id_lte: [Filter Person by id using lte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_lte: List[int]
        :param filter_first_name_eq: [Filter Person by first_name using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_first_name_eq: List[str]
        :param filter_first_name_not_eq: [Filter Person by first_name using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_first_name_not_eq: List[str]
        :param filter_first_name_eql: [Filter Person by first_name using eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_first_name_eql: List[str]
        :param filter_first_name_not_eql: [Filter Person by first_name using not_eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_first_name_not_eql: List[str]
        :param filter_first_name_prefix: [Filter Person by first_name using prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_first_name_prefix: List[str]
        :param filter_first_name_not_prefix: [Filter Person by first_name using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_first_name_not_prefix: List[str]
        :param filter_first_name_suffix: [Filter Person by first_name using suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_first_name_suffix: List[str]
        :param filter_first_name_not_suffix: [Filter Person by first_name using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_first_name_not_suffix: List[str]
        :param filter_first_name_match: [Filter Person by first_name using match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_first_name_match: List[str]
        :param filter_first_name_not_match: [Filter Person by first_name using not_match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_first_name_not_match: List[str]
        :param filter_last_name_eq: [Filter Person by last_name using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_last_name_eq: List[str]
        :param filter_last_name_not_eq: [Filter Person by last_name using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_last_name_not_eq: List[str]
        :param filter_last_name_eql: [Filter Person by last_name using eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_last_name_eql: List[str]
        :param filter_last_name_not_eql: [Filter Person by last_name using not_eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_last_name_not_eql: List[str]
        :param filter_last_name_prefix: [Filter Person by last_name using prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_last_name_prefix: List[str]
        :param filter_last_name_not_prefix: [Filter Person by last_name using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_last_name_not_prefix: List[str]
        :param filter_last_name_suffix: [Filter Person by last_name using suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_last_name_suffix: List[str]
        :param filter_last_name_not_suffix: [Filter Person by last_name using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_last_name_not_suffix: List[str]
        :param filter_last_name_match: [Filter Person by last_name using match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_last_name_match: List[str]
        :param filter_last_name_not_match: [Filter Person by last_name using not_match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_last_name_not_match: List[str]
        :param filter_nickname_eq: [Filter Person by nickname using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_nickname_eq: List[str]
        :param filter_nickname_not_eq: [Filter Person by nickname using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_nickname_not_eq: List[str]
        :param filter_nickname_eql: [Filter Person by nickname using eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_nickname_eql: List[str]
        :param filter_nickname_not_eql: [Filter Person by nickname using not_eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_nickname_not_eql: List[str]
        :param filter_nickname_prefix: [Filter Person by nickname using prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_nickname_prefix: List[str]
        :param filter_nickname_not_prefix: [Filter Person by nickname using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_nickname_not_prefix: List[str]
        :param filter_nickname_suffix: [Filter Person by nickname using suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_nickname_suffix: List[str]
        :param filter_nickname_not_suffix: [Filter Person by nickname using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_nickname_not_suffix: List[str]
        :param filter_nickname_match: [Filter Person by nickname using match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_nickname_match: List[str]
        :param filter_nickname_not_match: [Filter Person by nickname using not_match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_nickname_not_match: List[str]
        :param filter_company_name_eq: [Filter Person by company_name using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_company_name_eq: List[str]
        :param filter_company_name_not_eq: [Filter Person by company_name using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_company_name_not_eq: List[str]
        :param filter_company_name_eql: [Filter Person by company_name using eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_company_name_eql: List[str]
        :param filter_company_name_not_eql: [Filter Person by company_name using not_eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_company_name_not_eql: List[str]
        :param filter_company_name_prefix: [Filter Person by company_name using prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_company_name_prefix: List[str]
        :param filter_company_name_not_prefix: [Filter Person by company_name using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_company_name_not_prefix: List[str]
        :param filter_company_name_suffix: [Filter Person by company_name using suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_company_name_suffix: List[str]
        :param filter_company_name_not_suffix: [Filter Person by company_name using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_company_name_not_suffix: List[str]
        :param filter_company_name_match: [Filter Person by company_name using match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_company_name_match: List[str]
        :param filter_company_name_not_match: [Filter Person by company_name using not_match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_company_name_not_match: List[str]
        :param filter_company_eq: [Filter Person by company using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_company_eq: bool
        :param filter_email_eq: [Filter Person by email using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_email_eq: List[str]
        :param filter_email_not_eq: [Filter Person by email using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_email_not_eq: List[str]
        :param filter_email_eql: [Filter Person by email using eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_email_eql: List[str]
        :param filter_email_not_eql: [Filter Person by email using not_eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_email_not_eql: List[str]
        :param filter_email_prefix: [Filter Person by email using prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_email_prefix: List[str]
        :param filter_email_not_prefix: [Filter Person by email using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_email_not_prefix: List[str]
        :param filter_email_suffix: [Filter Person by email using suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_email_suffix: List[str]
        :param filter_email_not_suffix: [Filter Person by email using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_email_not_suffix: List[str]
        :param filter_email_match: [Filter Person by email using match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_email_match: List[str]
        :param filter_email_not_match: [Filter Person by email using not_match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_email_not_match: List[str]
        :param filter_address_eq: [Filter Person by address using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_address_eq: List[str]
        :param filter_address_not_eq: [Filter Person by address using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_address_not_eq: List[str]
        :param filter_address_eql: [Filter Person by address using eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_address_eql: List[str]
        :param filter_address_not_eql: [Filter Person by address using not_eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_address_not_eql: List[str]
        :param filter_address_prefix: [Filter Person by address using prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_address_prefix: List[str]
        :param filter_address_not_prefix: [Filter Person by address using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_address_not_prefix: List[str]
        :param filter_address_suffix: [Filter Person by address using suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_address_suffix: List[str]
        :param filter_address_not_suffix: [Filter Person by address using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_address_not_suffix: List[str]
        :param filter_address_match: [Filter Person by address using match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_address_match: List[str]
        :param filter_address_not_match: [Filter Person by address using not_match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_address_not_match: List[str]
        :param filter_zip_code_eq: [Filter Person by zip_code using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_zip_code_eq: List[str]
        :param filter_zip_code_not_eq: [Filter Person by zip_code using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_zip_code_not_eq: List[str]
        :param filter_zip_code_eql: [Filter Person by zip_code using eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_zip_code_eql: List[str]
        :param filter_zip_code_not_eql: [Filter Person by zip_code using not_eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_zip_code_not_eql: List[str]
        :param filter_zip_code_prefix: [Filter Person by zip_code using prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_zip_code_prefix: List[str]
        :param filter_zip_code_not_prefix: [Filter Person by zip_code using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_zip_code_not_prefix: List[str]
        :param filter_zip_code_suffix: [Filter Person by zip_code using suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_zip_code_suffix: List[str]
        :param filter_zip_code_not_suffix: [Filter Person by zip_code using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_zip_code_not_suffix: List[str]
        :param filter_zip_code_match: [Filter Person by zip_code using match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_zip_code_match: List[str]
        :param filter_zip_code_not_match: [Filter Person by zip_code using not_match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_zip_code_not_match: List[str]
        :param filter_town_eq: [Filter Person by town using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_town_eq: List[str]
        :param filter_town_not_eq: [Filter Person by town using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_town_not_eq: List[str]
        :param filter_town_eql: [Filter Person by town using eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_town_eql: List[str]
        :param filter_town_not_eql: [Filter Person by town using not_eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_town_not_eql: List[str]
        :param filter_town_prefix: [Filter Person by town using prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_town_prefix: List[str]
        :param filter_town_not_prefix: [Filter Person by town using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_town_not_prefix: List[str]
        :param filter_town_suffix: [Filter Person by town using suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_town_suffix: List[str]
        :param filter_town_not_suffix: [Filter Person by town using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_town_not_suffix: List[str]
        :param filter_town_match: [Filter Person by town using match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_town_match: List[str]
        :param filter_town_not_match: [Filter Person by town using not_match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_town_not_match: List[str]
        :param filter_country_eq: [Filter Person by country using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_country_eq: List[str]
        :param filter_country_not_eq: [Filter Person by country using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_country_not_eq: List[str]
        :param filter_country_eql: [Filter Person by country using eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_country_eql: List[str]
        :param filter_country_not_eql: [Filter Person by country using not_eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_country_not_eql: List[str]
        :param filter_country_prefix: [Filter Person by country using prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_country_prefix: List[str]
        :param filter_country_not_prefix: [Filter Person by country using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_country_not_prefix: List[str]
        :param filter_country_suffix: [Filter Person by country using suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_country_suffix: List[str]
        :param filter_country_not_suffix: [Filter Person by country using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_country_not_suffix: List[str]
        :param filter_country_match: [Filter Person by country using match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_country_match: List[str]
        :param filter_country_not_match: [Filter Person by country using not_match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_country_not_match: List[str]
        :param filter_primary_group_id_eq: [Filter Person by primary_group_id using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_primary_group_id_eq: List[int]
        :param filter_primary_group_id_not_eq: [Filter Person by primary_group_id using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_primary_group_id_not_eq: List[int]
        :param filter_primary_group_id_gt: [Filter Person by primary_group_id using gt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_primary_group_id_gt: List[int]
        :param filter_primary_group_id_gte: [Filter Person by primary_group_id using gte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_primary_group_id_gte: List[int]
        :param filter_primary_group_id_lt: [Filter Person by primary_group_id using lt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_primary_group_id_lt: List[int]
        :param filter_primary_group_id_lte: [Filter Person by primary_group_id using lte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_primary_group_id_lte: List[int]
        :param filter_gender_eq: [Filter Person by gender using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_gender_eq: List[str]
        :param filter_gender_not_eq: [Filter Person by gender using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_gender_not_eq: List[str]
        :param filter_gender_eql: [Filter Person by gender using eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_gender_eql: List[str]
        :param filter_gender_not_eql: [Filter Person by gender using not_eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_gender_not_eql: List[str]
        :param filter_gender_prefix: [Filter Person by gender using prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_gender_prefix: List[str]
        :param filter_gender_not_prefix: [Filter Person by gender using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_gender_not_prefix: List[str]
        :param filter_gender_suffix: [Filter Person by gender using suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_gender_suffix: List[str]
        :param filter_gender_not_suffix: [Filter Person by gender using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_gender_not_suffix: List[str]
        :param filter_gender_match: [Filter Person by gender using match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_gender_match: List[str]
        :param filter_gender_not_match: [Filter Person by gender using not_match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_gender_not_match: List[str]
        :param filter_birthday_eq: [Filter Person by birthday using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_birthday_eq: List[date]
        :param filter_birthday_not_eq: [Filter Person by birthday using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_birthday_not_eq: List[date]
        :param filter_birthday_gt: [Filter Person by birthday using gt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_birthday_gt: List[date]
        :param filter_birthday_gte: [Filter Person by birthday using gte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_birthday_gte: List[date]
        :param filter_birthday_lt: [Filter Person by birthday using lt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_birthday_lt: List[date]
        :param filter_birthday_lte: [Filter Person by birthday using lte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_birthday_lte: List[date]
        :param filter_language_eq: [Filter Person by language using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_language_eq: List[str]
        :param filter_language_not_eq: [Filter Person by language using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_language_not_eq: List[str]
        :param filter_language_eql: [Filter Person by language using eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_language_eql: List[str]
        :param filter_language_not_eql: [Filter Person by language using not_eql operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_language_not_eql: List[str]
        :param filter_language_prefix: [Filter Person by language using prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_language_prefix: List[str]
        :param filter_language_not_prefix: [Filter Person by language using not_prefix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_language_not_prefix: List[str]
        :param filter_language_suffix: [Filter Person by language using suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_language_suffix: List[str]
        :param filter_language_not_suffix: [Filter Person by language using not_suffix operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_language_not_suffix: List[str]
        :param filter_language_match: [Filter Person by language using match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_language_match: List[str]
        :param filter_language_not_match: [Filter Person by language using not_match operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_language_not_match: List[str]
        :param filter_updated_at_eq: [Filter Person by updated_at using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_updated_at_eq: List[datetime]
        :param filter_updated_at_not_eq: [Filter Person by updated_at using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_updated_at_not_eq: List[datetime]
        :param filter_updated_at_gt: [Filter Person by updated_at using gt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_updated_at_gt: List[datetime]
        :param filter_updated_at_gte: [Filter Person by updated_at using gte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_updated_at_gte: List[datetime]
        :param filter_updated_at_lt: [Filter Person by updated_at using lt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_updated_at_lt: List[datetime]
        :param filter_updated_at_lte: [Filter Person by updated_at using lte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_updated_at_lte: List[datetime]
        :param fields_groups: [Include only specified fields of Group in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)
        :type fields_groups: List[GroupsReadableAttribute]
        :param fields_roles: [Include only specified fields of Role in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)
        :type fields_roles: List[RolesReadableAttribute]
        :param fields_phone_numbers: [Include only specified fields of Phone number in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)
        :type fields_phone_numbers: List[PhoneNumbersReadableAttribute]
        :param fields_social_accounts: [Include only specified fields of Social account in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)
        :type fields_social_accounts: List[SocialAccountsReadableAttribute]
        :param fields_additional_emails: [Include only specified fields of Additional email in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)
        :type fields_additional_emails: List[AdditionalEmailsReadableAttribute]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_person_serialize(
            id=id,
            people_request=people_request,
            include=include,
            sort=sort,
            fields_people=fields_people,
            filter_id_eq=filter_id_eq,
            filter_id_not_eq=filter_id_not_eq,
            filter_id_gt=filter_id_gt,
            filter_id_gte=filter_id_gte,
            filter_id_lt=filter_id_lt,
            filter_id_lte=filter_id_lte,
            filter_first_name_eq=filter_first_name_eq,
            filter_first_name_not_eq=filter_first_name_not_eq,
            filter_first_name_eql=filter_first_name_eql,
            filter_first_name_not_eql=filter_first_name_not_eql,
            filter_first_name_prefix=filter_first_name_prefix,
            filter_first_name_not_prefix=filter_first_name_not_prefix,
            filter_first_name_suffix=filter_first_name_suffix,
            filter_first_name_not_suffix=filter_first_name_not_suffix,
            filter_first_name_match=filter_first_name_match,
            filter_first_name_not_match=filter_first_name_not_match,
            filter_last_name_eq=filter_last_name_eq,
            filter_last_name_not_eq=filter_last_name_not_eq,
            filter_last_name_eql=filter_last_name_eql,
            filter_last_name_not_eql=filter_last_name_not_eql,
            filter_last_name_prefix=filter_last_name_prefix,
            filter_last_name_not_prefix=filter_last_name_not_prefix,
            filter_last_name_suffix=filter_last_name_suffix,
            filter_last_name_not_suffix=filter_last_name_not_suffix,
            filter_last_name_match=filter_last_name_match,
            filter_last_name_not_match=filter_last_name_not_match,
            filter_nickname_eq=filter_nickname_eq,
            filter_nickname_not_eq=filter_nickname_not_eq,
            filter_nickname_eql=filter_nickname_eql,
            filter_nickname_not_eql=filter_nickname_not_eql,
            filter_nickname_prefix=filter_nickname_prefix,
            filter_nickname_not_prefix=filter_nickname_not_prefix,
            filter_nickname_suffix=filter_nickname_suffix,
            filter_nickname_not_suffix=filter_nickname_not_suffix,
            filter_nickname_match=filter_nickname_match,
            filter_nickname_not_match=filter_nickname_not_match,
            filter_company_name_eq=filter_company_name_eq,
            filter_company_name_not_eq=filter_company_name_not_eq,
            filter_company_name_eql=filter_company_name_eql,
            filter_company_name_not_eql=filter_company_name_not_eql,
            filter_company_name_prefix=filter_company_name_prefix,
            filter_company_name_not_prefix=filter_company_name_not_prefix,
            filter_company_name_suffix=filter_company_name_suffix,
            filter_company_name_not_suffix=filter_company_name_not_suffix,
            filter_company_name_match=filter_company_name_match,
            filter_company_name_not_match=filter_company_name_not_match,
            filter_company_eq=filter_company_eq,
            filter_email_eq=filter_email_eq,
            filter_email_not_eq=filter_email_not_eq,
            filter_email_eql=filter_email_eql,
            filter_email_not_eql=filter_email_not_eql,
            filter_email_prefix=filter_email_prefix,
            filter_email_not_prefix=filter_email_not_prefix,
            filter_email_suffix=filter_email_suffix,
            filter_email_not_suffix=filter_email_not_suffix,
            filter_email_match=filter_email_match,
            filter_email_not_match=filter_email_not_match,
            filter_address_eq=filter_address_eq,
            filter_address_not_eq=filter_address_not_eq,
            filter_address_eql=filter_address_eql,
            filter_address_not_eql=filter_address_not_eql,
            filter_address_prefix=filter_address_prefix,
            filter_address_not_prefix=filter_address_not_prefix,
            filter_address_suffix=filter_address_suffix,
            filter_address_not_suffix=filter_address_not_suffix,
            filter_address_match=filter_address_match,
            filter_address_not_match=filter_address_not_match,
            filter_zip_code_eq=filter_zip_code_eq,
            filter_zip_code_not_eq=filter_zip_code_not_eq,
            filter_zip_code_eql=filter_zip_code_eql,
            filter_zip_code_not_eql=filter_zip_code_not_eql,
            filter_zip_code_prefix=filter_zip_code_prefix,
            filter_zip_code_not_prefix=filter_zip_code_not_prefix,
            filter_zip_code_suffix=filter_zip_code_suffix,
            filter_zip_code_not_suffix=filter_zip_code_not_suffix,
            filter_zip_code_match=filter_zip_code_match,
            filter_zip_code_not_match=filter_zip_code_not_match,
            filter_town_eq=filter_town_eq,
            filter_town_not_eq=filter_town_not_eq,
            filter_town_eql=filter_town_eql,
            filter_town_not_eql=filter_town_not_eql,
            filter_town_prefix=filter_town_prefix,
            filter_town_not_prefix=filter_town_not_prefix,
            filter_town_suffix=filter_town_suffix,
            filter_town_not_suffix=filter_town_not_suffix,
            filter_town_match=filter_town_match,
            filter_town_not_match=filter_town_not_match,
            filter_country_eq=filter_country_eq,
            filter_country_not_eq=filter_country_not_eq,
            filter_country_eql=filter_country_eql,
            filter_country_not_eql=filter_country_not_eql,
            filter_country_prefix=filter_country_prefix,
            filter_country_not_prefix=filter_country_not_prefix,
            filter_country_suffix=filter_country_suffix,
            filter_country_not_suffix=filter_country_not_suffix,
            filter_country_match=filter_country_match,
            filter_country_not_match=filter_country_not_match,
            filter_primary_group_id_eq=filter_primary_group_id_eq,
            filter_primary_group_id_not_eq=filter_primary_group_id_not_eq,
            filter_primary_group_id_gt=filter_primary_group_id_gt,
            filter_primary_group_id_gte=filter_primary_group_id_gte,
            filter_primary_group_id_lt=filter_primary_group_id_lt,
            filter_primary_group_id_lte=filter_primary_group_id_lte,
            filter_gender_eq=filter_gender_eq,
            filter_gender_not_eq=filter_gender_not_eq,
            filter_gender_eql=filter_gender_eql,
            filter_gender_not_eql=filter_gender_not_eql,
            filter_gender_prefix=filter_gender_prefix,
            filter_gender_not_prefix=filter_gender_not_prefix,
            filter_gender_suffix=filter_gender_suffix,
            filter_gender_not_suffix=filter_gender_not_suffix,
            filter_gender_match=filter_gender_match,
            filter_gender_not_match=filter_gender_not_match,
            filter_birthday_eq=filter_birthday_eq,
            filter_birthday_not_eq=filter_birthday_not_eq,
            filter_birthday_gt=filter_birthday_gt,
            filter_birthday_gte=filter_birthday_gte,
            filter_birthday_lt=filter_birthday_lt,
            filter_birthday_lte=filter_birthday_lte,
            filter_language_eq=filter_language_eq,
            filter_language_not_eq=filter_language_not_eq,
            filter_language_eql=filter_language_eql,
            filter_language_not_eql=filter_language_not_eql,
            filter_language_prefix=filter_language_prefix,
            filter_language_not_prefix=filter_language_not_prefix,
            filter_language_suffix=filter_language_suffix,
            filter_language_not_suffix=filter_language_not_suffix,
            filter_language_match=filter_language_match,
            filter_language_not_match=filter_language_not_match,
            filter_updated_at_eq=filter_updated_at_eq,
            filter_updated_at_not_eq=filter_updated_at_not_eq,
            filter_updated_at_gt=filter_updated_at_gt,
            filter_updated_at_gte=filter_updated_at_gte,
            filter_updated_at_lt=filter_updated_at_lt,
            filter_updated_at_lte=filter_updated_at_lte,
            fields_groups=fields_groups,
            fields_roles=fields_roles,
            fields_phone_numbers=fields_phone_numbers,
            fields_social_accounts=fields_social_accounts,
            fields_additional_emails=fields_additional_emails,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
            _additional_query_params=_additional_query_params,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PeopleSingle",
            '202': None,
            '204': None,
            '401': "JsonapiFailure",
            '403': "JsonapiFailure",
            '404': "JsonapiFailure",
            '422': "JsonapiFailure",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_person_serialize(
        self,
        id,
        people_request,
        include,
        sort,
        fields_people,
        filter_id_eq,
        filter_id_not_eq,
        filter_id_gt,
        filter_id_gte,
        filter_id_lt,
        filter_id_lte,
        filter_first_name_eq,
        filter_first_name_not_eq,
        filter_first_name_eql,
        filter_first_name_not_eql,
        filter_first_name_prefix,
        filter_first_name_not_prefix,
        filter_first_name_suffix,
        filter_first_name_not_suffix,
        filter_first_name_match,
        filter_first_name_not_match,
        filter_last_name_eq,
        filter_last_name_not_eq,
        filter_last_name_eql,
        filter_last_name_not_eql,
        filter_last_name_prefix,
        filter_last_name_not_prefix,
        filter_last_name_suffix,
        filter_last_name_not_suffix,
        filter_last_name_match,
        filter_last_name_not_match,
        filter_nickname_eq,
        filter_nickname_not_eq,
        filter_nickname_eql,
        filter_nickname_not_eql,
        filter_nickname_prefix,
        filter_nickname_not_prefix,
        filter_nickname_suffix,
        filter_nickname_not_suffix,
        filter_nickname_match,
        filter_nickname_not_match,
        filter_company_name_eq,
        filter_company_name_not_eq,
        filter_company_name_eql,
        filter_company_name_not_eql,
        filter_company_name_prefix,
        filter_company_name_not_prefix,
        filter_company_name_suffix,
        filter_company_name_not_suffix,
        filter_company_name_match,
        filter_company_name_not_match,
        filter_company_eq,
        filter_email_eq,
        filter_email_not_eq,
        filter_email_eql,
        filter_email_not_eql,
        filter_email_prefix,
        filter_email_not_prefix,
        filter_email_suffix,
        filter_email_not_suffix,
        filter_email_match,
        filter_email_not_match,
        filter_address_eq,
        filter_address_not_eq,
        filter_address_eql,
        filter_address_not_eql,
        filter_address_prefix,
        filter_address_not_prefix,
        filter_address_suffix,
        filter_address_not_suffix,
        filter_address_match,
        filter_address_not_match,
        filter_zip_code_eq,
        filter_zip_code_not_eq,
        filter_zip_code_eql,
        filter_zip_code_not_eql,
        filter_zip_code_prefix,
        filter_zip_code_not_prefix,
        filter_zip_code_suffix,
        filter_zip_code_not_suffix,
        filter_zip_code_match,
        filter_zip_code_not_match,
        filter_town_eq,
        filter_town_not_eq,
        filter_town_eql,
        filter_town_not_eql,
        filter_town_prefix,
        filter_town_not_prefix,
        filter_town_suffix,
        filter_town_not_suffix,
        filter_town_match,
        filter_town_not_match,
        filter_country_eq,
        filter_country_not_eq,
        filter_country_eql,
        filter_country_not_eql,
        filter_country_prefix,
        filter_country_not_prefix,
        filter_country_suffix,
        filter_country_not_suffix,
        filter_country_match,
        filter_country_not_match,
        filter_primary_group_id_eq,
        filter_primary_group_id_not_eq,
        filter_primary_group_id_gt,
        filter_primary_group_id_gte,
        filter_primary_group_id_lt,
        filter_primary_group_id_lte,
        filter_gender_eq,
        filter_gender_not_eq,
        filter_gender_eql,
        filter_gender_not_eql,
        filter_gender_prefix,
        filter_gender_not_prefix,
        filter_gender_suffix,
        filter_gender_not_suffix,
        filter_gender_match,
        filter_gender_not_match,
        filter_birthday_eq,
        filter_birthday_not_eq,
        filter_birthday_gt,
        filter_birthday_gte,
        filter_birthday_lt,
        filter_birthday_lte,
        filter_language_eq,
        filter_language_not_eq,
        filter_language_eql,
        filter_language_not_eql,
        filter_language_prefix,
        filter_language_not_prefix,
        filter_language_suffix,
        filter_language_not_suffix,
        filter_language_match,
        filter_language_not_match,
        filter_updated_at_eq,
        filter_updated_at_not_eq,
        filter_updated_at_gt,
        filter_updated_at_gte,
        filter_updated_at_lt,
        filter_updated_at_lte,
        fields_groups,
        fields_roles,
        fields_phone_numbers,
        fields_social_accounts,
        fields_additional_emails,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
        _additional_query_params: Optional[Dict[StrictStr, Any]] = None,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'include': 'csv',
            'sort': 'csv',
            'fields[people]': 'csv',
            'filter[id][eq]': 'csv',
            'filter[id][not_eq]': 'csv',
            'filter[id][gt]': 'csv',
            'filter[id][gte]': 'csv',
            'filter[id][lt]': 'csv',
            'filter[id][lte]': 'csv',
            'filter[first_name][eq]': 'csv',
            'filter[first_name][not_eq]': 'csv',
            'filter[first_name][eql]': 'csv',
            'filter[first_name][not_eql]': 'csv',
            'filter[first_name][prefix]': 'csv',
            'filter[first_name][not_prefix]': 'csv',
            'filter[first_name][suffix]': 'csv',
            'filter[first_name][not_suffix]': 'csv',
            'filter[first_name][match]': 'csv',
            'filter[first_name][not_match]': 'csv',
            'filter[last_name][eq]': 'csv',
            'filter[last_name][not_eq]': 'csv',
            'filter[last_name][eql]': 'csv',
            'filter[last_name][not_eql]': 'csv',
            'filter[last_name][prefix]': 'csv',
            'filter[last_name][not_prefix]': 'csv',
            'filter[last_name][suffix]': 'csv',
            'filter[last_name][not_suffix]': 'csv',
            'filter[last_name][match]': 'csv',
            'filter[last_name][not_match]': 'csv',
            'filter[nickname][eq]': 'csv',
            'filter[nickname][not_eq]': 'csv',
            'filter[nickname][eql]': 'csv',
            'filter[nickname][not_eql]': 'csv',
            'filter[nickname][prefix]': 'csv',
            'filter[nickname][not_prefix]': 'csv',
            'filter[nickname][suffix]': 'csv',
            'filter[nickname][not_suffix]': 'csv',
            'filter[nickname][match]': 'csv',
            'filter[nickname][not_match]': 'csv',
            'filter[company_name][eq]': 'csv',
            'filter[company_name][not_eq]': 'csv',
            'filter[company_name][eql]': 'csv',
            'filter[company_name][not_eql]': 'csv',
            'filter[company_name][prefix]': 'csv',
            'filter[company_name][not_prefix]': 'csv',
            'filter[company_name][suffix]': 'csv',
            'filter[company_name][not_suffix]': 'csv',
            'filter[company_name][match]': 'csv',
            'filter[company_name][not_match]': 'csv',
            'filter[email][eq]': 'csv',
            'filter[email][not_eq]': 'csv',
            'filter[email][eql]': 'csv',
            'filter[email][not_eql]': 'csv',
            'filter[email][prefix]': 'csv',
            'filter[email][not_prefix]': 'csv',
            'filter[email][suffix]': 'csv',
            'filter[email][not_suffix]': 'csv',
            'filter[email][match]': 'csv',
            'filter[email][not_match]': 'csv',
            'filter[address][eq]': 'csv',
            'filter[address][not_eq]': 'csv',
            'filter[address][eql]': 'csv',
            'filter[address][not_eql]': 'csv',
            'filter[address][prefix]': 'csv',
            'filter[address][not_prefix]': 'csv',
            'filter[address][suffix]': 'csv',
            'filter[address][not_suffix]': 'csv',
            'filter[address][match]': 'csv',
            'filter[address][not_match]': 'csv',
            'filter[zip_code][eq]': 'csv',
            'filter[zip_code][not_eq]': 'csv',
            'filter[zip_code][eql]': 'csv',
            'filter[zip_code][not_eql]': 'csv',
            'filter[zip_code][prefix]': 'csv',
            'filter[zip_code][not_prefix]': 'csv',
            'filter[zip_code][suffix]': 'csv',
            'filter[zip_code][not_suffix]': 'csv',
            'filter[zip_code][match]': 'csv',
            'filter[zip_code][not_match]': 'csv',
            'filter[town][eq]': 'csv',
            'filter[town][not_eq]': 'csv',
            'filter[town][eql]': 'csv',
            'filter[town][not_eql]': 'csv',
            'filter[town][prefix]': 'csv',
            'filter[town][not_prefix]': 'csv',
            'filter[town][suffix]': 'csv',
            'filter[town][not_suffix]': 'csv',
            'filter[town][match]': 'csv',
            'filter[town][not_match]': 'csv',
            'filter[country][eq]': 'csv',
            'filter[country][not_eq]': 'csv',
            'filter[country][eql]': 'csv',
            'filter[country][not_eql]': 'csv',
            'filter[country][prefix]': 'csv',
            'filter[country][not_prefix]': 'csv',
            'filter[country][suffix]': 'csv',
            'filter[country][not_suffix]': 'csv',
            'filter[country][match]': 'csv',
            'filter[country][not_match]': 'csv',
            'filter[primary_group_id][eq]': 'csv',
            'filter[primary_group_id][not_eq]': 'csv',
            'filter[primary_group_id][gt]': 'csv',
            'filter[primary_group_id][gte]': 'csv',
            'filter[primary_group_id][lt]': 'csv',
            'filter[primary_group_id][lte]': 'csv',
            'filter[gender][eq]': 'csv',
            'filter[gender][not_eq]': 'csv',
            'filter[gender][eql]': 'csv',
            'filter[gender][not_eql]': 'csv',
            'filter[gender][prefix]': 'csv',
            'filter[gender][not_prefix]': 'csv',
            'filter[gender][suffix]': 'csv',
            'filter[gender][not_suffix]': 'csv',
            'filter[gender][match]': 'csv',
            'filter[gender][not_match]': 'csv',
            'filter[birthday][eq]': 'csv',
            'filter[birthday][not_eq]': 'csv',
            'filter[birthday][gt]': 'csv',
            'filter[birthday][gte]': 'csv',
            'filter[birthday][lt]': 'csv',
            'filter[birthday][lte]': 'csv',
            'filter[language][eq]': 'csv',
            'filter[language][not_eq]': 'csv',
            'filter[language][eql]': 'csv',
            'filter[language][not_eql]': 'csv',
            'filter[language][prefix]': 'csv',
            'filter[language][not_prefix]': 'csv',
            'filter[language][suffix]': 'csv',
            'filter[language][not_suffix]': 'csv',
            'filter[language][match]': 'csv',
            'filter[language][not_match]': 'csv',
            'filter[updated_at][eq]': 'csv',
            'filter[updated_at][not_eq]': 'csv',
            'filter[updated_at][gt]': 'csv',
            'filter[updated_at][gte]': 'csv',
            'filter[updated_at][lt]': 'csv',
            'filter[updated_at][lte]': 'csv',
            'fields[groups]': 'csv',
            'fields[roles]': 'csv',
            'fields[phone_numbers]': 'csv',
            'fields[social_accounts]': 'csv',
            'fields[additional_emails]': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters

        if _additional_query_params is not None:
            _query_params.extend((key, value) for key, value in _additional_query_params.items())

        if include is not None:
            
            _query_params.append(('include', include))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if fields_people is not None:
            
            _query_params.append(('fields[people]', fields_people))
            
        if filter_id_eq is not None:
            
            _query_params.append(('filter[id][eq]', filter_id_eq))
            
        if filter_id_not_eq is not None:
            
            _query_params.append(('filter[id][not_eq]', filter_id_not_eq))
            
        if filter_id_gt is not None:
            
            _query_params.append(('filter[id][gt]', filter_id_gt))
            
        if filter_id_gte is not None:
            
            _query_params.append(('filter[id][gte]', filter_id_gte))
            
        if filter_id_lt is not None:
            
            _query_params.append(('filter[id][lt]', filter_id_lt))
            
        if filter_id_lte is not None:
            
            _query_params.append(('filter[id][lte]', filter_id_lte))
            
        if filter_first_name_eq is not None:
            
            _query_params.append(('filter[first_name][eq]', filter_first_name_eq))
            
        if filter_first_name_not_eq is not None:
            
            _query_params.append(('filter[first_name][not_eq]', filter_first_name_not_eq))
            
        if filter_first_name_eql is not None:
            
            _query_params.append(('filter[first_name][eql]', filter_first_name_eql))
            
        if filter_first_name_not_eql is not None:
            
            _query_params.append(('filter[first_name][not_eql]', filter_first_name_not_eql))
            
        if filter_first_name_prefix is not None:
            
            _query_params.append(('filter[first_name][prefix]', filter_first_name_prefix))
            
        if filter_first_name_not_prefix is not None:
            
            _query_params.append(('filter[first_name][not_prefix]', filter_first_name_not_prefix))
            
        if filter_first_name_suffix is not None:
            
            _query_params.append(('filter[first_name][suffix]', filter_first_name_suffix))
            
        if filter_first_name_not_suffix is not None:
            
            _query_params.append(('filter[first_name][not_suffix]', filter_first_name_not_suffix))
            
        if filter_first_name_match is not None:
            
            _query_params.append(('filter[first_name][match]', filter_first_name_match))
            
        if filter_first_name_not_match is not None:
            
            _query_params.append(('filter[first_name][not_match]', filter_first_name_not_match))
            
        if filter_last_name_eq is not None:
            
            _query_params.append(('filter[last_name][eq]', filter_last_name_eq))
            
        if filter_last_name_not_eq is not None:
            
            _query_params.append(('filter[last_name][not_eq]', filter_last_name_not_eq))
            
        if filter_last_name_eql is not None:
            
            _query_params.append(('filter[last_name][eql]', filter_last_name_eql))
            
        if filter_last_name_not_eql is not None:
            
            _query_params.append(('filter[last_name][not_eql]', filter_last_name_not_eql))
            
        if filter_last_name_prefix is not None:
            
            _query_params.append(('filter[last_name][prefix]', filter_last_name_prefix))
            
        if filter_last_name_not_prefix is not None:
            
            _query_params.append(('filter[last_name][not_prefix]', filter_last_name_not_prefix))
            
        if filter_last_name_suffix is not None:
            
            _query_params.append(('filter[last_name][suffix]', filter_last_name_suffix))
            
        if filter_last_name_not_suffix is not None:
            
            _query_params.append(('filter[last_name][not_suffix]', filter_last_name_not_suffix))
            
        if filter_last_name_match is not None:
            
            _query_params.append(('filter[last_name][match]', filter_last_name_match))
            
        if filter_last_name_not_match is not None:
            
            _query_params.append(('filter[last_name][not_match]', filter_last_name_not_match))
            
        if filter_nickname_eq is not None:
            
            _query_params.append(('filter[nickname][eq]', filter_nickname_eq))
            
        if filter_nickname_not_eq is not None:
            
            _query_params.append(('filter[nickname][not_eq]', filter_nickname_not_eq))
            
        if filter_nickname_eql is not None:
            
            _query_params.append(('filter[nickname][eql]', filter_nickname_eql))
            
        if filter_nickname_not_eql is not None:
            
            _query_params.append(('filter[nickname][not_eql]', filter_nickname_not_eql))
            
        if filter_nickname_prefix is not None:
            
            _query_params.append(('filter[nickname][prefix]', filter_nickname_prefix))
            
        if filter_nickname_not_prefix is not None:
            
            _query_params.append(('filter[nickname][not_prefix]', filter_nickname_not_prefix))
            
        if filter_nickname_suffix is not None:
            
            _query_params.append(('filter[nickname][suffix]', filter_nickname_suffix))
            
        if filter_nickname_not_suffix is not None:
            
            _query_params.append(('filter[nickname][not_suffix]', filter_nickname_not_suffix))
            
        if filter_nickname_match is not None:
            
            _query_params.append(('filter[nickname][match]', filter_nickname_match))
            
        if filter_nickname_not_match is not None:
            
            _query_params.append(('filter[nickname][not_match]', filter_nickname_not_match))
            
        if filter_company_name_eq is not None:
            
            _query_params.append(('filter[company_name][eq]', filter_company_name_eq))
            
        if filter_company_name_not_eq is not None:
            
            _query_params.append(('filter[company_name][not_eq]', filter_company_name_not_eq))
            
        if filter_company_name_eql is not None:
            
            _query_params.append(('filter[company_name][eql]', filter_company_name_eql))
            
        if filter_company_name_not_eql is not None:
            
            _query_params.append(('filter[company_name][not_eql]', filter_company_name_not_eql))
            
        if filter_company_name_prefix is not None:
            
            _query_params.append(('filter[company_name][prefix]', filter_company_name_prefix))
            
        if filter_company_name_not_prefix is not None:
            
            _query_params.append(('filter[company_name][not_prefix]', filter_company_name_not_prefix))
            
        if filter_company_name_suffix is not None:
            
            _query_params.append(('filter[company_name][suffix]', filter_company_name_suffix))
            
        if filter_company_name_not_suffix is not None:
            
            _query_params.append(('filter[company_name][not_suffix]', filter_company_name_not_suffix))
            
        if filter_company_name_match is not None:
            
            _query_params.append(('filter[company_name][match]', filter_company_name_match))
            
        if filter_company_name_not_match is not None:
            
            _query_params.append(('filter[company_name][not_match]', filter_company_name_not_match))
            
        if filter_company_eq is not None:
            
            _query_params.append(('filter[company][eq]', filter_company_eq))
            
        if filter_email_eq is not None:
            
            _query_params.append(('filter[email][eq]', filter_email_eq))
            
        if filter_email_not_eq is not None:
            
            _query_params.append(('filter[email][not_eq]', filter_email_not_eq))
            
        if filter_email_eql is not None:
            
            _query_params.append(('filter[email][eql]', filter_email_eql))
            
        if filter_email_not_eql is not None:
            
            _query_params.append(('filter[email][not_eql]', filter_email_not_eql))
            
        if filter_email_prefix is not None:
            
            _query_params.append(('filter[email][prefix]', filter_email_prefix))
            
        if filter_email_not_prefix is not None:
            
            _query_params.append(('filter[email][not_prefix]', filter_email_not_prefix))
            
        if filter_email_suffix is not None:
            
            _query_params.append(('filter[email][suffix]', filter_email_suffix))
            
        if filter_email_not_suffix is not None:
            
            _query_params.append(('filter[email][not_suffix]', filter_email_not_suffix))
            
        if filter_email_match is not None:
            
            _query_params.append(('filter[email][match]', filter_email_match))
            
        if filter_email_not_match is not None:
            
            _query_params.append(('filter[email][not_match]', filter_email_not_match))
            
        if filter_address_eq is not None:
            
            _query_params.append(('filter[address][eq]', filter_address_eq))
            
        if filter_address_not_eq is not None:
            
            _query_params.append(('filter[address][not_eq]', filter_address_not_eq))
            
        if filter_address_eql is not None:
            
            _query_params.append(('filter[address][eql]', filter_address_eql))
            
        if filter_address_not_eql is not None:
            
            _query_params.append(('filter[address][not_eql]', filter_address_not_eql))
            
        if filter_address_prefix is not None:
            
            _query_params.append(('filter[address][prefix]', filter_address_prefix))
            
        if filter_address_not_prefix is not None:
            
            _query_params.append(('filter[address][not_prefix]', filter_address_not_prefix))
            
        if filter_address_suffix is not None:
            
            _query_params.append(('filter[address][suffix]', filter_address_suffix))
            
        if filter_address_not_suffix is not None:
            
            _query_params.append(('filter[address][not_suffix]', filter_address_not_suffix))
            
        if filter_address_match is not None:
            
            _query_params.append(('filter[address][match]', filter_address_match))
            
        if filter_address_not_match is not None:
            
            _query_params.append(('filter[address][not_match]', filter_address_not_match))
            
        if filter_zip_code_eq is not None:
            
            _query_params.append(('filter[zip_code][eq]', filter_zip_code_eq))
            
        if filter_zip_code_not_eq is not None:
            
            _query_params.append(('filter[zip_code][not_eq]', filter_zip_code_not_eq))
            
        if filter_zip_code_eql is not None:
            
            _query_params.append(('filter[zip_code][eql]', filter_zip_code_eql))
            
        if filter_zip_code_not_eql is not None:
            
            _query_params.append(('filter[zip_code][not_eql]', filter_zip_code_not_eql))
            
        if filter_zip_code_prefix is not None:
            
            _query_params.append(('filter[zip_code][prefix]', filter_zip_code_prefix))
            
        if filter_zip_code_not_prefix is not None:
            
            _query_params.append(('filter[zip_code][not_prefix]', filter_zip_code_not_prefix))
            
        if filter_zip_code_suffix is not None:
            
            _query_params.append(('filter[zip_code][suffix]', filter_zip_code_suffix))
            
        if filter_zip_code_not_suffix is not None:
            
            _query_params.append(('filter[zip_code][not_suffix]', filter_zip_code_not_suffix))
            
        if filter_zip_code_match is not None:
            
            _query_params.append(('filter[zip_code][match]', filter_zip_code_match))
            
        if filter_zip_code_not_match is not None:
            
            _query_params.append(('filter[zip_code][not_match]', filter_zip_code_not_match))
            
        if filter_town_eq is not None:
            
            _query_params.append(('filter[town][eq]', filter_town_eq))
            
        if filter_town_not_eq is not None:
            
            _query_params.append(('filter[town][not_eq]', filter_town_not_eq))
            
        if filter_town_eql is not None:
            
            _query_params.append(('filter[town][eql]', filter_town_eql))
            
        if filter_town_not_eql is not None:
            
            _query_params.append(('filter[town][not_eql]', filter_town_not_eql))
            
        if filter_town_prefix is not None:
            
            _query_params.append(('filter[town][prefix]', filter_town_prefix))
            
        if filter_town_not_prefix is not None:
            
            _query_params.append(('filter[town][not_prefix]', filter_town_not_prefix))
            
        if filter_town_suffix is not None:
            
            _query_params.append(('filter[town][suffix]', filter_town_suffix))
            
        if filter_town_not_suffix is not None:
            
            _query_params.append(('filter[town][not_suffix]', filter_town_not_suffix))
            
        if filter_town_match is not None:
            
            _query_params.append(('filter[town][match]', filter_town_match))
            
        if filter_town_not_match is not None:
            
            _query_params.append(('filter[town][not_match]', filter_town_not_match))
            
        if filter_country_eq is not None:
            
            _query_params.append(('filter[country][eq]', filter_country_eq))
            
        if filter_country_not_eq is not None:
            
            _query_params.append(('filter[country][not_eq]', filter_country_not_eq))
            
        if filter_country_eql is not None:
            
            _query_params.append(('filter[country][eql]', filter_country_eql))
            
        if filter_country_not_eql is not None:
            
            _query_params.append(('filter[country][not_eql]', filter_country_not_eql))
            
        if filter_country_prefix is not None:
            
            _query_params.append(('filter[country][prefix]', filter_country_prefix))
            
        if filter_country_not_prefix is not None:
            
            _query_params.append(('filter[country][not_prefix]', filter_country_not_prefix))
            
        if filter_country_suffix is not None:
            
            _query_params.append(('filter[country][suffix]', filter_country_suffix))
            
        if filter_country_not_suffix is not None:
            
            _query_params.append(('filter[country][not_suffix]', filter_country_not_suffix))
            
        if filter_country_match is not None:
            
            _query_params.append(('filter[country][match]', filter_country_match))
            
        if filter_country_not_match is not None:
            
            _query_params.append(('filter[country][not_match]', filter_country_not_match))
            
        if filter_primary_group_id_eq is not None:
            
            _query_params.append(('filter[primary_group_id][eq]', filter_primary_group_id_eq))
            
        if filter_primary_group_id_not_eq is not None:
            
            _query_params.append(('filter[primary_group_id][not_eq]', filter_primary_group_id_not_eq))
            
        if filter_primary_group_id_gt is not None:
            
            _query_params.append(('filter[primary_group_id][gt]', filter_primary_group_id_gt))
            
        if filter_primary_group_id_gte is not None:
            
            _query_params.append(('filter[primary_group_id][gte]', filter_primary_group_id_gte))
            
        if filter_primary_group_id_lt is not None:
            
            _query_params.append(('filter[primary_group_id][lt]', filter_primary_group_id_lt))
            
        if filter_primary_group_id_lte is not None:
            
            _query_params.append(('filter[primary_group_id][lte]', filter_primary_group_id_lte))
            
        if filter_gender_eq is not None:
            
            _query_params.append(('filter[gender][eq]', filter_gender_eq))
            
        if filter_gender_not_eq is not None:
            
            _query_params.append(('filter[gender][not_eq]', filter_gender_not_eq))
            
        if filter_gender_eql is not None:
            
            _query_params.append(('filter[gender][eql]', filter_gender_eql))
            
        if filter_gender_not_eql is not None:
            
            _query_params.append(('filter[gender][not_eql]', filter_gender_not_eql))
            
        if filter_gender_prefix is not None:
            
            _query_params.append(('filter[gender][prefix]', filter_gender_prefix))
            
        if filter_gender_not_prefix is not None:
            
            _query_params.append(('filter[gender][not_prefix]', filter_gender_not_prefix))
            
        if filter_gender_suffix is not None:
            
            _query_params.append(('filter[gender][suffix]', filter_gender_suffix))
            
        if filter_gender_not_suffix is not None:
            
            _query_params.append(('filter[gender][not_suffix]', filter_gender_not_suffix))
            
        if filter_gender_match is not None:
            
            _query_params.append(('filter[gender][match]', filter_gender_match))
            
        if filter_gender_not_match is not None:
            
            _query_params.append(('filter[gender][not_match]', filter_gender_not_match))
            
        if filter_birthday_eq is not None:
            
            _query_params.append(('filter[birthday][eq]', filter_birthday_eq))
            
        if filter_birthday_not_eq is not None:
            
            _query_params.append(('filter[birthday][not_eq]', filter_birthday_not_eq))
            
        if filter_birthday_gt is not None:
            
            _query_params.append(('filter[birthday][gt]', filter_birthday_gt))
            
        if filter_birthday_gte is not None:
            
            _query_params.append(('filter[birthday][gte]', filter_birthday_gte))
            
        if filter_birthday_lt is not None:
            
            _query_params.append(('filter[birthday][lt]', filter_birthday_lt))
            
        if filter_birthday_lte is not None:
            
            _query_params.append(('filter[birthday][lte]', filter_birthday_lte))
            
        if filter_language_eq is not None:
            
            _query_params.append(('filter[language][eq]', filter_language_eq))
            
        if filter_language_not_eq is not None:
            
            _query_params.append(('filter[language][not_eq]', filter_language_not_eq))
            
        if filter_language_eql is not None:
            
            _query_params.append(('filter[language][eql]', filter_language_eql))
            
        if filter_language_not_eql is not None:
            
            _query_params.append(('filter[language][not_eql]', filter_language_not_eql))
            
        if filter_language_prefix is not None:
            
            _query_params.append(('filter[language][prefix]', filter_language_prefix))
            
        if filter_language_not_prefix is not None:
            
            _query_params.append(('filter[language][not_prefix]', filter_language_not_prefix))
            
        if filter_language_suffix is not None:
            
            _query_params.append(('filter[language][suffix]', filter_language_suffix))
            
        if filter_language_not_suffix is not None:
            
            _query_params.append(('filter[language][not_suffix]', filter_language_not_suffix))
            
        if filter_language_match is not None:
            
            _query_params.append(('filter[language][match]', filter_language_match))
            
        if filter_language_not_match is not None:
            
            _query_params.append(('filter[language][not_match]', filter_language_not_match))
            
        if filter_updated_at_eq is not None:
            
            _query_params.append(('filter[updated_at][eq]', filter_updated_at_eq))
            
        if filter_updated_at_not_eq is not None:
            
            _query_params.append(('filter[updated_at][not_eq]', filter_updated_at_not_eq))
            
        if filter_updated_at_gt is not None:
            
            _query_params.append(('filter[updated_at][gt]', filter_updated_at_gt))
            
        if filter_updated_at_gte is not None:
            
            _query_params.append(('filter[updated_at][gte]', filter_updated_at_gte))
            
        if filter_updated_at_lt is not None:
            
            _query_params.append(('filter[updated_at][lt]', filter_updated_at_lt))
            
        if filter_updated_at_lte is not None:
            
            _query_params.append(('filter[updated_at][lte]', filter_updated_at_lte))
            
        if fields_groups is not None:
            
            _query_params.append(('fields[groups]', fields_groups))
            
        if fields_roles is not None:
            
            _query_params.append(('fields[roles]', fields_roles))
            
        if fields_phone_numbers is not None:
            
            _query_params.append(('fields[phone_numbers]', fields_phone_numbers))
            
        if fields_social_accounts is not None:
            
            _query_params.append(('fields[social_accounts]', fields_social_accounts))
            
        if fields_additional_emails is not None:
            
            _query_params.append(('fields[additional_emails]', fields_additional_emails))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if people_request is not None:
            _body_params = people_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/vnd.api+json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/vnd.api+json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'ServiceTokenAuthHeader', 
            'ServiceTokenAuthParam'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/api/people/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


