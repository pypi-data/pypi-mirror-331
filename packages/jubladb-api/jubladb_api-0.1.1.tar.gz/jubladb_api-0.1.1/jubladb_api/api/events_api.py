# coding: utf-8

"""
    Hitobito JSON:API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Contact: oss@basilbader.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import date, datetime
from pydantic import Field, StrictInt, StrictStr, field_validator
from typing import List, Optional
from typing_extensions import Annotated
from jubladb_api.models.dates_readable_attribute import DatesReadableAttribute
from jubladb_api.models.event_kinds_readable_attribute import EventKindsReadableAttribute
from jubladb_api.models.events_collection import EventsCollection
from jubladb_api.models.events_readable_attribute import EventsReadableAttribute
from jubladb_api.models.events_single import EventsSingle
from jubladb_api.models.people_readable_attribute import PeopleReadableAttribute

from jubladb_api.api_client import ApiClient, RequestSerialized
from jubladb_api.api_response import ApiResponse
from jubladb_api.rest import RESTResponseType


class EventsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_event(
        self,
        id: Annotated[StrictStr, Field(description="ID of the resource")],
        include: Annotated[Optional[List[StrictStr]], Field(description="[Include related resources](https://jsonapi.org/format/#fetching-includes)")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="[Sort events according to one or more criteria](https://jsonapi.org/format/#fetching-sorting)  You should not include both ascending `id` and descending `-id` fields the same time  ")] = None,
        fields_events: Annotated[Optional[List[EventsReadableAttribute]], Field(description="[Include only specified fields of Event in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)")] = None,
        filter_id_eq: Annotated[Optional[List[StrictInt]], Field(description="[Filter Event by id using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_id_not_eq: Annotated[Optional[List[StrictInt]], Field(description="[Filter Event by id using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_id_gt: Annotated[Optional[List[StrictInt]], Field(description="[Filter Event by id using gt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_id_gte: Annotated[Optional[List[StrictInt]], Field(description="[Filter Event by id using gte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_id_lt: Annotated[Optional[List[StrictInt]], Field(description="[Filter Event by id using lt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_id_lte: Annotated[Optional[List[StrictInt]], Field(description="[Filter Event by id using lte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_kind_id_eq: Annotated[Optional[List[StrictInt]], Field(description="[Filter Event by kind_id using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_kind_id_not_eq: Annotated[Optional[List[StrictInt]], Field(description="[Filter Event by kind_id using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_kind_id_gt: Annotated[Optional[List[StrictInt]], Field(description="[Filter Event by kind_id using gt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_kind_id_gte: Annotated[Optional[List[StrictInt]], Field(description="[Filter Event by kind_id using gte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_kind_id_lt: Annotated[Optional[List[StrictInt]], Field(description="[Filter Event by kind_id using lt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_kind_id_lte: Annotated[Optional[List[StrictInt]], Field(description="[Filter Event by kind_id using lte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_updated_at_eq: Annotated[Optional[List[datetime]], Field(description="[Filter Event by updated_at using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_updated_at_not_eq: Annotated[Optional[List[datetime]], Field(description="[Filter Event by updated_at using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_updated_at_gt: Annotated[Optional[List[datetime]], Field(description="[Filter Event by updated_at using gt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_updated_at_gte: Annotated[Optional[List[datetime]], Field(description="[Filter Event by updated_at using gte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_updated_at_lt: Annotated[Optional[List[datetime]], Field(description="[Filter Event by updated_at using lt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_updated_at_lte: Annotated[Optional[List[datetime]], Field(description="[Filter Event by updated_at using lte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_type_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Event by type using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_group_id_eq: Annotated[Optional[List[StrictInt]], Field(description="[Filter Event by group_id using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_group_id_not_eq: Annotated[Optional[List[StrictInt]], Field(description="[Filter Event by group_id using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_before_or_on_eq: Annotated[Optional[date], Field(description="[Filter Event by before_or_on using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_after_or_on_eq: Annotated[Optional[date], Field(description="[Filter Event by after_or_on using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_kind_category_id_eq: Annotated[Optional[List[StrictInt]], Field(description="[Filter Event by kind_category_id using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        fields_people: Annotated[Optional[List[PeopleReadableAttribute]], Field(description="[Include only specified fields of Person in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)")] = None,
        fields_event_kinds: Annotated[Optional[List[EventKindsReadableAttribute]], Field(description="[Include only specified fields of Kind in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)")] = None,
        fields_dates: Annotated[Optional[List[DatesReadableAttribute]], Field(description="[Include only specified fields of Date in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
        _additional_query_params: Optional[Dict[StrictStr, Any]] = None,
    ) -> EventsSingle:
        """Fetch Event


        :param id: ID of the resource (required)
        :type id: str
        :param include: [Include related resources](https://jsonapi.org/format/#fetching-includes)
        :type include: List[str]
        :param sort: [Sort events according to one or more criteria](https://jsonapi.org/format/#fetching-sorting)  You should not include both ascending `id` and descending `-id` fields the same time  
        :type sort: List[str]
        :param fields_events: [Include only specified fields of Event in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)
        :type fields_events: List[EventsReadableAttribute]
        :param filter_id_eq: [Filter Event by id using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_eq: List[int]
        :param filter_id_not_eq: [Filter Event by id using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_not_eq: List[int]
        :param filter_id_gt: [Filter Event by id using gt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_gt: List[int]
        :param filter_id_gte: [Filter Event by id using gte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_gte: List[int]
        :param filter_id_lt: [Filter Event by id using lt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_lt: List[int]
        :param filter_id_lte: [Filter Event by id using lte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_lte: List[int]
        :param filter_kind_id_eq: [Filter Event by kind_id using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_kind_id_eq: List[int]
        :param filter_kind_id_not_eq: [Filter Event by kind_id using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_kind_id_not_eq: List[int]
        :param filter_kind_id_gt: [Filter Event by kind_id using gt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_kind_id_gt: List[int]
        :param filter_kind_id_gte: [Filter Event by kind_id using gte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_kind_id_gte: List[int]
        :param filter_kind_id_lt: [Filter Event by kind_id using lt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_kind_id_lt: List[int]
        :param filter_kind_id_lte: [Filter Event by kind_id using lte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_kind_id_lte: List[int]
        :param filter_updated_at_eq: [Filter Event by updated_at using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_updated_at_eq: List[datetime]
        :param filter_updated_at_not_eq: [Filter Event by updated_at using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_updated_at_not_eq: List[datetime]
        :param filter_updated_at_gt: [Filter Event by updated_at using gt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_updated_at_gt: List[datetime]
        :param filter_updated_at_gte: [Filter Event by updated_at using gte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_updated_at_gte: List[datetime]
        :param filter_updated_at_lt: [Filter Event by updated_at using lt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_updated_at_lt: List[datetime]
        :param filter_updated_at_lte: [Filter Event by updated_at using lte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_updated_at_lte: List[datetime]
        :param filter_type_eq: [Filter Event by type using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_type_eq: List[str]
        :param filter_group_id_eq: [Filter Event by group_id using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_group_id_eq: List[int]
        :param filter_group_id_not_eq: [Filter Event by group_id using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_group_id_not_eq: List[int]
        :param filter_before_or_on_eq: [Filter Event by before_or_on using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_before_or_on_eq: date
        :param filter_after_or_on_eq: [Filter Event by after_or_on using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_after_or_on_eq: date
        :param filter_kind_category_id_eq: [Filter Event by kind_category_id using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_kind_category_id_eq: List[int]
        :param fields_people: [Include only specified fields of Person in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)
        :type fields_people: List[PeopleReadableAttribute]
        :param fields_event_kinds: [Include only specified fields of Kind in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)
        :type fields_event_kinds: List[EventKindsReadableAttribute]
        :param fields_dates: [Include only specified fields of Date in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)
        :type fields_dates: List[DatesReadableAttribute]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_event_serialize(
            id=id,
            include=include,
            sort=sort,
            fields_events=fields_events,
            filter_id_eq=filter_id_eq,
            filter_id_not_eq=filter_id_not_eq,
            filter_id_gt=filter_id_gt,
            filter_id_gte=filter_id_gte,
            filter_id_lt=filter_id_lt,
            filter_id_lte=filter_id_lte,
            filter_kind_id_eq=filter_kind_id_eq,
            filter_kind_id_not_eq=filter_kind_id_not_eq,
            filter_kind_id_gt=filter_kind_id_gt,
            filter_kind_id_gte=filter_kind_id_gte,
            filter_kind_id_lt=filter_kind_id_lt,
            filter_kind_id_lte=filter_kind_id_lte,
            filter_updated_at_eq=filter_updated_at_eq,
            filter_updated_at_not_eq=filter_updated_at_not_eq,
            filter_updated_at_gt=filter_updated_at_gt,
            filter_updated_at_gte=filter_updated_at_gte,
            filter_updated_at_lt=filter_updated_at_lt,
            filter_updated_at_lte=filter_updated_at_lte,
            filter_type_eq=filter_type_eq,
            filter_group_id_eq=filter_group_id_eq,
            filter_group_id_not_eq=filter_group_id_not_eq,
            filter_before_or_on_eq=filter_before_or_on_eq,
            filter_after_or_on_eq=filter_after_or_on_eq,
            filter_kind_category_id_eq=filter_kind_category_id_eq,
            fields_people=fields_people,
            fields_event_kinds=fields_event_kinds,
            fields_dates=fields_dates,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
            _additional_query_params=_additional_query_params,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "EventsSingle",
            '401': "JsonapiFailure",
            '403': "JsonapiFailure",
            '404': "JsonapiFailure",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_event_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="ID of the resource")],
        include: Annotated[Optional[List[StrictStr]], Field(description="[Include related resources](https://jsonapi.org/format/#fetching-includes)")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="[Sort events according to one or more criteria](https://jsonapi.org/format/#fetching-sorting)  You should not include both ascending `id` and descending `-id` fields the same time  ")] = None,
        fields_events: Annotated[Optional[List[EventsReadableAttribute]], Field(description="[Include only specified fields of Event in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)")] = None,
        filter_id_eq: Annotated[Optional[List[StrictInt]], Field(description="[Filter Event by id using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_id_not_eq: Annotated[Optional[List[StrictInt]], Field(description="[Filter Event by id using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_id_gt: Annotated[Optional[List[StrictInt]], Field(description="[Filter Event by id using gt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_id_gte: Annotated[Optional[List[StrictInt]], Field(description="[Filter Event by id using gte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_id_lt: Annotated[Optional[List[StrictInt]], Field(description="[Filter Event by id using lt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_id_lte: Annotated[Optional[List[StrictInt]], Field(description="[Filter Event by id using lte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_kind_id_eq: Annotated[Optional[List[StrictInt]], Field(description="[Filter Event by kind_id using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_kind_id_not_eq: Annotated[Optional[List[StrictInt]], Field(description="[Filter Event by kind_id using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_kind_id_gt: Annotated[Optional[List[StrictInt]], Field(description="[Filter Event by kind_id using gt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_kind_id_gte: Annotated[Optional[List[StrictInt]], Field(description="[Filter Event by kind_id using gte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_kind_id_lt: Annotated[Optional[List[StrictInt]], Field(description="[Filter Event by kind_id using lt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_kind_id_lte: Annotated[Optional[List[StrictInt]], Field(description="[Filter Event by kind_id using lte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_updated_at_eq: Annotated[Optional[List[datetime]], Field(description="[Filter Event by updated_at using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_updated_at_not_eq: Annotated[Optional[List[datetime]], Field(description="[Filter Event by updated_at using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_updated_at_gt: Annotated[Optional[List[datetime]], Field(description="[Filter Event by updated_at using gt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_updated_at_gte: Annotated[Optional[List[datetime]], Field(description="[Filter Event by updated_at using gte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_updated_at_lt: Annotated[Optional[List[datetime]], Field(description="[Filter Event by updated_at using lt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_updated_at_lte: Annotated[Optional[List[datetime]], Field(description="[Filter Event by updated_at using lte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_type_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Event by type using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_group_id_eq: Annotated[Optional[List[StrictInt]], Field(description="[Filter Event by group_id using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_group_id_not_eq: Annotated[Optional[List[StrictInt]], Field(description="[Filter Event by group_id using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_before_or_on_eq: Annotated[Optional[date], Field(description="[Filter Event by before_or_on using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_after_or_on_eq: Annotated[Optional[date], Field(description="[Filter Event by after_or_on using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_kind_category_id_eq: Annotated[Optional[List[StrictInt]], Field(description="[Filter Event by kind_category_id using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        fields_people: Annotated[Optional[List[PeopleReadableAttribute]], Field(description="[Include only specified fields of Person in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)")] = None,
        fields_event_kinds: Annotated[Optional[List[EventKindsReadableAttribute]], Field(description="[Include only specified fields of Kind in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)")] = None,
        fields_dates: Annotated[Optional[List[DatesReadableAttribute]], Field(description="[Include only specified fields of Date in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
        _additional_query_params: Optional[Dict[StrictStr, Any]] = None,
    ) -> ApiResponse[EventsSingle]:
        """Fetch Event


        :param id: ID of the resource (required)
        :type id: str
        :param include: [Include related resources](https://jsonapi.org/format/#fetching-includes)
        :type include: List[str]
        :param sort: [Sort events according to one or more criteria](https://jsonapi.org/format/#fetching-sorting)  You should not include both ascending `id` and descending `-id` fields the same time  
        :type sort: List[str]
        :param fields_events: [Include only specified fields of Event in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)
        :type fields_events: List[EventsReadableAttribute]
        :param filter_id_eq: [Filter Event by id using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_eq: List[int]
        :param filter_id_not_eq: [Filter Event by id using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_not_eq: List[int]
        :param filter_id_gt: [Filter Event by id using gt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_gt: List[int]
        :param filter_id_gte: [Filter Event by id using gte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_gte: List[int]
        :param filter_id_lt: [Filter Event by id using lt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_lt: List[int]
        :param filter_id_lte: [Filter Event by id using lte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_lte: List[int]
        :param filter_kind_id_eq: [Filter Event by kind_id using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_kind_id_eq: List[int]
        :param filter_kind_id_not_eq: [Filter Event by kind_id using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_kind_id_not_eq: List[int]
        :param filter_kind_id_gt: [Filter Event by kind_id using gt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_kind_id_gt: List[int]
        :param filter_kind_id_gte: [Filter Event by kind_id using gte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_kind_id_gte: List[int]
        :param filter_kind_id_lt: [Filter Event by kind_id using lt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_kind_id_lt: List[int]
        :param filter_kind_id_lte: [Filter Event by kind_id using lte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_kind_id_lte: List[int]
        :param filter_updated_at_eq: [Filter Event by updated_at using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_updated_at_eq: List[datetime]
        :param filter_updated_at_not_eq: [Filter Event by updated_at using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_updated_at_not_eq: List[datetime]
        :param filter_updated_at_gt: [Filter Event by updated_at using gt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_updated_at_gt: List[datetime]
        :param filter_updated_at_gte: [Filter Event by updated_at using gte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_updated_at_gte: List[datetime]
        :param filter_updated_at_lt: [Filter Event by updated_at using lt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_updated_at_lt: List[datetime]
        :param filter_updated_at_lte: [Filter Event by updated_at using lte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_updated_at_lte: List[datetime]
        :param filter_type_eq: [Filter Event by type using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_type_eq: List[str]
        :param filter_group_id_eq: [Filter Event by group_id using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_group_id_eq: List[int]
        :param filter_group_id_not_eq: [Filter Event by group_id using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_group_id_not_eq: List[int]
        :param filter_before_or_on_eq: [Filter Event by before_or_on using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_before_or_on_eq: date
        :param filter_after_or_on_eq: [Filter Event by after_or_on using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_after_or_on_eq: date
        :param filter_kind_category_id_eq: [Filter Event by kind_category_id using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_kind_category_id_eq: List[int]
        :param fields_people: [Include only specified fields of Person in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)
        :type fields_people: List[PeopleReadableAttribute]
        :param fields_event_kinds: [Include only specified fields of Kind in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)
        :type fields_event_kinds: List[EventKindsReadableAttribute]
        :param fields_dates: [Include only specified fields of Date in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)
        :type fields_dates: List[DatesReadableAttribute]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_event_serialize(
            id=id,
            include=include,
            sort=sort,
            fields_events=fields_events,
            filter_id_eq=filter_id_eq,
            filter_id_not_eq=filter_id_not_eq,
            filter_id_gt=filter_id_gt,
            filter_id_gte=filter_id_gte,
            filter_id_lt=filter_id_lt,
            filter_id_lte=filter_id_lte,
            filter_kind_id_eq=filter_kind_id_eq,
            filter_kind_id_not_eq=filter_kind_id_not_eq,
            filter_kind_id_gt=filter_kind_id_gt,
            filter_kind_id_gte=filter_kind_id_gte,
            filter_kind_id_lt=filter_kind_id_lt,
            filter_kind_id_lte=filter_kind_id_lte,
            filter_updated_at_eq=filter_updated_at_eq,
            filter_updated_at_not_eq=filter_updated_at_not_eq,
            filter_updated_at_gt=filter_updated_at_gt,
            filter_updated_at_gte=filter_updated_at_gte,
            filter_updated_at_lt=filter_updated_at_lt,
            filter_updated_at_lte=filter_updated_at_lte,
            filter_type_eq=filter_type_eq,
            filter_group_id_eq=filter_group_id_eq,
            filter_group_id_not_eq=filter_group_id_not_eq,
            filter_before_or_on_eq=filter_before_or_on_eq,
            filter_after_or_on_eq=filter_after_or_on_eq,
            filter_kind_category_id_eq=filter_kind_category_id_eq,
            fields_people=fields_people,
            fields_event_kinds=fields_event_kinds,
            fields_dates=fields_dates,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
            _additional_query_params=_additional_query_params,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "EventsSingle",
            '401': "JsonapiFailure",
            '403': "JsonapiFailure",
            '404': "JsonapiFailure",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_event_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="ID of the resource")],
        include: Annotated[Optional[List[StrictStr]], Field(description="[Include related resources](https://jsonapi.org/format/#fetching-includes)")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="[Sort events according to one or more criteria](https://jsonapi.org/format/#fetching-sorting)  You should not include both ascending `id` and descending `-id` fields the same time  ")] = None,
        fields_events: Annotated[Optional[List[EventsReadableAttribute]], Field(description="[Include only specified fields of Event in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)")] = None,
        filter_id_eq: Annotated[Optional[List[StrictInt]], Field(description="[Filter Event by id using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_id_not_eq: Annotated[Optional[List[StrictInt]], Field(description="[Filter Event by id using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_id_gt: Annotated[Optional[List[StrictInt]], Field(description="[Filter Event by id using gt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_id_gte: Annotated[Optional[List[StrictInt]], Field(description="[Filter Event by id using gte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_id_lt: Annotated[Optional[List[StrictInt]], Field(description="[Filter Event by id using lt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_id_lte: Annotated[Optional[List[StrictInt]], Field(description="[Filter Event by id using lte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_kind_id_eq: Annotated[Optional[List[StrictInt]], Field(description="[Filter Event by kind_id using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_kind_id_not_eq: Annotated[Optional[List[StrictInt]], Field(description="[Filter Event by kind_id using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_kind_id_gt: Annotated[Optional[List[StrictInt]], Field(description="[Filter Event by kind_id using gt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_kind_id_gte: Annotated[Optional[List[StrictInt]], Field(description="[Filter Event by kind_id using gte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_kind_id_lt: Annotated[Optional[List[StrictInt]], Field(description="[Filter Event by kind_id using lt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_kind_id_lte: Annotated[Optional[List[StrictInt]], Field(description="[Filter Event by kind_id using lte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_updated_at_eq: Annotated[Optional[List[datetime]], Field(description="[Filter Event by updated_at using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_updated_at_not_eq: Annotated[Optional[List[datetime]], Field(description="[Filter Event by updated_at using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_updated_at_gt: Annotated[Optional[List[datetime]], Field(description="[Filter Event by updated_at using gt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_updated_at_gte: Annotated[Optional[List[datetime]], Field(description="[Filter Event by updated_at using gte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_updated_at_lt: Annotated[Optional[List[datetime]], Field(description="[Filter Event by updated_at using lt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_updated_at_lte: Annotated[Optional[List[datetime]], Field(description="[Filter Event by updated_at using lte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_type_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Event by type using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_group_id_eq: Annotated[Optional[List[StrictInt]], Field(description="[Filter Event by group_id using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_group_id_not_eq: Annotated[Optional[List[StrictInt]], Field(description="[Filter Event by group_id using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_before_or_on_eq: Annotated[Optional[date], Field(description="[Filter Event by before_or_on using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_after_or_on_eq: Annotated[Optional[date], Field(description="[Filter Event by after_or_on using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_kind_category_id_eq: Annotated[Optional[List[StrictInt]], Field(description="[Filter Event by kind_category_id using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        fields_people: Annotated[Optional[List[PeopleReadableAttribute]], Field(description="[Include only specified fields of Person in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)")] = None,
        fields_event_kinds: Annotated[Optional[List[EventKindsReadableAttribute]], Field(description="[Include only specified fields of Kind in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)")] = None,
        fields_dates: Annotated[Optional[List[DatesReadableAttribute]], Field(description="[Include only specified fields of Date in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
        _additional_query_params: Optional[Dict[StrictStr, Any]] = None,
    ) -> RESTResponseType:
        """Fetch Event


        :param id: ID of the resource (required)
        :type id: str
        :param include: [Include related resources](https://jsonapi.org/format/#fetching-includes)
        :type include: List[str]
        :param sort: [Sort events according to one or more criteria](https://jsonapi.org/format/#fetching-sorting)  You should not include both ascending `id` and descending `-id` fields the same time  
        :type sort: List[str]
        :param fields_events: [Include only specified fields of Event in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)
        :type fields_events: List[EventsReadableAttribute]
        :param filter_id_eq: [Filter Event by id using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_eq: List[int]
        :param filter_id_not_eq: [Filter Event by id using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_not_eq: List[int]
        :param filter_id_gt: [Filter Event by id using gt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_gt: List[int]
        :param filter_id_gte: [Filter Event by id using gte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_gte: List[int]
        :param filter_id_lt: [Filter Event by id using lt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_lt: List[int]
        :param filter_id_lte: [Filter Event by id using lte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_lte: List[int]
        :param filter_kind_id_eq: [Filter Event by kind_id using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_kind_id_eq: List[int]
        :param filter_kind_id_not_eq: [Filter Event by kind_id using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_kind_id_not_eq: List[int]
        :param filter_kind_id_gt: [Filter Event by kind_id using gt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_kind_id_gt: List[int]
        :param filter_kind_id_gte: [Filter Event by kind_id using gte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_kind_id_gte: List[int]
        :param filter_kind_id_lt: [Filter Event by kind_id using lt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_kind_id_lt: List[int]
        :param filter_kind_id_lte: [Filter Event by kind_id using lte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_kind_id_lte: List[int]
        :param filter_updated_at_eq: [Filter Event by updated_at using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_updated_at_eq: List[datetime]
        :param filter_updated_at_not_eq: [Filter Event by updated_at using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_updated_at_not_eq: List[datetime]
        :param filter_updated_at_gt: [Filter Event by updated_at using gt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_updated_at_gt: List[datetime]
        :param filter_updated_at_gte: [Filter Event by updated_at using gte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_updated_at_gte: List[datetime]
        :param filter_updated_at_lt: [Filter Event by updated_at using lt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_updated_at_lt: List[datetime]
        :param filter_updated_at_lte: [Filter Event by updated_at using lte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_updated_at_lte: List[datetime]
        :param filter_type_eq: [Filter Event by type using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_type_eq: List[str]
        :param filter_group_id_eq: [Filter Event by group_id using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_group_id_eq: List[int]
        :param filter_group_id_not_eq: [Filter Event by group_id using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_group_id_not_eq: List[int]
        :param filter_before_or_on_eq: [Filter Event by before_or_on using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_before_or_on_eq: date
        :param filter_after_or_on_eq: [Filter Event by after_or_on using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_after_or_on_eq: date
        :param filter_kind_category_id_eq: [Filter Event by kind_category_id using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_kind_category_id_eq: List[int]
        :param fields_people: [Include only specified fields of Person in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)
        :type fields_people: List[PeopleReadableAttribute]
        :param fields_event_kinds: [Include only specified fields of Kind in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)
        :type fields_event_kinds: List[EventKindsReadableAttribute]
        :param fields_dates: [Include only specified fields of Date in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)
        :type fields_dates: List[DatesReadableAttribute]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_event_serialize(
            id=id,
            include=include,
            sort=sort,
            fields_events=fields_events,
            filter_id_eq=filter_id_eq,
            filter_id_not_eq=filter_id_not_eq,
            filter_id_gt=filter_id_gt,
            filter_id_gte=filter_id_gte,
            filter_id_lt=filter_id_lt,
            filter_id_lte=filter_id_lte,
            filter_kind_id_eq=filter_kind_id_eq,
            filter_kind_id_not_eq=filter_kind_id_not_eq,
            filter_kind_id_gt=filter_kind_id_gt,
            filter_kind_id_gte=filter_kind_id_gte,
            filter_kind_id_lt=filter_kind_id_lt,
            filter_kind_id_lte=filter_kind_id_lte,
            filter_updated_at_eq=filter_updated_at_eq,
            filter_updated_at_not_eq=filter_updated_at_not_eq,
            filter_updated_at_gt=filter_updated_at_gt,
            filter_updated_at_gte=filter_updated_at_gte,
            filter_updated_at_lt=filter_updated_at_lt,
            filter_updated_at_lte=filter_updated_at_lte,
            filter_type_eq=filter_type_eq,
            filter_group_id_eq=filter_group_id_eq,
            filter_group_id_not_eq=filter_group_id_not_eq,
            filter_before_or_on_eq=filter_before_or_on_eq,
            filter_after_or_on_eq=filter_after_or_on_eq,
            filter_kind_category_id_eq=filter_kind_category_id_eq,
            fields_people=fields_people,
            fields_event_kinds=fields_event_kinds,
            fields_dates=fields_dates,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
            _additional_query_params=_additional_query_params,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "EventsSingle",
            '401': "JsonapiFailure",
            '403': "JsonapiFailure",
            '404': "JsonapiFailure",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_event_serialize(
        self,
        id,
        include,
        sort,
        fields_events,
        filter_id_eq,
        filter_id_not_eq,
        filter_id_gt,
        filter_id_gte,
        filter_id_lt,
        filter_id_lte,
        filter_kind_id_eq,
        filter_kind_id_not_eq,
        filter_kind_id_gt,
        filter_kind_id_gte,
        filter_kind_id_lt,
        filter_kind_id_lte,
        filter_updated_at_eq,
        filter_updated_at_not_eq,
        filter_updated_at_gt,
        filter_updated_at_gte,
        filter_updated_at_lt,
        filter_updated_at_lte,
        filter_type_eq,
        filter_group_id_eq,
        filter_group_id_not_eq,
        filter_before_or_on_eq,
        filter_after_or_on_eq,
        filter_kind_category_id_eq,
        fields_people,
        fields_event_kinds,
        fields_dates,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
        _additional_query_params: Optional[Dict[StrictStr, Any]] = None,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'include': 'csv',
            'sort': 'csv',
            'fields[events]': 'csv',
            'filter[id][eq]': 'csv',
            'filter[id][not_eq]': 'csv',
            'filter[id][gt]': 'csv',
            'filter[id][gte]': 'csv',
            'filter[id][lt]': 'csv',
            'filter[id][lte]': 'csv',
            'filter[kind_id][eq]': 'csv',
            'filter[kind_id][not_eq]': 'csv',
            'filter[kind_id][gt]': 'csv',
            'filter[kind_id][gte]': 'csv',
            'filter[kind_id][lt]': 'csv',
            'filter[kind_id][lte]': 'csv',
            'filter[updated_at][eq]': 'csv',
            'filter[updated_at][not_eq]': 'csv',
            'filter[updated_at][gt]': 'csv',
            'filter[updated_at][gte]': 'csv',
            'filter[updated_at][lt]': 'csv',
            'filter[updated_at][lte]': 'csv',
            'filter[type][eq]': 'csv',
            'filter[group_id][eq]': 'csv',
            'filter[group_id][not_eq]': 'csv',
            'filter[kind_category_id][eq]': 'csv',
            'fields[people]': 'csv',
            'fields[event_kinds]': 'csv',
            'fields[dates]': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters

        if _additional_query_params is not None:
            _query_params.extend((key, value) for key, value in _additional_query_params.items())

        if include is not None:
            
            _query_params.append(('include', include))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if fields_events is not None:
            
            _query_params.append(('fields[events]', fields_events))
            
        if filter_id_eq is not None:
            
            _query_params.append(('filter[id][eq]', filter_id_eq))
            
        if filter_id_not_eq is not None:
            
            _query_params.append(('filter[id][not_eq]', filter_id_not_eq))
            
        if filter_id_gt is not None:
            
            _query_params.append(('filter[id][gt]', filter_id_gt))
            
        if filter_id_gte is not None:
            
            _query_params.append(('filter[id][gte]', filter_id_gte))
            
        if filter_id_lt is not None:
            
            _query_params.append(('filter[id][lt]', filter_id_lt))
            
        if filter_id_lte is not None:
            
            _query_params.append(('filter[id][lte]', filter_id_lte))
            
        if filter_kind_id_eq is not None:
            
            _query_params.append(('filter[kind_id][eq]', filter_kind_id_eq))
            
        if filter_kind_id_not_eq is not None:
            
            _query_params.append(('filter[kind_id][not_eq]', filter_kind_id_not_eq))
            
        if filter_kind_id_gt is not None:
            
            _query_params.append(('filter[kind_id][gt]', filter_kind_id_gt))
            
        if filter_kind_id_gte is not None:
            
            _query_params.append(('filter[kind_id][gte]', filter_kind_id_gte))
            
        if filter_kind_id_lt is not None:
            
            _query_params.append(('filter[kind_id][lt]', filter_kind_id_lt))
            
        if filter_kind_id_lte is not None:
            
            _query_params.append(('filter[kind_id][lte]', filter_kind_id_lte))
            
        if filter_updated_at_eq is not None:
            
            _query_params.append(('filter[updated_at][eq]', filter_updated_at_eq))
            
        if filter_updated_at_not_eq is not None:
            
            _query_params.append(('filter[updated_at][not_eq]', filter_updated_at_not_eq))
            
        if filter_updated_at_gt is not None:
            
            _query_params.append(('filter[updated_at][gt]', filter_updated_at_gt))
            
        if filter_updated_at_gte is not None:
            
            _query_params.append(('filter[updated_at][gte]', filter_updated_at_gte))
            
        if filter_updated_at_lt is not None:
            
            _query_params.append(('filter[updated_at][lt]', filter_updated_at_lt))
            
        if filter_updated_at_lte is not None:
            
            _query_params.append(('filter[updated_at][lte]', filter_updated_at_lte))
            
        if filter_type_eq is not None:
            
            _query_params.append(('filter[type][eq]', filter_type_eq))
            
        if filter_group_id_eq is not None:
            
            _query_params.append(('filter[group_id][eq]', filter_group_id_eq))
            
        if filter_group_id_not_eq is not None:
            
            _query_params.append(('filter[group_id][not_eq]', filter_group_id_not_eq))
            
        if filter_before_or_on_eq is not None:
            if isinstance(filter_before_or_on_eq, date):
                _query_params.append(
                    (
                        'filter[before_or_on][eq]',
                        filter_before_or_on_eq.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('filter[before_or_on][eq]', filter_before_or_on_eq))
            
        if filter_after_or_on_eq is not None:
            if isinstance(filter_after_or_on_eq, date):
                _query_params.append(
                    (
                        'filter[after_or_on][eq]',
                        filter_after_or_on_eq.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('filter[after_or_on][eq]', filter_after_or_on_eq))
            
        if filter_kind_category_id_eq is not None:
            
            _query_params.append(('filter[kind_category_id][eq]', filter_kind_category_id_eq))
            
        if fields_people is not None:
            
            _query_params.append(('fields[people]', fields_people))
            
        if fields_event_kinds is not None:
            
            _query_params.append(('fields[event_kinds]', fields_event_kinds))
            
        if fields_dates is not None:
            
            _query_params.append(('fields[dates]', fields_dates))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/vnd.api+json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'ServiceTokenAuthHeader', 
            'ServiceTokenAuthParam'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/events/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def list_events(
        self,
        include: Annotated[Optional[List[StrictStr]], Field(description="[Include related resources](https://jsonapi.org/format/#fetching-includes)")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="[Sort events according to one or more criteria](https://jsonapi.org/format/#fetching-sorting)  You should not include both ascending `id` and descending `-id` fields the same time  ")] = None,
        fields_events: Annotated[Optional[List[EventsReadableAttribute]], Field(description="[Include only specified fields of Event in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)")] = None,
        filter_id_eq: Annotated[Optional[List[StrictInt]], Field(description="[Filter Event by id using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_id_not_eq: Annotated[Optional[List[StrictInt]], Field(description="[Filter Event by id using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_id_gt: Annotated[Optional[List[StrictInt]], Field(description="[Filter Event by id using gt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_id_gte: Annotated[Optional[List[StrictInt]], Field(description="[Filter Event by id using gte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_id_lt: Annotated[Optional[List[StrictInt]], Field(description="[Filter Event by id using lt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_id_lte: Annotated[Optional[List[StrictInt]], Field(description="[Filter Event by id using lte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_kind_id_eq: Annotated[Optional[List[StrictInt]], Field(description="[Filter Event by kind_id using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_kind_id_not_eq: Annotated[Optional[List[StrictInt]], Field(description="[Filter Event by kind_id using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_kind_id_gt: Annotated[Optional[List[StrictInt]], Field(description="[Filter Event by kind_id using gt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_kind_id_gte: Annotated[Optional[List[StrictInt]], Field(description="[Filter Event by kind_id using gte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_kind_id_lt: Annotated[Optional[List[StrictInt]], Field(description="[Filter Event by kind_id using lt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_kind_id_lte: Annotated[Optional[List[StrictInt]], Field(description="[Filter Event by kind_id using lte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_updated_at_eq: Annotated[Optional[List[datetime]], Field(description="[Filter Event by updated_at using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_updated_at_not_eq: Annotated[Optional[List[datetime]], Field(description="[Filter Event by updated_at using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_updated_at_gt: Annotated[Optional[List[datetime]], Field(description="[Filter Event by updated_at using gt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_updated_at_gte: Annotated[Optional[List[datetime]], Field(description="[Filter Event by updated_at using gte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_updated_at_lt: Annotated[Optional[List[datetime]], Field(description="[Filter Event by updated_at using lt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_updated_at_lte: Annotated[Optional[List[datetime]], Field(description="[Filter Event by updated_at using lte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_type_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Event by type using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_group_id_eq: Annotated[Optional[List[StrictInt]], Field(description="[Filter Event by group_id using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_group_id_not_eq: Annotated[Optional[List[StrictInt]], Field(description="[Filter Event by group_id using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_before_or_on_eq: Annotated[Optional[date], Field(description="[Filter Event by before_or_on using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_after_or_on_eq: Annotated[Optional[date], Field(description="[Filter Event by after_or_on using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_kind_category_id_eq: Annotated[Optional[List[StrictInt]], Field(description="[Filter Event by kind_category_id using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        fields_people: Annotated[Optional[List[PeopleReadableAttribute]], Field(description="[Include only specified fields of Person in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)")] = None,
        fields_event_kinds: Annotated[Optional[List[EventKindsReadableAttribute]], Field(description="[Include only specified fields of Kind in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)")] = None,
        fields_dates: Annotated[Optional[List[DatesReadableAttribute]], Field(description="[Include only specified fields of Date in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
        _additional_query_params: Optional[Dict[StrictStr, Any]] = None,
    ) -> EventsCollection:
        """List Events


        :param include: [Include related resources](https://jsonapi.org/format/#fetching-includes)
        :type include: List[str]
        :param sort: [Sort events according to one or more criteria](https://jsonapi.org/format/#fetching-sorting)  You should not include both ascending `id` and descending `-id` fields the same time  
        :type sort: List[str]
        :param fields_events: [Include only specified fields of Event in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)
        :type fields_events: List[EventsReadableAttribute]
        :param filter_id_eq: [Filter Event by id using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_eq: List[int]
        :param filter_id_not_eq: [Filter Event by id using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_not_eq: List[int]
        :param filter_id_gt: [Filter Event by id using gt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_gt: List[int]
        :param filter_id_gte: [Filter Event by id using gte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_gte: List[int]
        :param filter_id_lt: [Filter Event by id using lt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_lt: List[int]
        :param filter_id_lte: [Filter Event by id using lte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_lte: List[int]
        :param filter_kind_id_eq: [Filter Event by kind_id using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_kind_id_eq: List[int]
        :param filter_kind_id_not_eq: [Filter Event by kind_id using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_kind_id_not_eq: List[int]
        :param filter_kind_id_gt: [Filter Event by kind_id using gt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_kind_id_gt: List[int]
        :param filter_kind_id_gte: [Filter Event by kind_id using gte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_kind_id_gte: List[int]
        :param filter_kind_id_lt: [Filter Event by kind_id using lt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_kind_id_lt: List[int]
        :param filter_kind_id_lte: [Filter Event by kind_id using lte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_kind_id_lte: List[int]
        :param filter_updated_at_eq: [Filter Event by updated_at using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_updated_at_eq: List[datetime]
        :param filter_updated_at_not_eq: [Filter Event by updated_at using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_updated_at_not_eq: List[datetime]
        :param filter_updated_at_gt: [Filter Event by updated_at using gt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_updated_at_gt: List[datetime]
        :param filter_updated_at_gte: [Filter Event by updated_at using gte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_updated_at_gte: List[datetime]
        :param filter_updated_at_lt: [Filter Event by updated_at using lt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_updated_at_lt: List[datetime]
        :param filter_updated_at_lte: [Filter Event by updated_at using lte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_updated_at_lte: List[datetime]
        :param filter_type_eq: [Filter Event by type using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_type_eq: List[str]
        :param filter_group_id_eq: [Filter Event by group_id using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_group_id_eq: List[int]
        :param filter_group_id_not_eq: [Filter Event by group_id using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_group_id_not_eq: List[int]
        :param filter_before_or_on_eq: [Filter Event by before_or_on using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_before_or_on_eq: date
        :param filter_after_or_on_eq: [Filter Event by after_or_on using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_after_or_on_eq: date
        :param filter_kind_category_id_eq: [Filter Event by kind_category_id using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_kind_category_id_eq: List[int]
        :param fields_people: [Include only specified fields of Person in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)
        :type fields_people: List[PeopleReadableAttribute]
        :param fields_event_kinds: [Include only specified fields of Kind in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)
        :type fields_event_kinds: List[EventKindsReadableAttribute]
        :param fields_dates: [Include only specified fields of Date in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)
        :type fields_dates: List[DatesReadableAttribute]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_events_serialize(
            include=include,
            sort=sort,
            fields_events=fields_events,
            filter_id_eq=filter_id_eq,
            filter_id_not_eq=filter_id_not_eq,
            filter_id_gt=filter_id_gt,
            filter_id_gte=filter_id_gte,
            filter_id_lt=filter_id_lt,
            filter_id_lte=filter_id_lte,
            filter_kind_id_eq=filter_kind_id_eq,
            filter_kind_id_not_eq=filter_kind_id_not_eq,
            filter_kind_id_gt=filter_kind_id_gt,
            filter_kind_id_gte=filter_kind_id_gte,
            filter_kind_id_lt=filter_kind_id_lt,
            filter_kind_id_lte=filter_kind_id_lte,
            filter_updated_at_eq=filter_updated_at_eq,
            filter_updated_at_not_eq=filter_updated_at_not_eq,
            filter_updated_at_gt=filter_updated_at_gt,
            filter_updated_at_gte=filter_updated_at_gte,
            filter_updated_at_lt=filter_updated_at_lt,
            filter_updated_at_lte=filter_updated_at_lte,
            filter_type_eq=filter_type_eq,
            filter_group_id_eq=filter_group_id_eq,
            filter_group_id_not_eq=filter_group_id_not_eq,
            filter_before_or_on_eq=filter_before_or_on_eq,
            filter_after_or_on_eq=filter_after_or_on_eq,
            filter_kind_category_id_eq=filter_kind_category_id_eq,
            fields_people=fields_people,
            fields_event_kinds=fields_event_kinds,
            fields_dates=fields_dates,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
            _additional_query_params=_additional_query_params,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "EventsCollection",
            '401': "JsonapiFailure",
            '403': "JsonapiFailure",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def list_events_with_http_info(
        self,
        include: Annotated[Optional[List[StrictStr]], Field(description="[Include related resources](https://jsonapi.org/format/#fetching-includes)")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="[Sort events according to one or more criteria](https://jsonapi.org/format/#fetching-sorting)  You should not include both ascending `id` and descending `-id` fields the same time  ")] = None,
        fields_events: Annotated[Optional[List[EventsReadableAttribute]], Field(description="[Include only specified fields of Event in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)")] = None,
        filter_id_eq: Annotated[Optional[List[StrictInt]], Field(description="[Filter Event by id using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_id_not_eq: Annotated[Optional[List[StrictInt]], Field(description="[Filter Event by id using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_id_gt: Annotated[Optional[List[StrictInt]], Field(description="[Filter Event by id using gt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_id_gte: Annotated[Optional[List[StrictInt]], Field(description="[Filter Event by id using gte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_id_lt: Annotated[Optional[List[StrictInt]], Field(description="[Filter Event by id using lt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_id_lte: Annotated[Optional[List[StrictInt]], Field(description="[Filter Event by id using lte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_kind_id_eq: Annotated[Optional[List[StrictInt]], Field(description="[Filter Event by kind_id using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_kind_id_not_eq: Annotated[Optional[List[StrictInt]], Field(description="[Filter Event by kind_id using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_kind_id_gt: Annotated[Optional[List[StrictInt]], Field(description="[Filter Event by kind_id using gt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_kind_id_gte: Annotated[Optional[List[StrictInt]], Field(description="[Filter Event by kind_id using gte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_kind_id_lt: Annotated[Optional[List[StrictInt]], Field(description="[Filter Event by kind_id using lt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_kind_id_lte: Annotated[Optional[List[StrictInt]], Field(description="[Filter Event by kind_id using lte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_updated_at_eq: Annotated[Optional[List[datetime]], Field(description="[Filter Event by updated_at using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_updated_at_not_eq: Annotated[Optional[List[datetime]], Field(description="[Filter Event by updated_at using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_updated_at_gt: Annotated[Optional[List[datetime]], Field(description="[Filter Event by updated_at using gt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_updated_at_gte: Annotated[Optional[List[datetime]], Field(description="[Filter Event by updated_at using gte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_updated_at_lt: Annotated[Optional[List[datetime]], Field(description="[Filter Event by updated_at using lt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_updated_at_lte: Annotated[Optional[List[datetime]], Field(description="[Filter Event by updated_at using lte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_type_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Event by type using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_group_id_eq: Annotated[Optional[List[StrictInt]], Field(description="[Filter Event by group_id using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_group_id_not_eq: Annotated[Optional[List[StrictInt]], Field(description="[Filter Event by group_id using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_before_or_on_eq: Annotated[Optional[date], Field(description="[Filter Event by before_or_on using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_after_or_on_eq: Annotated[Optional[date], Field(description="[Filter Event by after_or_on using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_kind_category_id_eq: Annotated[Optional[List[StrictInt]], Field(description="[Filter Event by kind_category_id using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        fields_people: Annotated[Optional[List[PeopleReadableAttribute]], Field(description="[Include only specified fields of Person in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)")] = None,
        fields_event_kinds: Annotated[Optional[List[EventKindsReadableAttribute]], Field(description="[Include only specified fields of Kind in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)")] = None,
        fields_dates: Annotated[Optional[List[DatesReadableAttribute]], Field(description="[Include only specified fields of Date in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
        _additional_query_params: Optional[Dict[StrictStr, Any]] = None,
    ) -> ApiResponse[EventsCollection]:
        """List Events


        :param include: [Include related resources](https://jsonapi.org/format/#fetching-includes)
        :type include: List[str]
        :param sort: [Sort events according to one or more criteria](https://jsonapi.org/format/#fetching-sorting)  You should not include both ascending `id` and descending `-id` fields the same time  
        :type sort: List[str]
        :param fields_events: [Include only specified fields of Event in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)
        :type fields_events: List[EventsReadableAttribute]
        :param filter_id_eq: [Filter Event by id using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_eq: List[int]
        :param filter_id_not_eq: [Filter Event by id using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_not_eq: List[int]
        :param filter_id_gt: [Filter Event by id using gt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_gt: List[int]
        :param filter_id_gte: [Filter Event by id using gte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_gte: List[int]
        :param filter_id_lt: [Filter Event by id using lt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_lt: List[int]
        :param filter_id_lte: [Filter Event by id using lte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_lte: List[int]
        :param filter_kind_id_eq: [Filter Event by kind_id using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_kind_id_eq: List[int]
        :param filter_kind_id_not_eq: [Filter Event by kind_id using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_kind_id_not_eq: List[int]
        :param filter_kind_id_gt: [Filter Event by kind_id using gt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_kind_id_gt: List[int]
        :param filter_kind_id_gte: [Filter Event by kind_id using gte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_kind_id_gte: List[int]
        :param filter_kind_id_lt: [Filter Event by kind_id using lt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_kind_id_lt: List[int]
        :param filter_kind_id_lte: [Filter Event by kind_id using lte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_kind_id_lte: List[int]
        :param filter_updated_at_eq: [Filter Event by updated_at using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_updated_at_eq: List[datetime]
        :param filter_updated_at_not_eq: [Filter Event by updated_at using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_updated_at_not_eq: List[datetime]
        :param filter_updated_at_gt: [Filter Event by updated_at using gt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_updated_at_gt: List[datetime]
        :param filter_updated_at_gte: [Filter Event by updated_at using gte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_updated_at_gte: List[datetime]
        :param filter_updated_at_lt: [Filter Event by updated_at using lt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_updated_at_lt: List[datetime]
        :param filter_updated_at_lte: [Filter Event by updated_at using lte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_updated_at_lte: List[datetime]
        :param filter_type_eq: [Filter Event by type using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_type_eq: List[str]
        :param filter_group_id_eq: [Filter Event by group_id using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_group_id_eq: List[int]
        :param filter_group_id_not_eq: [Filter Event by group_id using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_group_id_not_eq: List[int]
        :param filter_before_or_on_eq: [Filter Event by before_or_on using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_before_or_on_eq: date
        :param filter_after_or_on_eq: [Filter Event by after_or_on using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_after_or_on_eq: date
        :param filter_kind_category_id_eq: [Filter Event by kind_category_id using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_kind_category_id_eq: List[int]
        :param fields_people: [Include only specified fields of Person in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)
        :type fields_people: List[PeopleReadableAttribute]
        :param fields_event_kinds: [Include only specified fields of Kind in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)
        :type fields_event_kinds: List[EventKindsReadableAttribute]
        :param fields_dates: [Include only specified fields of Date in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)
        :type fields_dates: List[DatesReadableAttribute]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_events_serialize(
            include=include,
            sort=sort,
            fields_events=fields_events,
            filter_id_eq=filter_id_eq,
            filter_id_not_eq=filter_id_not_eq,
            filter_id_gt=filter_id_gt,
            filter_id_gte=filter_id_gte,
            filter_id_lt=filter_id_lt,
            filter_id_lte=filter_id_lte,
            filter_kind_id_eq=filter_kind_id_eq,
            filter_kind_id_not_eq=filter_kind_id_not_eq,
            filter_kind_id_gt=filter_kind_id_gt,
            filter_kind_id_gte=filter_kind_id_gte,
            filter_kind_id_lt=filter_kind_id_lt,
            filter_kind_id_lte=filter_kind_id_lte,
            filter_updated_at_eq=filter_updated_at_eq,
            filter_updated_at_not_eq=filter_updated_at_not_eq,
            filter_updated_at_gt=filter_updated_at_gt,
            filter_updated_at_gte=filter_updated_at_gte,
            filter_updated_at_lt=filter_updated_at_lt,
            filter_updated_at_lte=filter_updated_at_lte,
            filter_type_eq=filter_type_eq,
            filter_group_id_eq=filter_group_id_eq,
            filter_group_id_not_eq=filter_group_id_not_eq,
            filter_before_or_on_eq=filter_before_or_on_eq,
            filter_after_or_on_eq=filter_after_or_on_eq,
            filter_kind_category_id_eq=filter_kind_category_id_eq,
            fields_people=fields_people,
            fields_event_kinds=fields_event_kinds,
            fields_dates=fields_dates,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
            _additional_query_params=_additional_query_params,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "EventsCollection",
            '401': "JsonapiFailure",
            '403': "JsonapiFailure",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def list_events_without_preload_content(
        self,
        include: Annotated[Optional[List[StrictStr]], Field(description="[Include related resources](https://jsonapi.org/format/#fetching-includes)")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="[Sort events according to one or more criteria](https://jsonapi.org/format/#fetching-sorting)  You should not include both ascending `id` and descending `-id` fields the same time  ")] = None,
        fields_events: Annotated[Optional[List[EventsReadableAttribute]], Field(description="[Include only specified fields of Event in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)")] = None,
        filter_id_eq: Annotated[Optional[List[StrictInt]], Field(description="[Filter Event by id using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_id_not_eq: Annotated[Optional[List[StrictInt]], Field(description="[Filter Event by id using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_id_gt: Annotated[Optional[List[StrictInt]], Field(description="[Filter Event by id using gt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_id_gte: Annotated[Optional[List[StrictInt]], Field(description="[Filter Event by id using gte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_id_lt: Annotated[Optional[List[StrictInt]], Field(description="[Filter Event by id using lt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_id_lte: Annotated[Optional[List[StrictInt]], Field(description="[Filter Event by id using lte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_kind_id_eq: Annotated[Optional[List[StrictInt]], Field(description="[Filter Event by kind_id using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_kind_id_not_eq: Annotated[Optional[List[StrictInt]], Field(description="[Filter Event by kind_id using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_kind_id_gt: Annotated[Optional[List[StrictInt]], Field(description="[Filter Event by kind_id using gt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_kind_id_gte: Annotated[Optional[List[StrictInt]], Field(description="[Filter Event by kind_id using gte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_kind_id_lt: Annotated[Optional[List[StrictInt]], Field(description="[Filter Event by kind_id using lt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_kind_id_lte: Annotated[Optional[List[StrictInt]], Field(description="[Filter Event by kind_id using lte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_updated_at_eq: Annotated[Optional[List[datetime]], Field(description="[Filter Event by updated_at using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_updated_at_not_eq: Annotated[Optional[List[datetime]], Field(description="[Filter Event by updated_at using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_updated_at_gt: Annotated[Optional[List[datetime]], Field(description="[Filter Event by updated_at using gt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_updated_at_gte: Annotated[Optional[List[datetime]], Field(description="[Filter Event by updated_at using gte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_updated_at_lt: Annotated[Optional[List[datetime]], Field(description="[Filter Event by updated_at using lt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_updated_at_lte: Annotated[Optional[List[datetime]], Field(description="[Filter Event by updated_at using lte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_type_eq: Annotated[Optional[List[StrictStr]], Field(description="[Filter Event by type using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_group_id_eq: Annotated[Optional[List[StrictInt]], Field(description="[Filter Event by group_id using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_group_id_not_eq: Annotated[Optional[List[StrictInt]], Field(description="[Filter Event by group_id using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_before_or_on_eq: Annotated[Optional[date], Field(description="[Filter Event by before_or_on using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_after_or_on_eq: Annotated[Optional[date], Field(description="[Filter Event by after_or_on using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_kind_category_id_eq: Annotated[Optional[List[StrictInt]], Field(description="[Filter Event by kind_category_id using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        fields_people: Annotated[Optional[List[PeopleReadableAttribute]], Field(description="[Include only specified fields of Person in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)")] = None,
        fields_event_kinds: Annotated[Optional[List[EventKindsReadableAttribute]], Field(description="[Include only specified fields of Kind in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)")] = None,
        fields_dates: Annotated[Optional[List[DatesReadableAttribute]], Field(description="[Include only specified fields of Date in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
        _additional_query_params: Optional[Dict[StrictStr, Any]] = None,
    ) -> RESTResponseType:
        """List Events


        :param include: [Include related resources](https://jsonapi.org/format/#fetching-includes)
        :type include: List[str]
        :param sort: [Sort events according to one or more criteria](https://jsonapi.org/format/#fetching-sorting)  You should not include both ascending `id` and descending `-id` fields the same time  
        :type sort: List[str]
        :param fields_events: [Include only specified fields of Event in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)
        :type fields_events: List[EventsReadableAttribute]
        :param filter_id_eq: [Filter Event by id using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_eq: List[int]
        :param filter_id_not_eq: [Filter Event by id using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_not_eq: List[int]
        :param filter_id_gt: [Filter Event by id using gt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_gt: List[int]
        :param filter_id_gte: [Filter Event by id using gte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_gte: List[int]
        :param filter_id_lt: [Filter Event by id using lt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_lt: List[int]
        :param filter_id_lte: [Filter Event by id using lte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_lte: List[int]
        :param filter_kind_id_eq: [Filter Event by kind_id using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_kind_id_eq: List[int]
        :param filter_kind_id_not_eq: [Filter Event by kind_id using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_kind_id_not_eq: List[int]
        :param filter_kind_id_gt: [Filter Event by kind_id using gt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_kind_id_gt: List[int]
        :param filter_kind_id_gte: [Filter Event by kind_id using gte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_kind_id_gte: List[int]
        :param filter_kind_id_lt: [Filter Event by kind_id using lt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_kind_id_lt: List[int]
        :param filter_kind_id_lte: [Filter Event by kind_id using lte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_kind_id_lte: List[int]
        :param filter_updated_at_eq: [Filter Event by updated_at using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_updated_at_eq: List[datetime]
        :param filter_updated_at_not_eq: [Filter Event by updated_at using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_updated_at_not_eq: List[datetime]
        :param filter_updated_at_gt: [Filter Event by updated_at using gt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_updated_at_gt: List[datetime]
        :param filter_updated_at_gte: [Filter Event by updated_at using gte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_updated_at_gte: List[datetime]
        :param filter_updated_at_lt: [Filter Event by updated_at using lt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_updated_at_lt: List[datetime]
        :param filter_updated_at_lte: [Filter Event by updated_at using lte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_updated_at_lte: List[datetime]
        :param filter_type_eq: [Filter Event by type using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_type_eq: List[str]
        :param filter_group_id_eq: [Filter Event by group_id using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_group_id_eq: List[int]
        :param filter_group_id_not_eq: [Filter Event by group_id using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_group_id_not_eq: List[int]
        :param filter_before_or_on_eq: [Filter Event by before_or_on using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_before_or_on_eq: date
        :param filter_after_or_on_eq: [Filter Event by after_or_on using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_after_or_on_eq: date
        :param filter_kind_category_id_eq: [Filter Event by kind_category_id using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_kind_category_id_eq: List[int]
        :param fields_people: [Include only specified fields of Person in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)
        :type fields_people: List[PeopleReadableAttribute]
        :param fields_event_kinds: [Include only specified fields of Kind in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)
        :type fields_event_kinds: List[EventKindsReadableAttribute]
        :param fields_dates: [Include only specified fields of Date in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)
        :type fields_dates: List[DatesReadableAttribute]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_events_serialize(
            include=include,
            sort=sort,
            fields_events=fields_events,
            filter_id_eq=filter_id_eq,
            filter_id_not_eq=filter_id_not_eq,
            filter_id_gt=filter_id_gt,
            filter_id_gte=filter_id_gte,
            filter_id_lt=filter_id_lt,
            filter_id_lte=filter_id_lte,
            filter_kind_id_eq=filter_kind_id_eq,
            filter_kind_id_not_eq=filter_kind_id_not_eq,
            filter_kind_id_gt=filter_kind_id_gt,
            filter_kind_id_gte=filter_kind_id_gte,
            filter_kind_id_lt=filter_kind_id_lt,
            filter_kind_id_lte=filter_kind_id_lte,
            filter_updated_at_eq=filter_updated_at_eq,
            filter_updated_at_not_eq=filter_updated_at_not_eq,
            filter_updated_at_gt=filter_updated_at_gt,
            filter_updated_at_gte=filter_updated_at_gte,
            filter_updated_at_lt=filter_updated_at_lt,
            filter_updated_at_lte=filter_updated_at_lte,
            filter_type_eq=filter_type_eq,
            filter_group_id_eq=filter_group_id_eq,
            filter_group_id_not_eq=filter_group_id_not_eq,
            filter_before_or_on_eq=filter_before_or_on_eq,
            filter_after_or_on_eq=filter_after_or_on_eq,
            filter_kind_category_id_eq=filter_kind_category_id_eq,
            fields_people=fields_people,
            fields_event_kinds=fields_event_kinds,
            fields_dates=fields_dates,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
            _additional_query_params=_additional_query_params,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "EventsCollection",
            '401': "JsonapiFailure",
            '403': "JsonapiFailure",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _list_events_serialize(
        self,
        include,
        sort,
        fields_events,
        filter_id_eq,
        filter_id_not_eq,
        filter_id_gt,
        filter_id_gte,
        filter_id_lt,
        filter_id_lte,
        filter_kind_id_eq,
        filter_kind_id_not_eq,
        filter_kind_id_gt,
        filter_kind_id_gte,
        filter_kind_id_lt,
        filter_kind_id_lte,
        filter_updated_at_eq,
        filter_updated_at_not_eq,
        filter_updated_at_gt,
        filter_updated_at_gte,
        filter_updated_at_lt,
        filter_updated_at_lte,
        filter_type_eq,
        filter_group_id_eq,
        filter_group_id_not_eq,
        filter_before_or_on_eq,
        filter_after_or_on_eq,
        filter_kind_category_id_eq,
        fields_people,
        fields_event_kinds,
        fields_dates,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
        _additional_query_params: Optional[Dict[StrictStr, Any]] = None,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'include': 'csv',
            'sort': 'csv',
            'fields[events]': 'csv',
            'filter[id][eq]': 'csv',
            'filter[id][not_eq]': 'csv',
            'filter[id][gt]': 'csv',
            'filter[id][gte]': 'csv',
            'filter[id][lt]': 'csv',
            'filter[id][lte]': 'csv',
            'filter[kind_id][eq]': 'csv',
            'filter[kind_id][not_eq]': 'csv',
            'filter[kind_id][gt]': 'csv',
            'filter[kind_id][gte]': 'csv',
            'filter[kind_id][lt]': 'csv',
            'filter[kind_id][lte]': 'csv',
            'filter[updated_at][eq]': 'csv',
            'filter[updated_at][not_eq]': 'csv',
            'filter[updated_at][gt]': 'csv',
            'filter[updated_at][gte]': 'csv',
            'filter[updated_at][lt]': 'csv',
            'filter[updated_at][lte]': 'csv',
            'filter[type][eq]': 'csv',
            'filter[group_id][eq]': 'csv',
            'filter[group_id][not_eq]': 'csv',
            'filter[kind_category_id][eq]': 'csv',
            'fields[people]': 'csv',
            'fields[event_kinds]': 'csv',
            'fields[dates]': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters

        if _additional_query_params is not None:
            _query_params.extend((key, value) for key, value in _additional_query_params.items())

        if include is not None:
            
            _query_params.append(('include', include))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if fields_events is not None:
            
            _query_params.append(('fields[events]', fields_events))
            
        if filter_id_eq is not None:
            
            _query_params.append(('filter[id][eq]', filter_id_eq))
            
        if filter_id_not_eq is not None:
            
            _query_params.append(('filter[id][not_eq]', filter_id_not_eq))
            
        if filter_id_gt is not None:
            
            _query_params.append(('filter[id][gt]', filter_id_gt))
            
        if filter_id_gte is not None:
            
            _query_params.append(('filter[id][gte]', filter_id_gte))
            
        if filter_id_lt is not None:
            
            _query_params.append(('filter[id][lt]', filter_id_lt))
            
        if filter_id_lte is not None:
            
            _query_params.append(('filter[id][lte]', filter_id_lte))
            
        if filter_kind_id_eq is not None:
            
            _query_params.append(('filter[kind_id][eq]', filter_kind_id_eq))
            
        if filter_kind_id_not_eq is not None:
            
            _query_params.append(('filter[kind_id][not_eq]', filter_kind_id_not_eq))
            
        if filter_kind_id_gt is not None:
            
            _query_params.append(('filter[kind_id][gt]', filter_kind_id_gt))
            
        if filter_kind_id_gte is not None:
            
            _query_params.append(('filter[kind_id][gte]', filter_kind_id_gte))
            
        if filter_kind_id_lt is not None:
            
            _query_params.append(('filter[kind_id][lt]', filter_kind_id_lt))
            
        if filter_kind_id_lte is not None:
            
            _query_params.append(('filter[kind_id][lte]', filter_kind_id_lte))
            
        if filter_updated_at_eq is not None:
            
            _query_params.append(('filter[updated_at][eq]', filter_updated_at_eq))
            
        if filter_updated_at_not_eq is not None:
            
            _query_params.append(('filter[updated_at][not_eq]', filter_updated_at_not_eq))
            
        if filter_updated_at_gt is not None:
            
            _query_params.append(('filter[updated_at][gt]', filter_updated_at_gt))
            
        if filter_updated_at_gte is not None:
            
            _query_params.append(('filter[updated_at][gte]', filter_updated_at_gte))
            
        if filter_updated_at_lt is not None:
            
            _query_params.append(('filter[updated_at][lt]', filter_updated_at_lt))
            
        if filter_updated_at_lte is not None:
            
            _query_params.append(('filter[updated_at][lte]', filter_updated_at_lte))
            
        if filter_type_eq is not None:
            
            _query_params.append(('filter[type][eq]', filter_type_eq))
            
        if filter_group_id_eq is not None:
            
            _query_params.append(('filter[group_id][eq]', filter_group_id_eq))
            
        if filter_group_id_not_eq is not None:
            
            _query_params.append(('filter[group_id][not_eq]', filter_group_id_not_eq))
            
        if filter_before_or_on_eq is not None:
            if isinstance(filter_before_or_on_eq, date):
                _query_params.append(
                    (
                        'filter[before_or_on][eq]',
                        filter_before_or_on_eq.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('filter[before_or_on][eq]', filter_before_or_on_eq))
            
        if filter_after_or_on_eq is not None:
            if isinstance(filter_after_or_on_eq, date):
                _query_params.append(
                    (
                        'filter[after_or_on][eq]',
                        filter_after_or_on_eq.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('filter[after_or_on][eq]', filter_after_or_on_eq))
            
        if filter_kind_category_id_eq is not None:
            
            _query_params.append(('filter[kind_category_id][eq]', filter_kind_category_id_eq))
            
        if fields_people is not None:
            
            _query_params.append(('fields[people]', fields_people))
            
        if fields_event_kinds is not None:
            
            _query_params.append(('fields[event_kinds]', fields_event_kinds))
            
        if fields_dates is not None:
            
            _query_params.append(('fields[dates]', fields_dates))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/vnd.api+json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'ServiceTokenAuthHeader', 
            'ServiceTokenAuthParam'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/events',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


