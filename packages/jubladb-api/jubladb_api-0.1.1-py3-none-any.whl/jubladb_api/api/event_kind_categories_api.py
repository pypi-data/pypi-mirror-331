# coding: utf-8

"""
    Hitobito JSON:API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Contact: oss@basilbader.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictInt, StrictStr, field_validator
from typing import List, Optional
from typing_extensions import Annotated
from jubladb_api.models.event_kind_categories_collection import EventKindCategoriesCollection
from jubladb_api.models.event_kind_categories_readable_attribute import EventKindCategoriesReadableAttribute
from jubladb_api.models.event_kind_categories_single import EventKindCategoriesSingle

from jubladb_api.api_client import ApiClient, RequestSerialized
from jubladb_api.api_response import ApiResponse
from jubladb_api.rest import RESTResponseType


class EventKindCategoriesApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_event_kind_category(
        self,
        id: Annotated[StrictStr, Field(description="ID of the resource")],
        sort: Annotated[Optional[List[StrictStr]], Field(description="[Sort event_kind_categories according to one or more criteria](https://jsonapi.org/format/#fetching-sorting)  You should not include both ascending `id` and descending `-id` fields the same time  ")] = None,
        fields_event_kind_categories: Annotated[Optional[List[EventKindCategoriesReadableAttribute]], Field(description="[Include only specified fields of Kind category in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)")] = None,
        filter_id_eq: Annotated[Optional[List[StrictInt]], Field(description="[Filter Kind category by id using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_id_not_eq: Annotated[Optional[List[StrictInt]], Field(description="[Filter Kind category by id using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_id_gt: Annotated[Optional[List[StrictInt]], Field(description="[Filter Kind category by id using gt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_id_gte: Annotated[Optional[List[StrictInt]], Field(description="[Filter Kind category by id using gte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_id_lt: Annotated[Optional[List[StrictInt]], Field(description="[Filter Kind category by id using lt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_id_lte: Annotated[Optional[List[StrictInt]], Field(description="[Filter Kind category by id using lte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
        _additional_query_params: Optional[Dict[StrictStr, Any]] = None,
    ) -> EventKindCategoriesSingle:
        """Fetch Event kind category


        :param id: ID of the resource (required)
        :type id: str
        :param sort: [Sort event_kind_categories according to one or more criteria](https://jsonapi.org/format/#fetching-sorting)  You should not include both ascending `id` and descending `-id` fields the same time  
        :type sort: List[str]
        :param fields_event_kind_categories: [Include only specified fields of Kind category in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)
        :type fields_event_kind_categories: List[EventKindCategoriesReadableAttribute]
        :param filter_id_eq: [Filter Kind category by id using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_eq: List[int]
        :param filter_id_not_eq: [Filter Kind category by id using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_not_eq: List[int]
        :param filter_id_gt: [Filter Kind category by id using gt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_gt: List[int]
        :param filter_id_gte: [Filter Kind category by id using gte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_gte: List[int]
        :param filter_id_lt: [Filter Kind category by id using lt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_lt: List[int]
        :param filter_id_lte: [Filter Kind category by id using lte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_lte: List[int]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_event_kind_category_serialize(
            id=id,
            sort=sort,
            fields_event_kind_categories=fields_event_kind_categories,
            filter_id_eq=filter_id_eq,
            filter_id_not_eq=filter_id_not_eq,
            filter_id_gt=filter_id_gt,
            filter_id_gte=filter_id_gte,
            filter_id_lt=filter_id_lt,
            filter_id_lte=filter_id_lte,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
            _additional_query_params=_additional_query_params,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "EventKindCategoriesSingle",
            '401': "JsonapiFailure",
            '403': "JsonapiFailure",
            '404': "JsonapiFailure",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_event_kind_category_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="ID of the resource")],
        sort: Annotated[Optional[List[StrictStr]], Field(description="[Sort event_kind_categories according to one or more criteria](https://jsonapi.org/format/#fetching-sorting)  You should not include both ascending `id` and descending `-id` fields the same time  ")] = None,
        fields_event_kind_categories: Annotated[Optional[List[EventKindCategoriesReadableAttribute]], Field(description="[Include only specified fields of Kind category in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)")] = None,
        filter_id_eq: Annotated[Optional[List[StrictInt]], Field(description="[Filter Kind category by id using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_id_not_eq: Annotated[Optional[List[StrictInt]], Field(description="[Filter Kind category by id using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_id_gt: Annotated[Optional[List[StrictInt]], Field(description="[Filter Kind category by id using gt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_id_gte: Annotated[Optional[List[StrictInt]], Field(description="[Filter Kind category by id using gte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_id_lt: Annotated[Optional[List[StrictInt]], Field(description="[Filter Kind category by id using lt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_id_lte: Annotated[Optional[List[StrictInt]], Field(description="[Filter Kind category by id using lte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
        _additional_query_params: Optional[Dict[StrictStr, Any]] = None,
    ) -> ApiResponse[EventKindCategoriesSingle]:
        """Fetch Event kind category


        :param id: ID of the resource (required)
        :type id: str
        :param sort: [Sort event_kind_categories according to one or more criteria](https://jsonapi.org/format/#fetching-sorting)  You should not include both ascending `id` and descending `-id` fields the same time  
        :type sort: List[str]
        :param fields_event_kind_categories: [Include only specified fields of Kind category in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)
        :type fields_event_kind_categories: List[EventKindCategoriesReadableAttribute]
        :param filter_id_eq: [Filter Kind category by id using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_eq: List[int]
        :param filter_id_not_eq: [Filter Kind category by id using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_not_eq: List[int]
        :param filter_id_gt: [Filter Kind category by id using gt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_gt: List[int]
        :param filter_id_gte: [Filter Kind category by id using gte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_gte: List[int]
        :param filter_id_lt: [Filter Kind category by id using lt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_lt: List[int]
        :param filter_id_lte: [Filter Kind category by id using lte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_lte: List[int]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_event_kind_category_serialize(
            id=id,
            sort=sort,
            fields_event_kind_categories=fields_event_kind_categories,
            filter_id_eq=filter_id_eq,
            filter_id_not_eq=filter_id_not_eq,
            filter_id_gt=filter_id_gt,
            filter_id_gte=filter_id_gte,
            filter_id_lt=filter_id_lt,
            filter_id_lte=filter_id_lte,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
            _additional_query_params=_additional_query_params,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "EventKindCategoriesSingle",
            '401': "JsonapiFailure",
            '403': "JsonapiFailure",
            '404': "JsonapiFailure",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_event_kind_category_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="ID of the resource")],
        sort: Annotated[Optional[List[StrictStr]], Field(description="[Sort event_kind_categories according to one or more criteria](https://jsonapi.org/format/#fetching-sorting)  You should not include both ascending `id` and descending `-id` fields the same time  ")] = None,
        fields_event_kind_categories: Annotated[Optional[List[EventKindCategoriesReadableAttribute]], Field(description="[Include only specified fields of Kind category in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)")] = None,
        filter_id_eq: Annotated[Optional[List[StrictInt]], Field(description="[Filter Kind category by id using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_id_not_eq: Annotated[Optional[List[StrictInt]], Field(description="[Filter Kind category by id using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_id_gt: Annotated[Optional[List[StrictInt]], Field(description="[Filter Kind category by id using gt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_id_gte: Annotated[Optional[List[StrictInt]], Field(description="[Filter Kind category by id using gte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_id_lt: Annotated[Optional[List[StrictInt]], Field(description="[Filter Kind category by id using lt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_id_lte: Annotated[Optional[List[StrictInt]], Field(description="[Filter Kind category by id using lte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
        _additional_query_params: Optional[Dict[StrictStr, Any]] = None,
    ) -> RESTResponseType:
        """Fetch Event kind category


        :param id: ID of the resource (required)
        :type id: str
        :param sort: [Sort event_kind_categories according to one or more criteria](https://jsonapi.org/format/#fetching-sorting)  You should not include both ascending `id` and descending `-id` fields the same time  
        :type sort: List[str]
        :param fields_event_kind_categories: [Include only specified fields of Kind category in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)
        :type fields_event_kind_categories: List[EventKindCategoriesReadableAttribute]
        :param filter_id_eq: [Filter Kind category by id using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_eq: List[int]
        :param filter_id_not_eq: [Filter Kind category by id using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_not_eq: List[int]
        :param filter_id_gt: [Filter Kind category by id using gt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_gt: List[int]
        :param filter_id_gte: [Filter Kind category by id using gte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_gte: List[int]
        :param filter_id_lt: [Filter Kind category by id using lt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_lt: List[int]
        :param filter_id_lte: [Filter Kind category by id using lte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_lte: List[int]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_event_kind_category_serialize(
            id=id,
            sort=sort,
            fields_event_kind_categories=fields_event_kind_categories,
            filter_id_eq=filter_id_eq,
            filter_id_not_eq=filter_id_not_eq,
            filter_id_gt=filter_id_gt,
            filter_id_gte=filter_id_gte,
            filter_id_lt=filter_id_lt,
            filter_id_lte=filter_id_lte,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
            _additional_query_params=_additional_query_params,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "EventKindCategoriesSingle",
            '401': "JsonapiFailure",
            '403': "JsonapiFailure",
            '404': "JsonapiFailure",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_event_kind_category_serialize(
        self,
        id,
        sort,
        fields_event_kind_categories,
        filter_id_eq,
        filter_id_not_eq,
        filter_id_gt,
        filter_id_gte,
        filter_id_lt,
        filter_id_lte,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
        _additional_query_params: Optional[Dict[StrictStr, Any]] = None,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'sort': 'csv',
            'fields[event_kind_categories]': 'csv',
            'filter[id][eq]': 'csv',
            'filter[id][not_eq]': 'csv',
            'filter[id][gt]': 'csv',
            'filter[id][gte]': 'csv',
            'filter[id][lt]': 'csv',
            'filter[id][lte]': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters

        if _additional_query_params is not None:
            _query_params.extend((key, value) for key, value in _additional_query_params.items())

        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if fields_event_kind_categories is not None:
            
            _query_params.append(('fields[event_kind_categories]', fields_event_kind_categories))
            
        if filter_id_eq is not None:
            
            _query_params.append(('filter[id][eq]', filter_id_eq))
            
        if filter_id_not_eq is not None:
            
            _query_params.append(('filter[id][not_eq]', filter_id_not_eq))
            
        if filter_id_gt is not None:
            
            _query_params.append(('filter[id][gt]', filter_id_gt))
            
        if filter_id_gte is not None:
            
            _query_params.append(('filter[id][gte]', filter_id_gte))
            
        if filter_id_lt is not None:
            
            _query_params.append(('filter[id][lt]', filter_id_lt))
            
        if filter_id_lte is not None:
            
            _query_params.append(('filter[id][lte]', filter_id_lte))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/vnd.api+json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'ServiceTokenAuthHeader', 
            'ServiceTokenAuthParam'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/event_kind_categories/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def list_event_kind_categories(
        self,
        sort: Annotated[Optional[List[StrictStr]], Field(description="[Sort event_kind_categories according to one or more criteria](https://jsonapi.org/format/#fetching-sorting)  You should not include both ascending `id` and descending `-id` fields the same time  ")] = None,
        fields_event_kind_categories: Annotated[Optional[List[EventKindCategoriesReadableAttribute]], Field(description="[Include only specified fields of Kind category in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)")] = None,
        filter_id_eq: Annotated[Optional[List[StrictInt]], Field(description="[Filter Kind category by id using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_id_not_eq: Annotated[Optional[List[StrictInt]], Field(description="[Filter Kind category by id using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_id_gt: Annotated[Optional[List[StrictInt]], Field(description="[Filter Kind category by id using gt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_id_gte: Annotated[Optional[List[StrictInt]], Field(description="[Filter Kind category by id using gte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_id_lt: Annotated[Optional[List[StrictInt]], Field(description="[Filter Kind category by id using lt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_id_lte: Annotated[Optional[List[StrictInt]], Field(description="[Filter Kind category by id using lte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
        _additional_query_params: Optional[Dict[StrictStr, Any]] = None,
    ) -> EventKindCategoriesCollection:
        """List Event kind categories


        :param sort: [Sort event_kind_categories according to one or more criteria](https://jsonapi.org/format/#fetching-sorting)  You should not include both ascending `id` and descending `-id` fields the same time  
        :type sort: List[str]
        :param fields_event_kind_categories: [Include only specified fields of Kind category in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)
        :type fields_event_kind_categories: List[EventKindCategoriesReadableAttribute]
        :param filter_id_eq: [Filter Kind category by id using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_eq: List[int]
        :param filter_id_not_eq: [Filter Kind category by id using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_not_eq: List[int]
        :param filter_id_gt: [Filter Kind category by id using gt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_gt: List[int]
        :param filter_id_gte: [Filter Kind category by id using gte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_gte: List[int]
        :param filter_id_lt: [Filter Kind category by id using lt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_lt: List[int]
        :param filter_id_lte: [Filter Kind category by id using lte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_lte: List[int]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_event_kind_categories_serialize(
            sort=sort,
            fields_event_kind_categories=fields_event_kind_categories,
            filter_id_eq=filter_id_eq,
            filter_id_not_eq=filter_id_not_eq,
            filter_id_gt=filter_id_gt,
            filter_id_gte=filter_id_gte,
            filter_id_lt=filter_id_lt,
            filter_id_lte=filter_id_lte,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
            _additional_query_params=_additional_query_params,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "EventKindCategoriesCollection",
            '401': "JsonapiFailure",
            '403': "JsonapiFailure",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def list_event_kind_categories_with_http_info(
        self,
        sort: Annotated[Optional[List[StrictStr]], Field(description="[Sort event_kind_categories according to one or more criteria](https://jsonapi.org/format/#fetching-sorting)  You should not include both ascending `id` and descending `-id` fields the same time  ")] = None,
        fields_event_kind_categories: Annotated[Optional[List[EventKindCategoriesReadableAttribute]], Field(description="[Include only specified fields of Kind category in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)")] = None,
        filter_id_eq: Annotated[Optional[List[StrictInt]], Field(description="[Filter Kind category by id using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_id_not_eq: Annotated[Optional[List[StrictInt]], Field(description="[Filter Kind category by id using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_id_gt: Annotated[Optional[List[StrictInt]], Field(description="[Filter Kind category by id using gt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_id_gte: Annotated[Optional[List[StrictInt]], Field(description="[Filter Kind category by id using gte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_id_lt: Annotated[Optional[List[StrictInt]], Field(description="[Filter Kind category by id using lt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_id_lte: Annotated[Optional[List[StrictInt]], Field(description="[Filter Kind category by id using lte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
        _additional_query_params: Optional[Dict[StrictStr, Any]] = None,
    ) -> ApiResponse[EventKindCategoriesCollection]:
        """List Event kind categories


        :param sort: [Sort event_kind_categories according to one or more criteria](https://jsonapi.org/format/#fetching-sorting)  You should not include both ascending `id` and descending `-id` fields the same time  
        :type sort: List[str]
        :param fields_event_kind_categories: [Include only specified fields of Kind category in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)
        :type fields_event_kind_categories: List[EventKindCategoriesReadableAttribute]
        :param filter_id_eq: [Filter Kind category by id using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_eq: List[int]
        :param filter_id_not_eq: [Filter Kind category by id using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_not_eq: List[int]
        :param filter_id_gt: [Filter Kind category by id using gt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_gt: List[int]
        :param filter_id_gte: [Filter Kind category by id using gte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_gte: List[int]
        :param filter_id_lt: [Filter Kind category by id using lt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_lt: List[int]
        :param filter_id_lte: [Filter Kind category by id using lte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_lte: List[int]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_event_kind_categories_serialize(
            sort=sort,
            fields_event_kind_categories=fields_event_kind_categories,
            filter_id_eq=filter_id_eq,
            filter_id_not_eq=filter_id_not_eq,
            filter_id_gt=filter_id_gt,
            filter_id_gte=filter_id_gte,
            filter_id_lt=filter_id_lt,
            filter_id_lte=filter_id_lte,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
            _additional_query_params=_additional_query_params,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "EventKindCategoriesCollection",
            '401': "JsonapiFailure",
            '403': "JsonapiFailure",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def list_event_kind_categories_without_preload_content(
        self,
        sort: Annotated[Optional[List[StrictStr]], Field(description="[Sort event_kind_categories according to one or more criteria](https://jsonapi.org/format/#fetching-sorting)  You should not include both ascending `id` and descending `-id` fields the same time  ")] = None,
        fields_event_kind_categories: Annotated[Optional[List[EventKindCategoriesReadableAttribute]], Field(description="[Include only specified fields of Kind category in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)")] = None,
        filter_id_eq: Annotated[Optional[List[StrictInt]], Field(description="[Filter Kind category by id using eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_id_not_eq: Annotated[Optional[List[StrictInt]], Field(description="[Filter Kind category by id using not_eq operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_id_gt: Annotated[Optional[List[StrictInt]], Field(description="[Filter Kind category by id using gt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_id_gte: Annotated[Optional[List[StrictInt]], Field(description="[Filter Kind category by id using gte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_id_lt: Annotated[Optional[List[StrictInt]], Field(description="[Filter Kind category by id using lt operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        filter_id_lte: Annotated[Optional[List[StrictInt]], Field(description="[Filter Kind category by id using lte operator](https://jsonapi.org/format/#fetching-filtering)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
        _additional_query_params: Optional[Dict[StrictStr, Any]] = None,
    ) -> RESTResponseType:
        """List Event kind categories


        :param sort: [Sort event_kind_categories according to one or more criteria](https://jsonapi.org/format/#fetching-sorting)  You should not include both ascending `id` and descending `-id` fields the same time  
        :type sort: List[str]
        :param fields_event_kind_categories: [Include only specified fields of Kind category in response](https://jsonapi.org/format/#fetching-sparse-fieldsets)
        :type fields_event_kind_categories: List[EventKindCategoriesReadableAttribute]
        :param filter_id_eq: [Filter Kind category by id using eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_eq: List[int]
        :param filter_id_not_eq: [Filter Kind category by id using not_eq operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_not_eq: List[int]
        :param filter_id_gt: [Filter Kind category by id using gt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_gt: List[int]
        :param filter_id_gte: [Filter Kind category by id using gte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_gte: List[int]
        :param filter_id_lt: [Filter Kind category by id using lt operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_lt: List[int]
        :param filter_id_lte: [Filter Kind category by id using lte operator](https://jsonapi.org/format/#fetching-filtering)
        :type filter_id_lte: List[int]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_event_kind_categories_serialize(
            sort=sort,
            fields_event_kind_categories=fields_event_kind_categories,
            filter_id_eq=filter_id_eq,
            filter_id_not_eq=filter_id_not_eq,
            filter_id_gt=filter_id_gt,
            filter_id_gte=filter_id_gte,
            filter_id_lt=filter_id_lt,
            filter_id_lte=filter_id_lte,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
            _additional_query_params=_additional_query_params,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "EventKindCategoriesCollection",
            '401': "JsonapiFailure",
            '403': "JsonapiFailure",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _list_event_kind_categories_serialize(
        self,
        sort,
        fields_event_kind_categories,
        filter_id_eq,
        filter_id_not_eq,
        filter_id_gt,
        filter_id_gte,
        filter_id_lt,
        filter_id_lte,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
        _additional_query_params: Optional[Dict[StrictStr, Any]] = None,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'sort': 'csv',
            'fields[event_kind_categories]': 'csv',
            'filter[id][eq]': 'csv',
            'filter[id][not_eq]': 'csv',
            'filter[id][gt]': 'csv',
            'filter[id][gte]': 'csv',
            'filter[id][lt]': 'csv',
            'filter[id][lte]': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters

        if _additional_query_params is not None:
            _query_params.extend((key, value) for key, value in _additional_query_params.items())

        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if fields_event_kind_categories is not None:
            
            _query_params.append(('fields[event_kind_categories]', fields_event_kind_categories))
            
        if filter_id_eq is not None:
            
            _query_params.append(('filter[id][eq]', filter_id_eq))
            
        if filter_id_not_eq is not None:
            
            _query_params.append(('filter[id][not_eq]', filter_id_not_eq))
            
        if filter_id_gt is not None:
            
            _query_params.append(('filter[id][gt]', filter_id_gt))
            
        if filter_id_gte is not None:
            
            _query_params.append(('filter[id][gte]', filter_id_gte))
            
        if filter_id_lt is not None:
            
            _query_params.append(('filter[id][lt]', filter_id_lt))
            
        if filter_id_lte is not None:
            
            _query_params.append(('filter[id][lte]', filter_id_lte))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/vnd.api+json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'ServiceTokenAuthHeader', 
            'ServiceTokenAuthParam'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/event_kind_categories',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


