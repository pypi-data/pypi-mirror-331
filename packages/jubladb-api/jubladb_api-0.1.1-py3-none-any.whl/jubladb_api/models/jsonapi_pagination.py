# coding: utf-8

"""
    Hitobito JSON:API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Contact: oss@basilbader.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from jubladb_api.models.jsonapi_link import JsonapiLink
from typing import Optional, Set
from typing_extensions import Self

class JsonapiPagination(BaseModel):
    """
    JsonapiPagination
    """ # noqa: E501
    first: Optional[JsonapiLink] = None
    last: Optional[JsonapiLink] = None
    prev: Optional[JsonapiLink] = None
    next: Optional[JsonapiLink] = None
    __properties: ClassVar[List[str]] = ["first", "last", "prev", "next"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of JsonapiPagination from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of first
        if self.first:
            _dict['first'] = self.first.to_dict()
        # override the default output from pydantic by calling `to_dict()` of last
        if self.last:
            _dict['last'] = self.last.to_dict()
        # override the default output from pydantic by calling `to_dict()` of prev
        if self.prev:
            _dict['prev'] = self.prev.to_dict()
        # override the default output from pydantic by calling `to_dict()` of next
        if self.next:
            _dict['next'] = self.next.to_dict()
        # set to None if first (nullable) is None
        # and model_fields_set contains the field
        if self.first is None and "first" in self.model_fields_set:
            _dict['first'] = None

        # set to None if last (nullable) is None
        # and model_fields_set contains the field
        if self.last is None and "last" in self.model_fields_set:
            _dict['last'] = None

        # set to None if prev (nullable) is None
        # and model_fields_set contains the field
        if self.prev is None and "prev" in self.model_fields_set:
            _dict['prev'] = None

        # set to None if next (nullable) is None
        # and model_fields_set contains the field
        if self.next is None and "next" in self.model_fields_set:
            _dict['next'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of JsonapiPagination from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "first": JsonapiLink.from_dict(obj["first"]) if obj.get("first") is not None else None,
            "last": JsonapiLink.from_dict(obj["last"]) if obj.get("last") is not None else None,
            "prev": JsonapiLink.from_dict(obj["prev"]) if obj.get("prev") is not None else None,
            "next": JsonapiLink.from_dict(obj["next"]) if obj.get("next") is not None else None
        })
        return _obj


