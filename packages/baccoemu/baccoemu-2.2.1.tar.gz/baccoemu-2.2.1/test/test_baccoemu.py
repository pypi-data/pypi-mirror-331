#run with python -m unittest test.test_baccoemu
import unittest
import baccoemu
import numpy as np
import copy

emu = baccoemu.Matter_powerspectrum()
lbias_emu = baccoemu.Lbias_expansion()
lbias_RSD_emu = baccoemu.Lbias_expansion_RSD()

kk = np.logspace(-2, 0.6, 10)
k_lbias = np.logspace(-2, np.log10(0.7), 10)

params = {
    'omega_matter'  :  0.315,
    'A_s'           :  2e-9,
    'omega_baryon'  :  0.05,
    'ns'            :  0.96,
    'hubble'        :  0.67,
    'neutrino_mass' :  0.1,
    'w0'            : -1.1,
    'wa'            :  0.2,
    'expfactor'     :  0.8,

    'M_c'           :  14,
    'eta'           : -0.3,
    'beta'          : -0.22,
    'M1_z0_cen'     : 10.5,
    'theta_out'     : 0.25,
    'theta_inn'     : -0.86,
    'M_inn'         : 13.4
}

params_sigma8 = copy.deepcopy(params)
del params_sigma8['A_s']
params_sigma8['sigma8_cold'] = 0.78

params_vec = copy.deepcopy(params)
for key in params_vec:
    params_vec[key] = np.full(3, params_vec[key])

params_sigma8_vec = copy.deepcopy(params_sigma8)
for key in params_sigma8_vec:
    params_sigma8_vec[key] = np.full(3, params_sigma8_vec[key])

dec_prec = 3
dec_prec_vec = 3

class test_baccoemu(unittest.TestCase):
    def test_get_nonlinear_boost(self):
        k, Q = emu.get_nonlinear_boost(k=kk, **params)
        k, Q_vec = emu.get_nonlinear_boost(k=kk, **params_vec)
        Q_tab = np.array([1., 0.99590761, 0.99121246, 0.98290575, 1.03702336,
                          1.33282697, 2.278292, 5.05824684, 11.3084095, 20.30722402])
        for i, j in zip(Q, Q_tab):
            self.assertAlmostEqual(np.round(i / j, dec_prec), 1)
        for i, j in zip(Q_vec[0], Q_tab):
            self.assertAlmostEqual(np.round(i / j, dec_prec), 1)

    def test_get_baryonic_boost(self):
        k, S = emu.get_baryonic_boost(k=kk, **params)
        k, S_vec = emu.get_baryonic_boost(k=kk, **params_vec)
        S_tab = np.array([1., 0.99987408, 0.99823301, 0.99842851, 0.99661524,
                          0.99048668, 0.97008812, 0.93416284, 0.88753495, 0.83362897])
        for i, j in zip(S, S_tab):
            self.assertAlmostEqual(np.round(i / j, dec_prec), 1)
        for i, j in zip(S_vec[0], S_tab):
            self.assertAlmostEqual(np.round(i / j, dec_prec), 1)

    def test_get_linear_pk(self):
        k, pk = emu.get_linear_pk(k=kk, cold=True,**params)
        k, pk_vec = emu.get_linear_pk(k=kk, cold=True,**params_vec)
        pk_tab = np.array([1.62854202e+04, 1.77584272e+04, 1.16049010e+04, 6.59140263e+03,
                           2.49394757e+03, 7.38743943e+02, 1.88090420e+02, 4.23532034e+01,
                           8.68574677e+00, 1.66160033e+00])
        for i, j in zip(pk, pk_tab):
            self.assertAlmostEqual(np.round(i / j, dec_prec), 1)
        for i, j in zip(pk_vec[0], pk_tab):
            self.assertAlmostEqual(np.round(i / j, dec_prec), 1)

        k, pk = emu.get_linear_pk(k=kk, cold=False, **params)
        k, pk_vec = emu.get_linear_pk(k=kk, cold=False, **params_vec)
        pk_tab = np.array([1.61550167e+04, 1.75643864e+04, 1.14536956e+04, 6.48821102e+03,
                           2.45236575e+03, 7.26781531e+02, 1.85054654e+02, 4.16805981e+01,
                           8.54843543e+00, 1.63536007e+00])
        for i, j in zip(pk, pk_tab):
            self.assertAlmostEqual(np.round(i / j, dec_prec), 1)
        for i, j in zip(pk_vec[0], pk_tab):
            self.assertAlmostEqual(np.round(i / j, dec_prec), 1)

    def test_get_no_wiggles_pk(self):
        k, pk = emu.get_no_wiggles_pk(k=kk, **params)
        k, pk_vec = emu.get_no_wiggles_pk(k=kk, **params_vec)
        pk_tab = np.array([1.51897503e+04, 1.65266487e+04, 1.22728098e+04, 6.15643967e+03,
                           2.39506902e+03, 7.34150779e+02, 1.88040439e+02, 4.23532034e+01,
                           8.68574677e+00, 1.66160033e+00])
        for i, j in zip(pk, pk_tab):
            self.assertAlmostEqual(np.round(i / j, dec_prec), 1)
        for i, j in zip(pk_vec[0], pk_tab):
            self.assertAlmostEqual(np.round(i / j, dec_prec), 1)

    def test_get_nonlinear_pk(self):
        k, pk = emu.get_nonlinear_pk(k=kk, baryonic_boost=True, **params)
        k, pk_vec = emu.get_nonlinear_pk(k=kk, baryonic_boost=True, **params_vec)
        pk_tab = np.array([16285.42024, 17683.5257821, 11482.59689214, 6468.54627449,
                           2577.52792877, 975.25087152, 415.706914  , 200.12846733,
                           87.17544124, 28.12871718])
        for i, j in zip(pk, pk_tab):
            self.assertAlmostEqual(np.round(i / j, dec_prec), 1)
        for i, j in zip(pk_vec[0], pk_tab):
            self.assertAlmostEqual(np.round(i / j, dec_prec), 1)

    def test_get_sigma8(self):
        sigma8 = emu.get_sigma8(**params)
        sigma8_vec = emu.get_sigma8(**params_vec)
        self.assertAlmostEqual(np.round(sigma8 / 0.78652451, dec_prec), 1)
        self.assertAlmostEqual(np.round(sigma8_vec[0] / 0.78652451, dec_prec), 1)

    def test_get_sigma12(self):
        sigma12 = emu.get_sigma12(**params)
        sigma12_vec = emu.get_sigma12(**params_vec)
        self.assertAlmostEqual(np.round(sigma12 / 0.78323520, dec_prec), 1)
        self.assertAlmostEqual(np.round(sigma12_vec[0] / 0.78323520, dec_prec), 1)

    def test_get_linear_pk_sigma8(self):
        k, pk = emu.get_linear_pk(k=kk, cold=True, **params_sigma8)
        k, pk_vec = emu.get_linear_pk(k=kk, cold=True, **params_sigma8_vec)
        pk_tab = np.array([1.60163538e+04, 1.74650239e+04, 1.14131658e+04, 6.48250000e+03,
                           2.45274276e+03, 7.26538474e+02, 1.84982805e+02, 4.16534471e+01,
                           8.54224155e+00, 1.63414750e+00])
        for i, j in zip(pk, pk_tab):
            self.assertAlmostEqual(np.round(i / j, dec_prec), 1)
        for i, j in zip(pk_vec[0], pk_tab):
            self.assertAlmostEqual(np.round(i / j, dec_prec), 1)

        k, pk = emu.get_linear_pk(k=kk, cold=False, **params_sigma8)
        k, pk_vec = emu.get_linear_pk(k=kk, cold=False, **params_sigma8_vec)
        pk_tab = np.array([1.58881048e+04, 1.72741890e+04, 1.12644586e+04, 6.38101332e+03,
                           2.41184796e+03, 7.14773705e+02, 1.81997196e+02, 4.09919545e+01,
                           8.40719885e+00, 1.60834078e+00])
        for i, j in zip(pk, pk_tab):
            self.assertAlmostEqual(np.round(i / j, dec_prec), 1)
        for i, j in zip(pk_vec[0], pk_tab):
            self.assertAlmostEqual(np.round(i / j, dec_prec), 1)

    def test_get_lpt_pk(self):
        k, pk = lbias_emu.get_lpt_pk(k=k_lbias, **params)
        k, pk_vec = lbias_emu.get_lpt_pk(k=k_lbias, **params_vec)

        pk_tab = np.array([[ 1.63348403e+04,  1.80863642e+04,  1.60351504e+04,
         1.07565770e+04,  7.48276912e+03,  3.96764583e+03,
         2.30246901e+03,  1.48304388e+03,  1.04685987e+03,
         7.36131890e+02],
       [ 1.63287094e+04,  1.81047719e+04,  1.60241328e+04,
         1.07603389e+04,  7.51605453e+03,  4.04162474e+03,
         2.41864873e+03,  1.63092957e+03,  1.20302374e+03,
         8.98641306e+02],
       [ 6.67143251e-01,  9.19713234e+00,  4.34139543e+01,
         1.25943084e+02,  2.71789923e+02,  4.69384256e+02,
         6.00429121e+02,  6.05058025e+02,  4.98619776e+02,
         4.04954903e+02],
       [-2.85811341e+00, -6.84447088e+00, -1.90887589e+01,
        -4.07585300e+01, -6.96375666e+01, -9.25344979e+01,
        -9.35671424e+01, -7.37828216e+01, -4.38339995e+01,
         4.06179869e+00],
       [-1.79401861e+00, -4.75402959e+00, -1.06652995e+01,
        -1.81809618e+01, -3.17463866e+01, -4.02933388e+01,
        -4.98134851e+01, -5.72058919e+01, -5.65344758e+01,
        -5.31136255e+01],
       [ 1.63033453e+04,  1.80633953e+04,  1.60021255e+04,
         1.07285396e+04,  7.45779896e+03,  3.88454890e+03,
         2.14750118e+03,  1.25386150e+03,  7.70702179e+02,
         4.91088012e+02],
       [ 2.21614242e+01,  5.80447298e+01,  1.43133629e+02,
         3.02042322e+02,  5.39551920e+02,  8.02047871e+02,
         9.41088476e+02,  8.92734681e+02,  6.98386253e+02,
         4.93786250e+02],
       [ 8.59852234e+00,  1.22408947e+01,  7.80467322e+00,
        -1.08033159e+01, -4.75066584e+01, -8.79798726e+01,
        -1.05319076e+02, -9.37427928e+01, -6.60581538e+01,
        -1.33756830e+01],
       [-1.83428987e+00, -4.72259495e+00, -1.06174104e+01,
        -1.81704541e+01, -3.18319745e+01, -4.03205765e+01,
        -4.99428695e+01, -5.72898913e+01, -5.66146091e+01,
        -5.30964953e+01],
       [ 3.99186542e+03,  3.96854199e+03,  3.92295327e+03,
         3.81155946e+03,  3.58447130e+03,  3.15781770e+03,
         2.52431689e+03,  1.77132288e+03,  1.03464793e+03,
         3.86378007e+02],
       [ 2.58727807e+03,  2.47440395e+03,  2.26229211e+03,
         1.92223602e+03,  1.44759750e+03,  9.41815177e+02,
         4.96126129e+02,  1.82190933e+02,  9.93406221e-01,
        -4.81347412e+01],
       [-5.44347928e-02,  1.29889979e-01,  4.21232485e-01,
         8.33282770e-01,  1.58432767e+00,  2.17508832e+00,
         1.10403212e+00, -4.91403238e+00, -2.42109962e+01,
        -1.09013109e+02],
       [ 1.68128965e+03,  1.58063260e+03,  1.41258443e+03,
         1.17309547e+03,  8.86534824e+02,  6.07578789e+02,
         3.69526140e+02,  1.91748614e+02,  7.89115927e+01,
         3.06354629e+01],
       [ 4.41467179e-02,  1.14669602e-01,  2.96499181e-01,
         7.62526523e-01,  1.89791424e+00,  4.43078666e+00,
         9.13112800e+00,  1.60043149e+01,  2.13143636e+01,
         4.63480125e+00],
       [ 1.78464868e-04,  1.29632995e-03,  7.65516519e-03,
         3.52477038e-02,  1.69128576e-01,  6.53857456e-01,
         2.76849596e+00,  1.26865797e+01,  6.12345088e+01,
         2.43612463e+02]])

        for n in range(15):
            for i, j in zip(pk[n], pk_tab[n]):
                self.assertAlmostEqual(np.round(i / j, dec_prec), 1)
        for n in range(15):
            for i, j in zip(pk_vec[n][0], pk_tab[n]):
                print(i / j)
                self.assertAlmostEqual(np.round(i / j, dec_prec_vec), 1)

    def test_get_lpt_pk_RSD(self):
        k_RSD = copy.deepcopy(k_lbias)
        k_RSD[0] = 0.01023531
        k_RSD[-1]=0.64
        k, pk_poles = lbias_RSD_emu.get_lpt_pk(k=k_RSD, **params)
        k, pk_vec_poles = lbias_RSD_emu.get_lpt_pk(k=k_RSD, **params_vec)
        pk_tab = np.array([[[ 2.54335576e+04,  2.77308877e+04,  2.42540394e+04,
          1.59357923e+04,  1.05810848e+04,  5.35406797e+03,
          2.71790439e+03,  1.24480448e+03,  4.55326509e+02,
          1.29904097e+02],
        [ 2.01410141e+04,  2.20207536e+04,  1.93702008e+04,
          1.29730002e+04,  8.86947340e+03,  4.75555075e+03,
          2.63110789e+03,  1.37427174e+03,  6.33159535e+02,
          2.67061529e+02],
        [-2.36336955e+00,  5.87085956e+00,  4.88041789e+01,
          1.58588046e+02,  3.47941406e+02,  5.77189692e+02,
          6.78159048e+02,  6.08185248e+02,  4.35469498e+02,
          2.77694417e+02],
        [-5.59122355e+00, -1.42498175e+01, -3.53602584e+01,
         -7.03460200e+01, -1.12671461e+02, -1.41092600e+02,
         -1.39571454e+02, -1.16118086e+02, -8.22799618e+01,
         -4.77772768e+01],
        [ 2.12602651e+00,  5.69648081e+00,  1.28573029e+01,
          2.19974712e+01,  3.86628615e+01,  5.31139210e+01,
          7.56962255e+01,  1.01781976e+02,  1.20515021e+02,
          1.09041003e+02],
        [ 1.64741346e+04,  1.80996508e+04,  1.60659132e+04,
          1.08805966e+04,  7.71354480e+03,  4.40177081e+03,
          2.68958050e+03,  1.60457150e+03,  8.94626063e+02,
          4.91968381e+02],
        [ 2.74011605e+01,  6.81812644e+01,  1.68275807e+02,
          3.54352855e+02,  6.20176708e+02,  8.84470959e+02,
          9.75733452e+02,  8.69698478e+02,  6.57557598e+02,
          4.54339556e+02],
        [ 1.00623146e+01,  1.34908885e+01,  6.83240002e+00,
         -1.65043949e+01, -6.06174942e+01, -1.01401438e+02,
         -1.12551899e+02, -9.45528127e+01, -6.22152188e+01,
         -3.06511301e+01],
        [ 1.72736565e+00,  4.65193872e+00,  1.06015572e+01,
          1.85063521e+01,  3.36980829e+01,  4.94868810e+01,
          7.75875012e+01,  1.18862938e+02,  1.70549949e+02,
          2.01653288e+02],
        [ 3.98105939e+03,  3.95118252e+03,  3.88337890e+03,
          3.75079040e+03,  3.48097899e+03,  3.02318133e+03,
          2.36778210e+03,  1.63784918e+03,  9.68495385e+02,
          5.29875804e+02],
        [ 2.57801646e+03,  2.46553469e+03,  2.24294847e+03,
          1.88818665e+03,  1.40100844e+03,  8.94287141e+02,
          4.69455817e+02,  1.87023435e+02,  4.13686558e+01,
          5.85790449e+00],
        [ 2.84594174e-03,  1.75939612e-02,  1.11376532e-01,
          6.01714020e-01,  2.70302999e+00,  9.92797040e+00,
          2.81569829e+01,  6.45091534e+01,  1.25370418e+02,
          1.86134534e+02],
        [ 1.67717550e+03,  1.57427521e+03,  1.39764060e+03,
          1.14884606e+03,  8.54740401e+02,  5.77878884e+02,
          3.49393533e+02,  1.87330953e+02,  9.04000218e+01,
          4.70046378e+01],
        [ 1.38943667e-03,  3.84811498e-03,  4.20006028e-03,
         -2.75626710e-02, -2.63863102e-01, -1.13208057e+00,
         -3.23379126e+00, -6.99713843e+00, -1.18627921e+01,
         -1.25633871e+01],
        [ 1.78918633e-04,  1.19453505e-03,  6.99808205e-03,
          3.13892432e-02,  1.46856798e-01,  5.54799185e-01,
          2.23948905e+00,  8.82751154e+00,  3.25263271e+01,
          8.26062962e+01]],

       [[ 1.86343122e+04,  2.03365534e+04,  1.77141216e+04,
          1.14358573e+04,  7.35837250e+03,  3.76710328e+03,
          1.93097609e+03,  8.28685882e+02,  1.84400923e+02,
         -6.30376355e+01],
        [ 7.33405413e+03,  7.95857455e+03,  6.90268180e+03,
          4.54141498e+03,  3.06420740e+03,  1.84497925e+03,
          1.17430387e+03,  6.54379187e+02,  2.57709257e+02,
          3.22506353e+01],
        [-7.89911424e+00, -1.01644374e+01,  6.97987801e+00,
          7.40070071e+01,  1.95625636e+02,  3.70657623e+02,
          4.49900315e+02,  4.06272232e+02,  2.90252944e+02,
          1.86583501e+02],
        [-7.11543668e+00, -1.68964995e+01, -3.76976627e+01,
         -6.68881212e+01, -1.00771591e+02, -1.16090349e+02,
         -1.11104140e+02, -9.13878320e+01, -6.47034878e+01,
         -3.76653733e+01],
        [ 7.90566235e-01,  2.06473399e+00,  4.60022568e+00,
          7.75715811e+00,  1.34587453e+01,  2.08134995e+01,
          3.40623099e+01,  4.88750954e+01,  4.99775096e+01,
          1.42654755e+01],
        [-1.02309383e+01, -1.99267039e+01, -1.20304165e+01,
          7.78283291e+01,  2.05112106e+02,  4.92578005e+02,
          5.99510430e+02,  5.18534081e+02,  3.50580872e+02,
          2.05785967e+02],
        [ 6.78374486e+00,  1.66459094e+01,  4.44935777e+01,
          1.05879870e+02,  1.93605767e+02,  2.96701179e+02,
          3.35198907e+02,  3.01362342e+02,  2.28219729e+02,
          1.58329611e+02],
        [ 2.01305737e+00,  6.20682057e-01, -6.49413334e+00,
         -1.80764156e+01, -3.80973752e+01, -4.85450582e+01,
         -5.04546384e+01, -4.25385891e+01, -2.91334572e+01,
         -1.52914124e+01],
        [-9.08324261e-04, -5.47346640e-03, -8.83430952e-03,
          1.28808120e-01,  8.93838886e-01,  5.52818631e+00,
          1.72946044e+01,  3.85375655e+01,  6.72913589e+01,
          8.54002777e+01],
        [-1.50046662e+01, -3.84442057e+01, -7.85124420e+01,
         -1.07192523e+02, -1.44258036e+02, -1.07726140e+02,
         -8.77074705e+01, -7.35955742e+01, -5.83439908e+01,
         -3.66692848e+01],
        [-3.72034111e+00, -9.53913671e+00, -1.95621450e+01,
         -2.67865242e+01, -3.62175921e+01, -2.69264554e+01,
         -2.19141285e+01, -1.84257089e+01, -1.46372392e+01,
         -9.22720011e+00],
        [ 6.84193667e-04,  4.23216658e-03,  2.93080700e-02,
          1.79550134e-01,  8.46995086e-01,  3.35348870e+00,
          9.71048098e+00,  2.23237079e+01,  4.31913562e+01,
          6.43250252e+01],
        [-3.77502152e+00, -9.67167525e+00, -1.97130023e+01,
         -2.66602094e+01, -3.60395560e+01, -2.66470557e+01,
         -2.17764508e+01, -1.83998283e+01, -1.45981769e+01,
         -9.14123831e+00],
        [-2.65725062e-04, -5.77469377e-05, -4.03556694e-03,
         -3.04394943e-02, -1.67177053e-01, -5.47332666e-01,
         -1.45667217e+00, -3.15100576e+00, -5.55398897e+00,
         -6.26217922e+00],
        [ 2.95043344e-05,  4.95761185e-06, -1.59988155e-05,
          2.37755477e-04,  3.90812644e-03,  6.20858873e-02,
          4.98052451e-01,  2.85686945e+00,  1.27994913e+01,
          3.48989534e+01]],

       [[ 1.66412891e+03,  1.79371746e+03,  1.53382152e+03,
          9.88015215e+02,  6.48632132e+02,  4.32872037e+02,
          3.08346316e+02,  1.86512293e+02,  6.57628096e+01,
         -7.21773910e-01],
        [-4.72195886e+00, -1.06612308e+01, -1.45720013e+01,
          3.57980027e+00,  3.19838132e+01,  1.12948214e+02,
          1.45635109e+02,  1.26360121e+02,  7.81616907e+01,
          3.40123097e+01],
        [-2.02939373e+00, -4.63583757e+00, -6.93063358e+00,
         -1.94367126e+00,  7.18793975e+00,  3.20566915e+01,
          4.37599689e+01,  4.09405788e+01,  2.93822443e+01,
          1.89461498e+01],
        [-1.32451195e+00, -3.57372387e+00, -7.91311189e+00,
         -1.21348338e+01, -1.76123671e+01, -1.56992314e+01,
         -1.34527204e+01, -1.08661043e+01, -8.10796364e+00,
         -5.00991020e+00],
        [-7.42893405e-04, -2.70675051e-03, -9.91358683e-03,
          7.33790489e-03,  1.46448420e-01,  1.27979486e+00,
          4.21601062e+00,  9.37490775e+00,  1.49206381e+01,
          1.40652751e+01],
        [-2.14028502e+00, -4.80120531e+00, -6.50030671e+00,
          1.43118117e+00,  1.46020693e+01,  4.89209761e+01,
          6.53433401e+01,  6.16405470e+01,  4.57459831e+01,
          3.05699109e+01],
        [-2.43520251e+00, -6.26463812e+00, -1.27455269e+01,
         -1.69415447e+01, -2.23142367e+01, -1.45820169e+01,
         -1.06372259e+01, -9.30643741e+00, -8.93747044e+00,
         -7.10068117e+00],
        [-1.23839661e+00, -3.16294655e+00, -6.39524271e+00,
         -8.47224197e+00, -1.11765797e+01, -7.28300210e+00,
         -5.32114369e+00, -4.67162143e+00, -4.47846481e+00,
         -3.53255417e+00],
        [-1.90859516e-04, -1.20702197e-03, -4.23576421e-03,
          2.30652261e-03,  6.31351607e-02,  5.47673162e-01,
          1.88331762e+00,  4.56539704e+00,  8.69018954e+00,
          1.24532113e+01],
        [-9.82762085e+00, -2.50038479e+01, -5.09526089e+01,
         -6.76792235e+01, -8.96796438e+01, -5.82336368e+01,
         -4.23214029e+01, -3.73637258e+01, -3.56958713e+01,
         -2.81781240e+01],
        [-2.43873591e+00, -6.26561547e+00, -1.27057560e+01,
         -1.68623861e+01, -2.22315095e+01, -1.44857452e+01,
         -1.05450916e+01, -9.26078382e+00, -8.89520912e+00,
         -7.02489076e+00],
        [-5.22609334e-05, -1.59398340e-03, -8.52482345e-03,
         -2.79316573e-02, -9.67916131e-02, -1.62382546e-01,
         -3.07613117e-01, -6.91844257e-01, -1.70294042e+00,
         -2.91385806e+00],
        [-2.50006063e+00, -6.37552427e+00, -1.28548654e+01,
         -1.69905535e+01, -2.23413134e+01, -1.44909413e+01,
         -1.05265655e+01, -9.30886753e+00, -8.90238036e+00,
         -7.05518348e+00],
        [-1.56052376e-04, -8.37982468e-04, -4.23239533e-03,
         -1.43979466e-02, -4.90699550e-02, -8.19541348e-02,
         -1.53937886e-01, -3.45688107e-01, -8.49844999e-01,
         -1.45154624e+00],
        [ 9.92708211e-06,  1.13425372e-06,  7.91256771e-06,
          3.36022479e-07,  2.85032348e-04,  6.24174442e-03,
          5.40256563e-02,  3.36980970e-01,  1.64691715e+00,
          5.06444947e+00]]])

        for pole in range(3):
            for n in range(15):
                for i, j in zip(pk_poles[pole][n], pk_tab[pole][n]):
                    self.assertAlmostEqual(np.round(i / j, dec_prec), 1)
        for pole in range(3):
            for n in range(15):
                for i, j in zip(pk_vec_poles[pole][n][0], pk_tab[pole][n]):
                    print(i / j)
                    self.assertAlmostEqual(np.round(i / j, dec_prec_vec), 1)

    def test_get_lpt_pk_sigma8(self):
        k, pk = lbias_emu.get_lpt_pk(k=k_lbias, **params_sigma8)
        k, pk_vec = lbias_emu.get_lpt_pk(k=k_lbias, **params_sigma8_vec)
        pk_tab = np.array([[ 1.60628965e+04,  1.77839139e+04,  1.57662380e+04,
         1.05748657e+04,  7.35449358e+03,  3.89526072e+03,
         2.25479323e+03,  1.44687843e+03,  1.01711707e+03,
         7.13447280e+02],
       [ 1.60545921e+04,  1.77991374e+04,  1.57534490e+04,
         1.05790200e+04,  7.38603720e+03,  3.96690479e+03,
         2.36752930e+03,  1.59013725e+03,  1.16819942e+03,
         8.70750586e+02],
       [ 6.45381425e-01,  8.89555208e+00,  4.19946517e+01,
         1.21841527e+02,  2.62968402e+02,  4.54151658e+02,
         5.80944225e+02,  5.85447482e+02,  4.82496767e+02,
         3.91812333e+02],
       [-2.73641913e+00, -6.58574496e+00, -1.83896277e+01,
        -3.92846612e+01, -6.72530945e+01, -8.94145949e+01,
        -9.03737547e+01, -7.11859171e+01, -4.22416934e+01,
         3.90436515e+00],
       [-1.76304284e+00, -4.67503968e+00, -1.04864649e+01,
        -1.78763159e+01, -3.12127578e+01, -3.96107614e+01,
        -4.89547737e+01, -5.61839254e+01, -5.55426641e+01,
        -5.21986981e+01],
       [ 1.60254830e+04,  1.77619190e+04,  1.57372962e+04,
         1.05483167e+04,  7.32943776e+03,  3.81421357e+03,
         2.10452386e+03,  1.22494385e+03,  7.50001814e+02,
         4.76616938e+02],
       [ 2.14512791e+01,  5.61517922e+01,  1.38483151e+02,
         2.92135126e+02,  5.21994076e+02,  7.75828103e+02,
         9.10332373e+02,  8.63615936e+02,  6.75487813e+02,
         4.77648126e+02],
       [ 8.30708858e+00,  1.18425780e+01,  7.57384018e+00,
        -1.04352659e+01, -4.59141640e+01, -8.50928528e+01,
        -1.01914282e+02, -9.07343796e+01, -6.39219537e+01,
        -1.29461143e+01],
       [-1.80198811e+00, -4.64172163e+00, -1.04407659e+01,
        -1.78657223e+01, -3.12924260e+01, -3.96452488e+01,
        -4.91165793e+01, -5.63193290e+01, -5.56511543e+01,
        -5.21767292e+01],
       [ 3.86255041e+03,  3.83909690e+03,  3.79486928e+03,
         3.68724585e+03,  3.46785168e+03,  3.05457424e+03,
         2.44200699e+03,  1.71354806e+03,  1.00094201e+03,
         3.73755265e+02],
       [ 2.50348479e+03,  2.39449073e+03,  2.18940389e+03,
         1.86041763e+03,  1.40106957e+03,  9.11593542e+02,
         4.80166598e+02,  1.76187601e+02,  7.82991239e-01,
        -4.65349660e+01],
       [-5.36362344e-02,  1.23542378e-01,  4.10033014e-01,
         8.06859197e-01,  1.53212346e+00,  2.09964623e+00,
         1.05480531e+00, -4.77093817e+00, -2.34356987e+01,
        -1.05759302e+02],
       [ 1.62649524e+03,  1.52865644e+03,  1.36620948e+03,
         1.13470493e+03,  8.57489837e+02,  5.87765973e+02,
         3.57482764e+02,  1.85499737e+02,  7.63418524e+01,
         2.96435352e+01],
       [ 4.25993114e-02,  1.10773027e-01,  2.86460952e-01,
         7.36929766e-01,  1.83449817e+00,  4.28353841e+00,
         8.83001054e+00,  1.54769169e+01,  2.06127068e+01,
         4.49490440e+00],
       [ 1.75198879e-04,  1.27283211e-03,  7.51569237e-03,
         3.45820200e-02,  1.65792224e-01,  6.39604896e-01,
         2.70058548e+00,  1.23372505e+01,  5.93882883e+01,
         2.35973731e+02]])

        for n in range(15):
            for i, j in zip(pk[n], pk_tab[n]):
                self.assertAlmostEqual(np.round(i / j, dec_prec), 1)
        for n in range(15):
            for i, j in zip(pk_vec[n][0], pk_tab[n]):
                self.assertAlmostEqual(np.round(i / j, dec_prec_vec), 1)

    def test_get_lpt_pk_sigma8_RSD(self):
        k_RSD = copy.deepcopy(k_lbias)
        k_RSD[0] = 0.01023531
        k_RSD[-1]=0.64
        k, pk_poles = lbias_RSD_emu.get_lpt_pk(k=k_RSD, **params_sigma8)
        k, pk_vec_poles = lbias_RSD_emu.get_lpt_pk(k=k_RSD, **params_sigma8_vec)
        pk_tab = np.array([[[ 2.49957961e+04,  2.72616408e+04,  2.38557047e+04,
          1.56718088e+04,  1.04146905e+04,  5.26857335e+03,
          2.67816269e+03,  1.23209129e+03,  4.57093523e+02,
          1.34714832e+02],
        [ 1.98164022e+04,  2.16711878e+04,  1.90620942e+04,
          1.27615585e+04,  8.72666728e+03,  4.67563533e+03,
          2.58695268e+03,  1.35393556e+03,  6.28179222e+02,
          2.68637513e+02],
        [-2.27941120e+00,  5.69781958e+00,  4.72936869e+01,
          1.53650512e+02,  3.37220893e+02,  5.59986569e+02,
          6.59092793e+02,  5.92796017e+02,  4.26575948e+02,
          2.74323833e+02],
        [-5.40765589e+00, -1.37816756e+01, -3.42067163e+01,
         -6.80567262e+01, -1.09058422e+02, -1.36715309e+02,
         -1.35346149e+02, -1.12623795e+02, -7.98287121e+01,
         -4.63737740e+01],
        [ 2.08820878e+00,  5.59751392e+00,  1.26414853e+01,
          2.16506731e+01,  3.80469625e+01,  5.22554782e+01,
          7.44311021e+01,  1.00233670e+02,  1.19473485e+02,
          1.09551532e+02],
        [ 1.61925353e+04,  1.78015680e+04,  1.58011705e+04,
          1.06941109e+04,  7.57855517e+03,  4.31588887e+03,
          2.63305659e+03,  1.57045665e+03,  8.77783450e+02,
          4.85806069e+02],
        [ 2.64815168e+01,  6.59039031e+01,  1.62669851e+02,
          3.42646699e+02,  6.00136772e+02,  8.56497637e+02,
          9.46078530e+02,  8.44509894e+02,  6.39885257e+02,
          4.43659155e+02],
        [ 9.71503376e+00,  1.30221529e+01,  6.59024276e+00,
         -1.59478648e+01, -5.86226947e+01, -9.81313053e+01,
         -1.09029470e+02, -9.17330310e+01, -6.05546347e+01,
         -2.99534297e+01],
        [ 1.69614367e+00,  4.57154945e+00,  1.04234014e+01,
          1.81662767e+01,  3.30665887e+01,  4.84419053e+01,
          7.58718107e+01,  1.16268000e+02,  1.67300711e+02,
          1.99069741e+02],
        [ 3.85078022e+03,  3.82183145e+03,  3.75640186e+03,
          3.62831521e+03,  3.36774815e+03,  2.92534376e+03,
          2.29189630e+03,  1.58589465e+03,  9.38042835e+02,
          5.12959421e+02],
        [ 2.49322205e+03,  2.38443899e+03,  2.16916654e+03,
          1.82630897e+03,  1.35529488e+03,  8.65351607e+02,
          4.54322375e+02,  1.80870228e+02,  3.96715310e+01,
          5.32290960e+00],
        [ 2.75178256e-03,  1.70110489e-02,  1.07760396e-01,
          5.82388583e-01,  2.61666542e+00,  9.61822897e+00,
          2.73079706e+01,  6.26533744e+01,  1.22028135e+02,
          1.81790483e+02],
        [ 1.62237227e+03,  1.52284933e+03,  1.35211064e+03,
          1.11148364e+03,  8.27093469e+02,  5.59287733e+02,
          3.38236895e+02,  1.81322171e+02,  8.74352694e+01,
          4.54344192e+01],
        [ 1.30744138e-03,  3.71851373e-03,  4.05762968e-03,
         -2.67740406e-02, -2.55711216e-01, -1.09718272e+00,
         -3.13638829e+00, -6.79476896e+00, -1.15503537e+01,
         -1.22762653e+01],
        [ 1.76676975e-04,  1.17984072e-03,  6.89894121e-03,
          3.08836128e-02,  1.44418253e-01,  5.44297488e-01,
          2.19346073e+00,  8.64258621e+00,  3.19082361e+01,
          8.14857585e+01]],

       [[ 1.83255420e+04,  1.99980367e+04,  1.74241869e+04,
          1.12558100e+04,  7.25150621e+03,  3.71422445e+03,
          1.90967909e+03,  8.29368317e+02,  1.97050055e+02,
         -5.21630777e+01],
        [ 7.20101589e+03,  7.81940190e+03,  6.78786730e+03,
          4.46982693e+03,  3.01737773e+03,  1.81403495e+03,
          1.15534564e+03,  6.48353572e+02,  2.61951413e+02,
          3.95083709e+01],
        [-7.65795366e+00, -9.88844150e+00,  6.66945693e+00,
          7.16619462e+01,  1.89650036e+02,  3.59759424e+02,
          4.37439464e+02,  3.96064765e+02,  2.84328789e+02,
          1.84180758e+02],
        [-6.87756866e+00, -1.63366230e+01, -3.64625618e+01,
         -6.47674425e+01, -9.76873059e+01, -1.12590229e+02,
         -1.07701410e+02, -8.85247596e+01, -6.27222552e+01,
         -3.65789949e+01],
        [ 7.76968913e-01,  2.03154441e+00,  4.52931236e+00,
          7.64133966e+00,  1.32609283e+01,  2.04696067e+01,
          3.35309758e+01,  4.84177655e+01,  5.07415177e+01,
          1.72882114e+01],
        [-9.90792906e+00, -1.93018372e+01, -1.16875332e+01,
          7.52221104e+01,  1.98624136e+02,  4.77781807e+02,
          5.83087876e+02,  5.06458045e+02,  3.45180754e+02,
          2.05061085e+02],
        [ 6.56602469e+00,  1.60983121e+01,  4.30340503e+01,
          1.02481747e+02,  1.87562798e+02,  2.87702883e+02,
          3.25528666e+02,  2.93139670e+02,  2.22388829e+02,
          1.54660161e+02],
        [ 1.95561768e+00,  6.13785113e-01, -6.27097041e+00,
         -1.75035718e+01, -3.69153900e+01, -4.70456076e+01,
         -4.88789412e+01, -4.12367480e+01, -2.83311922e+01,
         -1.49810837e+01],
        [-8.88380425e-04, -5.33576907e-03, -8.48146395e-03,
          1.25867278e-01,  8.66767388e-01,  5.36981928e+00,
          1.68376698e+01,  3.76360819e+01,  6.62159925e+01,
          8.50657169e+01],
        [-1.45747679e+01, -3.73011095e+01, -7.61166567e+01,
         -1.03892206e+02, -1.39778393e+02, -1.04290549e+02,
         -8.46598121e+01, -7.09337930e+01, -5.65744316e+01,
         -3.61429784e+01],
        [-3.59560868e+00, -9.21672149e+00, -1.88991054e+01,
         -2.59039877e+01, -3.50931456e+01, -2.60860247e+01,
         -2.11703459e+01, -1.77876718e+01, -1.41837291e+01,
         -9.06439083e+00],
        [ 6.65629456e-04,  4.10752242e-03,  2.83875226e-02,
          1.73728113e-01,  8.19490589e-01,  3.24989043e+00,
          9.42194449e+00,  2.16896131e+01,  4.20393797e+01,
          6.27742031e+01],
        [-3.65374042e+00, -9.35791032e+00, -1.90854825e+01,
         -2.58591059e+01, -3.49828923e+01, -2.58572872e+01,
         -2.10593064e+01, -1.77539012e+01, -1.41533384e+01,
         -9.00292696e+00],
        [-2.49551337e-04, -4.10033605e-05, -3.88972835e-03,
         -2.92859710e-02, -1.61203371e-01, -5.28314697e-01,
         -1.40845344e+00, -3.05307058e+00, -5.39772516e+00,
         -6.12546265e+00],
        [ 2.93235094e-05,  5.37982346e-06, -1.57857979e-05,
          2.34541544e-04,  3.80566905e-03,  6.03850178e-02,
          4.85120938e-01,  2.79075777e+00,  1.25974695e+01,
          3.47420036e+01]],

       [[ 1.63752517e+03,  1.76552815e+03,  1.51055212e+03,
          9.73341585e+02,  6.39520544e+02,  4.25340225e+02,
          3.03035711e+02,  1.84614470e+02,  6.72022668e+01,
          1.20290942e+00],
        [-4.56574093e+00, -1.03130692e+01, -1.41088031e+01,
          3.42501928e+00,  3.09575736e+01,  1.09588708e+02,
          1.41780558e+02,  1.23649714e+02,  7.74263518e+01,
          3.44500398e+01],
        [-1.95560818e+00, -4.46244017e+00, -6.65215834e+00,
         -1.86192883e+00,  6.98834553e+00,  3.10843188e+01,
          4.25690284e+01,  4.00060376e+01,  2.88424808e+01,
          1.86842406e+01],
        [-1.28057321e+00, -3.45824561e+00, -7.66765271e+00,
         -1.17642593e+01, -1.70813096e+01, -1.51918106e+01,
         -1.29941148e+01, -1.04745861e+01, -7.82342803e+00,
         -4.88006186e+00],
        [-6.69422605e-04, -2.61769107e-03, -9.63790086e-03,
          7.01692117e-03,  1.42349972e-01,  1.24550353e+00,
          4.11216484e+00,  9.18000837e+00,  1.47694685e+01,
          1.42121848e+01],
        [-2.06629600e+00, -4.63786391e+00, -6.29840859e+00,
          1.38381945e+00,  1.41104577e+01,  4.73994919e+01,
          6.34918529e+01,  6.00362184e+01,  4.47605329e+01,
          3.00659992e+01],
        [-2.36441253e+00, -6.07433316e+00, -1.23484850e+01,
         -1.63962568e+01, -2.15993511e+01, -1.40989899e+01,
         -1.02338168e+01, -8.90793302e+00, -8.56681180e+00,
         -6.89755054e+00],
        [-1.19957822e+00, -3.06139674e+00, -6.18844437e+00,
         -8.20368249e+00, -1.08294549e+01, -7.04806525e+00,
         -5.11733471e+00, -4.47308431e+00, -4.29678597e+00,
         -3.43146660e+00],
        [-1.82867456e-04, -1.16403124e-03, -4.09720888e-03,
          2.13734469e-03,  6.09529491e-02,  5.31134133e-01,
          1.83122042e+00,  4.45078126e+00,  8.50738914e+00,
          1.22486510e+01],
        [-9.50963591e+00, -2.42722646e+01, -4.94592856e+01,
         -6.56531403e+01, -8.70144657e+01, -5.61687549e+01,
         -4.05428910e+01, -3.56506462e+01, -3.41171718e+01,
         -2.73091088e+01],
        [-2.36001967e+00, -6.06178983e+00, -1.22955258e+01,
         -1.63273735e+01, -2.15344744e+01, -1.39943445e+01,
         -1.01142478e+01, -8.83988159e+00, -8.51235309e+00,
         -6.82524189e+00],
        [-6.27937359e-05, -1.53643693e-03, -8.24232463e-03,
         -2.70921403e-02, -9.37847809e-02, -1.56937661e-01,
         -2.95317789e-01, -6.62350500e-01, -1.63466048e+00,
         -2.83051255e+00],
        [-2.41097897e+00, -6.15180440e+00, -1.24202853e+01,
         -1.64544054e+01, -2.16602910e+01, -1.40276916e+01,
         -1.01100711e+01, -8.88704398e+00, -8.52986345e+00,
         -6.87898350e+00],
        [-1.50401149e-04, -8.09029807e-04, -4.09138287e-03,
         -1.39280501e-02, -4.74693579e-02, -7.91090259e-02,
         -1.47463885e-01, -3.29443196e-01, -8.13485472e-01,
         -1.41220171e+00],
        [ 9.80782296e-06,  1.23498481e-06,  7.63488717e-06,
          8.21738324e-07,  2.77597904e-04,  6.07297516e-03,
          5.25894609e-02,  3.28671854e-01,  1.61232386e+00,
          4.98146530e+00]]])
        
        for pole in range(3):
            for n in range(15):
                for i, j in zip(pk_poles[pole][n], pk_tab[pole][n]):
                    self.assertAlmostEqual(np.round(i / j, dec_prec), 1)
        for pole in range(3):
            for n in range(15):
                for i, j in zip(pk_vec_poles[pole][n][0], pk_tab[pole][n]):
                    self.assertAlmostEqual(np.round(i / j, dec_prec_vec), 1)

    def test_get_nonlinear_pnn(self):
        k, pk = lbias_emu.get_nonlinear_pnn(k=k_lbias, **params)
        k, pk_vec = lbias_emu.get_nonlinear_pnn(k=k_lbias, **params_vec)
        pk_tab = np.array([[ 1.62722909e+04,  1.80049033e+04,  1.58755152e+04,
         1.05543910e+04,  7.14789667e+03,  3.66917914e+03,
         1.91930167e+03,  1.00706180e+03,  5.44676186e+02,
         3.21801752e+02],
       [ 1.62883242e+04,  1.79524704e+04,  1.58375656e+04,
         1.05688954e+04,  7.23655938e+03,  3.82853677e+03,
         2.11136406e+03,  1.18652864e+03,  7.00623372e+02,
         4.41665697e+02],
       [ 6.62382842e-01,  9.19570896e+00,  4.34132870e+01,
         1.25963682e+02,  2.71806276e+02,  4.42563590e+02,
         5.15376165e+02,  5.49490777e+02,  5.13747959e+02,
         4.50133502e+02],
       [-2.78582071e+00, -6.83971171e+00, -1.90872030e+01,
        -4.06428898e+01, -6.98005352e+01, -8.39213626e+01,
        -7.16648705e+01, -6.02968825e+01, -4.20201785e+01,
        -2.33460149e+01],
       [-1.42670360e+00, -5.22291251e+00, -1.21763689e+01,
        -2.09523400e+01, -3.57864197e+01, -4.52684723e+01,
        -5.49072219e+01, -5.96297424e+01, -5.67560867e+01,
        -4.17062354e+01],
       [ 1.62529167e+04,  1.79136064e+04,  1.58228928e+04,
         1.06260371e+04,  7.38653002e+03,  4.07209745e+03,
         2.38618526e+03,  1.45639658e+03,  9.50724121e+02,
         6.65469758e+02],
       [ 2.21664122e+01,  5.80406001e+01,  1.43132362e+02,
         3.02027424e+02,  5.39466138e+02,  7.75869361e+02,
         8.71561130e+02,  8.92415729e+02,  8.34584589e+02,
         7.44533417e+02],
       [ 8.23569672e+00,  1.23382936e+01,  7.75303771e+00,
        -1.08118145e+01, -4.71879050e+01, -8.11642561e+01,
        -9.13946172e+01, -8.42552237e+01, -6.54738415e+01,
        -3.66846309e+01],
       [-1.05039778e+00, -5.24851022e+00, -1.21779633e+01,
        -2.13424403e+01, -3.67783012e+01, -4.76900404e+01,
        -6.00918969e+01, -6.92190000e+01, -7.09781233e+01,
        -5.99512941e+01],
       [ 3.99055374e+03,  3.96844417e+03,  3.92317485e+03,
         3.81159713e+03,  3.58362078e+03,  3.09059619e+03,
         2.47587893e+03,  1.90500687e+03,  1.43706028e+03,
         1.14867004e+03],
       [ 2.59035859e+03,  2.47492362e+03,  2.26285329e+03,
         1.92163913e+03,  1.44740176e+03,  9.28916789e+02,
         4.86866838e+02,  1.97244180e+02,  3.78334874e+01,
        -7.64508247e+00],
       [-5.84433010e-02,  1.32331907e-01,  4.11015319e-01,
         8.42898365e-01,  1.59854502e+00,  2.16065233e+00,
         1.33359832e+00, -2.88598295e+00, -2.02478212e+01,
        -4.55250270e+01],
       [ 1.68107938e+03,  1.58064952e+03,  1.41258691e+03,
         1.17316104e+03,  8.86622023e+02,  5.87481580e+02,
         3.49648375e+02,  1.85768630e+02,  8.88830501e+01,
         4.49065534e+01],
       [ 4.41915905e-02,  1.14547941e-01,  2.96583192e-01,
         7.61794140e-01,  1.89823341e+00,  4.51404628e+00,
         8.68402865e+00,  1.29349097e+01,  1.23821464e+01,
         5.76753617e+00],
       [ 7.16310878e-05,  1.81123431e-03,  1.08760284e-02,
         4.93826573e-02,  2.14458985e-01,  7.19196888e-01,
         2.24609785e+00,  5.89197425e+00,  1.10521017e+01,
         9.62549816e+00]])

        for n in range(15):
            for i, j in zip(pk[n], pk_tab[n]):
                self.assertAlmostEqual(np.round(i / j, dec_prec), 1)
        for n in range(15):
            for i, j in zip(pk_vec[n][0], pk_tab[n]):
                self.assertAlmostEqual(np.round(i / j, dec_prec_vec), 1)

    def test_get_nonlinear_pnn_RSD(self):
        k_RSD = copy.deepcopy(k_lbias)
        k_RSD[0] = 0.01023531
        k_RSD[-1]=0.64
        k, pk_poles = lbias_RSD_emu.get_nonlinear_pnn(k=k_RSD, **params)
        pk_tab = np.array([[[ 2.52046805e+04,  2.75741252e+04,  2.41250349e+04,
          1.58946151e+04,  1.05950204e+04,  5.38953920e+03,
          2.74114300e+03,  1.32611259e+03,  6.14871083e+02,
          3.36769162e+02],
        [ 2.00276345e+04,  2.19754906e+04,  1.94154747e+04,
          1.28894459e+04,  8.73126515e+03,  4.65162246e+03,
          2.54668053e+03,  1.37237879e+03,  7.27400731e+02,
          4.44704291e+02],
        [-2.36341703e+00,  5.87084922e+00,  4.88037641e+01,
          1.58587012e+02,  3.47857068e+02,  5.52959623e+02,
          6.47838889e+02,  6.25096266e+02,  5.21615920e+02,
          4.26637193e+02],
        [-5.59054558e+00, -1.42513109e+01, -3.53627567e+01,
         -7.03358674e+01, -1.12625854e+02, -1.18714091e+02,
         -1.01789442e+02, -7.85956751e+01, -4.96813530e+01,
         -2.85541267e+01],
        [-2.12618451e+00, -5.69640407e+00, -1.28576836e+01,
         -2.19967857e+01, -3.86769386e+01, -5.64898450e+01,
         -6.91651249e+01, -7.12164849e+01, -6.15817050e+01,
         -4.46692899e+01],
        [ 1.64741571e+04,  1.81020926e+04,  1.60661830e+04,
          1.07194888e+04,  7.42280830e+03,  4.17648812e+03,
          2.50439083e+03,  1.53007037e+03,  9.57788239e+02,
          6.74642922e+02],
        [ 2.74011191e+01,  6.81793012e+01,  1.68284831e+02,
          3.54345230e+02,  6.20098212e+02,  8.71514868e+02,
          9.80795909e+02,  9.65784143e+02,  8.57675141e+02,
          7.52445551e+02],
        [ 1.00602554e+01,  1.34888719e+01,  6.83170800e+00,
         -1.65017385e+01, -6.06479479e+01, -8.94822532e+01,
         -9.63788045e+01, -8.87540507e+01, -6.57884802e+01,
         -4.34432751e+01],
        [-1.72739935e+00, -4.65178509e+00, -1.06025984e+01,
         -1.85065129e+01, -3.37074056e+01, -5.06980056e+01,
         -6.47050213e+01, -7.30776093e+01, -7.21530290e+01,
         -6.13382290e+01],
        [ 3.98025412e+03,  3.95409716e+03,  3.88312931e+03,
          3.75005392e+03,  3.48079436e+03,  3.00853915e+03,
          2.43023428e+03,  1.88886332e+03,  1.45578551e+03,
          1.22296117e+03],
        [ 2.57801646e+03,  2.46553544e+03,  2.24294869e+03,
          1.88818670e+03,  1.40100836e+03,  8.94287139e+02,
          4.69456359e+02,  1.87023156e+02,  4.13691224e+01,
          5.85802715e+00],
        [ 2.84609393e-03,  1.75952846e-02,  1.11374431e-01,
          6.01686755e-01,  2.70152503e+00,  4.44550729e+00,
         -9.52440558e-01, -9.97654358e+00, -2.92890939e+01,
         -4.81430192e+01],
        [ 1.67718699e+03,  1.57443867e+03,  1.39764917e+03,
          1.14880960e+03,  8.54710068e+02,  5.71488113e+02,
          3.41666872e+02,  1.79825523e+02,  8.52226587e+01,
          4.72148357e+01],
        [-1.38874452e-03, -3.85285236e-03, -4.20078924e-03,
          2.75532147e-02,  2.66530961e-01,  3.91547772e+00,
          9.69147930e+00,  1.33507578e+01,  1.15576943e+01,
          6.72639134e+00],
        [ 1.80909666e-04,  1.19607299e-03,  6.99979805e-03,
          5.23677436e-02,  2.71293963e-01,  8.90621001e-01,
          2.71525589e+00,  6.66256292e+00,  1.10003660e+01,
          1.01556139e+01]],

       [[ 1.88216398e+04,  2.04609042e+04,  1.77087995e+04,
          1.14109286e+04,  7.28959344e+03,  3.65716660e+03,
          1.75109540e+03,  7.07894971e+02,  1.89745808e+02,
          2.08065330e+01],
        [ 7.15542452e+03,  7.84707274e+03,  6.94141482e+03,
          4.52488888e+03,  2.92384469e+03,  1.63630129e+03,
          8.97730901e+02,  4.16855849e+02,  1.11711543e+02,
         -3.77993324e+00],
        [-7.89861408e+00, -1.01648669e+01,  6.97938092e+00,
          7.40109260e+01,  1.95763074e+02,  3.15513911e+02,
          2.88802447e+02,  2.03494239e+02,  7.49525302e+01,
         -1.24782675e+00],
        [-7.11227733e+00, -1.69006955e+01, -3.76935869e+01,
         -6.69353097e+01, -1.00742062e+02, -8.03352903e+01,
         -5.46806617e+01, -3.82338501e+01, -1.78134918e+01,
         -7.62809451e+00],
        [-7.49122860e-01, -2.01693800e+00, -4.58353711e+00,
         -7.89988177e+00, -1.35575196e+01, -2.47599206e+01,
         -3.00625178e+01, -2.49706743e+01, -1.17891163e+01,
         -2.50866017e+00],
        [-1.02384795e+01, -1.99014877e+01, -1.20284934e+01,
          7.77860049e+01,  2.04893661e+02,  3.03528543e+02,
          2.61427960e+02,  1.86865218e+02,  6.32882832e+01,
         -1.09233216e+01],
        [ 6.78542183e+00,  1.66427295e+01,  4.44927485e+01,
          1.05867192e+02,  1.93440720e+02,  2.55092062e+02,
          2.32510789e+02,  1.82398664e+02,  9.76864706e+01,
          3.06559267e+01],
        [ 2.01403729e+00,  6.20479853e-01, -6.49559422e+00,
         -1.80699657e+01, -3.80857825e+01, -2.82350926e+01,
         -1.88157155e+01, -1.47222287e+01, -5.15578036e+00,
         -7.66645063e-01],
        [ 9.08155885e-04,  5.47353851e-03,  8.83336089e-03,
         -1.28847851e-01, -9.04497489e-01, -7.56076136e+00,
         -1.06081238e+01, -1.09912508e+01, -7.05503908e+00,
         -6.36437086e-01],
        [ 2.00610551e+00,  6.20279592e-01, -6.48907307e+00,
         -1.80267363e+01, -3.80848924e+01, -7.16669113e+01,
         -5.26288754e+01,  7.82017055e+00,  7.10264167e+01,
          7.55804726e+01],
        [-3.77216908e+00, -9.37164673e+00, -1.92907251e+01,
         -2.70291282e+01, -3.54524883e+01, -1.87645519e+01,
         -4.04919521e+00,  2.99070652e+00,  1.68523914e+01,
          1.24051058e+01],
        [ 6.83387647e-04,  4.23195925e-03,  2.93070830e-02,
          1.79345662e-01,  8.45076804e-01, -2.11155115e-01,
         -5.92127716e+00, -1.28335626e+01, -1.78867476e+01,
         -1.08458218e+01],
        [-3.77347899e+00, -9.66115917e+00, -1.96979598e+01,
         -2.66419436e+01, -3.59929038e+01, -2.45985284e+01,
         -1.77579726e+01, -1.10871517e+01, -4.84168542e+00,
         -3.45176495e+00],
        [ 2.66069891e-04,  5.85891023e-05,  4.03617893e-03,
          3.03630662e-02,  1.68377246e-01,  1.13332722e+00,
          1.91858321e+00,  9.76415828e-01, -1.23996715e+00,
         -4.06210284e-01],
        [ 2.94172460e-05,  5.00030265e-06, -1.59037704e-05,
          2.38442441e-04,  3.99302395e-03,  2.80117996e-01,
          8.81202550e-01,  1.29816722e+00, -4.65371596e-01,
         -1.21137621e+00]],

       [[ 1.65914464e+03,  1.79456553e+03,  1.54795055e+03,
          1.00789412e+03,  6.68980097e+02,  4.35772131e+02,
          2.33752660e+02,  1.15564405e+02,  6.72675703e+01,
          4.80208081e+01],
        [-4.72165101e+00, -1.06559143e+01, -1.45758745e+01,
          3.57976765e+00,  3.19827697e+01,  1.12936758e+02,
          1.39111347e+02,  7.76673403e+01,  6.84851318e+01,
          5.99990950e+01],
        [-2.02964559e+00, -4.63907644e+00, -6.93453335e+00,
         -1.94357455e+00,  7.18699487e+00,  3.20376348e+01,
          4.76539898e+01,  6.29025707e+01,  6.55857339e+01,
          5.86506363e+01],
        [-1.32417463e+00, -3.57704747e+00, -7.89793564e+00,
         -1.21541547e+01, -1.75970495e+01, -1.56779102e+01,
         -1.11257654e+01,  1.43232636e+00, -1.45505574e+00,
         -1.79381759e+00],
        [ 7.44057230e-04,  2.70843552e-03,  9.90418504e-03,
         -7.33737167e-03, -1.46356123e-01, -1.28004418e+00,
         -4.08737514e+00, -3.28689896e+00, -3.17466847e+00,
         -3.14508052e+00],
        [-2.14024082e+00, -4.80058149e+00, -6.50213031e+00,
          1.43128785e+00,  1.45971351e+01,  4.89141555e+01,
          6.50058577e+01,  6.34516217e+01,  6.48110490e+01,
          6.35982898e+01],
        [-2.43201047e+00, -6.28797307e+00, -1.27120862e+01,
         -1.68047303e+01, -2.22831852e+01, -1.45564686e+01,
         -6.60582626e+00,  3.55515010e+01,  4.63205782e+01,
          4.45377525e+01],
        [-1.23621283e+00, -3.16198892e+00, -6.38366834e+00,
         -8.48085553e+00, -1.11747808e+01, -7.28374516e+00,
         -3.70852583e+00,  3.42458465e+00,  1.47345126e+00,
          9.09563112e-01],
        [ 1.90852561e-04,  1.20706297e-03,  4.23580491e-03,
         -2.30726837e-03, -6.31443817e-02, -5.47787342e-01,
         -1.90020613e+00, -2.54117776e+00, -2.54643923e+00,
         -2.16391641e+00],
        [-9.83228052e+00, -2.49921082e+01, -5.08931764e+01,
         -6.76591320e+01, -8.95956704e+01, -5.82905768e+01,
         -3.29846211e+01,  3.50513057e+01,  3.19093789e+01,
          1.75846017e+01],
        [-2.43768213e+00, -6.26482452e+00, -1.27055290e+01,
         -1.68578730e+01, -2.22255665e+01, -1.44823306e+01,
         -8.87946985e+00,  3.23989668e+00,  2.88521423e+00,
          2.87226154e+00],
        [-5.16043332e-05, -1.62184944e-03, -8.15244257e-03,
         -2.81322135e-02, -9.47215395e-02, -1.66096167e-01,
         -4.03870026e-01, -6.60811149e-01,  1.03694604e+00,
          2.19217618e+00],
        [-2.50038506e+00, -6.37326398e+00, -1.28598234e+01,
         -1.69985486e+01, -2.23467240e+01, -1.44932616e+01,
         -8.85494522e+00,  2.97006829e+00,  2.75885313e+00,
          2.57776574e+00],
        [ 1.56380325e-04,  8.35087381e-04,  4.22849188e-03,
          1.43791834e-02,  4.90070456e-02,  8.21420808e-02,
          8.82584381e-02, -3.63927019e-01,  1.42406417e-01,
          3.22837157e-02],
        [ 9.94344349e-06,  1.13620252e-06,  7.95130377e-06,
          3.28756651e-07,  2.84944339e-04,  6.24106273e-03,
          5.24107106e-02, -1.72780953e-02,  2.19131099e-01,
          4.37107571e-01]]])
        for pole in range(3):
            for n in range(15):
                for i, j in zip(pk_poles[pole][n], pk_tab[pole][n]):
                    self.assertAlmostEqual(np.round(i / j, dec_prec), 1)

    def test_get_nonlinear_pnn_sigma8(self):
        k, pk = lbias_emu.get_nonlinear_pnn(k=k_lbias, **params_sigma8)
        k, pk_vec = lbias_emu.get_nonlinear_pnn(k=k_lbias, **params_sigma8_vec)
        pk_tab = np.array([[ 1.60047134e+04,  1.77076121e+04,  1.56135043e+04,
         1.03804503e+04,  7.03008008e+03,  3.60773828e+03,
         1.88558250e+03,  9.87332167e+02,  5.32855644e+02,
         3.14051833e+02],
       [ 1.60199834e+04,  1.76567437e+04,  1.55752374e+04,
         1.03928241e+04,  7.11503939e+03,  3.75861262e+03,
         2.07006776e+03,  1.16117902e+03,  6.83394836e+02,
         4.29190258e+02],
       [ 6.40712489e-01,  8.89414729e+00,  4.19938805e+01,
         1.21860928e+02,  2.62987528e+02,  4.25693049e+02,
         5.00480501e+02,  5.33086724e+02,  4.97852088e+02,
         4.35577952e+02],
       [-2.66923316e+00, -6.58072208e+00, -1.83872729e+01,
        -3.91723529e+01, -6.74017610e+01, -8.11630761e+01,
        -6.98140270e+01, -5.86155168e+01, -4.07366671e+01,
        -2.23903949e+01],
       [-1.49102701e+00, -5.14511347e+00, -1.20146802e+01,
        -2.06467407e+01, -3.52633202e+01, -4.45591128e+01,
        -5.40006368e+01, -5.85985070e+01, -5.56725559e+01,
        -4.09212710e+01],
       [ 1.59937140e+04,  1.76235263e+04,  1.55610005e+04,
         1.04455655e+04,  7.25709547e+03,  3.99661254e+03,
         2.33768242e+03,  1.42199745e+03,  9.24507931e+02,
         6.44422172e+02],
       [ 2.14609564e+01,  5.61479087e+01,  1.38482325e+02,
         2.92121565e+02,  5.21917517e+02,  7.50358022e+02,
         8.43541154e+02,  8.63809219e+02,  8.07091757e+02,
         7.19297987e+02],
       [ 7.95682107e+00,  1.19369284e+01,  7.52342990e+00,
        -1.04441900e+01, -4.56110552e+01, -7.84241472e+01,
        -8.84731067e+01, -8.16064582e+01, -6.33644142e+01,
        -3.53863358e+01],
       [-9.60577032e-01, -5.17041907e+00, -1.19943837e+01,
        -2.10332748e+01, -3.62548327e+01, -4.69981009e+01,
        -5.92131846e+01, -6.82228613e+01, -6.99297255e+01,
        -5.91621559e+01],
       [ 3.86129945e+03,  3.83900734e+03,  3.79509852e+03,
         3.68728268e+03,  3.46704890e+03,  2.98891370e+03,
         2.39528101e+03,  1.84227916e+03,  1.38777557e+03,
         1.10568139e+03],
       [ 2.50636167e+03,  2.39501910e+03,  2.18989397e+03,
         1.85984480e+03,  1.40085313e+03,  8.97369327e+02,
         4.70365959e+02,  1.90353367e+02,  3.59032437e+01,
        -8.05565442e+00],
       [-5.69482896e-02,  1.25974973e-01,  3.98616855e-01,
         8.16888781e-01,  1.54803238e+00,  2.09121860e+00,
         1.27615868e+00, -3.72436337e+00, -1.96325506e+01,
        -4.42000254e+01],
       [ 1.62627172e+03,  1.52867412e+03,  1.36621215e+03,
         1.13476621e+03,  8.57573836e+02,  5.68390775e+02,
         3.38321721e+02,  1.79609892e+02,  8.56969606e+01,
         4.30835703e+01],
       [ 4.26535727e-02,  1.10656233e-01,  2.86563210e-01,
         7.36075338e-01,  1.83503316e+00,  4.35962033e+00,
         8.40542219e+00,  1.25658079e+01,  1.20816627e+01,
         5.61698982e+00],
       [ 2.93997129e-04,  1.83371571e-03,  1.05746142e-02,
         4.82714178e-02,  2.09479809e-01,  7.01817625e-01,
         2.19255708e+00,  5.76370068e+00,  1.08827966e+01,
         9.52628591e+00]])

        for n in range(15):
            for i, j in zip(pk[n], pk_tab[n]):
                self.assertAlmostEqual(np.round(i / j, dec_prec), 1)
        for n in range(15):
            for i, j in zip(pk_vec[n][0], pk_tab[n]):
                self.assertAlmostEqual(np.round(i / j, dec_prec_vec), 1)

    def test_get_nonlinear_pnn_sigma8(self):
        k_RSD = copy.deepcopy(k_lbias)
        k_RSD[0] = 0.01023531
        k_RSD[-1]=0.64
        k, pk_poles = lbias_RSD_emu.get_nonlinear_pnn(k=k_RSD, **params_sigma8)
        pk_tab = np.array([[[ 2.48033894e+04,  2.71358270e+04,  2.37460876e+04,
          1.56477653e+04,  1.04339008e+04,  5.30546251e+03,
          2.69845224e+03,  1.30488572e+03,  6.04490355e+02,
          3.30239764e+02],
        [ 1.97066951e+04,  2.16234287e+04,  1.91045157e+04,
          1.26815388e+04,  8.58925490e+03,  4.57154466e+03,
          2.50101120e+03,  1.34563811e+03,  7.12090470e+02,
          4.33855728e+02],
        [-2.27942351e+00,  5.69780643e+00,  4.72933469e+01,
          1.53649715e+02,  3.37140957e+02,  5.37758714e+02,
          6.29081100e+02,  6.07713752e+02,  5.06975321e+02,
          4.14063912e+02],
        [-5.40695602e+00, -1.37833291e+01, -3.42088490e+01,
         -6.80467848e+01, -1.09017420e+02, -1.15114868e+02,
         -9.88878502e+01, -7.65242401e+01, -4.83372813e+01,
         -2.76718876e+01],
        [-2.08836311e+00, -5.59743154e+00, -1.26418706e+01,
         -2.16498823e+01, -3.80613580e+01, -5.55320674e+01,
         -6.79741563e+01, -7.00287924e+01, -6.06433291e+01,
         -4.40447193e+01],
        [ 1.61925694e+04,  1.78038413e+04,  1.58014303e+04,
          1.05354133e+04,  7.29288942e+03,  4.09585336e+03,
          2.45167405e+03,  1.49423485e+03,  9.32422081e+02,
          6.54450169e+02],
        [ 2.64814226e+01,  6.59018127e+01,  1.62677967e+02,
          3.42639465e+02,  6.00057249e+02,  8.41792585e+02,
          9.50227315e+02,  9.34723688e+02,  8.29260232e+02,
          7.26471620e+02],
        [ 9.71314628e+00,  1.30202055e+01,  6.58959173e+00,
         -1.59453959e+01, -5.86479393e+01, -8.68936647e+01,
         -9.33371237e+01, -8.61055597e+01, -6.37643510e+01,
         -4.20218222e+01],
        [-1.69617725e+00, -4.57140801e+00, -1.04244505e+01,
         -1.81664612e+01, -3.30755324e+01, -4.95870311e+01,
         -6.33113176e+01, -7.15338596e+01, -7.06700442e+01,
         -6.00851130e+01],
        [ 3.84999989e+03,  3.82456858e+03,  3.75616054e+03,
          3.62761424e+03,  3.36756605e+03,  2.91130885e+03,
          2.34810063e+03,  1.82464554e+03,  1.40302435e+03,
          1.17528140e+03],
        [ 2.49322205e+03,  2.38443961e+03,  2.16916667e+03,
          1.82630903e+03,  1.35529482e+03,  8.65351605e+02,
          4.54322895e+02,  1.80869962e+02,  3.96719904e+01,
          5.32303189e+00],
        [ 2.75192571e-03,  1.70124545e-02,  1.07758913e-01,
          5.82362345e-01,  2.61524420e+00,  4.34054955e+00,
         -8.72379739e-01, -9.52607516e+00, -2.82171069e+01,
         -4.67500421e+01],
        [ 1.62238312e+03,  1.52300112e+03,  1.35211889e+03,
          1.11145023e+03,  8.27065285e+02,  5.53406656e+02,
          3.30597301e+02,  1.74048346e+02,  8.22985272e+01,
          4.54545535e+01],
        [-1.30674685e-03, -3.72296262e-03, -4.05838140e-03,
          2.67639970e-02,  2.58107521e-01,  3.79281509e+00,
          9.39183042e+00,  1.29819920e+01,  1.12680855e+01,
          6.55136351e+00],
        [ 1.77813940e-04,  1.17637173e-03,  6.88485402e-03,
          5.11476341e-02,  2.64628106e-01,  8.68157440e-01,
          2.64839447e+00,  6.51662100e+00,  1.08130317e+01,
          9.95813526e+00]],

       [[ 1.85030988e+04,  2.01193041e+04,  1.74208813e+04,
          1.12326830e+04,  7.18075746e+03,  3.60425958e+03,
          1.72837748e+03,  7.02039650e+02,  1.90703805e+02,
          2.24274243e+01],
        [ 7.03358652e+03,  7.71454926e+03,  6.82454771e+03,
          4.45036597e+03,  2.87726644e+03,  1.60776435e+03,
          8.83297468e+02,  4.12074181e+02,  1.12405520e+02,
         -2.35033757e+00],
        [-7.65750523e+00, -9.88887684e+00,  6.66900540e+00,
          7.16657989e+01,  1.89782038e+02,  3.06750805e+02,
          2.79917991e+02,  1.98498702e+02,  7.38123678e+01,
         -1.03549646e+00],
        [-6.87375244e+00, -1.63419593e+01, -3.64570185e+01,
         -6.48225822e+01, -9.76683503e+01, -7.78146674e+01,
         -5.31877455e+01, -3.73324081e+01, -1.74866570e+01,
         -7.57723802e+00],
        [-7.36411245e-01, -1.98287520e+00, -4.50667639e+00,
         -7.76704258e+00, -1.33319874e+01, -2.42179719e+01,
         -2.93491045e+01, -2.44143824e+01, -1.15733955e+01,
         -2.45384616e+00],
        [-9.91521468e+00, -1.92777365e+01, -1.16857291e+01,
          7.51814398e+01,  1.98408150e+02,  2.94335313e+02,
          2.54069266e+02,  1.82516535e+02,  6.25372959e+01,
         -1.04505468e+01],
        [ 6.56767412e+00,  1.60954600e+01,  4.30330363e+01,
          1.02469298e+02,  1.87413201e+02,  2.47910761e+02,
          2.25312255e+02,  1.76559544e+02,  9.43291630e+01,
          2.90623268e+01],
        [ 1.95653492e+00,  6.13590453e-01, -6.27233275e+00,
         -1.74975400e+01, -3.69066933e+01, -2.73125635e+01,
         -1.82010953e+01, -1.43315774e+01, -5.02603025e+00,
         -8.23235679e-01],
        [ 8.88237203e-04,  5.33577540e-03,  8.48056729e-03,
         -1.25901169e-01, -8.77078147e-01, -7.28380284e+00,
         -1.01610330e+01, -1.04889276e+01, -6.66132423e+00,
         -4.97186565e-01],
        [ 1.94872153e+00,  6.13364587e-01, -6.26546540e+00,
         -1.74582340e+01, -3.69026581e+01, -6.83114368e+01,
         -5.21295265e+01,  5.74408762e+00,  6.59879876e+01,
          7.14219293e+01],
        [-3.64212398e+00, -9.04234703e+00, -1.86474388e+01,
         -2.61184150e+01, -3.43653213e+01, -1.81820811e+01,
         -3.91480446e+00,  2.89444722e+00,  1.67028534e+01,
          1.23363270e+01],
        [ 6.64879336e-04,  4.10734218e-03,  2.83866582e-02,
          1.73530835e-01,  8.17661561e-01, -1.59930432e-01,
         -5.57532748e+00, -1.21644974e+01, -1.70792248e+01,
         -1.03310254e+01],
        [-3.65230566e+00, -9.34728514e+00, -1.90707268e+01,
         -2.58417611e+01, -3.49369488e+01, -2.36009938e+01,
         -1.68723608e+01, -1.05254870e+01, -4.59619520e+00,
         -3.23297680e+00],
        [ 2.49850254e-04,  4.17689931e-05,  3.89043108e-03,
          2.92111599e-02,  1.62352575e-01,  1.09622525e+00,
          1.87599529e+00,  9.84738564e-01, -1.19808960e+00,
         -3.82979680e-01],
        [ 2.92433099e-05,  5.42796814e-06, -1.56966343e-05,
          2.35163421e-04,  3.88585782e-03,  2.70109280e-01,
          8.52334897e-01,  1.26060749e+00, -4.63734872e-01,
         -1.23905098e+00]],

       [[ 1.63157750e+03,  1.76473962e+03,  1.52353890e+03,
          9.93581672e+02,  6.60624892e+02,  4.29031710e+02,
          2.31019202e+02,  1.14497461e+02,  6.57783702e+01,
          4.63011153e+01],
        [-4.56554345e+00, -1.03076833e+01, -1.41124466e+01,
          3.42496789e+00,  3.09565558e+01,  1.09578638e+02,
          1.35376815e+02,  7.55731025e+01,  6.63031015e+01,
          5.78171896e+01],
        [-1.95581521e+00, -4.46531949e+00, -6.65653108e+00,
         -1.86183606e+00,  6.98755718e+00,  3.10663019e+01,
          4.64220639e+01,  6.05241040e+01,  6.29756161e+01,
          5.64520306e+01],
        [-1.28022883e+00, -3.46144914e+00, -7.65343368e+00,
         -1.17822341e+01, -1.70672774e+01, -1.51718153e+01,
         -1.07900532e+01,  1.60371192e+00, -1.51486076e+00,
         -1.81701991e+00],
        [ 6.70451074e-04,  2.61933944e-03,  9.62872591e-03,
         -7.01653712e-03, -1.42262176e-01, -1.24574057e+00,
         -3.98462535e+00, -3.19315041e+00, -3.10904376e+00,
         -3.10806687e+00],
        [-2.06627501e+00, -4.63724662e+00, -6.30004451e+00,
          1.38391236e+00,  1.41056045e+01,  4.73927116e+01,
          6.32167235e+01,  6.14055200e+01,  6.27596544e+01,
          6.17752691e+01],
        [-2.36110641e+00, -6.09764375e+00, -1.23143182e+01,
         -1.62613315e+01, -2.15669132e+01, -1.40727673e+01,
         -6.30798927e+00,  3.44315710e+01,  4.51107399e+01,
          4.37439617e+01],
        [-1.19723473e+00, -3.06084352e+00, -6.17664851e+00,
         -8.21216039e+00, -1.08270619e+01, -7.04957982e+00,
         -3.54748269e+00,  3.39483904e+00,  1.40641475e+00,
          8.49364236e-01],
        [ 1.82859037e-04,  1.16407072e-03,  4.09727893e-03,
         -2.13800392e-03, -6.09617484e-02, -5.31234839e-01,
         -1.84343487e+00, -2.44920469e+00, -2.52728004e+00,
         -2.20918694e+00],
        [-9.51435397e+00, -2.42615317e+01, -4.94009949e+01,
         -6.56296293e+01, -8.69295421e+01, -5.62240778e+01,
         -3.16603613e+01,  3.38371578e+01,  3.10652118e+01,
          1.75649735e+01],
        [-2.35913779e+00, -6.06109764e+00, -1.22946456e+01,
         -1.63236922e+01, -2.15297047e+01, -1.39916470e+01,
         -8.54153137e+00,  3.16684538e+00,  2.69629671e+00,
          2.70289399e+00],
        [-6.20097174e-05, -1.56317415e-03, -7.88848434e-03,
         -2.72687701e-02, -9.19173191e-02, -1.60513258e-01,
         -3.89896720e-01, -6.68560777e-01,  9.06881142e-01,
          1.99268223e+00],
        [-2.41137732e+00, -6.14928541e+00, -1.24255136e+01,
         -1.64630138e+01, -2.16662281e+01, -1.40304077e+01,
         -8.50481549e+00,  2.82468576e+00,  2.62274245e+00,
          2.44433091e+00],
        [ 1.50721950e-04,  8.06219413e-04,  4.08794311e-03,
          1.39101815e-02,  4.74085740e-02,  7.92908997e-02,
          8.36113100e-02, -3.61505906e-01,  1.26882366e-01,
          3.33733775e-02],
        [ 9.82725724e-06,  1.23671871e-06,  7.67213148e-06,
          8.14913793e-07,  2.77574197e-04,  6.07230593e-03,
          5.09590204e-02, -1.83221910e-02,  2.12040786e-01,
          4.41892910e-01]]])

        for pole in range(3):
            for n in range(15):
                for i, j in zip(pk_poles[pole][n], pk_tab[pole][n]):
                    self.assertAlmostEqual(np.round(i / j, dec_prec), 1)

    def test_get_galaxy_real_pk(self):
        k, pgg, pgm = lbias_emu.get_galaxy_real_pk(k=k_lbias, bias=[0.2, 0.02, -0.02, 0.2], **params)
        pgg_tab = np.array([23437.52749951, 25901.17364443, 22841.52084439, 15206.52849924,
                            10339.7186542 ,  5370.20886112,  2864.48151203,  1543.53220011,
                            864.7661628 ,   529.25537471])
        pgm_tab = np.array([19529.73940259, 21594.67352594, 19041.84310334, 12667.31173365,
                            8594.88340034,  4436.36249983,  2342.33386124,  1244.63733005,
                            684.56500576,   411.26323479])

        for i, j in zip(pgg, pgg_tab):
            self.assertAlmostEqual(np.round(i / j, dec_prec), 1)

        for i, j in zip(pgm, pgm_tab):
            self.assertAlmostEqual(np.round(i / j, dec_prec_vec), 1)

if __name__ == '__main__':
    unittest.main()
