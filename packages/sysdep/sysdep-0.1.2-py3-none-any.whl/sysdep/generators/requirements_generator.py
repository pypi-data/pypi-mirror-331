# sysdep/generators/requirements_generator.py
"""Generate system requirements from Python dependencies."""

# Standard library imports
import os
from typing import Dict, List, Optional, Set

# Local imports
from ..checkers.base import Dependency
from ..checkers.executable import ExecutableDependency
from ..checkers.library import LibraryDependency
from ..parsers.python_deps import get_python_dependencies
from ..mappers import map_python_to_system_dependencies
from ..utils import Colors

def generate_system_requirements(
    project_dir: str,
    output_file: str = 'system_requirements.txt',
    overwrite: bool = False
) -> str:
    """
    Generate a system_requirements.txt file based on Python dependencies.
    
    Args:
        project_dir: Path to project directory
        output_file: Path to output file
        overwrite: Whether to overwrite an existing file
        
    Returns:
        Path to the generated file
    """
    output_path = os.path.join(project_dir, output_file)
    
    # Check if file already exists
    if os.path.exists(output_path) and not overwrite:
        raise FileExistsError(f"Output file {output_path} already exists. Use overwrite=True to overwrite.")
        
    # Get Python dependencies
    python_packages = get_python_dependencies(project_dir)
    
    if not python_packages:
        raise ValueError(f"No Python dependencies found in {project_dir}")
        
    # Map to system dependencies
    system_deps = map_python_to_system_dependencies(python_packages)
    
    if not system_deps:
        print(f"\n  {Colors.BOLD}{Colors.YELLOW}No system dependencies mapped for Python packages:{Colors.ENDC}")
        for pkg in python_packages:
            print(f"    {Colors.CYAN}◆{Colors.ENDC} {pkg}")
        print()
        
    # Write system requirements file
    with open(output_path, 'w') as f:
        f.write("# System dependencies automatically generated by sysdep\n")
        f.write("# Generated from Python dependencies:\n")
        for pkg in python_packages:
            f.write(f"#   - {pkg}\n")
        f.write("\n")
        
        # Categorize dependencies
        executables = []
        libraries = []
        
        for dep in system_deps:
            if isinstance(dep, ExecutableDependency):
                executables.append(dep)
            elif isinstance(dep, LibraryDependency):
                libraries.append(dep)
                
        # Write executable dependencies
        if executables:
            f.write("# Executable dependencies\n")
            for dep in sorted(executables, key=lambda d: d.name):
                if dep.version:
                    f.write(f"executable: {dep.name} >= {dep.version}\n")
                else:
                    f.write(f"executable: {dep.name}\n")
            f.write("\n")
            
        # Write library dependencies
        if libraries:
            f.write("# Library dependencies\n")
            for dep in sorted(libraries, key=lambda d: d.name):
                if dep.version:
                    f.write(f"library: {dep.name} >= {dep.version}\n")
                else:
                    f.write(f"library: {dep.name}\n")
                    
    return output_path

def print_dependency_mapping(python_packages: List[str]):
    """
    Print the mapping of Python packages to system dependencies.
    
    Args:
        python_packages: List of Python package names
    """
    print(f"\n  {Colors.BOLD}{Colors.CYAN}⚡ System Dependency Mapping{Colors.ENDC}\n")
    
    for pkg in python_packages:
        sys_deps = map_python_to_system_dependencies([pkg])
        if not sys_deps:
            print(f"  {Colors.YELLOW}{pkg}{Colors.ENDC}")
            print(f"    {Colors.BOLD}No known system dependencies{Colors.ENDC}")
        else:
            print(f"  {Colors.YELLOW}{pkg}{Colors.ENDC}")
            for dep in sys_deps:
                if isinstance(dep, ExecutableDependency):
                    print(f"    {Colors.CYAN}◆{Colors.ENDC} executable: {Colors.BOLD}{dep.name}{Colors.ENDC}")
                elif isinstance(dep, LibraryDependency):
                    print(f"    {Colors.CYAN}◆{Colors.ENDC} library: {Colors.BOLD}{dep.name}{Colors.ENDC}")
        print()