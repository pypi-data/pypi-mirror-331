from .терминал import печать as п 

пройдено = 0

def содержит(что, где, игнорировать_регистор=False, стоп=False):
    # функция проверяет что хотя бы один элемент из что (или вся переменная целиком) содержиться хотябы в одном элементе из где (или евляеться самой переменной где)
    # функция возрощает тру или фолс
    # переменные что и где могут быть двух видов
        #этерируемые ответы кортеж или список всеми элиментами которых евляються строки 
        #  или сама переменная может быть стракой текста
        # при нарушение любого из этих пунктов при удалении может высветиться ошибка
    # переменная игнорировать ригистор может быть тру или изначально фолс. при передачи другого типа данных может быть высвечена ошибка
    # при получение в что или где в пустых строк или пустых списках будет возрощаться фолс
    

    pass

    if type(что) not in [list, str, tuple]:
        raise TypeError(f'переменная "что" может принять только список, кортеж или лист. По факту получения {type(что)}')
       
    if type(где) not in [list, str, tuple]:
        raise TypeError(f'переменная "где" может принять только список, кортеж или лист. По факту получения {type(что)}')
    
    if type(игнорировать_регистор) is not bool:
        raise TypeError(f'переменная "игнорировать_регистор" может принять только список, кортеж или лист. По факту получения {type(что)}')
    
    if что in [[], (), ""]:
        if что == []:
            текст_ошибки = "список"
        elif что == ():
            текст_ошибки = "кортеж"
        elif что == "":
            текст_ошибки = "текст"
        raise TypeError(f'переменная "что" не может принять пусой {текст_ошибки}, кортеж или список')
    
    if где in [[], (), ""]:
        if где == []:
            текст_ошибки = "список"
        elif где == ():
            текст_ошибки = "кортеж"
        elif где == "":
            текст_ошибки = "текст"
        raise TypeError(f'переменная "что" не может принять пусой {текст_ошибки}, кортеж или список')
    
    for элемент in что:
        if type(элемент) != str:
            raise TypeError (f'Внутри переменной "что" оказался не текстовый элемент - {элемент}')
        
    for элемент in где:
        if type(элемент) != str:
            raise TypeError (f'Внутри переменной "где" оказался не текстовый элемент - {элемент}')

    if стоп:
        print('стоп')

    if игнорировать_регистор:
        if type(что) == str:
            что = что.lower()
        else:
            маленькие_буквы = []
            for элемент in что:
                маленькие_буквы.append(элемент.lower())
            что = маленькие_буквы

    if игнорировать_регистор:
        if type(где) == str:
            где = где.lower()
        else:
            маленькие_буквы = []
            for элемент in где:
                маленькие_буквы.append(элемент.lower())
            где = маленькие_буквы                    

# текст - текст
    if type(что) == type(где) == str:
        return что in где

# текст - множество
    if type(что) == str:
        for элемент in где:
            if что in элемент:
                return True
            
    if type(где) == str:
        for элемент in что:
            if элемент in где:
                return True

    if type(что) != str and type(где) != str:
        for элемент_что in что:
            for элемент_где in где:
                if элемент_что in элемент_где:
                    return True

    return False       
    
def тесты():
    def тест(что, где, регистор, ожидаймый_ответ, название_теста):
        global пройдено

        try:
            результат = содержит(что, где, регистор)
        except:
            результат = "ошибка"

        if результат == ожидаймый_ответ:
            п(f'Тест"{название_теста}" пройден', зелёный=True)
            пройдено += 1
        else:
            п(f'тест "{название_теста}" не найден', красный=True)
            print(f"ожидаймый ответ    - {ожидаймый_ответ}")
            print(f"получить результат - {результат}")
            print()

    название = "что список, где корректное, регистр корректный - не ожидаем ошибку"
    что = ["1", "2", "3"]
    где = ["1", "2", "3"]
    регистор = True
    ожидаймый_ответ =True
    тест(что, где, регистор, ожидаймый_ответ, название)
     
    название = "что кортеж, где корректное, регистр корректный - не ожидаем ошибку"
    что = ("1", "2", "3")
    где = ["1", "2", "3"]
    регистор = True
    ожидаймый_ответ = True
    тест(что, где, регистор, ожидаймый_ответ, название)
 
    название = "что текст, где корректное, регистр корректный - не ожидаем ошибку"
    что = "1"
    где = ["1", "2", "3"]
    регистор = True
    ожидаймый_ответ = True
    тест(что, где, регистор, ожидаймый_ответ, название)

    название = "что другой тип, где корректное, регистр корректный - ожидаем ошибку"
    что = 1
    где = ["1", "2", "3"]
    регистор = True
    ожидаймый_ответ = "ошибка"
    тест(что, где, регистор, ожидаймый_ответ, название)
    
    название = "что пустой список, где корректное, регистр корректный - ожидаем ошибку"
    что = []
    где = ["1", "2", "3"]
    регистор = True
    ожидаймый_ответ = "ошибка"
    тест(что, где, регистор, ожидаймый_ответ, название)

    название = "что пустой кортеж, где корректное, регистр корректный - ожидаем ошибку"
    что = ()
    где = ["1", "2", "3"]
    регистор = True
    ожидаймый_ответ = "ошибка"
    тест(что, где, регистор, ожидаймый_ответ, название)

    название = "что пустой текст, где корректное, регистр корректный - ожидаем ошибку"
    что = ""
    где = ["1", "2", "3"]
    регистор = True
    ожидаймый_ответ = "ошибка"
    тест(что, где, регистор, ожидаймый_ответ, название)

    название = "что корректное, где список, регистр корректный - не ожидаем ошибку"
    что = ["1", "2", "3"]
    где = ("1", "2", "3")
    регистор = True
    ожидаймый_ответ = True
    тест(что, где, регистор, ожидаймый_ответ, название)

    название = "что корректное, где кортеж, регистр корректный - не ожидаем ошибку"
    что = ("1", "2", "3")
    где = ["1", "2", "3"]
    регистор = True
    ожидаймый_ответ = True
    тест(что, где, регистор, ожидаймый_ответ, название)

    название = "что корректное, где текст, регистр корректный - не ожидаем ошибку"
    что = ["1", "2", "3"]
    где = "1", "2", "3"
    регистор = True
    ожидаймый_ответ = True
    тест(что, где, регистор, ожидаймый_ответ, название)

    название = "что корректное, где другой тип, регистр корректный - ожидаем ошибку"
    что = ["1", "2", "3"]
    где = 1
    регистор = True
    ожидаймый_ответ = "ошибка"
    тест(что, где, регистор, ожидаймый_ответ, название)

    название = "что корректное, где пустой список, регистр корректный - ожидаем ошибку"
    что = ["1", "2", "3"]
    где = ()
    регистор = True
    ожидаймый_ответ = "ошибка"
    тест(что, где, регистор, ожидаймый_ответ, название)

    название = "что корректное, где пустой кортеж, регистр корректный - ожидаем ошибку"
    что = ["1", "2", "3"]
    где = []
    регистор = True
    ожидаймый_ответ = "ошибка"
    тест(что, где, регистор, ожидаймый_ответ, название)

    название = "что корректное, где пустой текст, регистр корректный - ожидаем ошибку"
    что = ["1", "2", "3"]
    где = ""
    регистор = True
    ожидаймый_ответ = "ошибка"
    тест(что, где, регистор, ожидаймый_ответ, название)
    
    название = "что корректное, где корректное, регистр True - не ожидаем ошибку"
    что = ["1", "2", "3"]
    где = ["1", "2", "3"]
    регистор = True
    ожидаймый_ответ = True
    тест(что, где, регистор, ожидаймый_ответ, название)
    
    название = "что корректное, где корректное, регистр False - не ожидаем ошибку"
    что = ["1", "2", "3"]
    где = ["1", "2", "3"]
    регистор = False
    ожидаймый_ответ = True
    тест(что, где, регистор, ожидаймый_ответ, название)

    название = "в что один из элементов не строка, где корректное, регистр коректное - ожидаем ошибку"
    что = ["1", "2", 3]
    где = ["1", "2", "3"]
    регистор = True
    ожидаймый_ответ = "ошибка"
    тест(что, где, регистор, ожидаймый_ответ, название)

    название = "что корректное, где коректное, регистр другой тип - ожидаем ошибку"
    что = ["1", "2", "3"]
    где = ["1", "2", "3"]
    регистор = ""
    ожидаймый_ответ = "ошибка"
    тест(что, где, регистор, ожидаймый_ответ, название)

    название = "что корректное, в где один из элементов не строка, регистр коректное - ожидаем ошибку"
    что = ["1", "2", "3"]
    где = ["1", "2", 3]
    регистор = True
    ожидаймый_ответ = "ошибка"
    тест(что, где, регистор, ожидаймый_ответ, название)


    список_видео = ["фильм.mp4", "кино.mp4", "песня.MP3"]
    список_картинок = ["котики.jpg", "море.jpg", "каникулы.mp4"]
    список_музыки = ["мелодия.mp3", "трек.mp3", "обложка.JPG"]
    список_документов = ["доклад.docx", "список дел.txt", "книга.fb2", "таблица.xlsx"]

    варианты = [
        ["элемент-элемент, регистр важен, результат - не содержит", ".jpg", "обложка.JPG", False, False],
        ["элемент-элемент, регистр важен, результат - содержит", ".jpg", "котики.jpg", False, True],
        ["элемент-элемент, регистр не важен, результат - не содержит", ".jpg", "песня.MP3", True, False],
        ["элемент-элемент, регистр не важен, результат - содержит", ".jpg", "обложка.JPG", True, True],
        ["элемент-множество, регистр важен, результат - не содержит", ".mp3", список_видео, False, False],
        ["элемент-множество, регистр важен, результат - содержит", ".jpg", список_картинок, False, True],
        ["элемент-множество, регистр не важен, результат - не содержит", ".txt", список_видео, True, False],
        ["элемент-множество, регистр не важен, результат - содержит", ".mp3", список_видео, True, True],
        ["множество-элемент, регистр важен, результат - не содержит", [".jpg", ".mp3"], "песня.MP3", False, False],
        ["множество-элемент, регистр важен, результат - содержит", [".txt", ".mp3"], "список дел.txt", False, True],
        ["множество-элемент, регистр не важен, результат - не содержит", [".xlsx", ".fb2"], "трек.mp3", True, False],
        ["множество-элемент, регистр не важен, результат - содержит", [".jpg", ".mp3"], "песня.MP3", True, True],
        ["множество-множество, регистр важен, результат - не содержит", [".jpg", ".mp3"], список_видео, False, False],
        ["множество-множество, регистр важен, результат - содержит", [".mp4", ".jpg"], список_картинок, False, True],
        ["множество-множество, регистр не важен, результат - не содержит", [".docx", ".xlsx"], список_видео, True, False],
        ["множество-множество, регистр не важен, результат - содержит", [".mp3", ".docx"], список_видео, True, True],
    ]
    
    for вариант in варианты:
        название, что, где, регистор, ожидаймый_ответ = вариант
        тест(что, где, регистор, ожидаймый_ответ, название)



        print(f"пройдено тестов {пройдено} тестов из 35")

    вариант =  ["элемент-множество, регистр не важен, результат - содержит", ".mp3", список_видео, True, True]
    название, что, где, регистор, ожидаймый_ответ = вариант

    if содержит(что, где, регистор, стоп=True) == ожидаймый_ответ:
        print("верно")
    else: 
        print("неверно")
    print(где)

if __name__ == "__main__":
    тесты()