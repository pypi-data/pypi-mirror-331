# project_generator.py
import os
import logging

# Configure logging
LOG_FILE = "project_generator.log"
logging.basicConfig(
    filename=LOG_FILE,
    level=logging.DEBUG,
    format="%(asctime)s - %(levelname)s - %(message)s"
)

# Define the AI Project Structure
PROJECT_STRUCTURE = {
    "data_source": {"ingestion": {}, "processing": {}, "storage": {}},
    "knowledge_base": {"models": {}, "training": {}, "evaluation": {}},
    "ai_governance": {"compliance": {}, "fairness": {}, "monitoring": {}},
    "api": {"endpoints": {}, "authentication": {}},
    "tests": {},
    "docs": {},
    "scripts": {},
    "configs": {},
    "": {"main.py", "requirements.txt"},
}

def create_project_structure(base_path, structure):
    """Creates the AI project directory structure with logging and error handling."""
    try:
        if not os.path.exists(base_path):
            os.makedirs(base_path)
            logging.info(f"Created base project directory: {base_path}")

        for folder, subfolders in structure.items():
            folder_path = os.path.join(base_path, folder)
            try:
                os.makedirs(folder_path, exist_ok=True)
                logging.info(f"Created folder: {folder_path}")

                # Create __init__.py for package folders
                init_file = os.path.join(folder_path, "__init__.py")
                with open(init_file, "w") as f:
                    f.write(f"# {folder.replace('_', ' ').title()} package\n")
                logging.info(f"Created __init__.py in: {folder_path}")

            except PermissionError:
                logging.error(f"Permission denied: Unable to create {folder_path}")
            except Exception as e:
                logging.error(f"Error creating folder {folder_path}: {str(e)}")

            if isinstance(subfolders, dict):
                create_project_structure(folder_path, subfolders)

            # Handle single files in the root project
            if isinstance(subfolders, set):
                for file in subfolders:
                    file_path = os.path.join(base_path, file)
                    try:
                        with open(file_path, "w") as f:
                            f.write(f"# {file} generated by project generator\n")
                        logging.info(f"Created file: {file_path}")
                    except PermissionError:
                        logging.error(f"Permission denied: Unable to create {file_path}")
                    except Exception as e:
                        logging.error(f"Error creating file {file_path}: {str(e)}")

    except Exception as e:
        logging.critical(f"Critical error in project generation: {str(e)}")

# Example Usage
if __name__ == "__main__":
    BASE_PATH = "My_AI_Project"
    create_project_structure(BASE_PATH, PROJECT_STRUCTURE)
    print("âœ… AI project structure generated. Check logs for details.")
