from typing import TypeAlias, Union, Literal, Optional

from .attributes import GlobalAttrs, AnchorAttrs, AreaAttrs, AudioAttrs, BaseAttrs, BlockquoteAttrs, BodyAttrs, ButtonAttrs, CanvasAttrs, ColAttrs, ColgroupAttrs, DataAttrs, DelAttrs, DetailsAttrs, DialogAttrs, EmbedAttrs, FieldsetAttrs, FormAttrs, IframeAttrs, ImgAttrs, InputAttrs, InsAttrs, LabelAttrs, LiAttrs, LinkAttrs, MapAttrs, MetaAttrs, MeterAttrs, ObjectAttrs, OlAttrs, OptgroupAttrs, OptionAttrs, OutputAttrs, ProgressAttrs, QAttrs, ScriptAttrs, SelectAttrs, SlotAttrs, SourceAttrs, StyleAttrs, TdAttrs, TemplateAttrs, TextareaAttrs, ThAttrs, TimeAttrs, TrackAttrs, VideoAttrs
from .base_attribute import BaseAttribute
from .base_element import BaseElement

# This file is generated by tools/generate_elements.py

class a(BaseElement, GlobalAttrs, AnchorAttrs):
    """
    The 'a' element.  
    Description: Hyperlink  
    Categories: flow phrasing* interactive palpable  
    Parents: phrasing  
    Children: transparent*  
    Interface: HTMLAnchorElement  
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a  
    """ # fmt: skip


    def __init__(
        self,
        attrs: Optional[Union[dict[str, Union[str, dict, list]], list[BaseAttribute]]] = None,
        id: Optional[Union[str, GlobalAttrs.id]] = None,
        class_: Optional[Union[str, GlobalAttrs.class_]] = None,
        download: Optional[Union[str, AnchorAttrs.download]] = None,
        href: Optional[Union[str, AnchorAttrs.href]] = None,
        hreflang: Optional[Union[str, AnchorAttrs.hreflang]] = None,
        ping: Optional[Union[str, AnchorAttrs.ping]] = None,
        referrerpolicy: Optional[Union[str, AnchorAttrs.referrerpolicy]] = None,
        rel: Optional[Union[str, AnchorAttrs.rel]] = None,
        target: Optional[Union[str, AnchorAttrs.target]] = None,
        type: Optional[Union[str, AnchorAttrs.type]] = None,
        accesskey: Optional[Union[str, GlobalAttrs.accesskey]] = None,
        autocapitalize: Optional[Union[str, GlobalAttrs.autocapitalize, Literal['on', 'off', 'none', 'sentences', 'words', 'characters']]] = None,
        autocorrect: Optional[Union[str, GlobalAttrs.autocorrect, Literal['on', 'off']]] = None,
        autofocus: Optional[Union[str, GlobalAttrs.autofocus, bool]] = None,
        contenteditable: Optional[Union[str, GlobalAttrs.contenteditable, Literal['true', 'plaintext-only', 'false']]] = None,
        dir: Optional[Union[str, GlobalAttrs.dir, Literal['ltr', 'rtl', 'auto']]] = None,
        draggable: Optional[Union[str, GlobalAttrs.draggable, Literal['true', 'false']]] = None,
        enterkeyhint: Optional[Union[str, GlobalAttrs.enterkeyhint, Literal['enter', 'done', 'go', 'next', 'previous', 'search', 'send']]] = None,
        hidden: Optional[Union[str, GlobalAttrs.hidden, Literal['until-found', 'hidden', '']]] = None,
        inert: Optional[Union[str, GlobalAttrs.inert, bool]] = None,
        inputmode: Optional[Union[str, GlobalAttrs.inputmode, Literal['none', 'text', 'tel', 'email', 'url', 'numeric', 'decimal', 'search']]] = None,
        is_: Optional[Union[str, GlobalAttrs.is_]] = None,
        itemid: Optional[Union[str, GlobalAttrs.itemid]] = None,
        itemprop: Optional[Union[str, GlobalAttrs.itemprop]] = None,
        itemref: Optional[Union[str, GlobalAttrs.itemref]] = None,
        itemscope: Optional[Union[str, GlobalAttrs.itemscope, bool]] = None,
        itemtype: Optional[Union[str, GlobalAttrs.itemtype]] = None,
        lang: Optional[Union[str, GlobalAttrs.lang]] = None,
        nonce: Optional[Union[str, GlobalAttrs.nonce]] = None,
        popover: Optional[Union[str, GlobalAttrs.popover, Literal['auto', 'manual']]] = None,
        slot: Optional[Union[str, GlobalAttrs.slot]] = None,
        spellcheck: Optional[Union[str, GlobalAttrs.spellcheck, Literal['true', 'false', '']]] = None,
        style: Optional[Union[str, GlobalAttrs.style]] = None,
        tabindex: Optional[Union[str, GlobalAttrs.tabindex, int]] = None,
        title: Optional[Union[str, GlobalAttrs.title]] = None,
        translate: Optional[Union[str, GlobalAttrs.translate, Literal['yes', 'no']]] = None,
        writingsuggestions: Optional[Union[str, GlobalAttrs.writingsuggestions, Literal['true', 'false', '']]] = None,
        children: Optional[list] = None
    ) -> None:
        """
        Initialize 'a' (Hyperlink) element.  
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a

        :param attrs: A list or dictionary of attributes for the element
        :param id: The element's ID
        :param class_: Classes to which the element belongs
            | Set of space-separated tokens
        :param download: Whether to download the resource instead of navigating to it, and its filename if so
        :param href: Address of the hyperlink
            | Valid URL potentially surrounded by spaces
        :param hreflang: Language of the linked resource
            | Valid BCP 47 language tag
        :param ping: URLs to ping
            | Set of space-separated tokens consisting of valid non-empty URLs
        :param referrerpolicy: Referrer policy for fetches initiated by the element
            | Referrer policy
        :param rel: Relationship between the location in the document containing the hyperlink and the destination resource
            | Unordered set of unique space-separated tokens*
        :param target: Navigable for hyperlink navigation
            | Valid navigable target name or keyword
        :param type: Hint for the type of the referenced resource
            | Valid MIME type string
        :param accesskey: Keyboard shortcut to activate or focus element
            | Ordered set of unique space-separated tokens, none of which are identical to another, each consisting of one code point in length
        :param autocapitalize: Recommended autocapitalization behavior (for supported input methods)
        :param autocorrect: Recommended autocorrection behavior (for supported input methods)
        :param autofocus: Automatically focus the element when the page is loaded
        :param contenteditable: Whether the element is editable
        :param dir: The text directionality of the element
        :param draggable: Whether the element is draggable
        :param enterkeyhint: Hint for selecting an enter key action
        :param hidden: Whether the element is relevant
        :param inert: Whether the element is inert.
        :param inputmode: Hint for selecting an input modality
        :param is_: Creates a customized built-in element
            | Valid custom element name of a defined customized built-in element
        :param itemid: Global identifier for a microdata item
            | Valid URL potentially surrounded by spaces
        :param itemprop: Property names of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs, defined property names, or text*
        :param itemref: Referenced elements
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param itemscope: Introduces a microdata item
        :param itemtype: Item types of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs*
        :param lang: Language of the element
            | Valid BCP 47 language tag or the empty string
        :param nonce: Cryptographic nonce used in Content Security Policy checks [CSP]
        :param popover: Makes the element a popover element
        :param slot: The element's desired slot
        :param spellcheck: Whether the element is to have its spelling and grammar checked
        :param style: Presentational and formatting instructions
            | CSS declarations*
        :param tabindex: Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation
        :param title: Advisory information for the element
        :param translate: Whether the element is to be translated when the page is localized
        :param writingsuggestions: Whether the element can offer writing suggestions or not.
        """ #fmt: skip
        super().__init__(
            "a",
            void_element=False,
            attrs=attrs,
            children=children
        )
        if not (id is None or id is False):
            self._process_attr("id", id)
        if not (class_ is None or class_ is False):
            self._process_attr("class", class_)
        if not (download is None or download is False):
            self._process_attr("download", download)
        if not (href is None or href is False):
            self._process_attr("href", href)
        if not (hreflang is None or hreflang is False):
            self._process_attr("hreflang", hreflang)
        if not (ping is None or ping is False):
            self._process_attr("ping", ping)
        if not (referrerpolicy is None or referrerpolicy is False):
            self._process_attr("referrerpolicy", referrerpolicy)
        if not (rel is None or rel is False):
            self._process_attr("rel", rel)
        if not (target is None or target is False):
            self._process_attr("target", target)
        if not (type is None or type is False):
            self._process_attr("type", type)
        if not (accesskey is None or accesskey is False):
            self._process_attr("accesskey", accesskey)
        if not (autocapitalize is None or autocapitalize is False):
            self._process_attr("autocapitalize", autocapitalize)
        if not (autocorrect is None or autocorrect is False):
            self._process_attr("autocorrect", autocorrect)
        if not (autofocus is None or autofocus is False):
            self._process_attr("autofocus", autofocus)
        if not (contenteditable is None or contenteditable is False):
            self._process_attr("contenteditable", contenteditable)
        if not (dir is None or dir is False):
            self._process_attr("dir", dir)
        if not (draggable is None or draggable is False):
            self._process_attr("draggable", draggable)
        if not (enterkeyhint is None or enterkeyhint is False):
            self._process_attr("enterkeyhint", enterkeyhint)
        if not (hidden is None or hidden is False):
            self._process_attr("hidden", hidden)
        if not (inert is None or inert is False):
            self._process_attr("inert", inert)
        if not (inputmode is None or inputmode is False):
            self._process_attr("inputmode", inputmode)
        if not (is_ is None or is_ is False):
            self._process_attr("is", is_)
        if not (itemid is None or itemid is False):
            self._process_attr("itemid", itemid)
        if not (itemprop is None or itemprop is False):
            self._process_attr("itemprop", itemprop)
        if not (itemref is None or itemref is False):
            self._process_attr("itemref", itemref)
        if not (itemscope is None or itemscope is False):
            self._process_attr("itemscope", itemscope)
        if not (itemtype is None or itemtype is False):
            self._process_attr("itemtype", itemtype)
        if not (lang is None or lang is False):
            self._process_attr("lang", lang)
        if not (nonce is None or nonce is False):
            self._process_attr("nonce", nonce)
        if not (popover is None or popover is False):
            self._process_attr("popover", popover)
        if not (slot is None or slot is False):
            self._process_attr("slot", slot)
        if not (spellcheck is None or spellcheck is False):
            self._process_attr("spellcheck", spellcheck)
        if not (style is None or style is False):
            self._process_attr("style", style)
        if not (tabindex is None or tabindex is False):
            self._process_attr("tabindex", tabindex)
        if not (title is None or title is False):
            self._process_attr("title", title)
        if not (translate is None or translate is False):
            self._process_attr("translate", translate)
        if not (writingsuggestions is None or writingsuggestions is False):
            self._process_attr("writingsuggestions", writingsuggestions)


class abbr(BaseElement, GlobalAttrs):
    """
    The 'abbr' element.  
    Description: Abbreviation  
    Categories: flow phrasing palpable  
    Parents: phrasing  
    Children: phrasing  
    Interface: HTMLElement  
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/abbr  
    """ # fmt: skip


    def __init__(
        self,
        attrs: Optional[Union[dict[str, Union[str, dict, list]], list[BaseAttribute]]] = None,
        id: Optional[Union[str, GlobalAttrs.id]] = None,
        class_: Optional[Union[str, GlobalAttrs.class_]] = None,
        accesskey: Optional[Union[str, GlobalAttrs.accesskey]] = None,
        autocapitalize: Optional[Union[str, GlobalAttrs.autocapitalize, Literal['on', 'off', 'none', 'sentences', 'words', 'characters']]] = None,
        autocorrect: Optional[Union[str, GlobalAttrs.autocorrect, Literal['on', 'off']]] = None,
        autofocus: Optional[Union[str, GlobalAttrs.autofocus, bool]] = None,
        contenteditable: Optional[Union[str, GlobalAttrs.contenteditable, Literal['true', 'plaintext-only', 'false']]] = None,
        dir: Optional[Union[str, GlobalAttrs.dir, Literal['ltr', 'rtl', 'auto']]] = None,
        draggable: Optional[Union[str, GlobalAttrs.draggable, Literal['true', 'false']]] = None,
        enterkeyhint: Optional[Union[str, GlobalAttrs.enterkeyhint, Literal['enter', 'done', 'go', 'next', 'previous', 'search', 'send']]] = None,
        hidden: Optional[Union[str, GlobalAttrs.hidden, Literal['until-found', 'hidden', '']]] = None,
        inert: Optional[Union[str, GlobalAttrs.inert, bool]] = None,
        inputmode: Optional[Union[str, GlobalAttrs.inputmode, Literal['none', 'text', 'tel', 'email', 'url', 'numeric', 'decimal', 'search']]] = None,
        is_: Optional[Union[str, GlobalAttrs.is_]] = None,
        itemid: Optional[Union[str, GlobalAttrs.itemid]] = None,
        itemprop: Optional[Union[str, GlobalAttrs.itemprop]] = None,
        itemref: Optional[Union[str, GlobalAttrs.itemref]] = None,
        itemscope: Optional[Union[str, GlobalAttrs.itemscope, bool]] = None,
        itemtype: Optional[Union[str, GlobalAttrs.itemtype]] = None,
        lang: Optional[Union[str, GlobalAttrs.lang]] = None,
        nonce: Optional[Union[str, GlobalAttrs.nonce]] = None,
        popover: Optional[Union[str, GlobalAttrs.popover, Literal['auto', 'manual']]] = None,
        slot: Optional[Union[str, GlobalAttrs.slot]] = None,
        spellcheck: Optional[Union[str, GlobalAttrs.spellcheck, Literal['true', 'false', '']]] = None,
        style: Optional[Union[str, GlobalAttrs.style]] = None,
        tabindex: Optional[Union[str, GlobalAttrs.tabindex, int]] = None,
        title: Optional[Union[str, GlobalAttrs.title]] = None,
        translate: Optional[Union[str, GlobalAttrs.translate, Literal['yes', 'no']]] = None,
        writingsuggestions: Optional[Union[str, GlobalAttrs.writingsuggestions, Literal['true', 'false', '']]] = None,
        children: Optional[list] = None
    ) -> None:
        """
        Initialize 'abbr' (Abbreviation) element.  
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/abbr

        :param attrs: A list or dictionary of attributes for the element
        :param id: The element's ID
        :param class_: Classes to which the element belongs
            | Set of space-separated tokens
        :param accesskey: Keyboard shortcut to activate or focus element
            | Ordered set of unique space-separated tokens, none of which are identical to another, each consisting of one code point in length
        :param autocapitalize: Recommended autocapitalization behavior (for supported input methods)
        :param autocorrect: Recommended autocorrection behavior (for supported input methods)
        :param autofocus: Automatically focus the element when the page is loaded
        :param contenteditable: Whether the element is editable
        :param dir: The text directionality of the element
        :param draggable: Whether the element is draggable
        :param enterkeyhint: Hint for selecting an enter key action
        :param hidden: Whether the element is relevant
        :param inert: Whether the element is inert.
        :param inputmode: Hint for selecting an input modality
        :param is_: Creates a customized built-in element
            | Valid custom element name of a defined customized built-in element
        :param itemid: Global identifier for a microdata item
            | Valid URL potentially surrounded by spaces
        :param itemprop: Property names of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs, defined property names, or text*
        :param itemref: Referenced elements
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param itemscope: Introduces a microdata item
        :param itemtype: Item types of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs*
        :param lang: Language of the element
            | Valid BCP 47 language tag or the empty string
        :param nonce: Cryptographic nonce used in Content Security Policy checks [CSP]
        :param popover: Makes the element a popover element
        :param slot: The element's desired slot
        :param spellcheck: Whether the element is to have its spelling and grammar checked
        :param style: Presentational and formatting instructions
            | CSS declarations*
        :param tabindex: Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation
        :param title: Advisory information for the element
        :param translate: Whether the element is to be translated when the page is localized
        :param writingsuggestions: Whether the element can offer writing suggestions or not.
        """ #fmt: skip
        super().__init__(
            "abbr",
            void_element=False,
            attrs=attrs,
            children=children
        )
        if not (id is None or id is False):
            self._process_attr("id", id)
        if not (class_ is None or class_ is False):
            self._process_attr("class", class_)
        if not (accesskey is None or accesskey is False):
            self._process_attr("accesskey", accesskey)
        if not (autocapitalize is None or autocapitalize is False):
            self._process_attr("autocapitalize", autocapitalize)
        if not (autocorrect is None or autocorrect is False):
            self._process_attr("autocorrect", autocorrect)
        if not (autofocus is None or autofocus is False):
            self._process_attr("autofocus", autofocus)
        if not (contenteditable is None or contenteditable is False):
            self._process_attr("contenteditable", contenteditable)
        if not (dir is None or dir is False):
            self._process_attr("dir", dir)
        if not (draggable is None or draggable is False):
            self._process_attr("draggable", draggable)
        if not (enterkeyhint is None or enterkeyhint is False):
            self._process_attr("enterkeyhint", enterkeyhint)
        if not (hidden is None or hidden is False):
            self._process_attr("hidden", hidden)
        if not (inert is None or inert is False):
            self._process_attr("inert", inert)
        if not (inputmode is None or inputmode is False):
            self._process_attr("inputmode", inputmode)
        if not (is_ is None or is_ is False):
            self._process_attr("is", is_)
        if not (itemid is None or itemid is False):
            self._process_attr("itemid", itemid)
        if not (itemprop is None or itemprop is False):
            self._process_attr("itemprop", itemprop)
        if not (itemref is None or itemref is False):
            self._process_attr("itemref", itemref)
        if not (itemscope is None or itemscope is False):
            self._process_attr("itemscope", itemscope)
        if not (itemtype is None or itemtype is False):
            self._process_attr("itemtype", itemtype)
        if not (lang is None or lang is False):
            self._process_attr("lang", lang)
        if not (nonce is None or nonce is False):
            self._process_attr("nonce", nonce)
        if not (popover is None or popover is False):
            self._process_attr("popover", popover)
        if not (slot is None or slot is False):
            self._process_attr("slot", slot)
        if not (spellcheck is None or spellcheck is False):
            self._process_attr("spellcheck", spellcheck)
        if not (style is None or style is False):
            self._process_attr("style", style)
        if not (tabindex is None or tabindex is False):
            self._process_attr("tabindex", tabindex)
        if not (title is None or title is False):
            self._process_attr("title", title)
        if not (translate is None or translate is False):
            self._process_attr("translate", translate)
        if not (writingsuggestions is None or writingsuggestions is False):
            self._process_attr("writingsuggestions", writingsuggestions)


class address(BaseElement, GlobalAttrs):
    """
    The 'address' element.  
    Description: Contact information for a page or article element  
    Categories: flow palpable  
    Parents: flow  
    Children: flow*  
    Interface: HTMLElement  
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/address  
    """ # fmt: skip


    def __init__(
        self,
        attrs: Optional[Union[dict[str, Union[str, dict, list]], list[BaseAttribute]]] = None,
        id: Optional[Union[str, GlobalAttrs.id]] = None,
        class_: Optional[Union[str, GlobalAttrs.class_]] = None,
        accesskey: Optional[Union[str, GlobalAttrs.accesskey]] = None,
        autocapitalize: Optional[Union[str, GlobalAttrs.autocapitalize, Literal['on', 'off', 'none', 'sentences', 'words', 'characters']]] = None,
        autocorrect: Optional[Union[str, GlobalAttrs.autocorrect, Literal['on', 'off']]] = None,
        autofocus: Optional[Union[str, GlobalAttrs.autofocus, bool]] = None,
        contenteditable: Optional[Union[str, GlobalAttrs.contenteditable, Literal['true', 'plaintext-only', 'false']]] = None,
        dir: Optional[Union[str, GlobalAttrs.dir, Literal['ltr', 'rtl', 'auto']]] = None,
        draggable: Optional[Union[str, GlobalAttrs.draggable, Literal['true', 'false']]] = None,
        enterkeyhint: Optional[Union[str, GlobalAttrs.enterkeyhint, Literal['enter', 'done', 'go', 'next', 'previous', 'search', 'send']]] = None,
        hidden: Optional[Union[str, GlobalAttrs.hidden, Literal['until-found', 'hidden', '']]] = None,
        inert: Optional[Union[str, GlobalAttrs.inert, bool]] = None,
        inputmode: Optional[Union[str, GlobalAttrs.inputmode, Literal['none', 'text', 'tel', 'email', 'url', 'numeric', 'decimal', 'search']]] = None,
        is_: Optional[Union[str, GlobalAttrs.is_]] = None,
        itemid: Optional[Union[str, GlobalAttrs.itemid]] = None,
        itemprop: Optional[Union[str, GlobalAttrs.itemprop]] = None,
        itemref: Optional[Union[str, GlobalAttrs.itemref]] = None,
        itemscope: Optional[Union[str, GlobalAttrs.itemscope, bool]] = None,
        itemtype: Optional[Union[str, GlobalAttrs.itemtype]] = None,
        lang: Optional[Union[str, GlobalAttrs.lang]] = None,
        nonce: Optional[Union[str, GlobalAttrs.nonce]] = None,
        popover: Optional[Union[str, GlobalAttrs.popover, Literal['auto', 'manual']]] = None,
        slot: Optional[Union[str, GlobalAttrs.slot]] = None,
        spellcheck: Optional[Union[str, GlobalAttrs.spellcheck, Literal['true', 'false', '']]] = None,
        style: Optional[Union[str, GlobalAttrs.style]] = None,
        tabindex: Optional[Union[str, GlobalAttrs.tabindex, int]] = None,
        title: Optional[Union[str, GlobalAttrs.title]] = None,
        translate: Optional[Union[str, GlobalAttrs.translate, Literal['yes', 'no']]] = None,
        writingsuggestions: Optional[Union[str, GlobalAttrs.writingsuggestions, Literal['true', 'false', '']]] = None,
        children: Optional[list] = None
    ) -> None:
        """
        Initialize 'address' (Contact information for a page or article element) element.  
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/address

        :param attrs: A list or dictionary of attributes for the element
        :param id: The element's ID
        :param class_: Classes to which the element belongs
            | Set of space-separated tokens
        :param accesskey: Keyboard shortcut to activate or focus element
            | Ordered set of unique space-separated tokens, none of which are identical to another, each consisting of one code point in length
        :param autocapitalize: Recommended autocapitalization behavior (for supported input methods)
        :param autocorrect: Recommended autocorrection behavior (for supported input methods)
        :param autofocus: Automatically focus the element when the page is loaded
        :param contenteditable: Whether the element is editable
        :param dir: The text directionality of the element
        :param draggable: Whether the element is draggable
        :param enterkeyhint: Hint for selecting an enter key action
        :param hidden: Whether the element is relevant
        :param inert: Whether the element is inert.
        :param inputmode: Hint for selecting an input modality
        :param is_: Creates a customized built-in element
            | Valid custom element name of a defined customized built-in element
        :param itemid: Global identifier for a microdata item
            | Valid URL potentially surrounded by spaces
        :param itemprop: Property names of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs, defined property names, or text*
        :param itemref: Referenced elements
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param itemscope: Introduces a microdata item
        :param itemtype: Item types of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs*
        :param lang: Language of the element
            | Valid BCP 47 language tag or the empty string
        :param nonce: Cryptographic nonce used in Content Security Policy checks [CSP]
        :param popover: Makes the element a popover element
        :param slot: The element's desired slot
        :param spellcheck: Whether the element is to have its spelling and grammar checked
        :param style: Presentational and formatting instructions
            | CSS declarations*
        :param tabindex: Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation
        :param title: Advisory information for the element
        :param translate: Whether the element is to be translated when the page is localized
        :param writingsuggestions: Whether the element can offer writing suggestions or not.
        """ #fmt: skip
        super().__init__(
            "address",
            void_element=False,
            attrs=attrs,
            children=children
        )
        if not (id is None or id is False):
            self._process_attr("id", id)
        if not (class_ is None or class_ is False):
            self._process_attr("class", class_)
        if not (accesskey is None or accesskey is False):
            self._process_attr("accesskey", accesskey)
        if not (autocapitalize is None or autocapitalize is False):
            self._process_attr("autocapitalize", autocapitalize)
        if not (autocorrect is None or autocorrect is False):
            self._process_attr("autocorrect", autocorrect)
        if not (autofocus is None or autofocus is False):
            self._process_attr("autofocus", autofocus)
        if not (contenteditable is None or contenteditable is False):
            self._process_attr("contenteditable", contenteditable)
        if not (dir is None or dir is False):
            self._process_attr("dir", dir)
        if not (draggable is None or draggable is False):
            self._process_attr("draggable", draggable)
        if not (enterkeyhint is None or enterkeyhint is False):
            self._process_attr("enterkeyhint", enterkeyhint)
        if not (hidden is None or hidden is False):
            self._process_attr("hidden", hidden)
        if not (inert is None or inert is False):
            self._process_attr("inert", inert)
        if not (inputmode is None or inputmode is False):
            self._process_attr("inputmode", inputmode)
        if not (is_ is None or is_ is False):
            self._process_attr("is", is_)
        if not (itemid is None or itemid is False):
            self._process_attr("itemid", itemid)
        if not (itemprop is None or itemprop is False):
            self._process_attr("itemprop", itemprop)
        if not (itemref is None or itemref is False):
            self._process_attr("itemref", itemref)
        if not (itemscope is None or itemscope is False):
            self._process_attr("itemscope", itemscope)
        if not (itemtype is None or itemtype is False):
            self._process_attr("itemtype", itemtype)
        if not (lang is None or lang is False):
            self._process_attr("lang", lang)
        if not (nonce is None or nonce is False):
            self._process_attr("nonce", nonce)
        if not (popover is None or popover is False):
            self._process_attr("popover", popover)
        if not (slot is None or slot is False):
            self._process_attr("slot", slot)
        if not (spellcheck is None or spellcheck is False):
            self._process_attr("spellcheck", spellcheck)
        if not (style is None or style is False):
            self._process_attr("style", style)
        if not (tabindex is None or tabindex is False):
            self._process_attr("tabindex", tabindex)
        if not (title is None or title is False):
            self._process_attr("title", title)
        if not (translate is None or translate is False):
            self._process_attr("translate", translate)
        if not (writingsuggestions is None or writingsuggestions is False):
            self._process_attr("writingsuggestions", writingsuggestions)


class area(BaseElement, GlobalAttrs, AreaAttrs):
    """
    The 'area' element.  
    Description: Hyperlink or dead area on an image map  
    Categories: flow phrasing  
    Parents: phrasing*  
    Children: empty  
    Interface: HTMLAreaElement  
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/area  
    """ # fmt: skip


    def __init__(
        self,
        attrs: Optional[Union[dict[str, Union[str, dict, list]], list[BaseAttribute]]] = None,
        id: Optional[Union[str, GlobalAttrs.id]] = None,
        class_: Optional[Union[str, GlobalAttrs.class_]] = None,
        alt: Optional[Union[str, AreaAttrs.alt]] = None,
        coords: Optional[Union[str, AreaAttrs.coords]] = None,
        download: Optional[Union[str, AreaAttrs.download]] = None,
        href: Optional[Union[str, AreaAttrs.href]] = None,
        ping: Optional[Union[str, AreaAttrs.ping]] = None,
        referrerpolicy: Optional[Union[str, AreaAttrs.referrerpolicy]] = None,
        rel: Optional[Union[str, AreaAttrs.rel]] = None,
        shape: Optional[Union[str, AreaAttrs.shape, Literal['circle', 'default', 'poly', 'rect']]] = None,
        target: Optional[Union[str, AreaAttrs.target]] = None,
        accesskey: Optional[Union[str, GlobalAttrs.accesskey]] = None,
        autocapitalize: Optional[Union[str, GlobalAttrs.autocapitalize, Literal['on', 'off', 'none', 'sentences', 'words', 'characters']]] = None,
        autocorrect: Optional[Union[str, GlobalAttrs.autocorrect, Literal['on', 'off']]] = None,
        autofocus: Optional[Union[str, GlobalAttrs.autofocus, bool]] = None,
        contenteditable: Optional[Union[str, GlobalAttrs.contenteditable, Literal['true', 'plaintext-only', 'false']]] = None,
        dir: Optional[Union[str, GlobalAttrs.dir, Literal['ltr', 'rtl', 'auto']]] = None,
        draggable: Optional[Union[str, GlobalAttrs.draggable, Literal['true', 'false']]] = None,
        enterkeyhint: Optional[Union[str, GlobalAttrs.enterkeyhint, Literal['enter', 'done', 'go', 'next', 'previous', 'search', 'send']]] = None,
        hidden: Optional[Union[str, GlobalAttrs.hidden, Literal['until-found', 'hidden', '']]] = None,
        inert: Optional[Union[str, GlobalAttrs.inert, bool]] = None,
        inputmode: Optional[Union[str, GlobalAttrs.inputmode, Literal['none', 'text', 'tel', 'email', 'url', 'numeric', 'decimal', 'search']]] = None,
        is_: Optional[Union[str, GlobalAttrs.is_]] = None,
        itemid: Optional[Union[str, GlobalAttrs.itemid]] = None,
        itemprop: Optional[Union[str, GlobalAttrs.itemprop]] = None,
        itemref: Optional[Union[str, GlobalAttrs.itemref]] = None,
        itemscope: Optional[Union[str, GlobalAttrs.itemscope, bool]] = None,
        itemtype: Optional[Union[str, GlobalAttrs.itemtype]] = None,
        lang: Optional[Union[str, GlobalAttrs.lang]] = None,
        nonce: Optional[Union[str, GlobalAttrs.nonce]] = None,
        popover: Optional[Union[str, GlobalAttrs.popover, Literal['auto', 'manual']]] = None,
        slot: Optional[Union[str, GlobalAttrs.slot]] = None,
        spellcheck: Optional[Union[str, GlobalAttrs.spellcheck, Literal['true', 'false', '']]] = None,
        style: Optional[Union[str, GlobalAttrs.style]] = None,
        tabindex: Optional[Union[str, GlobalAttrs.tabindex, int]] = None,
        title: Optional[Union[str, GlobalAttrs.title]] = None,
        translate: Optional[Union[str, GlobalAttrs.translate, Literal['yes', 'no']]] = None,
        writingsuggestions: Optional[Union[str, GlobalAttrs.writingsuggestions, Literal['true', 'false', '']]] = None,
        children: Optional[list] = None
    ) -> None:
        """
        Initialize 'area' (Hyperlink or dead area on an image map) element.  
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/area

        :param attrs: A list or dictionary of attributes for the element
        :param id: The element's ID
        :param class_: Classes to which the element belongs
            | Set of space-separated tokens
        :param alt: Replacement text for use when images are not available
        :param coords: Coordinates for the shape to be created in an image map
            | Valid list of floating-point numbers*
        :param download: Whether to download the resource instead of navigating to it, and its filename if so
        :param href: Address of the hyperlink
            | Valid URL potentially surrounded by spaces
        :param ping: URLs to ping
            | Set of space-separated tokens consisting of valid non-empty URLs
        :param referrerpolicy: Referrer policy for fetches initiated by the element
            | Referrer policy
        :param rel: Relationship between the location in the document containing the hyperlink and the destination resource
            | Unordered set of unique space-separated tokens*
        :param shape: The kind of shape to be created in an image map
        :param target: Navigable for hyperlink navigation
            | Valid navigable target name or keyword
        :param accesskey: Keyboard shortcut to activate or focus element
            | Ordered set of unique space-separated tokens, none of which are identical to another, each consisting of one code point in length
        :param autocapitalize: Recommended autocapitalization behavior (for supported input methods)
        :param autocorrect: Recommended autocorrection behavior (for supported input methods)
        :param autofocus: Automatically focus the element when the page is loaded
        :param contenteditable: Whether the element is editable
        :param dir: The text directionality of the element
        :param draggable: Whether the element is draggable
        :param enterkeyhint: Hint for selecting an enter key action
        :param hidden: Whether the element is relevant
        :param inert: Whether the element is inert.
        :param inputmode: Hint for selecting an input modality
        :param is_: Creates a customized built-in element
            | Valid custom element name of a defined customized built-in element
        :param itemid: Global identifier for a microdata item
            | Valid URL potentially surrounded by spaces
        :param itemprop: Property names of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs, defined property names, or text*
        :param itemref: Referenced elements
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param itemscope: Introduces a microdata item
        :param itemtype: Item types of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs*
        :param lang: Language of the element
            | Valid BCP 47 language tag or the empty string
        :param nonce: Cryptographic nonce used in Content Security Policy checks [CSP]
        :param popover: Makes the element a popover element
        :param slot: The element's desired slot
        :param spellcheck: Whether the element is to have its spelling and grammar checked
        :param style: Presentational and formatting instructions
            | CSS declarations*
        :param tabindex: Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation
        :param title: Advisory information for the element
        :param translate: Whether the element is to be translated when the page is localized
        :param writingsuggestions: Whether the element can offer writing suggestions or not.
        """ #fmt: skip
        super().__init__(
            "area",
            void_element=True,
            attrs=attrs,
            children=children
        )
        if not (id is None or id is False):
            self._process_attr("id", id)
        if not (class_ is None or class_ is False):
            self._process_attr("class", class_)
        if not (alt is None or alt is False):
            self._process_attr("alt", alt)
        if not (coords is None or coords is False):
            self._process_attr("coords", coords)
        if not (download is None or download is False):
            self._process_attr("download", download)
        if not (href is None or href is False):
            self._process_attr("href", href)
        if not (ping is None or ping is False):
            self._process_attr("ping", ping)
        if not (referrerpolicy is None or referrerpolicy is False):
            self._process_attr("referrerpolicy", referrerpolicy)
        if not (rel is None or rel is False):
            self._process_attr("rel", rel)
        if not (shape is None or shape is False):
            self._process_attr("shape", shape)
        if not (target is None or target is False):
            self._process_attr("target", target)
        if not (accesskey is None or accesskey is False):
            self._process_attr("accesskey", accesskey)
        if not (autocapitalize is None or autocapitalize is False):
            self._process_attr("autocapitalize", autocapitalize)
        if not (autocorrect is None or autocorrect is False):
            self._process_attr("autocorrect", autocorrect)
        if not (autofocus is None or autofocus is False):
            self._process_attr("autofocus", autofocus)
        if not (contenteditable is None or contenteditable is False):
            self._process_attr("contenteditable", contenteditable)
        if not (dir is None or dir is False):
            self._process_attr("dir", dir)
        if not (draggable is None or draggable is False):
            self._process_attr("draggable", draggable)
        if not (enterkeyhint is None or enterkeyhint is False):
            self._process_attr("enterkeyhint", enterkeyhint)
        if not (hidden is None or hidden is False):
            self._process_attr("hidden", hidden)
        if not (inert is None or inert is False):
            self._process_attr("inert", inert)
        if not (inputmode is None or inputmode is False):
            self._process_attr("inputmode", inputmode)
        if not (is_ is None or is_ is False):
            self._process_attr("is", is_)
        if not (itemid is None or itemid is False):
            self._process_attr("itemid", itemid)
        if not (itemprop is None or itemprop is False):
            self._process_attr("itemprop", itemprop)
        if not (itemref is None or itemref is False):
            self._process_attr("itemref", itemref)
        if not (itemscope is None or itemscope is False):
            self._process_attr("itemscope", itemscope)
        if not (itemtype is None or itemtype is False):
            self._process_attr("itemtype", itemtype)
        if not (lang is None or lang is False):
            self._process_attr("lang", lang)
        if not (nonce is None or nonce is False):
            self._process_attr("nonce", nonce)
        if not (popover is None or popover is False):
            self._process_attr("popover", popover)
        if not (slot is None or slot is False):
            self._process_attr("slot", slot)
        if not (spellcheck is None or spellcheck is False):
            self._process_attr("spellcheck", spellcheck)
        if not (style is None or style is False):
            self._process_attr("style", style)
        if not (tabindex is None or tabindex is False):
            self._process_attr("tabindex", tabindex)
        if not (title is None or title is False):
            self._process_attr("title", title)
        if not (translate is None or translate is False):
            self._process_attr("translate", translate)
        if not (writingsuggestions is None or writingsuggestions is False):
            self._process_attr("writingsuggestions", writingsuggestions)


class article(BaseElement, GlobalAttrs):
    """
    The 'article' element.  
    Description: Self-contained syndicatable or reusable composition  
    Categories: flow sectioning palpable  
    Parents: flow  
    Children: flow  
    Interface: HTMLElement  
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/article  
    """ # fmt: skip


    def __init__(
        self,
        attrs: Optional[Union[dict[str, Union[str, dict, list]], list[BaseAttribute]]] = None,
        id: Optional[Union[str, GlobalAttrs.id]] = None,
        class_: Optional[Union[str, GlobalAttrs.class_]] = None,
        accesskey: Optional[Union[str, GlobalAttrs.accesskey]] = None,
        autocapitalize: Optional[Union[str, GlobalAttrs.autocapitalize, Literal['on', 'off', 'none', 'sentences', 'words', 'characters']]] = None,
        autocorrect: Optional[Union[str, GlobalAttrs.autocorrect, Literal['on', 'off']]] = None,
        autofocus: Optional[Union[str, GlobalAttrs.autofocus, bool]] = None,
        contenteditable: Optional[Union[str, GlobalAttrs.contenteditable, Literal['true', 'plaintext-only', 'false']]] = None,
        dir: Optional[Union[str, GlobalAttrs.dir, Literal['ltr', 'rtl', 'auto']]] = None,
        draggable: Optional[Union[str, GlobalAttrs.draggable, Literal['true', 'false']]] = None,
        enterkeyhint: Optional[Union[str, GlobalAttrs.enterkeyhint, Literal['enter', 'done', 'go', 'next', 'previous', 'search', 'send']]] = None,
        hidden: Optional[Union[str, GlobalAttrs.hidden, Literal['until-found', 'hidden', '']]] = None,
        inert: Optional[Union[str, GlobalAttrs.inert, bool]] = None,
        inputmode: Optional[Union[str, GlobalAttrs.inputmode, Literal['none', 'text', 'tel', 'email', 'url', 'numeric', 'decimal', 'search']]] = None,
        is_: Optional[Union[str, GlobalAttrs.is_]] = None,
        itemid: Optional[Union[str, GlobalAttrs.itemid]] = None,
        itemprop: Optional[Union[str, GlobalAttrs.itemprop]] = None,
        itemref: Optional[Union[str, GlobalAttrs.itemref]] = None,
        itemscope: Optional[Union[str, GlobalAttrs.itemscope, bool]] = None,
        itemtype: Optional[Union[str, GlobalAttrs.itemtype]] = None,
        lang: Optional[Union[str, GlobalAttrs.lang]] = None,
        nonce: Optional[Union[str, GlobalAttrs.nonce]] = None,
        popover: Optional[Union[str, GlobalAttrs.popover, Literal['auto', 'manual']]] = None,
        slot: Optional[Union[str, GlobalAttrs.slot]] = None,
        spellcheck: Optional[Union[str, GlobalAttrs.spellcheck, Literal['true', 'false', '']]] = None,
        style: Optional[Union[str, GlobalAttrs.style]] = None,
        tabindex: Optional[Union[str, GlobalAttrs.tabindex, int]] = None,
        title: Optional[Union[str, GlobalAttrs.title]] = None,
        translate: Optional[Union[str, GlobalAttrs.translate, Literal['yes', 'no']]] = None,
        writingsuggestions: Optional[Union[str, GlobalAttrs.writingsuggestions, Literal['true', 'false', '']]] = None,
        children: Optional[list] = None
    ) -> None:
        """
        Initialize 'article' (Self-contained syndicatable or reusable composition) element.  
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/article

        :param attrs: A list or dictionary of attributes for the element
        :param id: The element's ID
        :param class_: Classes to which the element belongs
            | Set of space-separated tokens
        :param accesskey: Keyboard shortcut to activate or focus element
            | Ordered set of unique space-separated tokens, none of which are identical to another, each consisting of one code point in length
        :param autocapitalize: Recommended autocapitalization behavior (for supported input methods)
        :param autocorrect: Recommended autocorrection behavior (for supported input methods)
        :param autofocus: Automatically focus the element when the page is loaded
        :param contenteditable: Whether the element is editable
        :param dir: The text directionality of the element
        :param draggable: Whether the element is draggable
        :param enterkeyhint: Hint for selecting an enter key action
        :param hidden: Whether the element is relevant
        :param inert: Whether the element is inert.
        :param inputmode: Hint for selecting an input modality
        :param is_: Creates a customized built-in element
            | Valid custom element name of a defined customized built-in element
        :param itemid: Global identifier for a microdata item
            | Valid URL potentially surrounded by spaces
        :param itemprop: Property names of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs, defined property names, or text*
        :param itemref: Referenced elements
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param itemscope: Introduces a microdata item
        :param itemtype: Item types of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs*
        :param lang: Language of the element
            | Valid BCP 47 language tag or the empty string
        :param nonce: Cryptographic nonce used in Content Security Policy checks [CSP]
        :param popover: Makes the element a popover element
        :param slot: The element's desired slot
        :param spellcheck: Whether the element is to have its spelling and grammar checked
        :param style: Presentational and formatting instructions
            | CSS declarations*
        :param tabindex: Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation
        :param title: Advisory information for the element
        :param translate: Whether the element is to be translated when the page is localized
        :param writingsuggestions: Whether the element can offer writing suggestions or not.
        """ #fmt: skip
        super().__init__(
            "article",
            void_element=False,
            attrs=attrs,
            children=children
        )
        if not (id is None or id is False):
            self._process_attr("id", id)
        if not (class_ is None or class_ is False):
            self._process_attr("class", class_)
        if not (accesskey is None or accesskey is False):
            self._process_attr("accesskey", accesskey)
        if not (autocapitalize is None or autocapitalize is False):
            self._process_attr("autocapitalize", autocapitalize)
        if not (autocorrect is None or autocorrect is False):
            self._process_attr("autocorrect", autocorrect)
        if not (autofocus is None or autofocus is False):
            self._process_attr("autofocus", autofocus)
        if not (contenteditable is None or contenteditable is False):
            self._process_attr("contenteditable", contenteditable)
        if not (dir is None or dir is False):
            self._process_attr("dir", dir)
        if not (draggable is None or draggable is False):
            self._process_attr("draggable", draggable)
        if not (enterkeyhint is None or enterkeyhint is False):
            self._process_attr("enterkeyhint", enterkeyhint)
        if not (hidden is None or hidden is False):
            self._process_attr("hidden", hidden)
        if not (inert is None or inert is False):
            self._process_attr("inert", inert)
        if not (inputmode is None or inputmode is False):
            self._process_attr("inputmode", inputmode)
        if not (is_ is None or is_ is False):
            self._process_attr("is", is_)
        if not (itemid is None or itemid is False):
            self._process_attr("itemid", itemid)
        if not (itemprop is None or itemprop is False):
            self._process_attr("itemprop", itemprop)
        if not (itemref is None or itemref is False):
            self._process_attr("itemref", itemref)
        if not (itemscope is None or itemscope is False):
            self._process_attr("itemscope", itemscope)
        if not (itemtype is None or itemtype is False):
            self._process_attr("itemtype", itemtype)
        if not (lang is None or lang is False):
            self._process_attr("lang", lang)
        if not (nonce is None or nonce is False):
            self._process_attr("nonce", nonce)
        if not (popover is None or popover is False):
            self._process_attr("popover", popover)
        if not (slot is None or slot is False):
            self._process_attr("slot", slot)
        if not (spellcheck is None or spellcheck is False):
            self._process_attr("spellcheck", spellcheck)
        if not (style is None or style is False):
            self._process_attr("style", style)
        if not (tabindex is None or tabindex is False):
            self._process_attr("tabindex", tabindex)
        if not (title is None or title is False):
            self._process_attr("title", title)
        if not (translate is None or translate is False):
            self._process_attr("translate", translate)
        if not (writingsuggestions is None or writingsuggestions is False):
            self._process_attr("writingsuggestions", writingsuggestions)


class aside(BaseElement, GlobalAttrs):
    """
    The 'aside' element.  
    Description: Sidebar for tangentially related content  
    Categories: flow sectioning palpable  
    Parents: flow  
    Children: flow  
    Interface: HTMLElement  
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/aside  
    """ # fmt: skip


    def __init__(
        self,
        attrs: Optional[Union[dict[str, Union[str, dict, list]], list[BaseAttribute]]] = None,
        id: Optional[Union[str, GlobalAttrs.id]] = None,
        class_: Optional[Union[str, GlobalAttrs.class_]] = None,
        accesskey: Optional[Union[str, GlobalAttrs.accesskey]] = None,
        autocapitalize: Optional[Union[str, GlobalAttrs.autocapitalize, Literal['on', 'off', 'none', 'sentences', 'words', 'characters']]] = None,
        autocorrect: Optional[Union[str, GlobalAttrs.autocorrect, Literal['on', 'off']]] = None,
        autofocus: Optional[Union[str, GlobalAttrs.autofocus, bool]] = None,
        contenteditable: Optional[Union[str, GlobalAttrs.contenteditable, Literal['true', 'plaintext-only', 'false']]] = None,
        dir: Optional[Union[str, GlobalAttrs.dir, Literal['ltr', 'rtl', 'auto']]] = None,
        draggable: Optional[Union[str, GlobalAttrs.draggable, Literal['true', 'false']]] = None,
        enterkeyhint: Optional[Union[str, GlobalAttrs.enterkeyhint, Literal['enter', 'done', 'go', 'next', 'previous', 'search', 'send']]] = None,
        hidden: Optional[Union[str, GlobalAttrs.hidden, Literal['until-found', 'hidden', '']]] = None,
        inert: Optional[Union[str, GlobalAttrs.inert, bool]] = None,
        inputmode: Optional[Union[str, GlobalAttrs.inputmode, Literal['none', 'text', 'tel', 'email', 'url', 'numeric', 'decimal', 'search']]] = None,
        is_: Optional[Union[str, GlobalAttrs.is_]] = None,
        itemid: Optional[Union[str, GlobalAttrs.itemid]] = None,
        itemprop: Optional[Union[str, GlobalAttrs.itemprop]] = None,
        itemref: Optional[Union[str, GlobalAttrs.itemref]] = None,
        itemscope: Optional[Union[str, GlobalAttrs.itemscope, bool]] = None,
        itemtype: Optional[Union[str, GlobalAttrs.itemtype]] = None,
        lang: Optional[Union[str, GlobalAttrs.lang]] = None,
        nonce: Optional[Union[str, GlobalAttrs.nonce]] = None,
        popover: Optional[Union[str, GlobalAttrs.popover, Literal['auto', 'manual']]] = None,
        slot: Optional[Union[str, GlobalAttrs.slot]] = None,
        spellcheck: Optional[Union[str, GlobalAttrs.spellcheck, Literal['true', 'false', '']]] = None,
        style: Optional[Union[str, GlobalAttrs.style]] = None,
        tabindex: Optional[Union[str, GlobalAttrs.tabindex, int]] = None,
        title: Optional[Union[str, GlobalAttrs.title]] = None,
        translate: Optional[Union[str, GlobalAttrs.translate, Literal['yes', 'no']]] = None,
        writingsuggestions: Optional[Union[str, GlobalAttrs.writingsuggestions, Literal['true', 'false', '']]] = None,
        children: Optional[list] = None
    ) -> None:
        """
        Initialize 'aside' (Sidebar for tangentially related content) element.  
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/aside

        :param attrs: A list or dictionary of attributes for the element
        :param id: The element's ID
        :param class_: Classes to which the element belongs
            | Set of space-separated tokens
        :param accesskey: Keyboard shortcut to activate or focus element
            | Ordered set of unique space-separated tokens, none of which are identical to another, each consisting of one code point in length
        :param autocapitalize: Recommended autocapitalization behavior (for supported input methods)
        :param autocorrect: Recommended autocorrection behavior (for supported input methods)
        :param autofocus: Automatically focus the element when the page is loaded
        :param contenteditable: Whether the element is editable
        :param dir: The text directionality of the element
        :param draggable: Whether the element is draggable
        :param enterkeyhint: Hint for selecting an enter key action
        :param hidden: Whether the element is relevant
        :param inert: Whether the element is inert.
        :param inputmode: Hint for selecting an input modality
        :param is_: Creates a customized built-in element
            | Valid custom element name of a defined customized built-in element
        :param itemid: Global identifier for a microdata item
            | Valid URL potentially surrounded by spaces
        :param itemprop: Property names of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs, defined property names, or text*
        :param itemref: Referenced elements
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param itemscope: Introduces a microdata item
        :param itemtype: Item types of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs*
        :param lang: Language of the element
            | Valid BCP 47 language tag or the empty string
        :param nonce: Cryptographic nonce used in Content Security Policy checks [CSP]
        :param popover: Makes the element a popover element
        :param slot: The element's desired slot
        :param spellcheck: Whether the element is to have its spelling and grammar checked
        :param style: Presentational and formatting instructions
            | CSS declarations*
        :param tabindex: Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation
        :param title: Advisory information for the element
        :param translate: Whether the element is to be translated when the page is localized
        :param writingsuggestions: Whether the element can offer writing suggestions or not.
        """ #fmt: skip
        super().__init__(
            "aside",
            void_element=False,
            attrs=attrs,
            children=children
        )
        if not (id is None or id is False):
            self._process_attr("id", id)
        if not (class_ is None or class_ is False):
            self._process_attr("class", class_)
        if not (accesskey is None or accesskey is False):
            self._process_attr("accesskey", accesskey)
        if not (autocapitalize is None or autocapitalize is False):
            self._process_attr("autocapitalize", autocapitalize)
        if not (autocorrect is None or autocorrect is False):
            self._process_attr("autocorrect", autocorrect)
        if not (autofocus is None or autofocus is False):
            self._process_attr("autofocus", autofocus)
        if not (contenteditable is None or contenteditable is False):
            self._process_attr("contenteditable", contenteditable)
        if not (dir is None or dir is False):
            self._process_attr("dir", dir)
        if not (draggable is None or draggable is False):
            self._process_attr("draggable", draggable)
        if not (enterkeyhint is None or enterkeyhint is False):
            self._process_attr("enterkeyhint", enterkeyhint)
        if not (hidden is None or hidden is False):
            self._process_attr("hidden", hidden)
        if not (inert is None or inert is False):
            self._process_attr("inert", inert)
        if not (inputmode is None or inputmode is False):
            self._process_attr("inputmode", inputmode)
        if not (is_ is None or is_ is False):
            self._process_attr("is", is_)
        if not (itemid is None or itemid is False):
            self._process_attr("itemid", itemid)
        if not (itemprop is None or itemprop is False):
            self._process_attr("itemprop", itemprop)
        if not (itemref is None or itemref is False):
            self._process_attr("itemref", itemref)
        if not (itemscope is None or itemscope is False):
            self._process_attr("itemscope", itemscope)
        if not (itemtype is None or itemtype is False):
            self._process_attr("itemtype", itemtype)
        if not (lang is None or lang is False):
            self._process_attr("lang", lang)
        if not (nonce is None or nonce is False):
            self._process_attr("nonce", nonce)
        if not (popover is None or popover is False):
            self._process_attr("popover", popover)
        if not (slot is None or slot is False):
            self._process_attr("slot", slot)
        if not (spellcheck is None or spellcheck is False):
            self._process_attr("spellcheck", spellcheck)
        if not (style is None or style is False):
            self._process_attr("style", style)
        if not (tabindex is None or tabindex is False):
            self._process_attr("tabindex", tabindex)
        if not (title is None or title is False):
            self._process_attr("title", title)
        if not (translate is None or translate is False):
            self._process_attr("translate", translate)
        if not (writingsuggestions is None or writingsuggestions is False):
            self._process_attr("writingsuggestions", writingsuggestions)


class audio(BaseElement, GlobalAttrs, AudioAttrs):
    """
    The 'audio' element.  
    Description: Audio player  
    Categories: flow phrasing embedded interactive palpable*  
    Parents: phrasing  
    Children: source* track* transparent*  
    Interface: HTMLAudioElement  
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio  
    """ # fmt: skip


    def __init__(
        self,
        attrs: Optional[Union[dict[str, Union[str, dict, list]], list[BaseAttribute]]] = None,
        id: Optional[Union[str, GlobalAttrs.id]] = None,
        class_: Optional[Union[str, GlobalAttrs.class_]] = None,
        autoplay: Optional[Union[str, AudioAttrs.autoplay, bool]] = None,
        controls: Optional[Union[str, AudioAttrs.controls, bool]] = None,
        crossorigin: Optional[Union[str, AudioAttrs.crossorigin, Literal['anonymous', 'use-credentials']]] = None,
        loop: Optional[Union[str, AudioAttrs.loop, bool]] = None,
        muted: Optional[Union[str, AudioAttrs.muted, bool]] = None,
        preload: Optional[Union[str, AudioAttrs.preload, Literal['none', 'metadata', 'auto']]] = None,
        src: Optional[Union[str, AudioAttrs.src]] = None,
        accesskey: Optional[Union[str, GlobalAttrs.accesskey]] = None,
        autocapitalize: Optional[Union[str, GlobalAttrs.autocapitalize, Literal['on', 'off', 'none', 'sentences', 'words', 'characters']]] = None,
        autocorrect: Optional[Union[str, GlobalAttrs.autocorrect, Literal['on', 'off']]] = None,
        autofocus: Optional[Union[str, GlobalAttrs.autofocus, bool]] = None,
        contenteditable: Optional[Union[str, GlobalAttrs.contenteditable, Literal['true', 'plaintext-only', 'false']]] = None,
        dir: Optional[Union[str, GlobalAttrs.dir, Literal['ltr', 'rtl', 'auto']]] = None,
        draggable: Optional[Union[str, GlobalAttrs.draggable, Literal['true', 'false']]] = None,
        enterkeyhint: Optional[Union[str, GlobalAttrs.enterkeyhint, Literal['enter', 'done', 'go', 'next', 'previous', 'search', 'send']]] = None,
        hidden: Optional[Union[str, GlobalAttrs.hidden, Literal['until-found', 'hidden', '']]] = None,
        inert: Optional[Union[str, GlobalAttrs.inert, bool]] = None,
        inputmode: Optional[Union[str, GlobalAttrs.inputmode, Literal['none', 'text', 'tel', 'email', 'url', 'numeric', 'decimal', 'search']]] = None,
        is_: Optional[Union[str, GlobalAttrs.is_]] = None,
        itemid: Optional[Union[str, GlobalAttrs.itemid]] = None,
        itemprop: Optional[Union[str, GlobalAttrs.itemprop]] = None,
        itemref: Optional[Union[str, GlobalAttrs.itemref]] = None,
        itemscope: Optional[Union[str, GlobalAttrs.itemscope, bool]] = None,
        itemtype: Optional[Union[str, GlobalAttrs.itemtype]] = None,
        lang: Optional[Union[str, GlobalAttrs.lang]] = None,
        nonce: Optional[Union[str, GlobalAttrs.nonce]] = None,
        popover: Optional[Union[str, GlobalAttrs.popover, Literal['auto', 'manual']]] = None,
        slot: Optional[Union[str, GlobalAttrs.slot]] = None,
        spellcheck: Optional[Union[str, GlobalAttrs.spellcheck, Literal['true', 'false', '']]] = None,
        style: Optional[Union[str, GlobalAttrs.style]] = None,
        tabindex: Optional[Union[str, GlobalAttrs.tabindex, int]] = None,
        title: Optional[Union[str, GlobalAttrs.title]] = None,
        translate: Optional[Union[str, GlobalAttrs.translate, Literal['yes', 'no']]] = None,
        writingsuggestions: Optional[Union[str, GlobalAttrs.writingsuggestions, Literal['true', 'false', '']]] = None,
        children: Optional[list] = None
    ) -> None:
        """
        Initialize 'audio' (Audio player) element.  
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio

        :param attrs: A list or dictionary of attributes for the element
        :param id: The element's ID
        :param class_: Classes to which the element belongs
            | Set of space-separated tokens
        :param autoplay: Hint that the media resource can be started automatically when the page is loaded
        :param controls: Show user agent controls
        :param crossorigin: How the element handles crossorigin requests
        :param loop: Whether to loop the media resource
        :param muted: Whether to mute the media resource by default
        :param preload: Hints how much buffering the media resource will likely need
        :param src: Address of the resource
            | Valid non-empty URL potentially surrounded by spaces
        :param accesskey: Keyboard shortcut to activate or focus element
            | Ordered set of unique space-separated tokens, none of which are identical to another, each consisting of one code point in length
        :param autocapitalize: Recommended autocapitalization behavior (for supported input methods)
        :param autocorrect: Recommended autocorrection behavior (for supported input methods)
        :param autofocus: Automatically focus the element when the page is loaded
        :param contenteditable: Whether the element is editable
        :param dir: The text directionality of the element
        :param draggable: Whether the element is draggable
        :param enterkeyhint: Hint for selecting an enter key action
        :param hidden: Whether the element is relevant
        :param inert: Whether the element is inert.
        :param inputmode: Hint for selecting an input modality
        :param is_: Creates a customized built-in element
            | Valid custom element name of a defined customized built-in element
        :param itemid: Global identifier for a microdata item
            | Valid URL potentially surrounded by spaces
        :param itemprop: Property names of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs, defined property names, or text*
        :param itemref: Referenced elements
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param itemscope: Introduces a microdata item
        :param itemtype: Item types of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs*
        :param lang: Language of the element
            | Valid BCP 47 language tag or the empty string
        :param nonce: Cryptographic nonce used in Content Security Policy checks [CSP]
        :param popover: Makes the element a popover element
        :param slot: The element's desired slot
        :param spellcheck: Whether the element is to have its spelling and grammar checked
        :param style: Presentational and formatting instructions
            | CSS declarations*
        :param tabindex: Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation
        :param title: Advisory information for the element
        :param translate: Whether the element is to be translated when the page is localized
        :param writingsuggestions: Whether the element can offer writing suggestions or not.
        """ #fmt: skip
        super().__init__(
            "audio",
            void_element=False,
            attrs=attrs,
            children=children
        )
        if not (id is None or id is False):
            self._process_attr("id", id)
        if not (class_ is None or class_ is False):
            self._process_attr("class", class_)
        if not (autoplay is None or autoplay is False):
            self._process_attr("autoplay", autoplay)
        if not (controls is None or controls is False):
            self._process_attr("controls", controls)
        if not (crossorigin is None or crossorigin is False):
            self._process_attr("crossorigin", crossorigin)
        if not (loop is None or loop is False):
            self._process_attr("loop", loop)
        if not (muted is None or muted is False):
            self._process_attr("muted", muted)
        if not (preload is None or preload is False):
            self._process_attr("preload", preload)
        if not (src is None or src is False):
            self._process_attr("src", src)
        if not (accesskey is None or accesskey is False):
            self._process_attr("accesskey", accesskey)
        if not (autocapitalize is None or autocapitalize is False):
            self._process_attr("autocapitalize", autocapitalize)
        if not (autocorrect is None or autocorrect is False):
            self._process_attr("autocorrect", autocorrect)
        if not (autofocus is None or autofocus is False):
            self._process_attr("autofocus", autofocus)
        if not (contenteditable is None or contenteditable is False):
            self._process_attr("contenteditable", contenteditable)
        if not (dir is None or dir is False):
            self._process_attr("dir", dir)
        if not (draggable is None or draggable is False):
            self._process_attr("draggable", draggable)
        if not (enterkeyhint is None or enterkeyhint is False):
            self._process_attr("enterkeyhint", enterkeyhint)
        if not (hidden is None or hidden is False):
            self._process_attr("hidden", hidden)
        if not (inert is None or inert is False):
            self._process_attr("inert", inert)
        if not (inputmode is None or inputmode is False):
            self._process_attr("inputmode", inputmode)
        if not (is_ is None or is_ is False):
            self._process_attr("is", is_)
        if not (itemid is None or itemid is False):
            self._process_attr("itemid", itemid)
        if not (itemprop is None or itemprop is False):
            self._process_attr("itemprop", itemprop)
        if not (itemref is None or itemref is False):
            self._process_attr("itemref", itemref)
        if not (itemscope is None or itemscope is False):
            self._process_attr("itemscope", itemscope)
        if not (itemtype is None or itemtype is False):
            self._process_attr("itemtype", itemtype)
        if not (lang is None or lang is False):
            self._process_attr("lang", lang)
        if not (nonce is None or nonce is False):
            self._process_attr("nonce", nonce)
        if not (popover is None or popover is False):
            self._process_attr("popover", popover)
        if not (slot is None or slot is False):
            self._process_attr("slot", slot)
        if not (spellcheck is None or spellcheck is False):
            self._process_attr("spellcheck", spellcheck)
        if not (style is None or style is False):
            self._process_attr("style", style)
        if not (tabindex is None or tabindex is False):
            self._process_attr("tabindex", tabindex)
        if not (title is None or title is False):
            self._process_attr("title", title)
        if not (translate is None or translate is False):
            self._process_attr("translate", translate)
        if not (writingsuggestions is None or writingsuggestions is False):
            self._process_attr("writingsuggestions", writingsuggestions)


class b(BaseElement, GlobalAttrs):
    """
    The 'b' element.  
    Description: Keywords  
    Categories: flow phrasing palpable  
    Parents: phrasing  
    Children: phrasing  
    Interface: HTMLElement  
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/b  
    """ # fmt: skip


    def __init__(
        self,
        attrs: Optional[Union[dict[str, Union[str, dict, list]], list[BaseAttribute]]] = None,
        id: Optional[Union[str, GlobalAttrs.id]] = None,
        class_: Optional[Union[str, GlobalAttrs.class_]] = None,
        accesskey: Optional[Union[str, GlobalAttrs.accesskey]] = None,
        autocapitalize: Optional[Union[str, GlobalAttrs.autocapitalize, Literal['on', 'off', 'none', 'sentences', 'words', 'characters']]] = None,
        autocorrect: Optional[Union[str, GlobalAttrs.autocorrect, Literal['on', 'off']]] = None,
        autofocus: Optional[Union[str, GlobalAttrs.autofocus, bool]] = None,
        contenteditable: Optional[Union[str, GlobalAttrs.contenteditable, Literal['true', 'plaintext-only', 'false']]] = None,
        dir: Optional[Union[str, GlobalAttrs.dir, Literal['ltr', 'rtl', 'auto']]] = None,
        draggable: Optional[Union[str, GlobalAttrs.draggable, Literal['true', 'false']]] = None,
        enterkeyhint: Optional[Union[str, GlobalAttrs.enterkeyhint, Literal['enter', 'done', 'go', 'next', 'previous', 'search', 'send']]] = None,
        hidden: Optional[Union[str, GlobalAttrs.hidden, Literal['until-found', 'hidden', '']]] = None,
        inert: Optional[Union[str, GlobalAttrs.inert, bool]] = None,
        inputmode: Optional[Union[str, GlobalAttrs.inputmode, Literal['none', 'text', 'tel', 'email', 'url', 'numeric', 'decimal', 'search']]] = None,
        is_: Optional[Union[str, GlobalAttrs.is_]] = None,
        itemid: Optional[Union[str, GlobalAttrs.itemid]] = None,
        itemprop: Optional[Union[str, GlobalAttrs.itemprop]] = None,
        itemref: Optional[Union[str, GlobalAttrs.itemref]] = None,
        itemscope: Optional[Union[str, GlobalAttrs.itemscope, bool]] = None,
        itemtype: Optional[Union[str, GlobalAttrs.itemtype]] = None,
        lang: Optional[Union[str, GlobalAttrs.lang]] = None,
        nonce: Optional[Union[str, GlobalAttrs.nonce]] = None,
        popover: Optional[Union[str, GlobalAttrs.popover, Literal['auto', 'manual']]] = None,
        slot: Optional[Union[str, GlobalAttrs.slot]] = None,
        spellcheck: Optional[Union[str, GlobalAttrs.spellcheck, Literal['true', 'false', '']]] = None,
        style: Optional[Union[str, GlobalAttrs.style]] = None,
        tabindex: Optional[Union[str, GlobalAttrs.tabindex, int]] = None,
        title: Optional[Union[str, GlobalAttrs.title]] = None,
        translate: Optional[Union[str, GlobalAttrs.translate, Literal['yes', 'no']]] = None,
        writingsuggestions: Optional[Union[str, GlobalAttrs.writingsuggestions, Literal['true', 'false', '']]] = None,
        children: Optional[list] = None
    ) -> None:
        """
        Initialize 'b' (Keywords) element.  
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/b

        :param attrs: A list or dictionary of attributes for the element
        :param id: The element's ID
        :param class_: Classes to which the element belongs
            | Set of space-separated tokens
        :param accesskey: Keyboard shortcut to activate or focus element
            | Ordered set of unique space-separated tokens, none of which are identical to another, each consisting of one code point in length
        :param autocapitalize: Recommended autocapitalization behavior (for supported input methods)
        :param autocorrect: Recommended autocorrection behavior (for supported input methods)
        :param autofocus: Automatically focus the element when the page is loaded
        :param contenteditable: Whether the element is editable
        :param dir: The text directionality of the element
        :param draggable: Whether the element is draggable
        :param enterkeyhint: Hint for selecting an enter key action
        :param hidden: Whether the element is relevant
        :param inert: Whether the element is inert.
        :param inputmode: Hint for selecting an input modality
        :param is_: Creates a customized built-in element
            | Valid custom element name of a defined customized built-in element
        :param itemid: Global identifier for a microdata item
            | Valid URL potentially surrounded by spaces
        :param itemprop: Property names of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs, defined property names, or text*
        :param itemref: Referenced elements
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param itemscope: Introduces a microdata item
        :param itemtype: Item types of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs*
        :param lang: Language of the element
            | Valid BCP 47 language tag or the empty string
        :param nonce: Cryptographic nonce used in Content Security Policy checks [CSP]
        :param popover: Makes the element a popover element
        :param slot: The element's desired slot
        :param spellcheck: Whether the element is to have its spelling and grammar checked
        :param style: Presentational and formatting instructions
            | CSS declarations*
        :param tabindex: Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation
        :param title: Advisory information for the element
        :param translate: Whether the element is to be translated when the page is localized
        :param writingsuggestions: Whether the element can offer writing suggestions or not.
        """ #fmt: skip
        super().__init__(
            "b",
            void_element=False,
            attrs=attrs,
            children=children
        )
        if not (id is None or id is False):
            self._process_attr("id", id)
        if not (class_ is None or class_ is False):
            self._process_attr("class", class_)
        if not (accesskey is None or accesskey is False):
            self._process_attr("accesskey", accesskey)
        if not (autocapitalize is None or autocapitalize is False):
            self._process_attr("autocapitalize", autocapitalize)
        if not (autocorrect is None or autocorrect is False):
            self._process_attr("autocorrect", autocorrect)
        if not (autofocus is None or autofocus is False):
            self._process_attr("autofocus", autofocus)
        if not (contenteditable is None or contenteditable is False):
            self._process_attr("contenteditable", contenteditable)
        if not (dir is None or dir is False):
            self._process_attr("dir", dir)
        if not (draggable is None or draggable is False):
            self._process_attr("draggable", draggable)
        if not (enterkeyhint is None or enterkeyhint is False):
            self._process_attr("enterkeyhint", enterkeyhint)
        if not (hidden is None or hidden is False):
            self._process_attr("hidden", hidden)
        if not (inert is None or inert is False):
            self._process_attr("inert", inert)
        if not (inputmode is None or inputmode is False):
            self._process_attr("inputmode", inputmode)
        if not (is_ is None or is_ is False):
            self._process_attr("is", is_)
        if not (itemid is None or itemid is False):
            self._process_attr("itemid", itemid)
        if not (itemprop is None or itemprop is False):
            self._process_attr("itemprop", itemprop)
        if not (itemref is None or itemref is False):
            self._process_attr("itemref", itemref)
        if not (itemscope is None or itemscope is False):
            self._process_attr("itemscope", itemscope)
        if not (itemtype is None or itemtype is False):
            self._process_attr("itemtype", itemtype)
        if not (lang is None or lang is False):
            self._process_attr("lang", lang)
        if not (nonce is None or nonce is False):
            self._process_attr("nonce", nonce)
        if not (popover is None or popover is False):
            self._process_attr("popover", popover)
        if not (slot is None or slot is False):
            self._process_attr("slot", slot)
        if not (spellcheck is None or spellcheck is False):
            self._process_attr("spellcheck", spellcheck)
        if not (style is None or style is False):
            self._process_attr("style", style)
        if not (tabindex is None or tabindex is False):
            self._process_attr("tabindex", tabindex)
        if not (title is None or title is False):
            self._process_attr("title", title)
        if not (translate is None or translate is False):
            self._process_attr("translate", translate)
        if not (writingsuggestions is None or writingsuggestions is False):
            self._process_attr("writingsuggestions", writingsuggestions)


class base(BaseElement, GlobalAttrs, BaseAttrs):
    """
    The 'base' element.  
    Description: Base URL and default target navigable for hyperlinks and forms  
    Categories: metadata  
    Parents: head  
    Children: empty  
    Interface: HTMLBaseElement  
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base  
    """ # fmt: skip


    def __init__(
        self,
        attrs: Optional[Union[dict[str, Union[str, dict, list]], list[BaseAttribute]]] = None,
        id: Optional[Union[str, GlobalAttrs.id]] = None,
        class_: Optional[Union[str, GlobalAttrs.class_]] = None,
        href: Optional[Union[str, BaseAttrs.href]] = None,
        target: Optional[Union[str, BaseAttrs.target]] = None,
        accesskey: Optional[Union[str, GlobalAttrs.accesskey]] = None,
        autocapitalize: Optional[Union[str, GlobalAttrs.autocapitalize, Literal['on', 'off', 'none', 'sentences', 'words', 'characters']]] = None,
        autocorrect: Optional[Union[str, GlobalAttrs.autocorrect, Literal['on', 'off']]] = None,
        autofocus: Optional[Union[str, GlobalAttrs.autofocus, bool]] = None,
        contenteditable: Optional[Union[str, GlobalAttrs.contenteditable, Literal['true', 'plaintext-only', 'false']]] = None,
        dir: Optional[Union[str, GlobalAttrs.dir, Literal['ltr', 'rtl', 'auto']]] = None,
        draggable: Optional[Union[str, GlobalAttrs.draggable, Literal['true', 'false']]] = None,
        enterkeyhint: Optional[Union[str, GlobalAttrs.enterkeyhint, Literal['enter', 'done', 'go', 'next', 'previous', 'search', 'send']]] = None,
        hidden: Optional[Union[str, GlobalAttrs.hidden, Literal['until-found', 'hidden', '']]] = None,
        inert: Optional[Union[str, GlobalAttrs.inert, bool]] = None,
        inputmode: Optional[Union[str, GlobalAttrs.inputmode, Literal['none', 'text', 'tel', 'email', 'url', 'numeric', 'decimal', 'search']]] = None,
        is_: Optional[Union[str, GlobalAttrs.is_]] = None,
        itemid: Optional[Union[str, GlobalAttrs.itemid]] = None,
        itemprop: Optional[Union[str, GlobalAttrs.itemprop]] = None,
        itemref: Optional[Union[str, GlobalAttrs.itemref]] = None,
        itemscope: Optional[Union[str, GlobalAttrs.itemscope, bool]] = None,
        itemtype: Optional[Union[str, GlobalAttrs.itemtype]] = None,
        lang: Optional[Union[str, GlobalAttrs.lang]] = None,
        nonce: Optional[Union[str, GlobalAttrs.nonce]] = None,
        popover: Optional[Union[str, GlobalAttrs.popover, Literal['auto', 'manual']]] = None,
        slot: Optional[Union[str, GlobalAttrs.slot]] = None,
        spellcheck: Optional[Union[str, GlobalAttrs.spellcheck, Literal['true', 'false', '']]] = None,
        style: Optional[Union[str, GlobalAttrs.style]] = None,
        tabindex: Optional[Union[str, GlobalAttrs.tabindex, int]] = None,
        title: Optional[Union[str, GlobalAttrs.title]] = None,
        translate: Optional[Union[str, GlobalAttrs.translate, Literal['yes', 'no']]] = None,
        writingsuggestions: Optional[Union[str, GlobalAttrs.writingsuggestions, Literal['true', 'false', '']]] = None,
        children: Optional[list] = None
    ) -> None:
        """
        Initialize 'base' (Base URL and default target navigable for hyperlinks and forms) element.  
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base

        :param attrs: A list or dictionary of attributes for the element
        :param id: The element's ID
        :param class_: Classes to which the element belongs
            | Set of space-separated tokens
        :param href: Document base URL
            | Valid URL potentially surrounded by spaces
        :param target: Default navigable for hyperlink navigation and form submission
            | Valid navigable target name or keyword
        :param accesskey: Keyboard shortcut to activate or focus element
            | Ordered set of unique space-separated tokens, none of which are identical to another, each consisting of one code point in length
        :param autocapitalize: Recommended autocapitalization behavior (for supported input methods)
        :param autocorrect: Recommended autocorrection behavior (for supported input methods)
        :param autofocus: Automatically focus the element when the page is loaded
        :param contenteditable: Whether the element is editable
        :param dir: The text directionality of the element
        :param draggable: Whether the element is draggable
        :param enterkeyhint: Hint for selecting an enter key action
        :param hidden: Whether the element is relevant
        :param inert: Whether the element is inert.
        :param inputmode: Hint for selecting an input modality
        :param is_: Creates a customized built-in element
            | Valid custom element name of a defined customized built-in element
        :param itemid: Global identifier for a microdata item
            | Valid URL potentially surrounded by spaces
        :param itemprop: Property names of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs, defined property names, or text*
        :param itemref: Referenced elements
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param itemscope: Introduces a microdata item
        :param itemtype: Item types of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs*
        :param lang: Language of the element
            | Valid BCP 47 language tag or the empty string
        :param nonce: Cryptographic nonce used in Content Security Policy checks [CSP]
        :param popover: Makes the element a popover element
        :param slot: The element's desired slot
        :param spellcheck: Whether the element is to have its spelling and grammar checked
        :param style: Presentational and formatting instructions
            | CSS declarations*
        :param tabindex: Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation
        :param title: Advisory information for the element
        :param translate: Whether the element is to be translated when the page is localized
        :param writingsuggestions: Whether the element can offer writing suggestions or not.
        """ #fmt: skip
        super().__init__(
            "base",
            void_element=True,
            attrs=attrs,
            children=children
        )
        if not (id is None or id is False):
            self._process_attr("id", id)
        if not (class_ is None or class_ is False):
            self._process_attr("class", class_)
        if not (href is None or href is False):
            self._process_attr("href", href)
        if not (target is None or target is False):
            self._process_attr("target", target)
        if not (accesskey is None or accesskey is False):
            self._process_attr("accesskey", accesskey)
        if not (autocapitalize is None or autocapitalize is False):
            self._process_attr("autocapitalize", autocapitalize)
        if not (autocorrect is None or autocorrect is False):
            self._process_attr("autocorrect", autocorrect)
        if not (autofocus is None or autofocus is False):
            self._process_attr("autofocus", autofocus)
        if not (contenteditable is None or contenteditable is False):
            self._process_attr("contenteditable", contenteditable)
        if not (dir is None or dir is False):
            self._process_attr("dir", dir)
        if not (draggable is None or draggable is False):
            self._process_attr("draggable", draggable)
        if not (enterkeyhint is None or enterkeyhint is False):
            self._process_attr("enterkeyhint", enterkeyhint)
        if not (hidden is None or hidden is False):
            self._process_attr("hidden", hidden)
        if not (inert is None or inert is False):
            self._process_attr("inert", inert)
        if not (inputmode is None or inputmode is False):
            self._process_attr("inputmode", inputmode)
        if not (is_ is None or is_ is False):
            self._process_attr("is", is_)
        if not (itemid is None or itemid is False):
            self._process_attr("itemid", itemid)
        if not (itemprop is None or itemprop is False):
            self._process_attr("itemprop", itemprop)
        if not (itemref is None or itemref is False):
            self._process_attr("itemref", itemref)
        if not (itemscope is None or itemscope is False):
            self._process_attr("itemscope", itemscope)
        if not (itemtype is None or itemtype is False):
            self._process_attr("itemtype", itemtype)
        if not (lang is None or lang is False):
            self._process_attr("lang", lang)
        if not (nonce is None or nonce is False):
            self._process_attr("nonce", nonce)
        if not (popover is None or popover is False):
            self._process_attr("popover", popover)
        if not (slot is None or slot is False):
            self._process_attr("slot", slot)
        if not (spellcheck is None or spellcheck is False):
            self._process_attr("spellcheck", spellcheck)
        if not (style is None or style is False):
            self._process_attr("style", style)
        if not (tabindex is None or tabindex is False):
            self._process_attr("tabindex", tabindex)
        if not (title is None or title is False):
            self._process_attr("title", title)
        if not (translate is None or translate is False):
            self._process_attr("translate", translate)
        if not (writingsuggestions is None or writingsuggestions is False):
            self._process_attr("writingsuggestions", writingsuggestions)


class bdi(BaseElement, GlobalAttrs):
    """
    The 'bdi' element.  
    Description: Text directionality isolation  
    Categories: flow phrasing palpable  
    Parents: phrasing  
    Children: phrasing  
    Interface: HTMLElement  
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/bdi  
    """ # fmt: skip


    def __init__(
        self,
        attrs: Optional[Union[dict[str, Union[str, dict, list]], list[BaseAttribute]]] = None,
        id: Optional[Union[str, GlobalAttrs.id]] = None,
        class_: Optional[Union[str, GlobalAttrs.class_]] = None,
        accesskey: Optional[Union[str, GlobalAttrs.accesskey]] = None,
        autocapitalize: Optional[Union[str, GlobalAttrs.autocapitalize, Literal['on', 'off', 'none', 'sentences', 'words', 'characters']]] = None,
        autocorrect: Optional[Union[str, GlobalAttrs.autocorrect, Literal['on', 'off']]] = None,
        autofocus: Optional[Union[str, GlobalAttrs.autofocus, bool]] = None,
        contenteditable: Optional[Union[str, GlobalAttrs.contenteditable, Literal['true', 'plaintext-only', 'false']]] = None,
        dir: Optional[Union[str, GlobalAttrs.dir, Literal['ltr', 'rtl', 'auto']]] = None,
        draggable: Optional[Union[str, GlobalAttrs.draggable, Literal['true', 'false']]] = None,
        enterkeyhint: Optional[Union[str, GlobalAttrs.enterkeyhint, Literal['enter', 'done', 'go', 'next', 'previous', 'search', 'send']]] = None,
        hidden: Optional[Union[str, GlobalAttrs.hidden, Literal['until-found', 'hidden', '']]] = None,
        inert: Optional[Union[str, GlobalAttrs.inert, bool]] = None,
        inputmode: Optional[Union[str, GlobalAttrs.inputmode, Literal['none', 'text', 'tel', 'email', 'url', 'numeric', 'decimal', 'search']]] = None,
        is_: Optional[Union[str, GlobalAttrs.is_]] = None,
        itemid: Optional[Union[str, GlobalAttrs.itemid]] = None,
        itemprop: Optional[Union[str, GlobalAttrs.itemprop]] = None,
        itemref: Optional[Union[str, GlobalAttrs.itemref]] = None,
        itemscope: Optional[Union[str, GlobalAttrs.itemscope, bool]] = None,
        itemtype: Optional[Union[str, GlobalAttrs.itemtype]] = None,
        lang: Optional[Union[str, GlobalAttrs.lang]] = None,
        nonce: Optional[Union[str, GlobalAttrs.nonce]] = None,
        popover: Optional[Union[str, GlobalAttrs.popover, Literal['auto', 'manual']]] = None,
        slot: Optional[Union[str, GlobalAttrs.slot]] = None,
        spellcheck: Optional[Union[str, GlobalAttrs.spellcheck, Literal['true', 'false', '']]] = None,
        style: Optional[Union[str, GlobalAttrs.style]] = None,
        tabindex: Optional[Union[str, GlobalAttrs.tabindex, int]] = None,
        title: Optional[Union[str, GlobalAttrs.title]] = None,
        translate: Optional[Union[str, GlobalAttrs.translate, Literal['yes', 'no']]] = None,
        writingsuggestions: Optional[Union[str, GlobalAttrs.writingsuggestions, Literal['true', 'false', '']]] = None,
        children: Optional[list] = None
    ) -> None:
        """
        Initialize 'bdi' (Text directionality isolation) element.  
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/bdi

        :param attrs: A list or dictionary of attributes for the element
        :param id: The element's ID
        :param class_: Classes to which the element belongs
            | Set of space-separated tokens
        :param accesskey: Keyboard shortcut to activate or focus element
            | Ordered set of unique space-separated tokens, none of which are identical to another, each consisting of one code point in length
        :param autocapitalize: Recommended autocapitalization behavior (for supported input methods)
        :param autocorrect: Recommended autocorrection behavior (for supported input methods)
        :param autofocus: Automatically focus the element when the page is loaded
        :param contenteditable: Whether the element is editable
        :param dir: The text directionality of the element
        :param draggable: Whether the element is draggable
        :param enterkeyhint: Hint for selecting an enter key action
        :param hidden: Whether the element is relevant
        :param inert: Whether the element is inert.
        :param inputmode: Hint for selecting an input modality
        :param is_: Creates a customized built-in element
            | Valid custom element name of a defined customized built-in element
        :param itemid: Global identifier for a microdata item
            | Valid URL potentially surrounded by spaces
        :param itemprop: Property names of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs, defined property names, or text*
        :param itemref: Referenced elements
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param itemscope: Introduces a microdata item
        :param itemtype: Item types of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs*
        :param lang: Language of the element
            | Valid BCP 47 language tag or the empty string
        :param nonce: Cryptographic nonce used in Content Security Policy checks [CSP]
        :param popover: Makes the element a popover element
        :param slot: The element's desired slot
        :param spellcheck: Whether the element is to have its spelling and grammar checked
        :param style: Presentational and formatting instructions
            | CSS declarations*
        :param tabindex: Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation
        :param title: Advisory information for the element
        :param translate: Whether the element is to be translated when the page is localized
        :param writingsuggestions: Whether the element can offer writing suggestions or not.
        """ #fmt: skip
        super().__init__(
            "bdi",
            void_element=False,
            attrs=attrs,
            children=children
        )
        if not (id is None or id is False):
            self._process_attr("id", id)
        if not (class_ is None or class_ is False):
            self._process_attr("class", class_)
        if not (accesskey is None or accesskey is False):
            self._process_attr("accesskey", accesskey)
        if not (autocapitalize is None or autocapitalize is False):
            self._process_attr("autocapitalize", autocapitalize)
        if not (autocorrect is None or autocorrect is False):
            self._process_attr("autocorrect", autocorrect)
        if not (autofocus is None or autofocus is False):
            self._process_attr("autofocus", autofocus)
        if not (contenteditable is None or contenteditable is False):
            self._process_attr("contenteditable", contenteditable)
        if not (dir is None or dir is False):
            self._process_attr("dir", dir)
        if not (draggable is None or draggable is False):
            self._process_attr("draggable", draggable)
        if not (enterkeyhint is None or enterkeyhint is False):
            self._process_attr("enterkeyhint", enterkeyhint)
        if not (hidden is None or hidden is False):
            self._process_attr("hidden", hidden)
        if not (inert is None or inert is False):
            self._process_attr("inert", inert)
        if not (inputmode is None or inputmode is False):
            self._process_attr("inputmode", inputmode)
        if not (is_ is None or is_ is False):
            self._process_attr("is", is_)
        if not (itemid is None or itemid is False):
            self._process_attr("itemid", itemid)
        if not (itemprop is None or itemprop is False):
            self._process_attr("itemprop", itemprop)
        if not (itemref is None or itemref is False):
            self._process_attr("itemref", itemref)
        if not (itemscope is None or itemscope is False):
            self._process_attr("itemscope", itemscope)
        if not (itemtype is None or itemtype is False):
            self._process_attr("itemtype", itemtype)
        if not (lang is None or lang is False):
            self._process_attr("lang", lang)
        if not (nonce is None or nonce is False):
            self._process_attr("nonce", nonce)
        if not (popover is None or popover is False):
            self._process_attr("popover", popover)
        if not (slot is None or slot is False):
            self._process_attr("slot", slot)
        if not (spellcheck is None or spellcheck is False):
            self._process_attr("spellcheck", spellcheck)
        if not (style is None or style is False):
            self._process_attr("style", style)
        if not (tabindex is None or tabindex is False):
            self._process_attr("tabindex", tabindex)
        if not (title is None or title is False):
            self._process_attr("title", title)
        if not (translate is None or translate is False):
            self._process_attr("translate", translate)
        if not (writingsuggestions is None or writingsuggestions is False):
            self._process_attr("writingsuggestions", writingsuggestions)


class bdo(BaseElement, GlobalAttrs):
    """
    The 'bdo' element.  
    Description: Text directionality formatting  
    Categories: flow phrasing palpable  
    Parents: phrasing  
    Children: phrasing  
    Interface: HTMLElement  
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/bdo  
    """ # fmt: skip


    def __init__(
        self,
        attrs: Optional[Union[dict[str, Union[str, dict, list]], list[BaseAttribute]]] = None,
        id: Optional[Union[str, GlobalAttrs.id]] = None,
        class_: Optional[Union[str, GlobalAttrs.class_]] = None,
        accesskey: Optional[Union[str, GlobalAttrs.accesskey]] = None,
        autocapitalize: Optional[Union[str, GlobalAttrs.autocapitalize, Literal['on', 'off', 'none', 'sentences', 'words', 'characters']]] = None,
        autocorrect: Optional[Union[str, GlobalAttrs.autocorrect, Literal['on', 'off']]] = None,
        autofocus: Optional[Union[str, GlobalAttrs.autofocus, bool]] = None,
        contenteditable: Optional[Union[str, GlobalAttrs.contenteditable, Literal['true', 'plaintext-only', 'false']]] = None,
        dir: Optional[Union[str, GlobalAttrs.dir, Literal['ltr', 'rtl', 'auto']]] = None,
        draggable: Optional[Union[str, GlobalAttrs.draggable, Literal['true', 'false']]] = None,
        enterkeyhint: Optional[Union[str, GlobalAttrs.enterkeyhint, Literal['enter', 'done', 'go', 'next', 'previous', 'search', 'send']]] = None,
        hidden: Optional[Union[str, GlobalAttrs.hidden, Literal['until-found', 'hidden', '']]] = None,
        inert: Optional[Union[str, GlobalAttrs.inert, bool]] = None,
        inputmode: Optional[Union[str, GlobalAttrs.inputmode, Literal['none', 'text', 'tel', 'email', 'url', 'numeric', 'decimal', 'search']]] = None,
        is_: Optional[Union[str, GlobalAttrs.is_]] = None,
        itemid: Optional[Union[str, GlobalAttrs.itemid]] = None,
        itemprop: Optional[Union[str, GlobalAttrs.itemprop]] = None,
        itemref: Optional[Union[str, GlobalAttrs.itemref]] = None,
        itemscope: Optional[Union[str, GlobalAttrs.itemscope, bool]] = None,
        itemtype: Optional[Union[str, GlobalAttrs.itemtype]] = None,
        lang: Optional[Union[str, GlobalAttrs.lang]] = None,
        nonce: Optional[Union[str, GlobalAttrs.nonce]] = None,
        popover: Optional[Union[str, GlobalAttrs.popover, Literal['auto', 'manual']]] = None,
        slot: Optional[Union[str, GlobalAttrs.slot]] = None,
        spellcheck: Optional[Union[str, GlobalAttrs.spellcheck, Literal['true', 'false', '']]] = None,
        style: Optional[Union[str, GlobalAttrs.style]] = None,
        tabindex: Optional[Union[str, GlobalAttrs.tabindex, int]] = None,
        title: Optional[Union[str, GlobalAttrs.title]] = None,
        translate: Optional[Union[str, GlobalAttrs.translate, Literal['yes', 'no']]] = None,
        writingsuggestions: Optional[Union[str, GlobalAttrs.writingsuggestions, Literal['true', 'false', '']]] = None,
        children: Optional[list] = None
    ) -> None:
        """
        Initialize 'bdo' (Text directionality formatting) element.  
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/bdo

        :param attrs: A list or dictionary of attributes for the element
        :param id: The element's ID
        :param class_: Classes to which the element belongs
            | Set of space-separated tokens
        :param accesskey: Keyboard shortcut to activate or focus element
            | Ordered set of unique space-separated tokens, none of which are identical to another, each consisting of one code point in length
        :param autocapitalize: Recommended autocapitalization behavior (for supported input methods)
        :param autocorrect: Recommended autocorrection behavior (for supported input methods)
        :param autofocus: Automatically focus the element when the page is loaded
        :param contenteditable: Whether the element is editable
        :param dir: The text directionality of the element
        :param draggable: Whether the element is draggable
        :param enterkeyhint: Hint for selecting an enter key action
        :param hidden: Whether the element is relevant
        :param inert: Whether the element is inert.
        :param inputmode: Hint for selecting an input modality
        :param is_: Creates a customized built-in element
            | Valid custom element name of a defined customized built-in element
        :param itemid: Global identifier for a microdata item
            | Valid URL potentially surrounded by spaces
        :param itemprop: Property names of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs, defined property names, or text*
        :param itemref: Referenced elements
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param itemscope: Introduces a microdata item
        :param itemtype: Item types of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs*
        :param lang: Language of the element
            | Valid BCP 47 language tag or the empty string
        :param nonce: Cryptographic nonce used in Content Security Policy checks [CSP]
        :param popover: Makes the element a popover element
        :param slot: The element's desired slot
        :param spellcheck: Whether the element is to have its spelling and grammar checked
        :param style: Presentational and formatting instructions
            | CSS declarations*
        :param tabindex: Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation
        :param title: Advisory information for the element
        :param translate: Whether the element is to be translated when the page is localized
        :param writingsuggestions: Whether the element can offer writing suggestions or not.
        """ #fmt: skip
        super().__init__(
            "bdo",
            void_element=False,
            attrs=attrs,
            children=children
        )
        if not (id is None or id is False):
            self._process_attr("id", id)
        if not (class_ is None or class_ is False):
            self._process_attr("class", class_)
        if not (accesskey is None or accesskey is False):
            self._process_attr("accesskey", accesskey)
        if not (autocapitalize is None or autocapitalize is False):
            self._process_attr("autocapitalize", autocapitalize)
        if not (autocorrect is None or autocorrect is False):
            self._process_attr("autocorrect", autocorrect)
        if not (autofocus is None or autofocus is False):
            self._process_attr("autofocus", autofocus)
        if not (contenteditable is None or contenteditable is False):
            self._process_attr("contenteditable", contenteditable)
        if not (dir is None or dir is False):
            self._process_attr("dir", dir)
        if not (draggable is None or draggable is False):
            self._process_attr("draggable", draggable)
        if not (enterkeyhint is None or enterkeyhint is False):
            self._process_attr("enterkeyhint", enterkeyhint)
        if not (hidden is None or hidden is False):
            self._process_attr("hidden", hidden)
        if not (inert is None or inert is False):
            self._process_attr("inert", inert)
        if not (inputmode is None or inputmode is False):
            self._process_attr("inputmode", inputmode)
        if not (is_ is None or is_ is False):
            self._process_attr("is", is_)
        if not (itemid is None or itemid is False):
            self._process_attr("itemid", itemid)
        if not (itemprop is None or itemprop is False):
            self._process_attr("itemprop", itemprop)
        if not (itemref is None or itemref is False):
            self._process_attr("itemref", itemref)
        if not (itemscope is None or itemscope is False):
            self._process_attr("itemscope", itemscope)
        if not (itemtype is None or itemtype is False):
            self._process_attr("itemtype", itemtype)
        if not (lang is None or lang is False):
            self._process_attr("lang", lang)
        if not (nonce is None or nonce is False):
            self._process_attr("nonce", nonce)
        if not (popover is None or popover is False):
            self._process_attr("popover", popover)
        if not (slot is None or slot is False):
            self._process_attr("slot", slot)
        if not (spellcheck is None or spellcheck is False):
            self._process_attr("spellcheck", spellcheck)
        if not (style is None or style is False):
            self._process_attr("style", style)
        if not (tabindex is None or tabindex is False):
            self._process_attr("tabindex", tabindex)
        if not (title is None or title is False):
            self._process_attr("title", title)
        if not (translate is None or translate is False):
            self._process_attr("translate", translate)
        if not (writingsuggestions is None or writingsuggestions is False):
            self._process_attr("writingsuggestions", writingsuggestions)


class blockquote(BaseElement, GlobalAttrs, BlockquoteAttrs):
    """
    The 'blockquote' element.  
    Description: A section quoted from another source  
    Categories: flow palpable  
    Parents: flow  
    Children: flow  
    Interface: HTMLQuoteElement  
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/blockquote  
    """ # fmt: skip


    def __init__(
        self,
        attrs: Optional[Union[dict[str, Union[str, dict, list]], list[BaseAttribute]]] = None,
        id: Optional[Union[str, GlobalAttrs.id]] = None,
        class_: Optional[Union[str, GlobalAttrs.class_]] = None,
        cite: Optional[Union[str, BlockquoteAttrs.cite]] = None,
        accesskey: Optional[Union[str, GlobalAttrs.accesskey]] = None,
        autocapitalize: Optional[Union[str, GlobalAttrs.autocapitalize, Literal['on', 'off', 'none', 'sentences', 'words', 'characters']]] = None,
        autocorrect: Optional[Union[str, GlobalAttrs.autocorrect, Literal['on', 'off']]] = None,
        autofocus: Optional[Union[str, GlobalAttrs.autofocus, bool]] = None,
        contenteditable: Optional[Union[str, GlobalAttrs.contenteditable, Literal['true', 'plaintext-only', 'false']]] = None,
        dir: Optional[Union[str, GlobalAttrs.dir, Literal['ltr', 'rtl', 'auto']]] = None,
        draggable: Optional[Union[str, GlobalAttrs.draggable, Literal['true', 'false']]] = None,
        enterkeyhint: Optional[Union[str, GlobalAttrs.enterkeyhint, Literal['enter', 'done', 'go', 'next', 'previous', 'search', 'send']]] = None,
        hidden: Optional[Union[str, GlobalAttrs.hidden, Literal['until-found', 'hidden', '']]] = None,
        inert: Optional[Union[str, GlobalAttrs.inert, bool]] = None,
        inputmode: Optional[Union[str, GlobalAttrs.inputmode, Literal['none', 'text', 'tel', 'email', 'url', 'numeric', 'decimal', 'search']]] = None,
        is_: Optional[Union[str, GlobalAttrs.is_]] = None,
        itemid: Optional[Union[str, GlobalAttrs.itemid]] = None,
        itemprop: Optional[Union[str, GlobalAttrs.itemprop]] = None,
        itemref: Optional[Union[str, GlobalAttrs.itemref]] = None,
        itemscope: Optional[Union[str, GlobalAttrs.itemscope, bool]] = None,
        itemtype: Optional[Union[str, GlobalAttrs.itemtype]] = None,
        lang: Optional[Union[str, GlobalAttrs.lang]] = None,
        nonce: Optional[Union[str, GlobalAttrs.nonce]] = None,
        popover: Optional[Union[str, GlobalAttrs.popover, Literal['auto', 'manual']]] = None,
        slot: Optional[Union[str, GlobalAttrs.slot]] = None,
        spellcheck: Optional[Union[str, GlobalAttrs.spellcheck, Literal['true', 'false', '']]] = None,
        style: Optional[Union[str, GlobalAttrs.style]] = None,
        tabindex: Optional[Union[str, GlobalAttrs.tabindex, int]] = None,
        title: Optional[Union[str, GlobalAttrs.title]] = None,
        translate: Optional[Union[str, GlobalAttrs.translate, Literal['yes', 'no']]] = None,
        writingsuggestions: Optional[Union[str, GlobalAttrs.writingsuggestions, Literal['true', 'false', '']]] = None,
        children: Optional[list] = None
    ) -> None:
        """
        Initialize 'blockquote' (A section quoted from another source) element.  
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/blockquote

        :param attrs: A list or dictionary of attributes for the element
        :param id: The element's ID
        :param class_: Classes to which the element belongs
            | Set of space-separated tokens
        :param cite: Link to the source of the quotation or more information about the edit
            | Valid URL potentially surrounded by spaces
        :param accesskey: Keyboard shortcut to activate or focus element
            | Ordered set of unique space-separated tokens, none of which are identical to another, each consisting of one code point in length
        :param autocapitalize: Recommended autocapitalization behavior (for supported input methods)
        :param autocorrect: Recommended autocorrection behavior (for supported input methods)
        :param autofocus: Automatically focus the element when the page is loaded
        :param contenteditable: Whether the element is editable
        :param dir: The text directionality of the element
        :param draggable: Whether the element is draggable
        :param enterkeyhint: Hint for selecting an enter key action
        :param hidden: Whether the element is relevant
        :param inert: Whether the element is inert.
        :param inputmode: Hint for selecting an input modality
        :param is_: Creates a customized built-in element
            | Valid custom element name of a defined customized built-in element
        :param itemid: Global identifier for a microdata item
            | Valid URL potentially surrounded by spaces
        :param itemprop: Property names of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs, defined property names, or text*
        :param itemref: Referenced elements
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param itemscope: Introduces a microdata item
        :param itemtype: Item types of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs*
        :param lang: Language of the element
            | Valid BCP 47 language tag or the empty string
        :param nonce: Cryptographic nonce used in Content Security Policy checks [CSP]
        :param popover: Makes the element a popover element
        :param slot: The element's desired slot
        :param spellcheck: Whether the element is to have its spelling and grammar checked
        :param style: Presentational and formatting instructions
            | CSS declarations*
        :param tabindex: Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation
        :param title: Advisory information for the element
        :param translate: Whether the element is to be translated when the page is localized
        :param writingsuggestions: Whether the element can offer writing suggestions or not.
        """ #fmt: skip
        super().__init__(
            "blockquote",
            void_element=False,
            attrs=attrs,
            children=children
        )
        if not (id is None or id is False):
            self._process_attr("id", id)
        if not (class_ is None or class_ is False):
            self._process_attr("class", class_)
        if not (cite is None or cite is False):
            self._process_attr("cite", cite)
        if not (accesskey is None or accesskey is False):
            self._process_attr("accesskey", accesskey)
        if not (autocapitalize is None or autocapitalize is False):
            self._process_attr("autocapitalize", autocapitalize)
        if not (autocorrect is None or autocorrect is False):
            self._process_attr("autocorrect", autocorrect)
        if not (autofocus is None or autofocus is False):
            self._process_attr("autofocus", autofocus)
        if not (contenteditable is None or contenteditable is False):
            self._process_attr("contenteditable", contenteditable)
        if not (dir is None or dir is False):
            self._process_attr("dir", dir)
        if not (draggable is None or draggable is False):
            self._process_attr("draggable", draggable)
        if not (enterkeyhint is None or enterkeyhint is False):
            self._process_attr("enterkeyhint", enterkeyhint)
        if not (hidden is None or hidden is False):
            self._process_attr("hidden", hidden)
        if not (inert is None or inert is False):
            self._process_attr("inert", inert)
        if not (inputmode is None or inputmode is False):
            self._process_attr("inputmode", inputmode)
        if not (is_ is None or is_ is False):
            self._process_attr("is", is_)
        if not (itemid is None or itemid is False):
            self._process_attr("itemid", itemid)
        if not (itemprop is None or itemprop is False):
            self._process_attr("itemprop", itemprop)
        if not (itemref is None or itemref is False):
            self._process_attr("itemref", itemref)
        if not (itemscope is None or itemscope is False):
            self._process_attr("itemscope", itemscope)
        if not (itemtype is None or itemtype is False):
            self._process_attr("itemtype", itemtype)
        if not (lang is None or lang is False):
            self._process_attr("lang", lang)
        if not (nonce is None or nonce is False):
            self._process_attr("nonce", nonce)
        if not (popover is None or popover is False):
            self._process_attr("popover", popover)
        if not (slot is None or slot is False):
            self._process_attr("slot", slot)
        if not (spellcheck is None or spellcheck is False):
            self._process_attr("spellcheck", spellcheck)
        if not (style is None or style is False):
            self._process_attr("style", style)
        if not (tabindex is None or tabindex is False):
            self._process_attr("tabindex", tabindex)
        if not (title is None or title is False):
            self._process_attr("title", title)
        if not (translate is None or translate is False):
            self._process_attr("translate", translate)
        if not (writingsuggestions is None or writingsuggestions is False):
            self._process_attr("writingsuggestions", writingsuggestions)


class body(BaseElement, GlobalAttrs, BodyAttrs):
    """
    The 'body' element.  
    Description: Document body  
    Categories: none  
    Parents: html  
    Children: flow  
    Interface: HTMLBodyElement  
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/body  
    """ # fmt: skip


    def __init__(
        self,
        attrs: Optional[Union[dict[str, Union[str, dict, list]], list[BaseAttribute]]] = None,
        id: Optional[Union[str, GlobalAttrs.id]] = None,
        class_: Optional[Union[str, GlobalAttrs.class_]] = None,
        accesskey: Optional[Union[str, GlobalAttrs.accesskey]] = None,
        autocapitalize: Optional[Union[str, GlobalAttrs.autocapitalize, Literal['on', 'off', 'none', 'sentences', 'words', 'characters']]] = None,
        autocorrect: Optional[Union[str, GlobalAttrs.autocorrect, Literal['on', 'off']]] = None,
        autofocus: Optional[Union[str, GlobalAttrs.autofocus, bool]] = None,
        contenteditable: Optional[Union[str, GlobalAttrs.contenteditable, Literal['true', 'plaintext-only', 'false']]] = None,
        dir: Optional[Union[str, GlobalAttrs.dir, Literal['ltr', 'rtl', 'auto']]] = None,
        draggable: Optional[Union[str, GlobalAttrs.draggable, Literal['true', 'false']]] = None,
        enterkeyhint: Optional[Union[str, GlobalAttrs.enterkeyhint, Literal['enter', 'done', 'go', 'next', 'previous', 'search', 'send']]] = None,
        hidden: Optional[Union[str, GlobalAttrs.hidden, Literal['until-found', 'hidden', '']]] = None,
        inert: Optional[Union[str, GlobalAttrs.inert, bool]] = None,
        inputmode: Optional[Union[str, GlobalAttrs.inputmode, Literal['none', 'text', 'tel', 'email', 'url', 'numeric', 'decimal', 'search']]] = None,
        is_: Optional[Union[str, GlobalAttrs.is_]] = None,
        itemid: Optional[Union[str, GlobalAttrs.itemid]] = None,
        itemprop: Optional[Union[str, GlobalAttrs.itemprop]] = None,
        itemref: Optional[Union[str, GlobalAttrs.itemref]] = None,
        itemscope: Optional[Union[str, GlobalAttrs.itemscope, bool]] = None,
        itemtype: Optional[Union[str, GlobalAttrs.itemtype]] = None,
        lang: Optional[Union[str, GlobalAttrs.lang]] = None,
        nonce: Optional[Union[str, GlobalAttrs.nonce]] = None,
        popover: Optional[Union[str, GlobalAttrs.popover, Literal['auto', 'manual']]] = None,
        slot: Optional[Union[str, GlobalAttrs.slot]] = None,
        spellcheck: Optional[Union[str, GlobalAttrs.spellcheck, Literal['true', 'false', '']]] = None,
        style: Optional[Union[str, GlobalAttrs.style]] = None,
        tabindex: Optional[Union[str, GlobalAttrs.tabindex, int]] = None,
        title: Optional[Union[str, GlobalAttrs.title]] = None,
        translate: Optional[Union[str, GlobalAttrs.translate, Literal['yes', 'no']]] = None,
        writingsuggestions: Optional[Union[str, GlobalAttrs.writingsuggestions, Literal['true', 'false', '']]] = None,
        children: Optional[list] = None
    ) -> None:
        """
        Initialize 'body' (Document body) element.  
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/body

        :param attrs: A list or dictionary of attributes for the element
        :param id: The element's ID
        :param class_: Classes to which the element belongs
            | Set of space-separated tokens
        :param accesskey: Keyboard shortcut to activate or focus element
            | Ordered set of unique space-separated tokens, none of which are identical to another, each consisting of one code point in length
        :param autocapitalize: Recommended autocapitalization behavior (for supported input methods)
        :param autocorrect: Recommended autocorrection behavior (for supported input methods)
        :param autofocus: Automatically focus the element when the page is loaded
        :param contenteditable: Whether the element is editable
        :param dir: The text directionality of the element
        :param draggable: Whether the element is draggable
        :param enterkeyhint: Hint for selecting an enter key action
        :param hidden: Whether the element is relevant
        :param inert: Whether the element is inert.
        :param inputmode: Hint for selecting an input modality
        :param is_: Creates a customized built-in element
            | Valid custom element name of a defined customized built-in element
        :param itemid: Global identifier for a microdata item
            | Valid URL potentially surrounded by spaces
        :param itemprop: Property names of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs, defined property names, or text*
        :param itemref: Referenced elements
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param itemscope: Introduces a microdata item
        :param itemtype: Item types of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs*
        :param lang: Language of the element
            | Valid BCP 47 language tag or the empty string
        :param nonce: Cryptographic nonce used in Content Security Policy checks [CSP]
        :param popover: Makes the element a popover element
        :param slot: The element's desired slot
        :param spellcheck: Whether the element is to have its spelling and grammar checked
        :param style: Presentational and formatting instructions
            | CSS declarations*
        :param tabindex: Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation
        :param title: Advisory information for the element
        :param translate: Whether the element is to be translated when the page is localized
        :param writingsuggestions: Whether the element can offer writing suggestions or not.
        """ #fmt: skip
        super().__init__(
            "body",
            void_element=False,
            attrs=attrs,
            children=children
        )
        if not (id is None or id is False):
            self._process_attr("id", id)
        if not (class_ is None or class_ is False):
            self._process_attr("class", class_)
        if not (accesskey is None or accesskey is False):
            self._process_attr("accesskey", accesskey)
        if not (autocapitalize is None or autocapitalize is False):
            self._process_attr("autocapitalize", autocapitalize)
        if not (autocorrect is None or autocorrect is False):
            self._process_attr("autocorrect", autocorrect)
        if not (autofocus is None or autofocus is False):
            self._process_attr("autofocus", autofocus)
        if not (contenteditable is None or contenteditable is False):
            self._process_attr("contenteditable", contenteditable)
        if not (dir is None or dir is False):
            self._process_attr("dir", dir)
        if not (draggable is None or draggable is False):
            self._process_attr("draggable", draggable)
        if not (enterkeyhint is None or enterkeyhint is False):
            self._process_attr("enterkeyhint", enterkeyhint)
        if not (hidden is None or hidden is False):
            self._process_attr("hidden", hidden)
        if not (inert is None or inert is False):
            self._process_attr("inert", inert)
        if not (inputmode is None or inputmode is False):
            self._process_attr("inputmode", inputmode)
        if not (is_ is None or is_ is False):
            self._process_attr("is", is_)
        if not (itemid is None or itemid is False):
            self._process_attr("itemid", itemid)
        if not (itemprop is None or itemprop is False):
            self._process_attr("itemprop", itemprop)
        if not (itemref is None or itemref is False):
            self._process_attr("itemref", itemref)
        if not (itemscope is None or itemscope is False):
            self._process_attr("itemscope", itemscope)
        if not (itemtype is None or itemtype is False):
            self._process_attr("itemtype", itemtype)
        if not (lang is None or lang is False):
            self._process_attr("lang", lang)
        if not (nonce is None or nonce is False):
            self._process_attr("nonce", nonce)
        if not (popover is None or popover is False):
            self._process_attr("popover", popover)
        if not (slot is None or slot is False):
            self._process_attr("slot", slot)
        if not (spellcheck is None or spellcheck is False):
            self._process_attr("spellcheck", spellcheck)
        if not (style is None or style is False):
            self._process_attr("style", style)
        if not (tabindex is None or tabindex is False):
            self._process_attr("tabindex", tabindex)
        if not (title is None or title is False):
            self._process_attr("title", title)
        if not (translate is None or translate is False):
            self._process_attr("translate", translate)
        if not (writingsuggestions is None or writingsuggestions is False):
            self._process_attr("writingsuggestions", writingsuggestions)


class br(BaseElement, GlobalAttrs):
    """
    The 'br' element.  
    Description: Line break, e.g. in poem or postal address  
    Categories: flow phrasing  
    Parents: phrasing  
    Children: empty  
    Interface: HTMLBRElement  
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/br  
    """ # fmt: skip


    def __init__(
        self,
        attrs: Optional[Union[dict[str, Union[str, dict, list]], list[BaseAttribute]]] = None,
        id: Optional[Union[str, GlobalAttrs.id]] = None,
        class_: Optional[Union[str, GlobalAttrs.class_]] = None,
        accesskey: Optional[Union[str, GlobalAttrs.accesskey]] = None,
        autocapitalize: Optional[Union[str, GlobalAttrs.autocapitalize, Literal['on', 'off', 'none', 'sentences', 'words', 'characters']]] = None,
        autocorrect: Optional[Union[str, GlobalAttrs.autocorrect, Literal['on', 'off']]] = None,
        autofocus: Optional[Union[str, GlobalAttrs.autofocus, bool]] = None,
        contenteditable: Optional[Union[str, GlobalAttrs.contenteditable, Literal['true', 'plaintext-only', 'false']]] = None,
        dir: Optional[Union[str, GlobalAttrs.dir, Literal['ltr', 'rtl', 'auto']]] = None,
        draggable: Optional[Union[str, GlobalAttrs.draggable, Literal['true', 'false']]] = None,
        enterkeyhint: Optional[Union[str, GlobalAttrs.enterkeyhint, Literal['enter', 'done', 'go', 'next', 'previous', 'search', 'send']]] = None,
        hidden: Optional[Union[str, GlobalAttrs.hidden, Literal['until-found', 'hidden', '']]] = None,
        inert: Optional[Union[str, GlobalAttrs.inert, bool]] = None,
        inputmode: Optional[Union[str, GlobalAttrs.inputmode, Literal['none', 'text', 'tel', 'email', 'url', 'numeric', 'decimal', 'search']]] = None,
        is_: Optional[Union[str, GlobalAttrs.is_]] = None,
        itemid: Optional[Union[str, GlobalAttrs.itemid]] = None,
        itemprop: Optional[Union[str, GlobalAttrs.itemprop]] = None,
        itemref: Optional[Union[str, GlobalAttrs.itemref]] = None,
        itemscope: Optional[Union[str, GlobalAttrs.itemscope, bool]] = None,
        itemtype: Optional[Union[str, GlobalAttrs.itemtype]] = None,
        lang: Optional[Union[str, GlobalAttrs.lang]] = None,
        nonce: Optional[Union[str, GlobalAttrs.nonce]] = None,
        popover: Optional[Union[str, GlobalAttrs.popover, Literal['auto', 'manual']]] = None,
        slot: Optional[Union[str, GlobalAttrs.slot]] = None,
        spellcheck: Optional[Union[str, GlobalAttrs.spellcheck, Literal['true', 'false', '']]] = None,
        style: Optional[Union[str, GlobalAttrs.style]] = None,
        tabindex: Optional[Union[str, GlobalAttrs.tabindex, int]] = None,
        title: Optional[Union[str, GlobalAttrs.title]] = None,
        translate: Optional[Union[str, GlobalAttrs.translate, Literal['yes', 'no']]] = None,
        writingsuggestions: Optional[Union[str, GlobalAttrs.writingsuggestions, Literal['true', 'false', '']]] = None,
        children: Optional[list] = None
    ) -> None:
        """
        Initialize 'br' (Line break, e.g. in poem or postal address) element.  
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/br

        :param attrs: A list or dictionary of attributes for the element
        :param id: The element's ID
        :param class_: Classes to which the element belongs
            | Set of space-separated tokens
        :param accesskey: Keyboard shortcut to activate or focus element
            | Ordered set of unique space-separated tokens, none of which are identical to another, each consisting of one code point in length
        :param autocapitalize: Recommended autocapitalization behavior (for supported input methods)
        :param autocorrect: Recommended autocorrection behavior (for supported input methods)
        :param autofocus: Automatically focus the element when the page is loaded
        :param contenteditable: Whether the element is editable
        :param dir: The text directionality of the element
        :param draggable: Whether the element is draggable
        :param enterkeyhint: Hint for selecting an enter key action
        :param hidden: Whether the element is relevant
        :param inert: Whether the element is inert.
        :param inputmode: Hint for selecting an input modality
        :param is_: Creates a customized built-in element
            | Valid custom element name of a defined customized built-in element
        :param itemid: Global identifier for a microdata item
            | Valid URL potentially surrounded by spaces
        :param itemprop: Property names of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs, defined property names, or text*
        :param itemref: Referenced elements
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param itemscope: Introduces a microdata item
        :param itemtype: Item types of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs*
        :param lang: Language of the element
            | Valid BCP 47 language tag or the empty string
        :param nonce: Cryptographic nonce used in Content Security Policy checks [CSP]
        :param popover: Makes the element a popover element
        :param slot: The element's desired slot
        :param spellcheck: Whether the element is to have its spelling and grammar checked
        :param style: Presentational and formatting instructions
            | CSS declarations*
        :param tabindex: Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation
        :param title: Advisory information for the element
        :param translate: Whether the element is to be translated when the page is localized
        :param writingsuggestions: Whether the element can offer writing suggestions or not.
        """ #fmt: skip
        super().__init__(
            "br",
            void_element=True,
            attrs=attrs,
            children=children
        )
        if not (id is None or id is False):
            self._process_attr("id", id)
        if not (class_ is None or class_ is False):
            self._process_attr("class", class_)
        if not (accesskey is None or accesskey is False):
            self._process_attr("accesskey", accesskey)
        if not (autocapitalize is None or autocapitalize is False):
            self._process_attr("autocapitalize", autocapitalize)
        if not (autocorrect is None or autocorrect is False):
            self._process_attr("autocorrect", autocorrect)
        if not (autofocus is None or autofocus is False):
            self._process_attr("autofocus", autofocus)
        if not (contenteditable is None or contenteditable is False):
            self._process_attr("contenteditable", contenteditable)
        if not (dir is None or dir is False):
            self._process_attr("dir", dir)
        if not (draggable is None or draggable is False):
            self._process_attr("draggable", draggable)
        if not (enterkeyhint is None or enterkeyhint is False):
            self._process_attr("enterkeyhint", enterkeyhint)
        if not (hidden is None or hidden is False):
            self._process_attr("hidden", hidden)
        if not (inert is None or inert is False):
            self._process_attr("inert", inert)
        if not (inputmode is None or inputmode is False):
            self._process_attr("inputmode", inputmode)
        if not (is_ is None or is_ is False):
            self._process_attr("is", is_)
        if not (itemid is None or itemid is False):
            self._process_attr("itemid", itemid)
        if not (itemprop is None or itemprop is False):
            self._process_attr("itemprop", itemprop)
        if not (itemref is None or itemref is False):
            self._process_attr("itemref", itemref)
        if not (itemscope is None or itemscope is False):
            self._process_attr("itemscope", itemscope)
        if not (itemtype is None or itemtype is False):
            self._process_attr("itemtype", itemtype)
        if not (lang is None or lang is False):
            self._process_attr("lang", lang)
        if not (nonce is None or nonce is False):
            self._process_attr("nonce", nonce)
        if not (popover is None or popover is False):
            self._process_attr("popover", popover)
        if not (slot is None or slot is False):
            self._process_attr("slot", slot)
        if not (spellcheck is None or spellcheck is False):
            self._process_attr("spellcheck", spellcheck)
        if not (style is None or style is False):
            self._process_attr("style", style)
        if not (tabindex is None or tabindex is False):
            self._process_attr("tabindex", tabindex)
        if not (title is None or title is False):
            self._process_attr("title", title)
        if not (translate is None or translate is False):
            self._process_attr("translate", translate)
        if not (writingsuggestions is None or writingsuggestions is False):
            self._process_attr("writingsuggestions", writingsuggestions)


class button(BaseElement, GlobalAttrs, ButtonAttrs):
    """
    The 'button' element.  
    Description: Button control  
    Categories: flow phrasing interactive listed labelable submittable form-associated palpable  
    Parents: phrasing  
    Children: phrasing*  
    Interface: HTMLButtonElement  
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button  
    """ # fmt: skip


    def __init__(
        self,
        attrs: Optional[Union[dict[str, Union[str, dict, list]], list[BaseAttribute]]] = None,
        id: Optional[Union[str, GlobalAttrs.id]] = None,
        class_: Optional[Union[str, GlobalAttrs.class_]] = None,
        disabled: Optional[Union[str, ButtonAttrs.disabled, bool]] = None,
        form: Optional[Union[str, ButtonAttrs.form]] = None,
        formaction: Optional[Union[str, ButtonAttrs.formaction]] = None,
        formenctype: Optional[Union[str, ButtonAttrs.formenctype, Literal['application/x-www-form-urlencoded', 'multipart/form-data', 'text/plain']]] = None,
        formmethod: Optional[Union[str, ButtonAttrs.formmethod, Literal['GET', 'POST', 'dialog']]] = None,
        formnovalidate: Optional[Union[str, ButtonAttrs.formnovalidate, bool]] = None,
        formtarget: Optional[Union[str, ButtonAttrs.formtarget]] = None,
        name: Optional[Union[str, ButtonAttrs.name]] = None,
        popovertarget: Optional[Union[str, ButtonAttrs.popovertarget]] = None,
        popovertargetaction: Optional[Union[str, ButtonAttrs.popovertargetaction, Literal['toggle', 'show', 'hide']]] = None,
        type: Optional[Union[str, ButtonAttrs.type, Literal['submit', 'reset', 'button']]] = None,
        value: Optional[Union[str, ButtonAttrs.value]] = None,
        accesskey: Optional[Union[str, GlobalAttrs.accesskey]] = None,
        autocapitalize: Optional[Union[str, GlobalAttrs.autocapitalize, Literal['on', 'off', 'none', 'sentences', 'words', 'characters']]] = None,
        autocorrect: Optional[Union[str, GlobalAttrs.autocorrect, Literal['on', 'off']]] = None,
        autofocus: Optional[Union[str, GlobalAttrs.autofocus, bool]] = None,
        contenteditable: Optional[Union[str, GlobalAttrs.contenteditable, Literal['true', 'plaintext-only', 'false']]] = None,
        dir: Optional[Union[str, GlobalAttrs.dir, Literal['ltr', 'rtl', 'auto']]] = None,
        draggable: Optional[Union[str, GlobalAttrs.draggable, Literal['true', 'false']]] = None,
        enterkeyhint: Optional[Union[str, GlobalAttrs.enterkeyhint, Literal['enter', 'done', 'go', 'next', 'previous', 'search', 'send']]] = None,
        hidden: Optional[Union[str, GlobalAttrs.hidden, Literal['until-found', 'hidden', '']]] = None,
        inert: Optional[Union[str, GlobalAttrs.inert, bool]] = None,
        inputmode: Optional[Union[str, GlobalAttrs.inputmode, Literal['none', 'text', 'tel', 'email', 'url', 'numeric', 'decimal', 'search']]] = None,
        is_: Optional[Union[str, GlobalAttrs.is_]] = None,
        itemid: Optional[Union[str, GlobalAttrs.itemid]] = None,
        itemprop: Optional[Union[str, GlobalAttrs.itemprop]] = None,
        itemref: Optional[Union[str, GlobalAttrs.itemref]] = None,
        itemscope: Optional[Union[str, GlobalAttrs.itemscope, bool]] = None,
        itemtype: Optional[Union[str, GlobalAttrs.itemtype]] = None,
        lang: Optional[Union[str, GlobalAttrs.lang]] = None,
        nonce: Optional[Union[str, GlobalAttrs.nonce]] = None,
        popover: Optional[Union[str, GlobalAttrs.popover, Literal['auto', 'manual']]] = None,
        slot: Optional[Union[str, GlobalAttrs.slot]] = None,
        spellcheck: Optional[Union[str, GlobalAttrs.spellcheck, Literal['true', 'false', '']]] = None,
        style: Optional[Union[str, GlobalAttrs.style]] = None,
        tabindex: Optional[Union[str, GlobalAttrs.tabindex, int]] = None,
        title: Optional[Union[str, GlobalAttrs.title]] = None,
        translate: Optional[Union[str, GlobalAttrs.translate, Literal['yes', 'no']]] = None,
        writingsuggestions: Optional[Union[str, GlobalAttrs.writingsuggestions, Literal['true', 'false', '']]] = None,
        children: Optional[list] = None
    ) -> None:
        """
        Initialize 'button' (Button control) element.  
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button

        :param attrs: A list or dictionary of attributes for the element
        :param id: The element's ID
        :param class_: Classes to which the element belongs
            | Set of space-separated tokens
        :param disabled: Whether the form control is disabled
        :param form: Associates the element with a form element
            | ID*
        :param formaction: URL to use for form submission
            | Valid non-empty URL potentially surrounded by spaces
        :param formenctype: Entry list encoding type to use for form submission
        :param formmethod: Variant to use for form submission
        :param formnovalidate: Bypass form control validation for form submission
        :param formtarget: Navigable for form submission
            | Valid navigable target name or keyword
        :param name: Name of the element to use for form submission and in the form.elements API
        :param popovertarget: Targets a popover element to toggle, show, or hide
            | ID*
        :param popovertargetaction: Indicates whether a targeted popover element is to be toggled, shown, or hidden
        :param type: Type of button
        :param value: Value to be used for form submission
        :param accesskey: Keyboard shortcut to activate or focus element
            | Ordered set of unique space-separated tokens, none of which are identical to another, each consisting of one code point in length
        :param autocapitalize: Recommended autocapitalization behavior (for supported input methods)
        :param autocorrect: Recommended autocorrection behavior (for supported input methods)
        :param autofocus: Automatically focus the element when the page is loaded
        :param contenteditable: Whether the element is editable
        :param dir: The text directionality of the element
        :param draggable: Whether the element is draggable
        :param enterkeyhint: Hint for selecting an enter key action
        :param hidden: Whether the element is relevant
        :param inert: Whether the element is inert.
        :param inputmode: Hint for selecting an input modality
        :param is_: Creates a customized built-in element
            | Valid custom element name of a defined customized built-in element
        :param itemid: Global identifier for a microdata item
            | Valid URL potentially surrounded by spaces
        :param itemprop: Property names of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs, defined property names, or text*
        :param itemref: Referenced elements
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param itemscope: Introduces a microdata item
        :param itemtype: Item types of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs*
        :param lang: Language of the element
            | Valid BCP 47 language tag or the empty string
        :param nonce: Cryptographic nonce used in Content Security Policy checks [CSP]
        :param popover: Makes the element a popover element
        :param slot: The element's desired slot
        :param spellcheck: Whether the element is to have its spelling and grammar checked
        :param style: Presentational and formatting instructions
            | CSS declarations*
        :param tabindex: Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation
        :param title: Advisory information for the element
        :param translate: Whether the element is to be translated when the page is localized
        :param writingsuggestions: Whether the element can offer writing suggestions or not.
        """ #fmt: skip
        super().__init__(
            "button",
            void_element=False,
            attrs=attrs,
            children=children
        )
        if not (id is None or id is False):
            self._process_attr("id", id)
        if not (class_ is None or class_ is False):
            self._process_attr("class", class_)
        if not (disabled is None or disabled is False):
            self._process_attr("disabled", disabled)
        if not (form is None or form is False):
            self._process_attr("form", form)
        if not (formaction is None or formaction is False):
            self._process_attr("formaction", formaction)
        if not (formenctype is None or formenctype is False):
            self._process_attr("formenctype", formenctype)
        if not (formmethod is None or formmethod is False):
            self._process_attr("formmethod", formmethod)
        if not (formnovalidate is None or formnovalidate is False):
            self._process_attr("formnovalidate", formnovalidate)
        if not (formtarget is None or formtarget is False):
            self._process_attr("formtarget", formtarget)
        if not (name is None or name is False):
            self._process_attr("name", name)
        if not (popovertarget is None or popovertarget is False):
            self._process_attr("popovertarget", popovertarget)
        if not (popovertargetaction is None or popovertargetaction is False):
            self._process_attr("popovertargetaction", popovertargetaction)
        if not (type is None or type is False):
            self._process_attr("type", type)
        if not (value is None or value is False):
            self._process_attr("value", value)
        if not (accesskey is None or accesskey is False):
            self._process_attr("accesskey", accesskey)
        if not (autocapitalize is None or autocapitalize is False):
            self._process_attr("autocapitalize", autocapitalize)
        if not (autocorrect is None or autocorrect is False):
            self._process_attr("autocorrect", autocorrect)
        if not (autofocus is None or autofocus is False):
            self._process_attr("autofocus", autofocus)
        if not (contenteditable is None or contenteditable is False):
            self._process_attr("contenteditable", contenteditable)
        if not (dir is None or dir is False):
            self._process_attr("dir", dir)
        if not (draggable is None or draggable is False):
            self._process_attr("draggable", draggable)
        if not (enterkeyhint is None or enterkeyhint is False):
            self._process_attr("enterkeyhint", enterkeyhint)
        if not (hidden is None or hidden is False):
            self._process_attr("hidden", hidden)
        if not (inert is None or inert is False):
            self._process_attr("inert", inert)
        if not (inputmode is None or inputmode is False):
            self._process_attr("inputmode", inputmode)
        if not (is_ is None or is_ is False):
            self._process_attr("is", is_)
        if not (itemid is None or itemid is False):
            self._process_attr("itemid", itemid)
        if not (itemprop is None or itemprop is False):
            self._process_attr("itemprop", itemprop)
        if not (itemref is None or itemref is False):
            self._process_attr("itemref", itemref)
        if not (itemscope is None or itemscope is False):
            self._process_attr("itemscope", itemscope)
        if not (itemtype is None or itemtype is False):
            self._process_attr("itemtype", itemtype)
        if not (lang is None or lang is False):
            self._process_attr("lang", lang)
        if not (nonce is None or nonce is False):
            self._process_attr("nonce", nonce)
        if not (popover is None or popover is False):
            self._process_attr("popover", popover)
        if not (slot is None or slot is False):
            self._process_attr("slot", slot)
        if not (spellcheck is None or spellcheck is False):
            self._process_attr("spellcheck", spellcheck)
        if not (style is None or style is False):
            self._process_attr("style", style)
        if not (tabindex is None or tabindex is False):
            self._process_attr("tabindex", tabindex)
        if not (title is None or title is False):
            self._process_attr("title", title)
        if not (translate is None or translate is False):
            self._process_attr("translate", translate)
        if not (writingsuggestions is None or writingsuggestions is False):
            self._process_attr("writingsuggestions", writingsuggestions)


class canvas(BaseElement, GlobalAttrs, CanvasAttrs):
    """
    The 'canvas' element.  
    Description: Scriptable bitmap canvas  
    Categories: flow phrasing embedded palpable  
    Parents: phrasing  
    Children: transparent  
    Interface: HTMLCanvasElement  
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/canvas  
    """ # fmt: skip


    def __init__(
        self,
        attrs: Optional[Union[dict[str, Union[str, dict, list]], list[BaseAttribute]]] = None,
        id: Optional[Union[str, GlobalAttrs.id]] = None,
        class_: Optional[Union[str, GlobalAttrs.class_]] = None,
        height: Optional[Union[str, CanvasAttrs.height, int]] = None,
        width: Optional[Union[str, CanvasAttrs.width, int]] = None,
        accesskey: Optional[Union[str, GlobalAttrs.accesskey]] = None,
        autocapitalize: Optional[Union[str, GlobalAttrs.autocapitalize, Literal['on', 'off', 'none', 'sentences', 'words', 'characters']]] = None,
        autocorrect: Optional[Union[str, GlobalAttrs.autocorrect, Literal['on', 'off']]] = None,
        autofocus: Optional[Union[str, GlobalAttrs.autofocus, bool]] = None,
        contenteditable: Optional[Union[str, GlobalAttrs.contenteditable, Literal['true', 'plaintext-only', 'false']]] = None,
        dir: Optional[Union[str, GlobalAttrs.dir, Literal['ltr', 'rtl', 'auto']]] = None,
        draggable: Optional[Union[str, GlobalAttrs.draggable, Literal['true', 'false']]] = None,
        enterkeyhint: Optional[Union[str, GlobalAttrs.enterkeyhint, Literal['enter', 'done', 'go', 'next', 'previous', 'search', 'send']]] = None,
        hidden: Optional[Union[str, GlobalAttrs.hidden, Literal['until-found', 'hidden', '']]] = None,
        inert: Optional[Union[str, GlobalAttrs.inert, bool]] = None,
        inputmode: Optional[Union[str, GlobalAttrs.inputmode, Literal['none', 'text', 'tel', 'email', 'url', 'numeric', 'decimal', 'search']]] = None,
        is_: Optional[Union[str, GlobalAttrs.is_]] = None,
        itemid: Optional[Union[str, GlobalAttrs.itemid]] = None,
        itemprop: Optional[Union[str, GlobalAttrs.itemprop]] = None,
        itemref: Optional[Union[str, GlobalAttrs.itemref]] = None,
        itemscope: Optional[Union[str, GlobalAttrs.itemscope, bool]] = None,
        itemtype: Optional[Union[str, GlobalAttrs.itemtype]] = None,
        lang: Optional[Union[str, GlobalAttrs.lang]] = None,
        nonce: Optional[Union[str, GlobalAttrs.nonce]] = None,
        popover: Optional[Union[str, GlobalAttrs.popover, Literal['auto', 'manual']]] = None,
        slot: Optional[Union[str, GlobalAttrs.slot]] = None,
        spellcheck: Optional[Union[str, GlobalAttrs.spellcheck, Literal['true', 'false', '']]] = None,
        style: Optional[Union[str, GlobalAttrs.style]] = None,
        tabindex: Optional[Union[str, GlobalAttrs.tabindex, int]] = None,
        title: Optional[Union[str, GlobalAttrs.title]] = None,
        translate: Optional[Union[str, GlobalAttrs.translate, Literal['yes', 'no']]] = None,
        writingsuggestions: Optional[Union[str, GlobalAttrs.writingsuggestions, Literal['true', 'false', '']]] = None,
        children: Optional[list] = None
    ) -> None:
        """
        Initialize 'canvas' (Scriptable bitmap canvas) element.  
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/canvas

        :param attrs: A list or dictionary of attributes for the element
        :param id: The element's ID
        :param class_: Classes to which the element belongs
            | Set of space-separated tokens
        :param height: Vertical dimension
        :param width: Horizontal dimension
        :param accesskey: Keyboard shortcut to activate or focus element
            | Ordered set of unique space-separated tokens, none of which are identical to another, each consisting of one code point in length
        :param autocapitalize: Recommended autocapitalization behavior (for supported input methods)
        :param autocorrect: Recommended autocorrection behavior (for supported input methods)
        :param autofocus: Automatically focus the element when the page is loaded
        :param contenteditable: Whether the element is editable
        :param dir: The text directionality of the element
        :param draggable: Whether the element is draggable
        :param enterkeyhint: Hint for selecting an enter key action
        :param hidden: Whether the element is relevant
        :param inert: Whether the element is inert.
        :param inputmode: Hint for selecting an input modality
        :param is_: Creates a customized built-in element
            | Valid custom element name of a defined customized built-in element
        :param itemid: Global identifier for a microdata item
            | Valid URL potentially surrounded by spaces
        :param itemprop: Property names of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs, defined property names, or text*
        :param itemref: Referenced elements
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param itemscope: Introduces a microdata item
        :param itemtype: Item types of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs*
        :param lang: Language of the element
            | Valid BCP 47 language tag or the empty string
        :param nonce: Cryptographic nonce used in Content Security Policy checks [CSP]
        :param popover: Makes the element a popover element
        :param slot: The element's desired slot
        :param spellcheck: Whether the element is to have its spelling and grammar checked
        :param style: Presentational and formatting instructions
            | CSS declarations*
        :param tabindex: Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation
        :param title: Advisory information for the element
        :param translate: Whether the element is to be translated when the page is localized
        :param writingsuggestions: Whether the element can offer writing suggestions or not.
        """ #fmt: skip
        super().__init__(
            "canvas",
            void_element=False,
            attrs=attrs,
            children=children
        )
        if not (id is None or id is False):
            self._process_attr("id", id)
        if not (class_ is None or class_ is False):
            self._process_attr("class", class_)
        if not (height is None or height is False):
            self._process_attr("height", height)
        if not (width is None or width is False):
            self._process_attr("width", width)
        if not (accesskey is None or accesskey is False):
            self._process_attr("accesskey", accesskey)
        if not (autocapitalize is None or autocapitalize is False):
            self._process_attr("autocapitalize", autocapitalize)
        if not (autocorrect is None or autocorrect is False):
            self._process_attr("autocorrect", autocorrect)
        if not (autofocus is None or autofocus is False):
            self._process_attr("autofocus", autofocus)
        if not (contenteditable is None or contenteditable is False):
            self._process_attr("contenteditable", contenteditable)
        if not (dir is None or dir is False):
            self._process_attr("dir", dir)
        if not (draggable is None or draggable is False):
            self._process_attr("draggable", draggable)
        if not (enterkeyhint is None or enterkeyhint is False):
            self._process_attr("enterkeyhint", enterkeyhint)
        if not (hidden is None or hidden is False):
            self._process_attr("hidden", hidden)
        if not (inert is None or inert is False):
            self._process_attr("inert", inert)
        if not (inputmode is None or inputmode is False):
            self._process_attr("inputmode", inputmode)
        if not (is_ is None or is_ is False):
            self._process_attr("is", is_)
        if not (itemid is None or itemid is False):
            self._process_attr("itemid", itemid)
        if not (itemprop is None or itemprop is False):
            self._process_attr("itemprop", itemprop)
        if not (itemref is None or itemref is False):
            self._process_attr("itemref", itemref)
        if not (itemscope is None or itemscope is False):
            self._process_attr("itemscope", itemscope)
        if not (itemtype is None or itemtype is False):
            self._process_attr("itemtype", itemtype)
        if not (lang is None or lang is False):
            self._process_attr("lang", lang)
        if not (nonce is None or nonce is False):
            self._process_attr("nonce", nonce)
        if not (popover is None or popover is False):
            self._process_attr("popover", popover)
        if not (slot is None or slot is False):
            self._process_attr("slot", slot)
        if not (spellcheck is None or spellcheck is False):
            self._process_attr("spellcheck", spellcheck)
        if not (style is None or style is False):
            self._process_attr("style", style)
        if not (tabindex is None or tabindex is False):
            self._process_attr("tabindex", tabindex)
        if not (title is None or title is False):
            self._process_attr("title", title)
        if not (translate is None or translate is False):
            self._process_attr("translate", translate)
        if not (writingsuggestions is None or writingsuggestions is False):
            self._process_attr("writingsuggestions", writingsuggestions)


class caption(BaseElement, GlobalAttrs):
    """
    The 'caption' element.  
    Description: Table caption  
    Categories: none  
    Parents: table  
    Children: flow*  
    Interface: HTMLTableCaptionElement  
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/caption  
    """ # fmt: skip


    def __init__(
        self,
        attrs: Optional[Union[dict[str, Union[str, dict, list]], list[BaseAttribute]]] = None,
        id: Optional[Union[str, GlobalAttrs.id]] = None,
        class_: Optional[Union[str, GlobalAttrs.class_]] = None,
        accesskey: Optional[Union[str, GlobalAttrs.accesskey]] = None,
        autocapitalize: Optional[Union[str, GlobalAttrs.autocapitalize, Literal['on', 'off', 'none', 'sentences', 'words', 'characters']]] = None,
        autocorrect: Optional[Union[str, GlobalAttrs.autocorrect, Literal['on', 'off']]] = None,
        autofocus: Optional[Union[str, GlobalAttrs.autofocus, bool]] = None,
        contenteditable: Optional[Union[str, GlobalAttrs.contenteditable, Literal['true', 'plaintext-only', 'false']]] = None,
        dir: Optional[Union[str, GlobalAttrs.dir, Literal['ltr', 'rtl', 'auto']]] = None,
        draggable: Optional[Union[str, GlobalAttrs.draggable, Literal['true', 'false']]] = None,
        enterkeyhint: Optional[Union[str, GlobalAttrs.enterkeyhint, Literal['enter', 'done', 'go', 'next', 'previous', 'search', 'send']]] = None,
        hidden: Optional[Union[str, GlobalAttrs.hidden, Literal['until-found', 'hidden', '']]] = None,
        inert: Optional[Union[str, GlobalAttrs.inert, bool]] = None,
        inputmode: Optional[Union[str, GlobalAttrs.inputmode, Literal['none', 'text', 'tel', 'email', 'url', 'numeric', 'decimal', 'search']]] = None,
        is_: Optional[Union[str, GlobalAttrs.is_]] = None,
        itemid: Optional[Union[str, GlobalAttrs.itemid]] = None,
        itemprop: Optional[Union[str, GlobalAttrs.itemprop]] = None,
        itemref: Optional[Union[str, GlobalAttrs.itemref]] = None,
        itemscope: Optional[Union[str, GlobalAttrs.itemscope, bool]] = None,
        itemtype: Optional[Union[str, GlobalAttrs.itemtype]] = None,
        lang: Optional[Union[str, GlobalAttrs.lang]] = None,
        nonce: Optional[Union[str, GlobalAttrs.nonce]] = None,
        popover: Optional[Union[str, GlobalAttrs.popover, Literal['auto', 'manual']]] = None,
        slot: Optional[Union[str, GlobalAttrs.slot]] = None,
        spellcheck: Optional[Union[str, GlobalAttrs.spellcheck, Literal['true', 'false', '']]] = None,
        style: Optional[Union[str, GlobalAttrs.style]] = None,
        tabindex: Optional[Union[str, GlobalAttrs.tabindex, int]] = None,
        title: Optional[Union[str, GlobalAttrs.title]] = None,
        translate: Optional[Union[str, GlobalAttrs.translate, Literal['yes', 'no']]] = None,
        writingsuggestions: Optional[Union[str, GlobalAttrs.writingsuggestions, Literal['true', 'false', '']]] = None,
        children: Optional[list] = None
    ) -> None:
        """
        Initialize 'caption' (Table caption) element.  
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/caption

        :param attrs: A list or dictionary of attributes for the element
        :param id: The element's ID
        :param class_: Classes to which the element belongs
            | Set of space-separated tokens
        :param accesskey: Keyboard shortcut to activate or focus element
            | Ordered set of unique space-separated tokens, none of which are identical to another, each consisting of one code point in length
        :param autocapitalize: Recommended autocapitalization behavior (for supported input methods)
        :param autocorrect: Recommended autocorrection behavior (for supported input methods)
        :param autofocus: Automatically focus the element when the page is loaded
        :param contenteditable: Whether the element is editable
        :param dir: The text directionality of the element
        :param draggable: Whether the element is draggable
        :param enterkeyhint: Hint for selecting an enter key action
        :param hidden: Whether the element is relevant
        :param inert: Whether the element is inert.
        :param inputmode: Hint for selecting an input modality
        :param is_: Creates a customized built-in element
            | Valid custom element name of a defined customized built-in element
        :param itemid: Global identifier for a microdata item
            | Valid URL potentially surrounded by spaces
        :param itemprop: Property names of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs, defined property names, or text*
        :param itemref: Referenced elements
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param itemscope: Introduces a microdata item
        :param itemtype: Item types of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs*
        :param lang: Language of the element
            | Valid BCP 47 language tag or the empty string
        :param nonce: Cryptographic nonce used in Content Security Policy checks [CSP]
        :param popover: Makes the element a popover element
        :param slot: The element's desired slot
        :param spellcheck: Whether the element is to have its spelling and grammar checked
        :param style: Presentational and formatting instructions
            | CSS declarations*
        :param tabindex: Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation
        :param title: Advisory information for the element
        :param translate: Whether the element is to be translated when the page is localized
        :param writingsuggestions: Whether the element can offer writing suggestions or not.
        """ #fmt: skip
        super().__init__(
            "caption",
            void_element=False,
            attrs=attrs,
            children=children
        )
        if not (id is None or id is False):
            self._process_attr("id", id)
        if not (class_ is None or class_ is False):
            self._process_attr("class", class_)
        if not (accesskey is None or accesskey is False):
            self._process_attr("accesskey", accesskey)
        if not (autocapitalize is None or autocapitalize is False):
            self._process_attr("autocapitalize", autocapitalize)
        if not (autocorrect is None or autocorrect is False):
            self._process_attr("autocorrect", autocorrect)
        if not (autofocus is None or autofocus is False):
            self._process_attr("autofocus", autofocus)
        if not (contenteditable is None or contenteditable is False):
            self._process_attr("contenteditable", contenteditable)
        if not (dir is None or dir is False):
            self._process_attr("dir", dir)
        if not (draggable is None or draggable is False):
            self._process_attr("draggable", draggable)
        if not (enterkeyhint is None or enterkeyhint is False):
            self._process_attr("enterkeyhint", enterkeyhint)
        if not (hidden is None or hidden is False):
            self._process_attr("hidden", hidden)
        if not (inert is None or inert is False):
            self._process_attr("inert", inert)
        if not (inputmode is None or inputmode is False):
            self._process_attr("inputmode", inputmode)
        if not (is_ is None or is_ is False):
            self._process_attr("is", is_)
        if not (itemid is None or itemid is False):
            self._process_attr("itemid", itemid)
        if not (itemprop is None or itemprop is False):
            self._process_attr("itemprop", itemprop)
        if not (itemref is None or itemref is False):
            self._process_attr("itemref", itemref)
        if not (itemscope is None or itemscope is False):
            self._process_attr("itemscope", itemscope)
        if not (itemtype is None or itemtype is False):
            self._process_attr("itemtype", itemtype)
        if not (lang is None or lang is False):
            self._process_attr("lang", lang)
        if not (nonce is None or nonce is False):
            self._process_attr("nonce", nonce)
        if not (popover is None or popover is False):
            self._process_attr("popover", popover)
        if not (slot is None or slot is False):
            self._process_attr("slot", slot)
        if not (spellcheck is None or spellcheck is False):
            self._process_attr("spellcheck", spellcheck)
        if not (style is None or style is False):
            self._process_attr("style", style)
        if not (tabindex is None or tabindex is False):
            self._process_attr("tabindex", tabindex)
        if not (title is None or title is False):
            self._process_attr("title", title)
        if not (translate is None or translate is False):
            self._process_attr("translate", translate)
        if not (writingsuggestions is None or writingsuggestions is False):
            self._process_attr("writingsuggestions", writingsuggestions)


class cite(BaseElement, GlobalAttrs):
    """
    The 'cite' element.  
    Description: Title of a work  
    Categories: flow phrasing palpable  
    Parents: phrasing  
    Children: phrasing  
    Interface: HTMLElement  
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/cite  
    """ # fmt: skip


    def __init__(
        self,
        attrs: Optional[Union[dict[str, Union[str, dict, list]], list[BaseAttribute]]] = None,
        id: Optional[Union[str, GlobalAttrs.id]] = None,
        class_: Optional[Union[str, GlobalAttrs.class_]] = None,
        accesskey: Optional[Union[str, GlobalAttrs.accesskey]] = None,
        autocapitalize: Optional[Union[str, GlobalAttrs.autocapitalize, Literal['on', 'off', 'none', 'sentences', 'words', 'characters']]] = None,
        autocorrect: Optional[Union[str, GlobalAttrs.autocorrect, Literal['on', 'off']]] = None,
        autofocus: Optional[Union[str, GlobalAttrs.autofocus, bool]] = None,
        contenteditable: Optional[Union[str, GlobalAttrs.contenteditable, Literal['true', 'plaintext-only', 'false']]] = None,
        dir: Optional[Union[str, GlobalAttrs.dir, Literal['ltr', 'rtl', 'auto']]] = None,
        draggable: Optional[Union[str, GlobalAttrs.draggable, Literal['true', 'false']]] = None,
        enterkeyhint: Optional[Union[str, GlobalAttrs.enterkeyhint, Literal['enter', 'done', 'go', 'next', 'previous', 'search', 'send']]] = None,
        hidden: Optional[Union[str, GlobalAttrs.hidden, Literal['until-found', 'hidden', '']]] = None,
        inert: Optional[Union[str, GlobalAttrs.inert, bool]] = None,
        inputmode: Optional[Union[str, GlobalAttrs.inputmode, Literal['none', 'text', 'tel', 'email', 'url', 'numeric', 'decimal', 'search']]] = None,
        is_: Optional[Union[str, GlobalAttrs.is_]] = None,
        itemid: Optional[Union[str, GlobalAttrs.itemid]] = None,
        itemprop: Optional[Union[str, GlobalAttrs.itemprop]] = None,
        itemref: Optional[Union[str, GlobalAttrs.itemref]] = None,
        itemscope: Optional[Union[str, GlobalAttrs.itemscope, bool]] = None,
        itemtype: Optional[Union[str, GlobalAttrs.itemtype]] = None,
        lang: Optional[Union[str, GlobalAttrs.lang]] = None,
        nonce: Optional[Union[str, GlobalAttrs.nonce]] = None,
        popover: Optional[Union[str, GlobalAttrs.popover, Literal['auto', 'manual']]] = None,
        slot: Optional[Union[str, GlobalAttrs.slot]] = None,
        spellcheck: Optional[Union[str, GlobalAttrs.spellcheck, Literal['true', 'false', '']]] = None,
        style: Optional[Union[str, GlobalAttrs.style]] = None,
        tabindex: Optional[Union[str, GlobalAttrs.tabindex, int]] = None,
        title: Optional[Union[str, GlobalAttrs.title]] = None,
        translate: Optional[Union[str, GlobalAttrs.translate, Literal['yes', 'no']]] = None,
        writingsuggestions: Optional[Union[str, GlobalAttrs.writingsuggestions, Literal['true', 'false', '']]] = None,
        children: Optional[list] = None
    ) -> None:
        """
        Initialize 'cite' (Title of a work) element.  
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/cite

        :param attrs: A list or dictionary of attributes for the element
        :param id: The element's ID
        :param class_: Classes to which the element belongs
            | Set of space-separated tokens
        :param accesskey: Keyboard shortcut to activate or focus element
            | Ordered set of unique space-separated tokens, none of which are identical to another, each consisting of one code point in length
        :param autocapitalize: Recommended autocapitalization behavior (for supported input methods)
        :param autocorrect: Recommended autocorrection behavior (for supported input methods)
        :param autofocus: Automatically focus the element when the page is loaded
        :param contenteditable: Whether the element is editable
        :param dir: The text directionality of the element
        :param draggable: Whether the element is draggable
        :param enterkeyhint: Hint for selecting an enter key action
        :param hidden: Whether the element is relevant
        :param inert: Whether the element is inert.
        :param inputmode: Hint for selecting an input modality
        :param is_: Creates a customized built-in element
            | Valid custom element name of a defined customized built-in element
        :param itemid: Global identifier for a microdata item
            | Valid URL potentially surrounded by spaces
        :param itemprop: Property names of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs, defined property names, or text*
        :param itemref: Referenced elements
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param itemscope: Introduces a microdata item
        :param itemtype: Item types of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs*
        :param lang: Language of the element
            | Valid BCP 47 language tag or the empty string
        :param nonce: Cryptographic nonce used in Content Security Policy checks [CSP]
        :param popover: Makes the element a popover element
        :param slot: The element's desired slot
        :param spellcheck: Whether the element is to have its spelling and grammar checked
        :param style: Presentational and formatting instructions
            | CSS declarations*
        :param tabindex: Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation
        :param title: Advisory information for the element
        :param translate: Whether the element is to be translated when the page is localized
        :param writingsuggestions: Whether the element can offer writing suggestions or not.
        """ #fmt: skip
        super().__init__(
            "cite",
            void_element=False,
            attrs=attrs,
            children=children
        )
        if not (id is None or id is False):
            self._process_attr("id", id)
        if not (class_ is None or class_ is False):
            self._process_attr("class", class_)
        if not (accesskey is None or accesskey is False):
            self._process_attr("accesskey", accesskey)
        if not (autocapitalize is None or autocapitalize is False):
            self._process_attr("autocapitalize", autocapitalize)
        if not (autocorrect is None or autocorrect is False):
            self._process_attr("autocorrect", autocorrect)
        if not (autofocus is None or autofocus is False):
            self._process_attr("autofocus", autofocus)
        if not (contenteditable is None or contenteditable is False):
            self._process_attr("contenteditable", contenteditable)
        if not (dir is None or dir is False):
            self._process_attr("dir", dir)
        if not (draggable is None or draggable is False):
            self._process_attr("draggable", draggable)
        if not (enterkeyhint is None or enterkeyhint is False):
            self._process_attr("enterkeyhint", enterkeyhint)
        if not (hidden is None or hidden is False):
            self._process_attr("hidden", hidden)
        if not (inert is None or inert is False):
            self._process_attr("inert", inert)
        if not (inputmode is None or inputmode is False):
            self._process_attr("inputmode", inputmode)
        if not (is_ is None or is_ is False):
            self._process_attr("is", is_)
        if not (itemid is None or itemid is False):
            self._process_attr("itemid", itemid)
        if not (itemprop is None or itemprop is False):
            self._process_attr("itemprop", itemprop)
        if not (itemref is None or itemref is False):
            self._process_attr("itemref", itemref)
        if not (itemscope is None or itemscope is False):
            self._process_attr("itemscope", itemscope)
        if not (itemtype is None or itemtype is False):
            self._process_attr("itemtype", itemtype)
        if not (lang is None or lang is False):
            self._process_attr("lang", lang)
        if not (nonce is None or nonce is False):
            self._process_attr("nonce", nonce)
        if not (popover is None or popover is False):
            self._process_attr("popover", popover)
        if not (slot is None or slot is False):
            self._process_attr("slot", slot)
        if not (spellcheck is None or spellcheck is False):
            self._process_attr("spellcheck", spellcheck)
        if not (style is None or style is False):
            self._process_attr("style", style)
        if not (tabindex is None or tabindex is False):
            self._process_attr("tabindex", tabindex)
        if not (title is None or title is False):
            self._process_attr("title", title)
        if not (translate is None or translate is False):
            self._process_attr("translate", translate)
        if not (writingsuggestions is None or writingsuggestions is False):
            self._process_attr("writingsuggestions", writingsuggestions)


class code(BaseElement, GlobalAttrs):
    """
    The 'code' element.  
    Description: Computer code  
    Categories: flow phrasing palpable  
    Parents: phrasing  
    Children: phrasing  
    Interface: HTMLElement  
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/code  
    """ # fmt: skip


    def __init__(
        self,
        attrs: Optional[Union[dict[str, Union[str, dict, list]], list[BaseAttribute]]] = None,
        id: Optional[Union[str, GlobalAttrs.id]] = None,
        class_: Optional[Union[str, GlobalAttrs.class_]] = None,
        accesskey: Optional[Union[str, GlobalAttrs.accesskey]] = None,
        autocapitalize: Optional[Union[str, GlobalAttrs.autocapitalize, Literal['on', 'off', 'none', 'sentences', 'words', 'characters']]] = None,
        autocorrect: Optional[Union[str, GlobalAttrs.autocorrect, Literal['on', 'off']]] = None,
        autofocus: Optional[Union[str, GlobalAttrs.autofocus, bool]] = None,
        contenteditable: Optional[Union[str, GlobalAttrs.contenteditable, Literal['true', 'plaintext-only', 'false']]] = None,
        dir: Optional[Union[str, GlobalAttrs.dir, Literal['ltr', 'rtl', 'auto']]] = None,
        draggable: Optional[Union[str, GlobalAttrs.draggable, Literal['true', 'false']]] = None,
        enterkeyhint: Optional[Union[str, GlobalAttrs.enterkeyhint, Literal['enter', 'done', 'go', 'next', 'previous', 'search', 'send']]] = None,
        hidden: Optional[Union[str, GlobalAttrs.hidden, Literal['until-found', 'hidden', '']]] = None,
        inert: Optional[Union[str, GlobalAttrs.inert, bool]] = None,
        inputmode: Optional[Union[str, GlobalAttrs.inputmode, Literal['none', 'text', 'tel', 'email', 'url', 'numeric', 'decimal', 'search']]] = None,
        is_: Optional[Union[str, GlobalAttrs.is_]] = None,
        itemid: Optional[Union[str, GlobalAttrs.itemid]] = None,
        itemprop: Optional[Union[str, GlobalAttrs.itemprop]] = None,
        itemref: Optional[Union[str, GlobalAttrs.itemref]] = None,
        itemscope: Optional[Union[str, GlobalAttrs.itemscope, bool]] = None,
        itemtype: Optional[Union[str, GlobalAttrs.itemtype]] = None,
        lang: Optional[Union[str, GlobalAttrs.lang]] = None,
        nonce: Optional[Union[str, GlobalAttrs.nonce]] = None,
        popover: Optional[Union[str, GlobalAttrs.popover, Literal['auto', 'manual']]] = None,
        slot: Optional[Union[str, GlobalAttrs.slot]] = None,
        spellcheck: Optional[Union[str, GlobalAttrs.spellcheck, Literal['true', 'false', '']]] = None,
        style: Optional[Union[str, GlobalAttrs.style]] = None,
        tabindex: Optional[Union[str, GlobalAttrs.tabindex, int]] = None,
        title: Optional[Union[str, GlobalAttrs.title]] = None,
        translate: Optional[Union[str, GlobalAttrs.translate, Literal['yes', 'no']]] = None,
        writingsuggestions: Optional[Union[str, GlobalAttrs.writingsuggestions, Literal['true', 'false', '']]] = None,
        children: Optional[list] = None
    ) -> None:
        """
        Initialize 'code' (Computer code) element.  
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/code

        :param attrs: A list or dictionary of attributes for the element
        :param id: The element's ID
        :param class_: Classes to which the element belongs
            | Set of space-separated tokens
        :param accesskey: Keyboard shortcut to activate or focus element
            | Ordered set of unique space-separated tokens, none of which are identical to another, each consisting of one code point in length
        :param autocapitalize: Recommended autocapitalization behavior (for supported input methods)
        :param autocorrect: Recommended autocorrection behavior (for supported input methods)
        :param autofocus: Automatically focus the element when the page is loaded
        :param contenteditable: Whether the element is editable
        :param dir: The text directionality of the element
        :param draggable: Whether the element is draggable
        :param enterkeyhint: Hint for selecting an enter key action
        :param hidden: Whether the element is relevant
        :param inert: Whether the element is inert.
        :param inputmode: Hint for selecting an input modality
        :param is_: Creates a customized built-in element
            | Valid custom element name of a defined customized built-in element
        :param itemid: Global identifier for a microdata item
            | Valid URL potentially surrounded by spaces
        :param itemprop: Property names of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs, defined property names, or text*
        :param itemref: Referenced elements
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param itemscope: Introduces a microdata item
        :param itemtype: Item types of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs*
        :param lang: Language of the element
            | Valid BCP 47 language tag or the empty string
        :param nonce: Cryptographic nonce used in Content Security Policy checks [CSP]
        :param popover: Makes the element a popover element
        :param slot: The element's desired slot
        :param spellcheck: Whether the element is to have its spelling and grammar checked
        :param style: Presentational and formatting instructions
            | CSS declarations*
        :param tabindex: Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation
        :param title: Advisory information for the element
        :param translate: Whether the element is to be translated when the page is localized
        :param writingsuggestions: Whether the element can offer writing suggestions or not.
        """ #fmt: skip
        super().__init__(
            "code",
            void_element=False,
            attrs=attrs,
            children=children
        )
        if not (id is None or id is False):
            self._process_attr("id", id)
        if not (class_ is None or class_ is False):
            self._process_attr("class", class_)
        if not (accesskey is None or accesskey is False):
            self._process_attr("accesskey", accesskey)
        if not (autocapitalize is None or autocapitalize is False):
            self._process_attr("autocapitalize", autocapitalize)
        if not (autocorrect is None or autocorrect is False):
            self._process_attr("autocorrect", autocorrect)
        if not (autofocus is None or autofocus is False):
            self._process_attr("autofocus", autofocus)
        if not (contenteditable is None or contenteditable is False):
            self._process_attr("contenteditable", contenteditable)
        if not (dir is None or dir is False):
            self._process_attr("dir", dir)
        if not (draggable is None or draggable is False):
            self._process_attr("draggable", draggable)
        if not (enterkeyhint is None or enterkeyhint is False):
            self._process_attr("enterkeyhint", enterkeyhint)
        if not (hidden is None or hidden is False):
            self._process_attr("hidden", hidden)
        if not (inert is None or inert is False):
            self._process_attr("inert", inert)
        if not (inputmode is None or inputmode is False):
            self._process_attr("inputmode", inputmode)
        if not (is_ is None or is_ is False):
            self._process_attr("is", is_)
        if not (itemid is None or itemid is False):
            self._process_attr("itemid", itemid)
        if not (itemprop is None or itemprop is False):
            self._process_attr("itemprop", itemprop)
        if not (itemref is None or itemref is False):
            self._process_attr("itemref", itemref)
        if not (itemscope is None or itemscope is False):
            self._process_attr("itemscope", itemscope)
        if not (itemtype is None or itemtype is False):
            self._process_attr("itemtype", itemtype)
        if not (lang is None or lang is False):
            self._process_attr("lang", lang)
        if not (nonce is None or nonce is False):
            self._process_attr("nonce", nonce)
        if not (popover is None or popover is False):
            self._process_attr("popover", popover)
        if not (slot is None or slot is False):
            self._process_attr("slot", slot)
        if not (spellcheck is None or spellcheck is False):
            self._process_attr("spellcheck", spellcheck)
        if not (style is None or style is False):
            self._process_attr("style", style)
        if not (tabindex is None or tabindex is False):
            self._process_attr("tabindex", tabindex)
        if not (title is None or title is False):
            self._process_attr("title", title)
        if not (translate is None or translate is False):
            self._process_attr("translate", translate)
        if not (writingsuggestions is None or writingsuggestions is False):
            self._process_attr("writingsuggestions", writingsuggestions)


class col(BaseElement, GlobalAttrs, ColAttrs):
    """
    The 'col' element.  
    Description: Table column  
    Categories: none  
    Parents: colgroup  
    Children: empty  
    Interface: HTMLTableColElement  
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/col  
    """ # fmt: skip


    def __init__(
        self,
        attrs: Optional[Union[dict[str, Union[str, dict, list]], list[BaseAttribute]]] = None,
        id: Optional[Union[str, GlobalAttrs.id]] = None,
        class_: Optional[Union[str, GlobalAttrs.class_]] = None,
        span: Optional[Union[str, ColAttrs.span]] = None,
        accesskey: Optional[Union[str, GlobalAttrs.accesskey]] = None,
        autocapitalize: Optional[Union[str, GlobalAttrs.autocapitalize, Literal['on', 'off', 'none', 'sentences', 'words', 'characters']]] = None,
        autocorrect: Optional[Union[str, GlobalAttrs.autocorrect, Literal['on', 'off']]] = None,
        autofocus: Optional[Union[str, GlobalAttrs.autofocus, bool]] = None,
        contenteditable: Optional[Union[str, GlobalAttrs.contenteditable, Literal['true', 'plaintext-only', 'false']]] = None,
        dir: Optional[Union[str, GlobalAttrs.dir, Literal['ltr', 'rtl', 'auto']]] = None,
        draggable: Optional[Union[str, GlobalAttrs.draggable, Literal['true', 'false']]] = None,
        enterkeyhint: Optional[Union[str, GlobalAttrs.enterkeyhint, Literal['enter', 'done', 'go', 'next', 'previous', 'search', 'send']]] = None,
        hidden: Optional[Union[str, GlobalAttrs.hidden, Literal['until-found', 'hidden', '']]] = None,
        inert: Optional[Union[str, GlobalAttrs.inert, bool]] = None,
        inputmode: Optional[Union[str, GlobalAttrs.inputmode, Literal['none', 'text', 'tel', 'email', 'url', 'numeric', 'decimal', 'search']]] = None,
        is_: Optional[Union[str, GlobalAttrs.is_]] = None,
        itemid: Optional[Union[str, GlobalAttrs.itemid]] = None,
        itemprop: Optional[Union[str, GlobalAttrs.itemprop]] = None,
        itemref: Optional[Union[str, GlobalAttrs.itemref]] = None,
        itemscope: Optional[Union[str, GlobalAttrs.itemscope, bool]] = None,
        itemtype: Optional[Union[str, GlobalAttrs.itemtype]] = None,
        lang: Optional[Union[str, GlobalAttrs.lang]] = None,
        nonce: Optional[Union[str, GlobalAttrs.nonce]] = None,
        popover: Optional[Union[str, GlobalAttrs.popover, Literal['auto', 'manual']]] = None,
        slot: Optional[Union[str, GlobalAttrs.slot]] = None,
        spellcheck: Optional[Union[str, GlobalAttrs.spellcheck, Literal['true', 'false', '']]] = None,
        style: Optional[Union[str, GlobalAttrs.style]] = None,
        tabindex: Optional[Union[str, GlobalAttrs.tabindex, int]] = None,
        title: Optional[Union[str, GlobalAttrs.title]] = None,
        translate: Optional[Union[str, GlobalAttrs.translate, Literal['yes', 'no']]] = None,
        writingsuggestions: Optional[Union[str, GlobalAttrs.writingsuggestions, Literal['true', 'false', '']]] = None,
        children: Optional[list] = None
    ) -> None:
        """
        Initialize 'col' (Table column) element.  
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/col

        :param attrs: A list or dictionary of attributes for the element
        :param id: The element's ID
        :param class_: Classes to which the element belongs
            | Set of space-separated tokens
        :param span: Number of columns spanned by the element
            | Valid non-negative integer greater than zero
        :param accesskey: Keyboard shortcut to activate or focus element
            | Ordered set of unique space-separated tokens, none of which are identical to another, each consisting of one code point in length
        :param autocapitalize: Recommended autocapitalization behavior (for supported input methods)
        :param autocorrect: Recommended autocorrection behavior (for supported input methods)
        :param autofocus: Automatically focus the element when the page is loaded
        :param contenteditable: Whether the element is editable
        :param dir: The text directionality of the element
        :param draggable: Whether the element is draggable
        :param enterkeyhint: Hint for selecting an enter key action
        :param hidden: Whether the element is relevant
        :param inert: Whether the element is inert.
        :param inputmode: Hint for selecting an input modality
        :param is_: Creates a customized built-in element
            | Valid custom element name of a defined customized built-in element
        :param itemid: Global identifier for a microdata item
            | Valid URL potentially surrounded by spaces
        :param itemprop: Property names of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs, defined property names, or text*
        :param itemref: Referenced elements
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param itemscope: Introduces a microdata item
        :param itemtype: Item types of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs*
        :param lang: Language of the element
            | Valid BCP 47 language tag or the empty string
        :param nonce: Cryptographic nonce used in Content Security Policy checks [CSP]
        :param popover: Makes the element a popover element
        :param slot: The element's desired slot
        :param spellcheck: Whether the element is to have its spelling and grammar checked
        :param style: Presentational and formatting instructions
            | CSS declarations*
        :param tabindex: Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation
        :param title: Advisory information for the element
        :param translate: Whether the element is to be translated when the page is localized
        :param writingsuggestions: Whether the element can offer writing suggestions or not.
        """ #fmt: skip
        super().__init__(
            "col",
            void_element=True,
            attrs=attrs,
            children=children
        )
        if not (id is None or id is False):
            self._process_attr("id", id)
        if not (class_ is None or class_ is False):
            self._process_attr("class", class_)
        if not (span is None or span is False):
            self._process_attr("span", span)
        if not (accesskey is None or accesskey is False):
            self._process_attr("accesskey", accesskey)
        if not (autocapitalize is None or autocapitalize is False):
            self._process_attr("autocapitalize", autocapitalize)
        if not (autocorrect is None or autocorrect is False):
            self._process_attr("autocorrect", autocorrect)
        if not (autofocus is None or autofocus is False):
            self._process_attr("autofocus", autofocus)
        if not (contenteditable is None or contenteditable is False):
            self._process_attr("contenteditable", contenteditable)
        if not (dir is None or dir is False):
            self._process_attr("dir", dir)
        if not (draggable is None or draggable is False):
            self._process_attr("draggable", draggable)
        if not (enterkeyhint is None or enterkeyhint is False):
            self._process_attr("enterkeyhint", enterkeyhint)
        if not (hidden is None or hidden is False):
            self._process_attr("hidden", hidden)
        if not (inert is None or inert is False):
            self._process_attr("inert", inert)
        if not (inputmode is None or inputmode is False):
            self._process_attr("inputmode", inputmode)
        if not (is_ is None or is_ is False):
            self._process_attr("is", is_)
        if not (itemid is None or itemid is False):
            self._process_attr("itemid", itemid)
        if not (itemprop is None or itemprop is False):
            self._process_attr("itemprop", itemprop)
        if not (itemref is None or itemref is False):
            self._process_attr("itemref", itemref)
        if not (itemscope is None or itemscope is False):
            self._process_attr("itemscope", itemscope)
        if not (itemtype is None or itemtype is False):
            self._process_attr("itemtype", itemtype)
        if not (lang is None or lang is False):
            self._process_attr("lang", lang)
        if not (nonce is None or nonce is False):
            self._process_attr("nonce", nonce)
        if not (popover is None or popover is False):
            self._process_attr("popover", popover)
        if not (slot is None or slot is False):
            self._process_attr("slot", slot)
        if not (spellcheck is None or spellcheck is False):
            self._process_attr("spellcheck", spellcheck)
        if not (style is None or style is False):
            self._process_attr("style", style)
        if not (tabindex is None or tabindex is False):
            self._process_attr("tabindex", tabindex)
        if not (title is None or title is False):
            self._process_attr("title", title)
        if not (translate is None or translate is False):
            self._process_attr("translate", translate)
        if not (writingsuggestions is None or writingsuggestions is False):
            self._process_attr("writingsuggestions", writingsuggestions)


class colgroup(BaseElement, GlobalAttrs, ColgroupAttrs):
    """
    The 'colgroup' element.  
    Description: Group of columns in a table  
    Categories: none  
    Parents: table  
    Children: col* template*  
    Interface: HTMLTableColElement  
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/colgroup  
    """ # fmt: skip


    def __init__(
        self,
        attrs: Optional[Union[dict[str, Union[str, dict, list]], list[BaseAttribute]]] = None,
        id: Optional[Union[str, GlobalAttrs.id]] = None,
        class_: Optional[Union[str, GlobalAttrs.class_]] = None,
        span: Optional[Union[str, ColgroupAttrs.span]] = None,
        accesskey: Optional[Union[str, GlobalAttrs.accesskey]] = None,
        autocapitalize: Optional[Union[str, GlobalAttrs.autocapitalize, Literal['on', 'off', 'none', 'sentences', 'words', 'characters']]] = None,
        autocorrect: Optional[Union[str, GlobalAttrs.autocorrect, Literal['on', 'off']]] = None,
        autofocus: Optional[Union[str, GlobalAttrs.autofocus, bool]] = None,
        contenteditable: Optional[Union[str, GlobalAttrs.contenteditable, Literal['true', 'plaintext-only', 'false']]] = None,
        dir: Optional[Union[str, GlobalAttrs.dir, Literal['ltr', 'rtl', 'auto']]] = None,
        draggable: Optional[Union[str, GlobalAttrs.draggable, Literal['true', 'false']]] = None,
        enterkeyhint: Optional[Union[str, GlobalAttrs.enterkeyhint, Literal['enter', 'done', 'go', 'next', 'previous', 'search', 'send']]] = None,
        hidden: Optional[Union[str, GlobalAttrs.hidden, Literal['until-found', 'hidden', '']]] = None,
        inert: Optional[Union[str, GlobalAttrs.inert, bool]] = None,
        inputmode: Optional[Union[str, GlobalAttrs.inputmode, Literal['none', 'text', 'tel', 'email', 'url', 'numeric', 'decimal', 'search']]] = None,
        is_: Optional[Union[str, GlobalAttrs.is_]] = None,
        itemid: Optional[Union[str, GlobalAttrs.itemid]] = None,
        itemprop: Optional[Union[str, GlobalAttrs.itemprop]] = None,
        itemref: Optional[Union[str, GlobalAttrs.itemref]] = None,
        itemscope: Optional[Union[str, GlobalAttrs.itemscope, bool]] = None,
        itemtype: Optional[Union[str, GlobalAttrs.itemtype]] = None,
        lang: Optional[Union[str, GlobalAttrs.lang]] = None,
        nonce: Optional[Union[str, GlobalAttrs.nonce]] = None,
        popover: Optional[Union[str, GlobalAttrs.popover, Literal['auto', 'manual']]] = None,
        slot: Optional[Union[str, GlobalAttrs.slot]] = None,
        spellcheck: Optional[Union[str, GlobalAttrs.spellcheck, Literal['true', 'false', '']]] = None,
        style: Optional[Union[str, GlobalAttrs.style]] = None,
        tabindex: Optional[Union[str, GlobalAttrs.tabindex, int]] = None,
        title: Optional[Union[str, GlobalAttrs.title]] = None,
        translate: Optional[Union[str, GlobalAttrs.translate, Literal['yes', 'no']]] = None,
        writingsuggestions: Optional[Union[str, GlobalAttrs.writingsuggestions, Literal['true', 'false', '']]] = None,
        children: Optional[list] = None
    ) -> None:
        """
        Initialize 'colgroup' (Group of columns in a table) element.  
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/colgroup

        :param attrs: A list or dictionary of attributes for the element
        :param id: The element's ID
        :param class_: Classes to which the element belongs
            | Set of space-separated tokens
        :param span: Number of columns spanned by the element
            | Valid non-negative integer greater than zero
        :param accesskey: Keyboard shortcut to activate or focus element
            | Ordered set of unique space-separated tokens, none of which are identical to another, each consisting of one code point in length
        :param autocapitalize: Recommended autocapitalization behavior (for supported input methods)
        :param autocorrect: Recommended autocorrection behavior (for supported input methods)
        :param autofocus: Automatically focus the element when the page is loaded
        :param contenteditable: Whether the element is editable
        :param dir: The text directionality of the element
        :param draggable: Whether the element is draggable
        :param enterkeyhint: Hint for selecting an enter key action
        :param hidden: Whether the element is relevant
        :param inert: Whether the element is inert.
        :param inputmode: Hint for selecting an input modality
        :param is_: Creates a customized built-in element
            | Valid custom element name of a defined customized built-in element
        :param itemid: Global identifier for a microdata item
            | Valid URL potentially surrounded by spaces
        :param itemprop: Property names of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs, defined property names, or text*
        :param itemref: Referenced elements
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param itemscope: Introduces a microdata item
        :param itemtype: Item types of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs*
        :param lang: Language of the element
            | Valid BCP 47 language tag or the empty string
        :param nonce: Cryptographic nonce used in Content Security Policy checks [CSP]
        :param popover: Makes the element a popover element
        :param slot: The element's desired slot
        :param spellcheck: Whether the element is to have its spelling and grammar checked
        :param style: Presentational and formatting instructions
            | CSS declarations*
        :param tabindex: Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation
        :param title: Advisory information for the element
        :param translate: Whether the element is to be translated when the page is localized
        :param writingsuggestions: Whether the element can offer writing suggestions or not.
        """ #fmt: skip
        super().__init__(
            "colgroup",
            void_element=False,
            attrs=attrs,
            children=children
        )
        if not (id is None or id is False):
            self._process_attr("id", id)
        if not (class_ is None or class_ is False):
            self._process_attr("class", class_)
        if not (span is None or span is False):
            self._process_attr("span", span)
        if not (accesskey is None or accesskey is False):
            self._process_attr("accesskey", accesskey)
        if not (autocapitalize is None or autocapitalize is False):
            self._process_attr("autocapitalize", autocapitalize)
        if not (autocorrect is None or autocorrect is False):
            self._process_attr("autocorrect", autocorrect)
        if not (autofocus is None or autofocus is False):
            self._process_attr("autofocus", autofocus)
        if not (contenteditable is None or contenteditable is False):
            self._process_attr("contenteditable", contenteditable)
        if not (dir is None or dir is False):
            self._process_attr("dir", dir)
        if not (draggable is None or draggable is False):
            self._process_attr("draggable", draggable)
        if not (enterkeyhint is None or enterkeyhint is False):
            self._process_attr("enterkeyhint", enterkeyhint)
        if not (hidden is None or hidden is False):
            self._process_attr("hidden", hidden)
        if not (inert is None or inert is False):
            self._process_attr("inert", inert)
        if not (inputmode is None or inputmode is False):
            self._process_attr("inputmode", inputmode)
        if not (is_ is None or is_ is False):
            self._process_attr("is", is_)
        if not (itemid is None or itemid is False):
            self._process_attr("itemid", itemid)
        if not (itemprop is None or itemprop is False):
            self._process_attr("itemprop", itemprop)
        if not (itemref is None or itemref is False):
            self._process_attr("itemref", itemref)
        if not (itemscope is None or itemscope is False):
            self._process_attr("itemscope", itemscope)
        if not (itemtype is None or itemtype is False):
            self._process_attr("itemtype", itemtype)
        if not (lang is None or lang is False):
            self._process_attr("lang", lang)
        if not (nonce is None or nonce is False):
            self._process_attr("nonce", nonce)
        if not (popover is None or popover is False):
            self._process_attr("popover", popover)
        if not (slot is None or slot is False):
            self._process_attr("slot", slot)
        if not (spellcheck is None or spellcheck is False):
            self._process_attr("spellcheck", spellcheck)
        if not (style is None or style is False):
            self._process_attr("style", style)
        if not (tabindex is None or tabindex is False):
            self._process_attr("tabindex", tabindex)
        if not (title is None or title is False):
            self._process_attr("title", title)
        if not (translate is None or translate is False):
            self._process_attr("translate", translate)
        if not (writingsuggestions is None or writingsuggestions is False):
            self._process_attr("writingsuggestions", writingsuggestions)


class data(BaseElement, GlobalAttrs, DataAttrs):
    """
    The 'data' element.  
    Description: Machine-readable equivalent  
    Categories: flow phrasing palpable  
    Parents: phrasing  
    Children: phrasing  
    Interface: HTMLDataElement  
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/data  
    """ # fmt: skip


    def __init__(
        self,
        attrs: Optional[Union[dict[str, Union[str, dict, list]], list[BaseAttribute]]] = None,
        id: Optional[Union[str, GlobalAttrs.id]] = None,
        class_: Optional[Union[str, GlobalAttrs.class_]] = None,
        value: Optional[Union[str, DataAttrs.value]] = None,
        accesskey: Optional[Union[str, GlobalAttrs.accesskey]] = None,
        autocapitalize: Optional[Union[str, GlobalAttrs.autocapitalize, Literal['on', 'off', 'none', 'sentences', 'words', 'characters']]] = None,
        autocorrect: Optional[Union[str, GlobalAttrs.autocorrect, Literal['on', 'off']]] = None,
        autofocus: Optional[Union[str, GlobalAttrs.autofocus, bool]] = None,
        contenteditable: Optional[Union[str, GlobalAttrs.contenteditable, Literal['true', 'plaintext-only', 'false']]] = None,
        dir: Optional[Union[str, GlobalAttrs.dir, Literal['ltr', 'rtl', 'auto']]] = None,
        draggable: Optional[Union[str, GlobalAttrs.draggable, Literal['true', 'false']]] = None,
        enterkeyhint: Optional[Union[str, GlobalAttrs.enterkeyhint, Literal['enter', 'done', 'go', 'next', 'previous', 'search', 'send']]] = None,
        hidden: Optional[Union[str, GlobalAttrs.hidden, Literal['until-found', 'hidden', '']]] = None,
        inert: Optional[Union[str, GlobalAttrs.inert, bool]] = None,
        inputmode: Optional[Union[str, GlobalAttrs.inputmode, Literal['none', 'text', 'tel', 'email', 'url', 'numeric', 'decimal', 'search']]] = None,
        is_: Optional[Union[str, GlobalAttrs.is_]] = None,
        itemid: Optional[Union[str, GlobalAttrs.itemid]] = None,
        itemprop: Optional[Union[str, GlobalAttrs.itemprop]] = None,
        itemref: Optional[Union[str, GlobalAttrs.itemref]] = None,
        itemscope: Optional[Union[str, GlobalAttrs.itemscope, bool]] = None,
        itemtype: Optional[Union[str, GlobalAttrs.itemtype]] = None,
        lang: Optional[Union[str, GlobalAttrs.lang]] = None,
        nonce: Optional[Union[str, GlobalAttrs.nonce]] = None,
        popover: Optional[Union[str, GlobalAttrs.popover, Literal['auto', 'manual']]] = None,
        slot: Optional[Union[str, GlobalAttrs.slot]] = None,
        spellcheck: Optional[Union[str, GlobalAttrs.spellcheck, Literal['true', 'false', '']]] = None,
        style: Optional[Union[str, GlobalAttrs.style]] = None,
        tabindex: Optional[Union[str, GlobalAttrs.tabindex, int]] = None,
        title: Optional[Union[str, GlobalAttrs.title]] = None,
        translate: Optional[Union[str, GlobalAttrs.translate, Literal['yes', 'no']]] = None,
        writingsuggestions: Optional[Union[str, GlobalAttrs.writingsuggestions, Literal['true', 'false', '']]] = None,
        children: Optional[list] = None
    ) -> None:
        """
        Initialize 'data' (Machine-readable equivalent) element.  
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/data

        :param attrs: A list or dictionary of attributes for the element
        :param id: The element's ID
        :param class_: Classes to which the element belongs
            | Set of space-separated tokens
        :param value: Machine-readable value
        :param accesskey: Keyboard shortcut to activate or focus element
            | Ordered set of unique space-separated tokens, none of which are identical to another, each consisting of one code point in length
        :param autocapitalize: Recommended autocapitalization behavior (for supported input methods)
        :param autocorrect: Recommended autocorrection behavior (for supported input methods)
        :param autofocus: Automatically focus the element when the page is loaded
        :param contenteditable: Whether the element is editable
        :param dir: The text directionality of the element
        :param draggable: Whether the element is draggable
        :param enterkeyhint: Hint for selecting an enter key action
        :param hidden: Whether the element is relevant
        :param inert: Whether the element is inert.
        :param inputmode: Hint for selecting an input modality
        :param is_: Creates a customized built-in element
            | Valid custom element name of a defined customized built-in element
        :param itemid: Global identifier for a microdata item
            | Valid URL potentially surrounded by spaces
        :param itemprop: Property names of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs, defined property names, or text*
        :param itemref: Referenced elements
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param itemscope: Introduces a microdata item
        :param itemtype: Item types of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs*
        :param lang: Language of the element
            | Valid BCP 47 language tag or the empty string
        :param nonce: Cryptographic nonce used in Content Security Policy checks [CSP]
        :param popover: Makes the element a popover element
        :param slot: The element's desired slot
        :param spellcheck: Whether the element is to have its spelling and grammar checked
        :param style: Presentational and formatting instructions
            | CSS declarations*
        :param tabindex: Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation
        :param title: Advisory information for the element
        :param translate: Whether the element is to be translated when the page is localized
        :param writingsuggestions: Whether the element can offer writing suggestions or not.
        """ #fmt: skip
        super().__init__(
            "data",
            void_element=False,
            attrs=attrs,
            children=children
        )
        if not (id is None or id is False):
            self._process_attr("id", id)
        if not (class_ is None or class_ is False):
            self._process_attr("class", class_)
        if not (value is None or value is False):
            self._process_attr("value", value)
        if not (accesskey is None or accesskey is False):
            self._process_attr("accesskey", accesskey)
        if not (autocapitalize is None or autocapitalize is False):
            self._process_attr("autocapitalize", autocapitalize)
        if not (autocorrect is None or autocorrect is False):
            self._process_attr("autocorrect", autocorrect)
        if not (autofocus is None or autofocus is False):
            self._process_attr("autofocus", autofocus)
        if not (contenteditable is None or contenteditable is False):
            self._process_attr("contenteditable", contenteditable)
        if not (dir is None or dir is False):
            self._process_attr("dir", dir)
        if not (draggable is None or draggable is False):
            self._process_attr("draggable", draggable)
        if not (enterkeyhint is None or enterkeyhint is False):
            self._process_attr("enterkeyhint", enterkeyhint)
        if not (hidden is None or hidden is False):
            self._process_attr("hidden", hidden)
        if not (inert is None or inert is False):
            self._process_attr("inert", inert)
        if not (inputmode is None or inputmode is False):
            self._process_attr("inputmode", inputmode)
        if not (is_ is None or is_ is False):
            self._process_attr("is", is_)
        if not (itemid is None or itemid is False):
            self._process_attr("itemid", itemid)
        if not (itemprop is None or itemprop is False):
            self._process_attr("itemprop", itemprop)
        if not (itemref is None or itemref is False):
            self._process_attr("itemref", itemref)
        if not (itemscope is None or itemscope is False):
            self._process_attr("itemscope", itemscope)
        if not (itemtype is None or itemtype is False):
            self._process_attr("itemtype", itemtype)
        if not (lang is None or lang is False):
            self._process_attr("lang", lang)
        if not (nonce is None or nonce is False):
            self._process_attr("nonce", nonce)
        if not (popover is None or popover is False):
            self._process_attr("popover", popover)
        if not (slot is None or slot is False):
            self._process_attr("slot", slot)
        if not (spellcheck is None or spellcheck is False):
            self._process_attr("spellcheck", spellcheck)
        if not (style is None or style is False):
            self._process_attr("style", style)
        if not (tabindex is None or tabindex is False):
            self._process_attr("tabindex", tabindex)
        if not (title is None or title is False):
            self._process_attr("title", title)
        if not (translate is None or translate is False):
            self._process_attr("translate", translate)
        if not (writingsuggestions is None or writingsuggestions is False):
            self._process_attr("writingsuggestions", writingsuggestions)


class datalist(BaseElement, GlobalAttrs):
    """
    The 'datalist' element.  
    Description: Container for options for combo box control  
    Categories: flow phrasing  
    Parents: phrasing  
    Children: phrasing* option* script-supporting elements*  
    Interface: HTMLDataListElement  
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/datalist  
    """ # fmt: skip


    def __init__(
        self,
        attrs: Optional[Union[dict[str, Union[str, dict, list]], list[BaseAttribute]]] = None,
        id: Optional[Union[str, GlobalAttrs.id]] = None,
        class_: Optional[Union[str, GlobalAttrs.class_]] = None,
        accesskey: Optional[Union[str, GlobalAttrs.accesskey]] = None,
        autocapitalize: Optional[Union[str, GlobalAttrs.autocapitalize, Literal['on', 'off', 'none', 'sentences', 'words', 'characters']]] = None,
        autocorrect: Optional[Union[str, GlobalAttrs.autocorrect, Literal['on', 'off']]] = None,
        autofocus: Optional[Union[str, GlobalAttrs.autofocus, bool]] = None,
        contenteditable: Optional[Union[str, GlobalAttrs.contenteditable, Literal['true', 'plaintext-only', 'false']]] = None,
        dir: Optional[Union[str, GlobalAttrs.dir, Literal['ltr', 'rtl', 'auto']]] = None,
        draggable: Optional[Union[str, GlobalAttrs.draggable, Literal['true', 'false']]] = None,
        enterkeyhint: Optional[Union[str, GlobalAttrs.enterkeyhint, Literal['enter', 'done', 'go', 'next', 'previous', 'search', 'send']]] = None,
        hidden: Optional[Union[str, GlobalAttrs.hidden, Literal['until-found', 'hidden', '']]] = None,
        inert: Optional[Union[str, GlobalAttrs.inert, bool]] = None,
        inputmode: Optional[Union[str, GlobalAttrs.inputmode, Literal['none', 'text', 'tel', 'email', 'url', 'numeric', 'decimal', 'search']]] = None,
        is_: Optional[Union[str, GlobalAttrs.is_]] = None,
        itemid: Optional[Union[str, GlobalAttrs.itemid]] = None,
        itemprop: Optional[Union[str, GlobalAttrs.itemprop]] = None,
        itemref: Optional[Union[str, GlobalAttrs.itemref]] = None,
        itemscope: Optional[Union[str, GlobalAttrs.itemscope, bool]] = None,
        itemtype: Optional[Union[str, GlobalAttrs.itemtype]] = None,
        lang: Optional[Union[str, GlobalAttrs.lang]] = None,
        nonce: Optional[Union[str, GlobalAttrs.nonce]] = None,
        popover: Optional[Union[str, GlobalAttrs.popover, Literal['auto', 'manual']]] = None,
        slot: Optional[Union[str, GlobalAttrs.slot]] = None,
        spellcheck: Optional[Union[str, GlobalAttrs.spellcheck, Literal['true', 'false', '']]] = None,
        style: Optional[Union[str, GlobalAttrs.style]] = None,
        tabindex: Optional[Union[str, GlobalAttrs.tabindex, int]] = None,
        title: Optional[Union[str, GlobalAttrs.title]] = None,
        translate: Optional[Union[str, GlobalAttrs.translate, Literal['yes', 'no']]] = None,
        writingsuggestions: Optional[Union[str, GlobalAttrs.writingsuggestions, Literal['true', 'false', '']]] = None,
        children: Optional[list] = None
    ) -> None:
        """
        Initialize 'datalist' (Container for options for combo box control) element.  
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/datalist

        :param attrs: A list or dictionary of attributes for the element
        :param id: The element's ID
        :param class_: Classes to which the element belongs
            | Set of space-separated tokens
        :param accesskey: Keyboard shortcut to activate or focus element
            | Ordered set of unique space-separated tokens, none of which are identical to another, each consisting of one code point in length
        :param autocapitalize: Recommended autocapitalization behavior (for supported input methods)
        :param autocorrect: Recommended autocorrection behavior (for supported input methods)
        :param autofocus: Automatically focus the element when the page is loaded
        :param contenteditable: Whether the element is editable
        :param dir: The text directionality of the element
        :param draggable: Whether the element is draggable
        :param enterkeyhint: Hint for selecting an enter key action
        :param hidden: Whether the element is relevant
        :param inert: Whether the element is inert.
        :param inputmode: Hint for selecting an input modality
        :param is_: Creates a customized built-in element
            | Valid custom element name of a defined customized built-in element
        :param itemid: Global identifier for a microdata item
            | Valid URL potentially surrounded by spaces
        :param itemprop: Property names of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs, defined property names, or text*
        :param itemref: Referenced elements
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param itemscope: Introduces a microdata item
        :param itemtype: Item types of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs*
        :param lang: Language of the element
            | Valid BCP 47 language tag or the empty string
        :param nonce: Cryptographic nonce used in Content Security Policy checks [CSP]
        :param popover: Makes the element a popover element
        :param slot: The element's desired slot
        :param spellcheck: Whether the element is to have its spelling and grammar checked
        :param style: Presentational and formatting instructions
            | CSS declarations*
        :param tabindex: Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation
        :param title: Advisory information for the element
        :param translate: Whether the element is to be translated when the page is localized
        :param writingsuggestions: Whether the element can offer writing suggestions or not.
        """ #fmt: skip
        super().__init__(
            "datalist",
            void_element=False,
            attrs=attrs,
            children=children
        )
        if not (id is None or id is False):
            self._process_attr("id", id)
        if not (class_ is None or class_ is False):
            self._process_attr("class", class_)
        if not (accesskey is None or accesskey is False):
            self._process_attr("accesskey", accesskey)
        if not (autocapitalize is None or autocapitalize is False):
            self._process_attr("autocapitalize", autocapitalize)
        if not (autocorrect is None or autocorrect is False):
            self._process_attr("autocorrect", autocorrect)
        if not (autofocus is None or autofocus is False):
            self._process_attr("autofocus", autofocus)
        if not (contenteditable is None or contenteditable is False):
            self._process_attr("contenteditable", contenteditable)
        if not (dir is None or dir is False):
            self._process_attr("dir", dir)
        if not (draggable is None or draggable is False):
            self._process_attr("draggable", draggable)
        if not (enterkeyhint is None or enterkeyhint is False):
            self._process_attr("enterkeyhint", enterkeyhint)
        if not (hidden is None or hidden is False):
            self._process_attr("hidden", hidden)
        if not (inert is None or inert is False):
            self._process_attr("inert", inert)
        if not (inputmode is None or inputmode is False):
            self._process_attr("inputmode", inputmode)
        if not (is_ is None or is_ is False):
            self._process_attr("is", is_)
        if not (itemid is None or itemid is False):
            self._process_attr("itemid", itemid)
        if not (itemprop is None or itemprop is False):
            self._process_attr("itemprop", itemprop)
        if not (itemref is None or itemref is False):
            self._process_attr("itemref", itemref)
        if not (itemscope is None or itemscope is False):
            self._process_attr("itemscope", itemscope)
        if not (itemtype is None or itemtype is False):
            self._process_attr("itemtype", itemtype)
        if not (lang is None or lang is False):
            self._process_attr("lang", lang)
        if not (nonce is None or nonce is False):
            self._process_attr("nonce", nonce)
        if not (popover is None or popover is False):
            self._process_attr("popover", popover)
        if not (slot is None or slot is False):
            self._process_attr("slot", slot)
        if not (spellcheck is None or spellcheck is False):
            self._process_attr("spellcheck", spellcheck)
        if not (style is None or style is False):
            self._process_attr("style", style)
        if not (tabindex is None or tabindex is False):
            self._process_attr("tabindex", tabindex)
        if not (title is None or title is False):
            self._process_attr("title", title)
        if not (translate is None or translate is False):
            self._process_attr("translate", translate)
        if not (writingsuggestions is None or writingsuggestions is False):
            self._process_attr("writingsuggestions", writingsuggestions)


class dd(BaseElement, GlobalAttrs):
    """
    The 'dd' element.  
    Description: Content for corresponding dt element(s)  
    Categories: none  
    Parents: dl div*  
    Children: flow  
    Interface: HTMLElement  
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dd  
    """ # fmt: skip


    def __init__(
        self,
        attrs: Optional[Union[dict[str, Union[str, dict, list]], list[BaseAttribute]]] = None,
        id: Optional[Union[str, GlobalAttrs.id]] = None,
        class_: Optional[Union[str, GlobalAttrs.class_]] = None,
        accesskey: Optional[Union[str, GlobalAttrs.accesskey]] = None,
        autocapitalize: Optional[Union[str, GlobalAttrs.autocapitalize, Literal['on', 'off', 'none', 'sentences', 'words', 'characters']]] = None,
        autocorrect: Optional[Union[str, GlobalAttrs.autocorrect, Literal['on', 'off']]] = None,
        autofocus: Optional[Union[str, GlobalAttrs.autofocus, bool]] = None,
        contenteditable: Optional[Union[str, GlobalAttrs.contenteditable, Literal['true', 'plaintext-only', 'false']]] = None,
        dir: Optional[Union[str, GlobalAttrs.dir, Literal['ltr', 'rtl', 'auto']]] = None,
        draggable: Optional[Union[str, GlobalAttrs.draggable, Literal['true', 'false']]] = None,
        enterkeyhint: Optional[Union[str, GlobalAttrs.enterkeyhint, Literal['enter', 'done', 'go', 'next', 'previous', 'search', 'send']]] = None,
        hidden: Optional[Union[str, GlobalAttrs.hidden, Literal['until-found', 'hidden', '']]] = None,
        inert: Optional[Union[str, GlobalAttrs.inert, bool]] = None,
        inputmode: Optional[Union[str, GlobalAttrs.inputmode, Literal['none', 'text', 'tel', 'email', 'url', 'numeric', 'decimal', 'search']]] = None,
        is_: Optional[Union[str, GlobalAttrs.is_]] = None,
        itemid: Optional[Union[str, GlobalAttrs.itemid]] = None,
        itemprop: Optional[Union[str, GlobalAttrs.itemprop]] = None,
        itemref: Optional[Union[str, GlobalAttrs.itemref]] = None,
        itemscope: Optional[Union[str, GlobalAttrs.itemscope, bool]] = None,
        itemtype: Optional[Union[str, GlobalAttrs.itemtype]] = None,
        lang: Optional[Union[str, GlobalAttrs.lang]] = None,
        nonce: Optional[Union[str, GlobalAttrs.nonce]] = None,
        popover: Optional[Union[str, GlobalAttrs.popover, Literal['auto', 'manual']]] = None,
        slot: Optional[Union[str, GlobalAttrs.slot]] = None,
        spellcheck: Optional[Union[str, GlobalAttrs.spellcheck, Literal['true', 'false', '']]] = None,
        style: Optional[Union[str, GlobalAttrs.style]] = None,
        tabindex: Optional[Union[str, GlobalAttrs.tabindex, int]] = None,
        title: Optional[Union[str, GlobalAttrs.title]] = None,
        translate: Optional[Union[str, GlobalAttrs.translate, Literal['yes', 'no']]] = None,
        writingsuggestions: Optional[Union[str, GlobalAttrs.writingsuggestions, Literal['true', 'false', '']]] = None,
        children: Optional[list] = None
    ) -> None:
        """
        Initialize 'dd' (Content for corresponding dt element(s)) element.  
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dd

        :param attrs: A list or dictionary of attributes for the element
        :param id: The element's ID
        :param class_: Classes to which the element belongs
            | Set of space-separated tokens
        :param accesskey: Keyboard shortcut to activate or focus element
            | Ordered set of unique space-separated tokens, none of which are identical to another, each consisting of one code point in length
        :param autocapitalize: Recommended autocapitalization behavior (for supported input methods)
        :param autocorrect: Recommended autocorrection behavior (for supported input methods)
        :param autofocus: Automatically focus the element when the page is loaded
        :param contenteditable: Whether the element is editable
        :param dir: The text directionality of the element
        :param draggable: Whether the element is draggable
        :param enterkeyhint: Hint for selecting an enter key action
        :param hidden: Whether the element is relevant
        :param inert: Whether the element is inert.
        :param inputmode: Hint for selecting an input modality
        :param is_: Creates a customized built-in element
            | Valid custom element name of a defined customized built-in element
        :param itemid: Global identifier for a microdata item
            | Valid URL potentially surrounded by spaces
        :param itemprop: Property names of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs, defined property names, or text*
        :param itemref: Referenced elements
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param itemscope: Introduces a microdata item
        :param itemtype: Item types of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs*
        :param lang: Language of the element
            | Valid BCP 47 language tag or the empty string
        :param nonce: Cryptographic nonce used in Content Security Policy checks [CSP]
        :param popover: Makes the element a popover element
        :param slot: The element's desired slot
        :param spellcheck: Whether the element is to have its spelling and grammar checked
        :param style: Presentational and formatting instructions
            | CSS declarations*
        :param tabindex: Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation
        :param title: Advisory information for the element
        :param translate: Whether the element is to be translated when the page is localized
        :param writingsuggestions: Whether the element can offer writing suggestions or not.
        """ #fmt: skip
        super().__init__(
            "dd",
            void_element=False,
            attrs=attrs,
            children=children
        )
        if not (id is None or id is False):
            self._process_attr("id", id)
        if not (class_ is None or class_ is False):
            self._process_attr("class", class_)
        if not (accesskey is None or accesskey is False):
            self._process_attr("accesskey", accesskey)
        if not (autocapitalize is None or autocapitalize is False):
            self._process_attr("autocapitalize", autocapitalize)
        if not (autocorrect is None or autocorrect is False):
            self._process_attr("autocorrect", autocorrect)
        if not (autofocus is None or autofocus is False):
            self._process_attr("autofocus", autofocus)
        if not (contenteditable is None or contenteditable is False):
            self._process_attr("contenteditable", contenteditable)
        if not (dir is None or dir is False):
            self._process_attr("dir", dir)
        if not (draggable is None or draggable is False):
            self._process_attr("draggable", draggable)
        if not (enterkeyhint is None or enterkeyhint is False):
            self._process_attr("enterkeyhint", enterkeyhint)
        if not (hidden is None or hidden is False):
            self._process_attr("hidden", hidden)
        if not (inert is None or inert is False):
            self._process_attr("inert", inert)
        if not (inputmode is None or inputmode is False):
            self._process_attr("inputmode", inputmode)
        if not (is_ is None or is_ is False):
            self._process_attr("is", is_)
        if not (itemid is None or itemid is False):
            self._process_attr("itemid", itemid)
        if not (itemprop is None or itemprop is False):
            self._process_attr("itemprop", itemprop)
        if not (itemref is None or itemref is False):
            self._process_attr("itemref", itemref)
        if not (itemscope is None or itemscope is False):
            self._process_attr("itemscope", itemscope)
        if not (itemtype is None or itemtype is False):
            self._process_attr("itemtype", itemtype)
        if not (lang is None or lang is False):
            self._process_attr("lang", lang)
        if not (nonce is None or nonce is False):
            self._process_attr("nonce", nonce)
        if not (popover is None or popover is False):
            self._process_attr("popover", popover)
        if not (slot is None or slot is False):
            self._process_attr("slot", slot)
        if not (spellcheck is None or spellcheck is False):
            self._process_attr("spellcheck", spellcheck)
        if not (style is None or style is False):
            self._process_attr("style", style)
        if not (tabindex is None or tabindex is False):
            self._process_attr("tabindex", tabindex)
        if not (title is None or title is False):
            self._process_attr("title", title)
        if not (translate is None or translate is False):
            self._process_attr("translate", translate)
        if not (writingsuggestions is None or writingsuggestions is False):
            self._process_attr("writingsuggestions", writingsuggestions)


class del_(BaseElement, GlobalAttrs, DelAttrs):
    """
    The 'del' element.  
    Description: A removal from the document  
    Categories: flow phrasing* palpable  
    Parents: phrasing  
    Children: transparent  
    Interface: HTMLModElement  
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/del  
    """ # fmt: skip


    def __init__(
        self,
        attrs: Optional[Union[dict[str, Union[str, dict, list]], list[BaseAttribute]]] = None,
        id: Optional[Union[str, GlobalAttrs.id]] = None,
        class_: Optional[Union[str, GlobalAttrs.class_]] = None,
        cite: Optional[Union[str, DelAttrs.cite]] = None,
        datetime: Optional[Union[str, DelAttrs.datetime]] = None,
        accesskey: Optional[Union[str, GlobalAttrs.accesskey]] = None,
        autocapitalize: Optional[Union[str, GlobalAttrs.autocapitalize, Literal['on', 'off', 'none', 'sentences', 'words', 'characters']]] = None,
        autocorrect: Optional[Union[str, GlobalAttrs.autocorrect, Literal['on', 'off']]] = None,
        autofocus: Optional[Union[str, GlobalAttrs.autofocus, bool]] = None,
        contenteditable: Optional[Union[str, GlobalAttrs.contenteditable, Literal['true', 'plaintext-only', 'false']]] = None,
        dir: Optional[Union[str, GlobalAttrs.dir, Literal['ltr', 'rtl', 'auto']]] = None,
        draggable: Optional[Union[str, GlobalAttrs.draggable, Literal['true', 'false']]] = None,
        enterkeyhint: Optional[Union[str, GlobalAttrs.enterkeyhint, Literal['enter', 'done', 'go', 'next', 'previous', 'search', 'send']]] = None,
        hidden: Optional[Union[str, GlobalAttrs.hidden, Literal['until-found', 'hidden', '']]] = None,
        inert: Optional[Union[str, GlobalAttrs.inert, bool]] = None,
        inputmode: Optional[Union[str, GlobalAttrs.inputmode, Literal['none', 'text', 'tel', 'email', 'url', 'numeric', 'decimal', 'search']]] = None,
        is_: Optional[Union[str, GlobalAttrs.is_]] = None,
        itemid: Optional[Union[str, GlobalAttrs.itemid]] = None,
        itemprop: Optional[Union[str, GlobalAttrs.itemprop]] = None,
        itemref: Optional[Union[str, GlobalAttrs.itemref]] = None,
        itemscope: Optional[Union[str, GlobalAttrs.itemscope, bool]] = None,
        itemtype: Optional[Union[str, GlobalAttrs.itemtype]] = None,
        lang: Optional[Union[str, GlobalAttrs.lang]] = None,
        nonce: Optional[Union[str, GlobalAttrs.nonce]] = None,
        popover: Optional[Union[str, GlobalAttrs.popover, Literal['auto', 'manual']]] = None,
        slot: Optional[Union[str, GlobalAttrs.slot]] = None,
        spellcheck: Optional[Union[str, GlobalAttrs.spellcheck, Literal['true', 'false', '']]] = None,
        style: Optional[Union[str, GlobalAttrs.style]] = None,
        tabindex: Optional[Union[str, GlobalAttrs.tabindex, int]] = None,
        title: Optional[Union[str, GlobalAttrs.title]] = None,
        translate: Optional[Union[str, GlobalAttrs.translate, Literal['yes', 'no']]] = None,
        writingsuggestions: Optional[Union[str, GlobalAttrs.writingsuggestions, Literal['true', 'false', '']]] = None,
        children: Optional[list] = None
    ) -> None:
        """
        Initialize 'del' (A removal from the document) element.  
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/del

        :param attrs: A list or dictionary of attributes for the element
        :param id: The element's ID
        :param class_: Classes to which the element belongs
            | Set of space-separated tokens
        :param cite: Link to the source of the quotation or more information about the edit
            | Valid URL potentially surrounded by spaces
        :param datetime: Date and (optionally) time of the change
            | Valid date string with optional time
        :param accesskey: Keyboard shortcut to activate or focus element
            | Ordered set of unique space-separated tokens, none of which are identical to another, each consisting of one code point in length
        :param autocapitalize: Recommended autocapitalization behavior (for supported input methods)
        :param autocorrect: Recommended autocorrection behavior (for supported input methods)
        :param autofocus: Automatically focus the element when the page is loaded
        :param contenteditable: Whether the element is editable
        :param dir: The text directionality of the element
        :param draggable: Whether the element is draggable
        :param enterkeyhint: Hint for selecting an enter key action
        :param hidden: Whether the element is relevant
        :param inert: Whether the element is inert.
        :param inputmode: Hint for selecting an input modality
        :param is_: Creates a customized built-in element
            | Valid custom element name of a defined customized built-in element
        :param itemid: Global identifier for a microdata item
            | Valid URL potentially surrounded by spaces
        :param itemprop: Property names of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs, defined property names, or text*
        :param itemref: Referenced elements
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param itemscope: Introduces a microdata item
        :param itemtype: Item types of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs*
        :param lang: Language of the element
            | Valid BCP 47 language tag or the empty string
        :param nonce: Cryptographic nonce used in Content Security Policy checks [CSP]
        :param popover: Makes the element a popover element
        :param slot: The element's desired slot
        :param spellcheck: Whether the element is to have its spelling and grammar checked
        :param style: Presentational and formatting instructions
            | CSS declarations*
        :param tabindex: Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation
        :param title: Advisory information for the element
        :param translate: Whether the element is to be translated when the page is localized
        :param writingsuggestions: Whether the element can offer writing suggestions or not.
        """ #fmt: skip
        super().__init__(
            "del",
            void_element=False,
            attrs=attrs,
            children=children
        )
        if not (id is None or id is False):
            self._process_attr("id", id)
        if not (class_ is None or class_ is False):
            self._process_attr("class", class_)
        if not (cite is None or cite is False):
            self._process_attr("cite", cite)
        if not (datetime is None or datetime is False):
            self._process_attr("datetime", datetime)
        if not (accesskey is None or accesskey is False):
            self._process_attr("accesskey", accesskey)
        if not (autocapitalize is None or autocapitalize is False):
            self._process_attr("autocapitalize", autocapitalize)
        if not (autocorrect is None or autocorrect is False):
            self._process_attr("autocorrect", autocorrect)
        if not (autofocus is None or autofocus is False):
            self._process_attr("autofocus", autofocus)
        if not (contenteditable is None or contenteditable is False):
            self._process_attr("contenteditable", contenteditable)
        if not (dir is None or dir is False):
            self._process_attr("dir", dir)
        if not (draggable is None or draggable is False):
            self._process_attr("draggable", draggable)
        if not (enterkeyhint is None or enterkeyhint is False):
            self._process_attr("enterkeyhint", enterkeyhint)
        if not (hidden is None or hidden is False):
            self._process_attr("hidden", hidden)
        if not (inert is None or inert is False):
            self._process_attr("inert", inert)
        if not (inputmode is None or inputmode is False):
            self._process_attr("inputmode", inputmode)
        if not (is_ is None or is_ is False):
            self._process_attr("is", is_)
        if not (itemid is None or itemid is False):
            self._process_attr("itemid", itemid)
        if not (itemprop is None or itemprop is False):
            self._process_attr("itemprop", itemprop)
        if not (itemref is None or itemref is False):
            self._process_attr("itemref", itemref)
        if not (itemscope is None or itemscope is False):
            self._process_attr("itemscope", itemscope)
        if not (itemtype is None or itemtype is False):
            self._process_attr("itemtype", itemtype)
        if not (lang is None or lang is False):
            self._process_attr("lang", lang)
        if not (nonce is None or nonce is False):
            self._process_attr("nonce", nonce)
        if not (popover is None or popover is False):
            self._process_attr("popover", popover)
        if not (slot is None or slot is False):
            self._process_attr("slot", slot)
        if not (spellcheck is None or spellcheck is False):
            self._process_attr("spellcheck", spellcheck)
        if not (style is None or style is False):
            self._process_attr("style", style)
        if not (tabindex is None or tabindex is False):
            self._process_attr("tabindex", tabindex)
        if not (title is None or title is False):
            self._process_attr("title", title)
        if not (translate is None or translate is False):
            self._process_attr("translate", translate)
        if not (writingsuggestions is None or writingsuggestions is False):
            self._process_attr("writingsuggestions", writingsuggestions)


class details(BaseElement, GlobalAttrs, DetailsAttrs):
    """
    The 'details' element.  
    Description: Disclosure control for hiding details  
    Categories: flow interactive palpable  
    Parents: flow  
    Children: summary* flow  
    Interface: HTMLDetailsElement  
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/details  
    """ # fmt: skip


    def __init__(
        self,
        attrs: Optional[Union[dict[str, Union[str, dict, list]], list[BaseAttribute]]] = None,
        id: Optional[Union[str, GlobalAttrs.id]] = None,
        class_: Optional[Union[str, GlobalAttrs.class_]] = None,
        name: Optional[Union[str, DetailsAttrs.name]] = None,
        open: Optional[Union[str, DetailsAttrs.open, bool]] = None,
        accesskey: Optional[Union[str, GlobalAttrs.accesskey]] = None,
        autocapitalize: Optional[Union[str, GlobalAttrs.autocapitalize, Literal['on', 'off', 'none', 'sentences', 'words', 'characters']]] = None,
        autocorrect: Optional[Union[str, GlobalAttrs.autocorrect, Literal['on', 'off']]] = None,
        autofocus: Optional[Union[str, GlobalAttrs.autofocus, bool]] = None,
        contenteditable: Optional[Union[str, GlobalAttrs.contenteditable, Literal['true', 'plaintext-only', 'false']]] = None,
        dir: Optional[Union[str, GlobalAttrs.dir, Literal['ltr', 'rtl', 'auto']]] = None,
        draggable: Optional[Union[str, GlobalAttrs.draggable, Literal['true', 'false']]] = None,
        enterkeyhint: Optional[Union[str, GlobalAttrs.enterkeyhint, Literal['enter', 'done', 'go', 'next', 'previous', 'search', 'send']]] = None,
        hidden: Optional[Union[str, GlobalAttrs.hidden, Literal['until-found', 'hidden', '']]] = None,
        inert: Optional[Union[str, GlobalAttrs.inert, bool]] = None,
        inputmode: Optional[Union[str, GlobalAttrs.inputmode, Literal['none', 'text', 'tel', 'email', 'url', 'numeric', 'decimal', 'search']]] = None,
        is_: Optional[Union[str, GlobalAttrs.is_]] = None,
        itemid: Optional[Union[str, GlobalAttrs.itemid]] = None,
        itemprop: Optional[Union[str, GlobalAttrs.itemprop]] = None,
        itemref: Optional[Union[str, GlobalAttrs.itemref]] = None,
        itemscope: Optional[Union[str, GlobalAttrs.itemscope, bool]] = None,
        itemtype: Optional[Union[str, GlobalAttrs.itemtype]] = None,
        lang: Optional[Union[str, GlobalAttrs.lang]] = None,
        nonce: Optional[Union[str, GlobalAttrs.nonce]] = None,
        popover: Optional[Union[str, GlobalAttrs.popover, Literal['auto', 'manual']]] = None,
        slot: Optional[Union[str, GlobalAttrs.slot]] = None,
        spellcheck: Optional[Union[str, GlobalAttrs.spellcheck, Literal['true', 'false', '']]] = None,
        style: Optional[Union[str, GlobalAttrs.style]] = None,
        tabindex: Optional[Union[str, GlobalAttrs.tabindex, int]] = None,
        title: Optional[Union[str, GlobalAttrs.title]] = None,
        translate: Optional[Union[str, GlobalAttrs.translate, Literal['yes', 'no']]] = None,
        writingsuggestions: Optional[Union[str, GlobalAttrs.writingsuggestions, Literal['true', 'false', '']]] = None,
        children: Optional[list] = None
    ) -> None:
        """
        Initialize 'details' (Disclosure control for hiding details) element.  
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/details

        :param attrs: A list or dictionary of attributes for the element
        :param id: The element's ID
        :param class_: Classes to which the element belongs
            | Set of space-separated tokens
        :param name: Name of group of mutually-exclusive details elements
        :param open: Whether the details are visible
        :param accesskey: Keyboard shortcut to activate or focus element
            | Ordered set of unique space-separated tokens, none of which are identical to another, each consisting of one code point in length
        :param autocapitalize: Recommended autocapitalization behavior (for supported input methods)
        :param autocorrect: Recommended autocorrection behavior (for supported input methods)
        :param autofocus: Automatically focus the element when the page is loaded
        :param contenteditable: Whether the element is editable
        :param dir: The text directionality of the element
        :param draggable: Whether the element is draggable
        :param enterkeyhint: Hint for selecting an enter key action
        :param hidden: Whether the element is relevant
        :param inert: Whether the element is inert.
        :param inputmode: Hint for selecting an input modality
        :param is_: Creates a customized built-in element
            | Valid custom element name of a defined customized built-in element
        :param itemid: Global identifier for a microdata item
            | Valid URL potentially surrounded by spaces
        :param itemprop: Property names of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs, defined property names, or text*
        :param itemref: Referenced elements
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param itemscope: Introduces a microdata item
        :param itemtype: Item types of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs*
        :param lang: Language of the element
            | Valid BCP 47 language tag or the empty string
        :param nonce: Cryptographic nonce used in Content Security Policy checks [CSP]
        :param popover: Makes the element a popover element
        :param slot: The element's desired slot
        :param spellcheck: Whether the element is to have its spelling and grammar checked
        :param style: Presentational and formatting instructions
            | CSS declarations*
        :param tabindex: Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation
        :param title: Advisory information for the element
        :param translate: Whether the element is to be translated when the page is localized
        :param writingsuggestions: Whether the element can offer writing suggestions or not.
        """ #fmt: skip
        super().__init__(
            "details",
            void_element=False,
            attrs=attrs,
            children=children
        )
        if not (id is None or id is False):
            self._process_attr("id", id)
        if not (class_ is None or class_ is False):
            self._process_attr("class", class_)
        if not (name is None or name is False):
            self._process_attr("name", name)
        if not (open is None or open is False):
            self._process_attr("open", open)
        if not (accesskey is None or accesskey is False):
            self._process_attr("accesskey", accesskey)
        if not (autocapitalize is None or autocapitalize is False):
            self._process_attr("autocapitalize", autocapitalize)
        if not (autocorrect is None or autocorrect is False):
            self._process_attr("autocorrect", autocorrect)
        if not (autofocus is None or autofocus is False):
            self._process_attr("autofocus", autofocus)
        if not (contenteditable is None or contenteditable is False):
            self._process_attr("contenteditable", contenteditable)
        if not (dir is None or dir is False):
            self._process_attr("dir", dir)
        if not (draggable is None or draggable is False):
            self._process_attr("draggable", draggable)
        if not (enterkeyhint is None or enterkeyhint is False):
            self._process_attr("enterkeyhint", enterkeyhint)
        if not (hidden is None or hidden is False):
            self._process_attr("hidden", hidden)
        if not (inert is None or inert is False):
            self._process_attr("inert", inert)
        if not (inputmode is None or inputmode is False):
            self._process_attr("inputmode", inputmode)
        if not (is_ is None or is_ is False):
            self._process_attr("is", is_)
        if not (itemid is None or itemid is False):
            self._process_attr("itemid", itemid)
        if not (itemprop is None or itemprop is False):
            self._process_attr("itemprop", itemprop)
        if not (itemref is None or itemref is False):
            self._process_attr("itemref", itemref)
        if not (itemscope is None or itemscope is False):
            self._process_attr("itemscope", itemscope)
        if not (itemtype is None or itemtype is False):
            self._process_attr("itemtype", itemtype)
        if not (lang is None or lang is False):
            self._process_attr("lang", lang)
        if not (nonce is None or nonce is False):
            self._process_attr("nonce", nonce)
        if not (popover is None or popover is False):
            self._process_attr("popover", popover)
        if not (slot is None or slot is False):
            self._process_attr("slot", slot)
        if not (spellcheck is None or spellcheck is False):
            self._process_attr("spellcheck", spellcheck)
        if not (style is None or style is False):
            self._process_attr("style", style)
        if not (tabindex is None or tabindex is False):
            self._process_attr("tabindex", tabindex)
        if not (title is None or title is False):
            self._process_attr("title", title)
        if not (translate is None or translate is False):
            self._process_attr("translate", translate)
        if not (writingsuggestions is None or writingsuggestions is False):
            self._process_attr("writingsuggestions", writingsuggestions)


class dfn(BaseElement, GlobalAttrs):
    """
    The 'dfn' element.  
    Description: Defining instance  
    Categories: flow phrasing palpable  
    Parents: phrasing  
    Children: phrasing*  
    Interface: HTMLElement  
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dfn  
    """ # fmt: skip


    def __init__(
        self,
        attrs: Optional[Union[dict[str, Union[str, dict, list]], list[BaseAttribute]]] = None,
        id: Optional[Union[str, GlobalAttrs.id]] = None,
        class_: Optional[Union[str, GlobalAttrs.class_]] = None,
        accesskey: Optional[Union[str, GlobalAttrs.accesskey]] = None,
        autocapitalize: Optional[Union[str, GlobalAttrs.autocapitalize, Literal['on', 'off', 'none', 'sentences', 'words', 'characters']]] = None,
        autocorrect: Optional[Union[str, GlobalAttrs.autocorrect, Literal['on', 'off']]] = None,
        autofocus: Optional[Union[str, GlobalAttrs.autofocus, bool]] = None,
        contenteditable: Optional[Union[str, GlobalAttrs.contenteditable, Literal['true', 'plaintext-only', 'false']]] = None,
        dir: Optional[Union[str, GlobalAttrs.dir, Literal['ltr', 'rtl', 'auto']]] = None,
        draggable: Optional[Union[str, GlobalAttrs.draggable, Literal['true', 'false']]] = None,
        enterkeyhint: Optional[Union[str, GlobalAttrs.enterkeyhint, Literal['enter', 'done', 'go', 'next', 'previous', 'search', 'send']]] = None,
        hidden: Optional[Union[str, GlobalAttrs.hidden, Literal['until-found', 'hidden', '']]] = None,
        inert: Optional[Union[str, GlobalAttrs.inert, bool]] = None,
        inputmode: Optional[Union[str, GlobalAttrs.inputmode, Literal['none', 'text', 'tel', 'email', 'url', 'numeric', 'decimal', 'search']]] = None,
        is_: Optional[Union[str, GlobalAttrs.is_]] = None,
        itemid: Optional[Union[str, GlobalAttrs.itemid]] = None,
        itemprop: Optional[Union[str, GlobalAttrs.itemprop]] = None,
        itemref: Optional[Union[str, GlobalAttrs.itemref]] = None,
        itemscope: Optional[Union[str, GlobalAttrs.itemscope, bool]] = None,
        itemtype: Optional[Union[str, GlobalAttrs.itemtype]] = None,
        lang: Optional[Union[str, GlobalAttrs.lang]] = None,
        nonce: Optional[Union[str, GlobalAttrs.nonce]] = None,
        popover: Optional[Union[str, GlobalAttrs.popover, Literal['auto', 'manual']]] = None,
        slot: Optional[Union[str, GlobalAttrs.slot]] = None,
        spellcheck: Optional[Union[str, GlobalAttrs.spellcheck, Literal['true', 'false', '']]] = None,
        style: Optional[Union[str, GlobalAttrs.style]] = None,
        tabindex: Optional[Union[str, GlobalAttrs.tabindex, int]] = None,
        title: Optional[Union[str, GlobalAttrs.title]] = None,
        translate: Optional[Union[str, GlobalAttrs.translate, Literal['yes', 'no']]] = None,
        writingsuggestions: Optional[Union[str, GlobalAttrs.writingsuggestions, Literal['true', 'false', '']]] = None,
        children: Optional[list] = None
    ) -> None:
        """
        Initialize 'dfn' (Defining instance) element.  
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dfn

        :param attrs: A list or dictionary of attributes for the element
        :param id: The element's ID
        :param class_: Classes to which the element belongs
            | Set of space-separated tokens
        :param accesskey: Keyboard shortcut to activate or focus element
            | Ordered set of unique space-separated tokens, none of which are identical to another, each consisting of one code point in length
        :param autocapitalize: Recommended autocapitalization behavior (for supported input methods)
        :param autocorrect: Recommended autocorrection behavior (for supported input methods)
        :param autofocus: Automatically focus the element when the page is loaded
        :param contenteditable: Whether the element is editable
        :param dir: The text directionality of the element
        :param draggable: Whether the element is draggable
        :param enterkeyhint: Hint for selecting an enter key action
        :param hidden: Whether the element is relevant
        :param inert: Whether the element is inert.
        :param inputmode: Hint for selecting an input modality
        :param is_: Creates a customized built-in element
            | Valid custom element name of a defined customized built-in element
        :param itemid: Global identifier for a microdata item
            | Valid URL potentially surrounded by spaces
        :param itemprop: Property names of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs, defined property names, or text*
        :param itemref: Referenced elements
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param itemscope: Introduces a microdata item
        :param itemtype: Item types of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs*
        :param lang: Language of the element
            | Valid BCP 47 language tag or the empty string
        :param nonce: Cryptographic nonce used in Content Security Policy checks [CSP]
        :param popover: Makes the element a popover element
        :param slot: The element's desired slot
        :param spellcheck: Whether the element is to have its spelling and grammar checked
        :param style: Presentational and formatting instructions
            | CSS declarations*
        :param tabindex: Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation
        :param title: Advisory information for the element
        :param translate: Whether the element is to be translated when the page is localized
        :param writingsuggestions: Whether the element can offer writing suggestions or not.
        """ #fmt: skip
        super().__init__(
            "dfn",
            void_element=False,
            attrs=attrs,
            children=children
        )
        if not (id is None or id is False):
            self._process_attr("id", id)
        if not (class_ is None or class_ is False):
            self._process_attr("class", class_)
        if not (accesskey is None or accesskey is False):
            self._process_attr("accesskey", accesskey)
        if not (autocapitalize is None or autocapitalize is False):
            self._process_attr("autocapitalize", autocapitalize)
        if not (autocorrect is None or autocorrect is False):
            self._process_attr("autocorrect", autocorrect)
        if not (autofocus is None or autofocus is False):
            self._process_attr("autofocus", autofocus)
        if not (contenteditable is None or contenteditable is False):
            self._process_attr("contenteditable", contenteditable)
        if not (dir is None or dir is False):
            self._process_attr("dir", dir)
        if not (draggable is None or draggable is False):
            self._process_attr("draggable", draggable)
        if not (enterkeyhint is None or enterkeyhint is False):
            self._process_attr("enterkeyhint", enterkeyhint)
        if not (hidden is None or hidden is False):
            self._process_attr("hidden", hidden)
        if not (inert is None or inert is False):
            self._process_attr("inert", inert)
        if not (inputmode is None or inputmode is False):
            self._process_attr("inputmode", inputmode)
        if not (is_ is None or is_ is False):
            self._process_attr("is", is_)
        if not (itemid is None or itemid is False):
            self._process_attr("itemid", itemid)
        if not (itemprop is None or itemprop is False):
            self._process_attr("itemprop", itemprop)
        if not (itemref is None or itemref is False):
            self._process_attr("itemref", itemref)
        if not (itemscope is None or itemscope is False):
            self._process_attr("itemscope", itemscope)
        if not (itemtype is None or itemtype is False):
            self._process_attr("itemtype", itemtype)
        if not (lang is None or lang is False):
            self._process_attr("lang", lang)
        if not (nonce is None or nonce is False):
            self._process_attr("nonce", nonce)
        if not (popover is None or popover is False):
            self._process_attr("popover", popover)
        if not (slot is None or slot is False):
            self._process_attr("slot", slot)
        if not (spellcheck is None or spellcheck is False):
            self._process_attr("spellcheck", spellcheck)
        if not (style is None or style is False):
            self._process_attr("style", style)
        if not (tabindex is None or tabindex is False):
            self._process_attr("tabindex", tabindex)
        if not (title is None or title is False):
            self._process_attr("title", title)
        if not (translate is None or translate is False):
            self._process_attr("translate", translate)
        if not (writingsuggestions is None or writingsuggestions is False):
            self._process_attr("writingsuggestions", writingsuggestions)


class dialog(BaseElement, GlobalAttrs, DialogAttrs):
    """
    The 'dialog' element.  
    Description: Dialog box or window  
    Categories: flow  
    Parents: flow  
    Children: flow  
    Interface: HTMLDialogElement  
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dialog  
    """ # fmt: skip


    def __init__(
        self,
        attrs: Optional[Union[dict[str, Union[str, dict, list]], list[BaseAttribute]]] = None,
        id: Optional[Union[str, GlobalAttrs.id]] = None,
        class_: Optional[Union[str, GlobalAttrs.class_]] = None,
        open: Optional[Union[str, DialogAttrs.open, bool]] = None,
        accesskey: Optional[Union[str, GlobalAttrs.accesskey]] = None,
        autocapitalize: Optional[Union[str, GlobalAttrs.autocapitalize, Literal['on', 'off', 'none', 'sentences', 'words', 'characters']]] = None,
        autocorrect: Optional[Union[str, GlobalAttrs.autocorrect, Literal['on', 'off']]] = None,
        autofocus: Optional[Union[str, GlobalAttrs.autofocus, bool]] = None,
        contenteditable: Optional[Union[str, GlobalAttrs.contenteditable, Literal['true', 'plaintext-only', 'false']]] = None,
        dir: Optional[Union[str, GlobalAttrs.dir, Literal['ltr', 'rtl', 'auto']]] = None,
        draggable: Optional[Union[str, GlobalAttrs.draggable, Literal['true', 'false']]] = None,
        enterkeyhint: Optional[Union[str, GlobalAttrs.enterkeyhint, Literal['enter', 'done', 'go', 'next', 'previous', 'search', 'send']]] = None,
        hidden: Optional[Union[str, GlobalAttrs.hidden, Literal['until-found', 'hidden', '']]] = None,
        inert: Optional[Union[str, GlobalAttrs.inert, bool]] = None,
        inputmode: Optional[Union[str, GlobalAttrs.inputmode, Literal['none', 'text', 'tel', 'email', 'url', 'numeric', 'decimal', 'search']]] = None,
        is_: Optional[Union[str, GlobalAttrs.is_]] = None,
        itemid: Optional[Union[str, GlobalAttrs.itemid]] = None,
        itemprop: Optional[Union[str, GlobalAttrs.itemprop]] = None,
        itemref: Optional[Union[str, GlobalAttrs.itemref]] = None,
        itemscope: Optional[Union[str, GlobalAttrs.itemscope, bool]] = None,
        itemtype: Optional[Union[str, GlobalAttrs.itemtype]] = None,
        lang: Optional[Union[str, GlobalAttrs.lang]] = None,
        nonce: Optional[Union[str, GlobalAttrs.nonce]] = None,
        popover: Optional[Union[str, GlobalAttrs.popover, Literal['auto', 'manual']]] = None,
        slot: Optional[Union[str, GlobalAttrs.slot]] = None,
        spellcheck: Optional[Union[str, GlobalAttrs.spellcheck, Literal['true', 'false', '']]] = None,
        style: Optional[Union[str, GlobalAttrs.style]] = None,
        tabindex: Optional[Union[str, GlobalAttrs.tabindex, int]] = None,
        title: Optional[Union[str, GlobalAttrs.title]] = None,
        translate: Optional[Union[str, GlobalAttrs.translate, Literal['yes', 'no']]] = None,
        writingsuggestions: Optional[Union[str, GlobalAttrs.writingsuggestions, Literal['true', 'false', '']]] = None,
        children: Optional[list] = None
    ) -> None:
        """
        Initialize 'dialog' (Dialog box or window) element.  
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dialog

        :param attrs: A list or dictionary of attributes for the element
        :param id: The element's ID
        :param class_: Classes to which the element belongs
            | Set of space-separated tokens
        :param open: Whether the dialog box is showing
        :param accesskey: Keyboard shortcut to activate or focus element
            | Ordered set of unique space-separated tokens, none of which are identical to another, each consisting of one code point in length
        :param autocapitalize: Recommended autocapitalization behavior (for supported input methods)
        :param autocorrect: Recommended autocorrection behavior (for supported input methods)
        :param autofocus: Automatically focus the element when the page is loaded
        :param contenteditable: Whether the element is editable
        :param dir: The text directionality of the element
        :param draggable: Whether the element is draggable
        :param enterkeyhint: Hint for selecting an enter key action
        :param hidden: Whether the element is relevant
        :param inert: Whether the element is inert.
        :param inputmode: Hint for selecting an input modality
        :param is_: Creates a customized built-in element
            | Valid custom element name of a defined customized built-in element
        :param itemid: Global identifier for a microdata item
            | Valid URL potentially surrounded by spaces
        :param itemprop: Property names of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs, defined property names, or text*
        :param itemref: Referenced elements
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param itemscope: Introduces a microdata item
        :param itemtype: Item types of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs*
        :param lang: Language of the element
            | Valid BCP 47 language tag or the empty string
        :param nonce: Cryptographic nonce used in Content Security Policy checks [CSP]
        :param popover: Makes the element a popover element
        :param slot: The element's desired slot
        :param spellcheck: Whether the element is to have its spelling and grammar checked
        :param style: Presentational and formatting instructions
            | CSS declarations*
        :param tabindex: Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation
        :param title: Advisory information for the element
        :param translate: Whether the element is to be translated when the page is localized
        :param writingsuggestions: Whether the element can offer writing suggestions or not.
        """ #fmt: skip
        super().__init__(
            "dialog",
            void_element=False,
            attrs=attrs,
            children=children
        )
        if not (id is None or id is False):
            self._process_attr("id", id)
        if not (class_ is None or class_ is False):
            self._process_attr("class", class_)
        if not (open is None or open is False):
            self._process_attr("open", open)
        if not (accesskey is None or accesskey is False):
            self._process_attr("accesskey", accesskey)
        if not (autocapitalize is None or autocapitalize is False):
            self._process_attr("autocapitalize", autocapitalize)
        if not (autocorrect is None or autocorrect is False):
            self._process_attr("autocorrect", autocorrect)
        if not (autofocus is None or autofocus is False):
            self._process_attr("autofocus", autofocus)
        if not (contenteditable is None or contenteditable is False):
            self._process_attr("contenteditable", contenteditable)
        if not (dir is None or dir is False):
            self._process_attr("dir", dir)
        if not (draggable is None or draggable is False):
            self._process_attr("draggable", draggable)
        if not (enterkeyhint is None or enterkeyhint is False):
            self._process_attr("enterkeyhint", enterkeyhint)
        if not (hidden is None or hidden is False):
            self._process_attr("hidden", hidden)
        if not (inert is None or inert is False):
            self._process_attr("inert", inert)
        if not (inputmode is None or inputmode is False):
            self._process_attr("inputmode", inputmode)
        if not (is_ is None or is_ is False):
            self._process_attr("is", is_)
        if not (itemid is None or itemid is False):
            self._process_attr("itemid", itemid)
        if not (itemprop is None or itemprop is False):
            self._process_attr("itemprop", itemprop)
        if not (itemref is None or itemref is False):
            self._process_attr("itemref", itemref)
        if not (itemscope is None or itemscope is False):
            self._process_attr("itemscope", itemscope)
        if not (itemtype is None or itemtype is False):
            self._process_attr("itemtype", itemtype)
        if not (lang is None or lang is False):
            self._process_attr("lang", lang)
        if not (nonce is None or nonce is False):
            self._process_attr("nonce", nonce)
        if not (popover is None or popover is False):
            self._process_attr("popover", popover)
        if not (slot is None or slot is False):
            self._process_attr("slot", slot)
        if not (spellcheck is None or spellcheck is False):
            self._process_attr("spellcheck", spellcheck)
        if not (style is None or style is False):
            self._process_attr("style", style)
        if not (tabindex is None or tabindex is False):
            self._process_attr("tabindex", tabindex)
        if not (title is None or title is False):
            self._process_attr("title", title)
        if not (translate is None or translate is False):
            self._process_attr("translate", translate)
        if not (writingsuggestions is None or writingsuggestions is False):
            self._process_attr("writingsuggestions", writingsuggestions)


class div(BaseElement, GlobalAttrs):
    """
    The 'div' element.  
    Description: Generic flow container, or container for name-value groups in dl elements  
    Categories: flow palpable  
    Parents: flow dl  
    Children: flow  
    Interface: HTMLDivElement  
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/div  
    """ # fmt: skip


    def __init__(
        self,
        attrs: Optional[Union[dict[str, Union[str, dict, list]], list[BaseAttribute]]] = None,
        id: Optional[Union[str, GlobalAttrs.id]] = None,
        class_: Optional[Union[str, GlobalAttrs.class_]] = None,
        accesskey: Optional[Union[str, GlobalAttrs.accesskey]] = None,
        autocapitalize: Optional[Union[str, GlobalAttrs.autocapitalize, Literal['on', 'off', 'none', 'sentences', 'words', 'characters']]] = None,
        autocorrect: Optional[Union[str, GlobalAttrs.autocorrect, Literal['on', 'off']]] = None,
        autofocus: Optional[Union[str, GlobalAttrs.autofocus, bool]] = None,
        contenteditable: Optional[Union[str, GlobalAttrs.contenteditable, Literal['true', 'plaintext-only', 'false']]] = None,
        dir: Optional[Union[str, GlobalAttrs.dir, Literal['ltr', 'rtl', 'auto']]] = None,
        draggable: Optional[Union[str, GlobalAttrs.draggable, Literal['true', 'false']]] = None,
        enterkeyhint: Optional[Union[str, GlobalAttrs.enterkeyhint, Literal['enter', 'done', 'go', 'next', 'previous', 'search', 'send']]] = None,
        hidden: Optional[Union[str, GlobalAttrs.hidden, Literal['until-found', 'hidden', '']]] = None,
        inert: Optional[Union[str, GlobalAttrs.inert, bool]] = None,
        inputmode: Optional[Union[str, GlobalAttrs.inputmode, Literal['none', 'text', 'tel', 'email', 'url', 'numeric', 'decimal', 'search']]] = None,
        is_: Optional[Union[str, GlobalAttrs.is_]] = None,
        itemid: Optional[Union[str, GlobalAttrs.itemid]] = None,
        itemprop: Optional[Union[str, GlobalAttrs.itemprop]] = None,
        itemref: Optional[Union[str, GlobalAttrs.itemref]] = None,
        itemscope: Optional[Union[str, GlobalAttrs.itemscope, bool]] = None,
        itemtype: Optional[Union[str, GlobalAttrs.itemtype]] = None,
        lang: Optional[Union[str, GlobalAttrs.lang]] = None,
        nonce: Optional[Union[str, GlobalAttrs.nonce]] = None,
        popover: Optional[Union[str, GlobalAttrs.popover, Literal['auto', 'manual']]] = None,
        slot: Optional[Union[str, GlobalAttrs.slot]] = None,
        spellcheck: Optional[Union[str, GlobalAttrs.spellcheck, Literal['true', 'false', '']]] = None,
        style: Optional[Union[str, GlobalAttrs.style]] = None,
        tabindex: Optional[Union[str, GlobalAttrs.tabindex, int]] = None,
        title: Optional[Union[str, GlobalAttrs.title]] = None,
        translate: Optional[Union[str, GlobalAttrs.translate, Literal['yes', 'no']]] = None,
        writingsuggestions: Optional[Union[str, GlobalAttrs.writingsuggestions, Literal['true', 'false', '']]] = None,
        children: Optional[list] = None
    ) -> None:
        """
        Initialize 'div' (Generic flow container, or container for name-value groups in dl elements) element.  
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/div

        :param attrs: A list or dictionary of attributes for the element
        :param id: The element's ID
        :param class_: Classes to which the element belongs
            | Set of space-separated tokens
        :param accesskey: Keyboard shortcut to activate or focus element
            | Ordered set of unique space-separated tokens, none of which are identical to another, each consisting of one code point in length
        :param autocapitalize: Recommended autocapitalization behavior (for supported input methods)
        :param autocorrect: Recommended autocorrection behavior (for supported input methods)
        :param autofocus: Automatically focus the element when the page is loaded
        :param contenteditable: Whether the element is editable
        :param dir: The text directionality of the element
        :param draggable: Whether the element is draggable
        :param enterkeyhint: Hint for selecting an enter key action
        :param hidden: Whether the element is relevant
        :param inert: Whether the element is inert.
        :param inputmode: Hint for selecting an input modality
        :param is_: Creates a customized built-in element
            | Valid custom element name of a defined customized built-in element
        :param itemid: Global identifier for a microdata item
            | Valid URL potentially surrounded by spaces
        :param itemprop: Property names of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs, defined property names, or text*
        :param itemref: Referenced elements
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param itemscope: Introduces a microdata item
        :param itemtype: Item types of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs*
        :param lang: Language of the element
            | Valid BCP 47 language tag or the empty string
        :param nonce: Cryptographic nonce used in Content Security Policy checks [CSP]
        :param popover: Makes the element a popover element
        :param slot: The element's desired slot
        :param spellcheck: Whether the element is to have its spelling and grammar checked
        :param style: Presentational and formatting instructions
            | CSS declarations*
        :param tabindex: Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation
        :param title: Advisory information for the element
        :param translate: Whether the element is to be translated when the page is localized
        :param writingsuggestions: Whether the element can offer writing suggestions or not.
        """ #fmt: skip
        super().__init__(
            "div",
            void_element=False,
            attrs=attrs,
            children=children
        )
        if not (id is None or id is False):
            self._process_attr("id", id)
        if not (class_ is None or class_ is False):
            self._process_attr("class", class_)
        if not (accesskey is None or accesskey is False):
            self._process_attr("accesskey", accesskey)
        if not (autocapitalize is None or autocapitalize is False):
            self._process_attr("autocapitalize", autocapitalize)
        if not (autocorrect is None or autocorrect is False):
            self._process_attr("autocorrect", autocorrect)
        if not (autofocus is None or autofocus is False):
            self._process_attr("autofocus", autofocus)
        if not (contenteditable is None or contenteditable is False):
            self._process_attr("contenteditable", contenteditable)
        if not (dir is None or dir is False):
            self._process_attr("dir", dir)
        if not (draggable is None or draggable is False):
            self._process_attr("draggable", draggable)
        if not (enterkeyhint is None or enterkeyhint is False):
            self._process_attr("enterkeyhint", enterkeyhint)
        if not (hidden is None or hidden is False):
            self._process_attr("hidden", hidden)
        if not (inert is None or inert is False):
            self._process_attr("inert", inert)
        if not (inputmode is None or inputmode is False):
            self._process_attr("inputmode", inputmode)
        if not (is_ is None or is_ is False):
            self._process_attr("is", is_)
        if not (itemid is None or itemid is False):
            self._process_attr("itemid", itemid)
        if not (itemprop is None or itemprop is False):
            self._process_attr("itemprop", itemprop)
        if not (itemref is None or itemref is False):
            self._process_attr("itemref", itemref)
        if not (itemscope is None or itemscope is False):
            self._process_attr("itemscope", itemscope)
        if not (itemtype is None or itemtype is False):
            self._process_attr("itemtype", itemtype)
        if not (lang is None or lang is False):
            self._process_attr("lang", lang)
        if not (nonce is None or nonce is False):
            self._process_attr("nonce", nonce)
        if not (popover is None or popover is False):
            self._process_attr("popover", popover)
        if not (slot is None or slot is False):
            self._process_attr("slot", slot)
        if not (spellcheck is None or spellcheck is False):
            self._process_attr("spellcheck", spellcheck)
        if not (style is None or style is False):
            self._process_attr("style", style)
        if not (tabindex is None or tabindex is False):
            self._process_attr("tabindex", tabindex)
        if not (title is None or title is False):
            self._process_attr("title", title)
        if not (translate is None or translate is False):
            self._process_attr("translate", translate)
        if not (writingsuggestions is None or writingsuggestions is False):
            self._process_attr("writingsuggestions", writingsuggestions)


class dl(BaseElement, GlobalAttrs):
    """
    The 'dl' element.  
    Description: Association list consisting of zero or more name-value groups  
    Categories: flow palpable  
    Parents: flow  
    Children: dt* dd* div* script-supporting elements  
    Interface: HTMLDListElement  
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dl  
    """ # fmt: skip


    def __init__(
        self,
        attrs: Optional[Union[dict[str, Union[str, dict, list]], list[BaseAttribute]]] = None,
        id: Optional[Union[str, GlobalAttrs.id]] = None,
        class_: Optional[Union[str, GlobalAttrs.class_]] = None,
        accesskey: Optional[Union[str, GlobalAttrs.accesskey]] = None,
        autocapitalize: Optional[Union[str, GlobalAttrs.autocapitalize, Literal['on', 'off', 'none', 'sentences', 'words', 'characters']]] = None,
        autocorrect: Optional[Union[str, GlobalAttrs.autocorrect, Literal['on', 'off']]] = None,
        autofocus: Optional[Union[str, GlobalAttrs.autofocus, bool]] = None,
        contenteditable: Optional[Union[str, GlobalAttrs.contenteditable, Literal['true', 'plaintext-only', 'false']]] = None,
        dir: Optional[Union[str, GlobalAttrs.dir, Literal['ltr', 'rtl', 'auto']]] = None,
        draggable: Optional[Union[str, GlobalAttrs.draggable, Literal['true', 'false']]] = None,
        enterkeyhint: Optional[Union[str, GlobalAttrs.enterkeyhint, Literal['enter', 'done', 'go', 'next', 'previous', 'search', 'send']]] = None,
        hidden: Optional[Union[str, GlobalAttrs.hidden, Literal['until-found', 'hidden', '']]] = None,
        inert: Optional[Union[str, GlobalAttrs.inert, bool]] = None,
        inputmode: Optional[Union[str, GlobalAttrs.inputmode, Literal['none', 'text', 'tel', 'email', 'url', 'numeric', 'decimal', 'search']]] = None,
        is_: Optional[Union[str, GlobalAttrs.is_]] = None,
        itemid: Optional[Union[str, GlobalAttrs.itemid]] = None,
        itemprop: Optional[Union[str, GlobalAttrs.itemprop]] = None,
        itemref: Optional[Union[str, GlobalAttrs.itemref]] = None,
        itemscope: Optional[Union[str, GlobalAttrs.itemscope, bool]] = None,
        itemtype: Optional[Union[str, GlobalAttrs.itemtype]] = None,
        lang: Optional[Union[str, GlobalAttrs.lang]] = None,
        nonce: Optional[Union[str, GlobalAttrs.nonce]] = None,
        popover: Optional[Union[str, GlobalAttrs.popover, Literal['auto', 'manual']]] = None,
        slot: Optional[Union[str, GlobalAttrs.slot]] = None,
        spellcheck: Optional[Union[str, GlobalAttrs.spellcheck, Literal['true', 'false', '']]] = None,
        style: Optional[Union[str, GlobalAttrs.style]] = None,
        tabindex: Optional[Union[str, GlobalAttrs.tabindex, int]] = None,
        title: Optional[Union[str, GlobalAttrs.title]] = None,
        translate: Optional[Union[str, GlobalAttrs.translate, Literal['yes', 'no']]] = None,
        writingsuggestions: Optional[Union[str, GlobalAttrs.writingsuggestions, Literal['true', 'false', '']]] = None,
        children: Optional[list] = None
    ) -> None:
        """
        Initialize 'dl' (Association list consisting of zero or more name-value groups) element.  
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dl

        :param attrs: A list or dictionary of attributes for the element
        :param id: The element's ID
        :param class_: Classes to which the element belongs
            | Set of space-separated tokens
        :param accesskey: Keyboard shortcut to activate or focus element
            | Ordered set of unique space-separated tokens, none of which are identical to another, each consisting of one code point in length
        :param autocapitalize: Recommended autocapitalization behavior (for supported input methods)
        :param autocorrect: Recommended autocorrection behavior (for supported input methods)
        :param autofocus: Automatically focus the element when the page is loaded
        :param contenteditable: Whether the element is editable
        :param dir: The text directionality of the element
        :param draggable: Whether the element is draggable
        :param enterkeyhint: Hint for selecting an enter key action
        :param hidden: Whether the element is relevant
        :param inert: Whether the element is inert.
        :param inputmode: Hint for selecting an input modality
        :param is_: Creates a customized built-in element
            | Valid custom element name of a defined customized built-in element
        :param itemid: Global identifier for a microdata item
            | Valid URL potentially surrounded by spaces
        :param itemprop: Property names of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs, defined property names, or text*
        :param itemref: Referenced elements
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param itemscope: Introduces a microdata item
        :param itemtype: Item types of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs*
        :param lang: Language of the element
            | Valid BCP 47 language tag or the empty string
        :param nonce: Cryptographic nonce used in Content Security Policy checks [CSP]
        :param popover: Makes the element a popover element
        :param slot: The element's desired slot
        :param spellcheck: Whether the element is to have its spelling and grammar checked
        :param style: Presentational and formatting instructions
            | CSS declarations*
        :param tabindex: Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation
        :param title: Advisory information for the element
        :param translate: Whether the element is to be translated when the page is localized
        :param writingsuggestions: Whether the element can offer writing suggestions or not.
        """ #fmt: skip
        super().__init__(
            "dl",
            void_element=False,
            attrs=attrs,
            children=children
        )
        if not (id is None or id is False):
            self._process_attr("id", id)
        if not (class_ is None or class_ is False):
            self._process_attr("class", class_)
        if not (accesskey is None or accesskey is False):
            self._process_attr("accesskey", accesskey)
        if not (autocapitalize is None or autocapitalize is False):
            self._process_attr("autocapitalize", autocapitalize)
        if not (autocorrect is None or autocorrect is False):
            self._process_attr("autocorrect", autocorrect)
        if not (autofocus is None or autofocus is False):
            self._process_attr("autofocus", autofocus)
        if not (contenteditable is None or contenteditable is False):
            self._process_attr("contenteditable", contenteditable)
        if not (dir is None or dir is False):
            self._process_attr("dir", dir)
        if not (draggable is None or draggable is False):
            self._process_attr("draggable", draggable)
        if not (enterkeyhint is None or enterkeyhint is False):
            self._process_attr("enterkeyhint", enterkeyhint)
        if not (hidden is None or hidden is False):
            self._process_attr("hidden", hidden)
        if not (inert is None or inert is False):
            self._process_attr("inert", inert)
        if not (inputmode is None or inputmode is False):
            self._process_attr("inputmode", inputmode)
        if not (is_ is None or is_ is False):
            self._process_attr("is", is_)
        if not (itemid is None or itemid is False):
            self._process_attr("itemid", itemid)
        if not (itemprop is None or itemprop is False):
            self._process_attr("itemprop", itemprop)
        if not (itemref is None or itemref is False):
            self._process_attr("itemref", itemref)
        if not (itemscope is None or itemscope is False):
            self._process_attr("itemscope", itemscope)
        if not (itemtype is None or itemtype is False):
            self._process_attr("itemtype", itemtype)
        if not (lang is None or lang is False):
            self._process_attr("lang", lang)
        if not (nonce is None or nonce is False):
            self._process_attr("nonce", nonce)
        if not (popover is None or popover is False):
            self._process_attr("popover", popover)
        if not (slot is None or slot is False):
            self._process_attr("slot", slot)
        if not (spellcheck is None or spellcheck is False):
            self._process_attr("spellcheck", spellcheck)
        if not (style is None or style is False):
            self._process_attr("style", style)
        if not (tabindex is None or tabindex is False):
            self._process_attr("tabindex", tabindex)
        if not (title is None or title is False):
            self._process_attr("title", title)
        if not (translate is None or translate is False):
            self._process_attr("translate", translate)
        if not (writingsuggestions is None or writingsuggestions is False):
            self._process_attr("writingsuggestions", writingsuggestions)


class dt(BaseElement, GlobalAttrs):
    """
    The 'dt' element.  
    Description: Legend for corresponding dd element(s)  
    Categories: none  
    Parents: dl div*  
    Children: flow*  
    Interface: HTMLElement  
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dt  
    """ # fmt: skip


    def __init__(
        self,
        attrs: Optional[Union[dict[str, Union[str, dict, list]], list[BaseAttribute]]] = None,
        id: Optional[Union[str, GlobalAttrs.id]] = None,
        class_: Optional[Union[str, GlobalAttrs.class_]] = None,
        accesskey: Optional[Union[str, GlobalAttrs.accesskey]] = None,
        autocapitalize: Optional[Union[str, GlobalAttrs.autocapitalize, Literal['on', 'off', 'none', 'sentences', 'words', 'characters']]] = None,
        autocorrect: Optional[Union[str, GlobalAttrs.autocorrect, Literal['on', 'off']]] = None,
        autofocus: Optional[Union[str, GlobalAttrs.autofocus, bool]] = None,
        contenteditable: Optional[Union[str, GlobalAttrs.contenteditable, Literal['true', 'plaintext-only', 'false']]] = None,
        dir: Optional[Union[str, GlobalAttrs.dir, Literal['ltr', 'rtl', 'auto']]] = None,
        draggable: Optional[Union[str, GlobalAttrs.draggable, Literal['true', 'false']]] = None,
        enterkeyhint: Optional[Union[str, GlobalAttrs.enterkeyhint, Literal['enter', 'done', 'go', 'next', 'previous', 'search', 'send']]] = None,
        hidden: Optional[Union[str, GlobalAttrs.hidden, Literal['until-found', 'hidden', '']]] = None,
        inert: Optional[Union[str, GlobalAttrs.inert, bool]] = None,
        inputmode: Optional[Union[str, GlobalAttrs.inputmode, Literal['none', 'text', 'tel', 'email', 'url', 'numeric', 'decimal', 'search']]] = None,
        is_: Optional[Union[str, GlobalAttrs.is_]] = None,
        itemid: Optional[Union[str, GlobalAttrs.itemid]] = None,
        itemprop: Optional[Union[str, GlobalAttrs.itemprop]] = None,
        itemref: Optional[Union[str, GlobalAttrs.itemref]] = None,
        itemscope: Optional[Union[str, GlobalAttrs.itemscope, bool]] = None,
        itemtype: Optional[Union[str, GlobalAttrs.itemtype]] = None,
        lang: Optional[Union[str, GlobalAttrs.lang]] = None,
        nonce: Optional[Union[str, GlobalAttrs.nonce]] = None,
        popover: Optional[Union[str, GlobalAttrs.popover, Literal['auto', 'manual']]] = None,
        slot: Optional[Union[str, GlobalAttrs.slot]] = None,
        spellcheck: Optional[Union[str, GlobalAttrs.spellcheck, Literal['true', 'false', '']]] = None,
        style: Optional[Union[str, GlobalAttrs.style]] = None,
        tabindex: Optional[Union[str, GlobalAttrs.tabindex, int]] = None,
        title: Optional[Union[str, GlobalAttrs.title]] = None,
        translate: Optional[Union[str, GlobalAttrs.translate, Literal['yes', 'no']]] = None,
        writingsuggestions: Optional[Union[str, GlobalAttrs.writingsuggestions, Literal['true', 'false', '']]] = None,
        children: Optional[list] = None
    ) -> None:
        """
        Initialize 'dt' (Legend for corresponding dd element(s)) element.  
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dt

        :param attrs: A list or dictionary of attributes for the element
        :param id: The element's ID
        :param class_: Classes to which the element belongs
            | Set of space-separated tokens
        :param accesskey: Keyboard shortcut to activate or focus element
            | Ordered set of unique space-separated tokens, none of which are identical to another, each consisting of one code point in length
        :param autocapitalize: Recommended autocapitalization behavior (for supported input methods)
        :param autocorrect: Recommended autocorrection behavior (for supported input methods)
        :param autofocus: Automatically focus the element when the page is loaded
        :param contenteditable: Whether the element is editable
        :param dir: The text directionality of the element
        :param draggable: Whether the element is draggable
        :param enterkeyhint: Hint for selecting an enter key action
        :param hidden: Whether the element is relevant
        :param inert: Whether the element is inert.
        :param inputmode: Hint for selecting an input modality
        :param is_: Creates a customized built-in element
            | Valid custom element name of a defined customized built-in element
        :param itemid: Global identifier for a microdata item
            | Valid URL potentially surrounded by spaces
        :param itemprop: Property names of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs, defined property names, or text*
        :param itemref: Referenced elements
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param itemscope: Introduces a microdata item
        :param itemtype: Item types of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs*
        :param lang: Language of the element
            | Valid BCP 47 language tag or the empty string
        :param nonce: Cryptographic nonce used in Content Security Policy checks [CSP]
        :param popover: Makes the element a popover element
        :param slot: The element's desired slot
        :param spellcheck: Whether the element is to have its spelling and grammar checked
        :param style: Presentational and formatting instructions
            | CSS declarations*
        :param tabindex: Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation
        :param title: Advisory information for the element
        :param translate: Whether the element is to be translated when the page is localized
        :param writingsuggestions: Whether the element can offer writing suggestions or not.
        """ #fmt: skip
        super().__init__(
            "dt",
            void_element=False,
            attrs=attrs,
            children=children
        )
        if not (id is None or id is False):
            self._process_attr("id", id)
        if not (class_ is None or class_ is False):
            self._process_attr("class", class_)
        if not (accesskey is None or accesskey is False):
            self._process_attr("accesskey", accesskey)
        if not (autocapitalize is None or autocapitalize is False):
            self._process_attr("autocapitalize", autocapitalize)
        if not (autocorrect is None or autocorrect is False):
            self._process_attr("autocorrect", autocorrect)
        if not (autofocus is None or autofocus is False):
            self._process_attr("autofocus", autofocus)
        if not (contenteditable is None or contenteditable is False):
            self._process_attr("contenteditable", contenteditable)
        if not (dir is None or dir is False):
            self._process_attr("dir", dir)
        if not (draggable is None or draggable is False):
            self._process_attr("draggable", draggable)
        if not (enterkeyhint is None or enterkeyhint is False):
            self._process_attr("enterkeyhint", enterkeyhint)
        if not (hidden is None or hidden is False):
            self._process_attr("hidden", hidden)
        if not (inert is None or inert is False):
            self._process_attr("inert", inert)
        if not (inputmode is None or inputmode is False):
            self._process_attr("inputmode", inputmode)
        if not (is_ is None or is_ is False):
            self._process_attr("is", is_)
        if not (itemid is None or itemid is False):
            self._process_attr("itemid", itemid)
        if not (itemprop is None or itemprop is False):
            self._process_attr("itemprop", itemprop)
        if not (itemref is None or itemref is False):
            self._process_attr("itemref", itemref)
        if not (itemscope is None or itemscope is False):
            self._process_attr("itemscope", itemscope)
        if not (itemtype is None or itemtype is False):
            self._process_attr("itemtype", itemtype)
        if not (lang is None or lang is False):
            self._process_attr("lang", lang)
        if not (nonce is None or nonce is False):
            self._process_attr("nonce", nonce)
        if not (popover is None or popover is False):
            self._process_attr("popover", popover)
        if not (slot is None or slot is False):
            self._process_attr("slot", slot)
        if not (spellcheck is None or spellcheck is False):
            self._process_attr("spellcheck", spellcheck)
        if not (style is None or style is False):
            self._process_attr("style", style)
        if not (tabindex is None or tabindex is False):
            self._process_attr("tabindex", tabindex)
        if not (title is None or title is False):
            self._process_attr("title", title)
        if not (translate is None or translate is False):
            self._process_attr("translate", translate)
        if not (writingsuggestions is None or writingsuggestions is False):
            self._process_attr("writingsuggestions", writingsuggestions)


class em(BaseElement, GlobalAttrs):
    """
    The 'em' element.  
    Description: Stress emphasis  
    Categories: flow phrasing palpable  
    Parents: phrasing  
    Children: phrasing  
    Interface: HTMLElement  
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/em  
    """ # fmt: skip


    def __init__(
        self,
        attrs: Optional[Union[dict[str, Union[str, dict, list]], list[BaseAttribute]]] = None,
        id: Optional[Union[str, GlobalAttrs.id]] = None,
        class_: Optional[Union[str, GlobalAttrs.class_]] = None,
        accesskey: Optional[Union[str, GlobalAttrs.accesskey]] = None,
        autocapitalize: Optional[Union[str, GlobalAttrs.autocapitalize, Literal['on', 'off', 'none', 'sentences', 'words', 'characters']]] = None,
        autocorrect: Optional[Union[str, GlobalAttrs.autocorrect, Literal['on', 'off']]] = None,
        autofocus: Optional[Union[str, GlobalAttrs.autofocus, bool]] = None,
        contenteditable: Optional[Union[str, GlobalAttrs.contenteditable, Literal['true', 'plaintext-only', 'false']]] = None,
        dir: Optional[Union[str, GlobalAttrs.dir, Literal['ltr', 'rtl', 'auto']]] = None,
        draggable: Optional[Union[str, GlobalAttrs.draggable, Literal['true', 'false']]] = None,
        enterkeyhint: Optional[Union[str, GlobalAttrs.enterkeyhint, Literal['enter', 'done', 'go', 'next', 'previous', 'search', 'send']]] = None,
        hidden: Optional[Union[str, GlobalAttrs.hidden, Literal['until-found', 'hidden', '']]] = None,
        inert: Optional[Union[str, GlobalAttrs.inert, bool]] = None,
        inputmode: Optional[Union[str, GlobalAttrs.inputmode, Literal['none', 'text', 'tel', 'email', 'url', 'numeric', 'decimal', 'search']]] = None,
        is_: Optional[Union[str, GlobalAttrs.is_]] = None,
        itemid: Optional[Union[str, GlobalAttrs.itemid]] = None,
        itemprop: Optional[Union[str, GlobalAttrs.itemprop]] = None,
        itemref: Optional[Union[str, GlobalAttrs.itemref]] = None,
        itemscope: Optional[Union[str, GlobalAttrs.itemscope, bool]] = None,
        itemtype: Optional[Union[str, GlobalAttrs.itemtype]] = None,
        lang: Optional[Union[str, GlobalAttrs.lang]] = None,
        nonce: Optional[Union[str, GlobalAttrs.nonce]] = None,
        popover: Optional[Union[str, GlobalAttrs.popover, Literal['auto', 'manual']]] = None,
        slot: Optional[Union[str, GlobalAttrs.slot]] = None,
        spellcheck: Optional[Union[str, GlobalAttrs.spellcheck, Literal['true', 'false', '']]] = None,
        style: Optional[Union[str, GlobalAttrs.style]] = None,
        tabindex: Optional[Union[str, GlobalAttrs.tabindex, int]] = None,
        title: Optional[Union[str, GlobalAttrs.title]] = None,
        translate: Optional[Union[str, GlobalAttrs.translate, Literal['yes', 'no']]] = None,
        writingsuggestions: Optional[Union[str, GlobalAttrs.writingsuggestions, Literal['true', 'false', '']]] = None,
        children: Optional[list] = None
    ) -> None:
        """
        Initialize 'em' (Stress emphasis) element.  
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/em

        :param attrs: A list or dictionary of attributes for the element
        :param id: The element's ID
        :param class_: Classes to which the element belongs
            | Set of space-separated tokens
        :param accesskey: Keyboard shortcut to activate or focus element
            | Ordered set of unique space-separated tokens, none of which are identical to another, each consisting of one code point in length
        :param autocapitalize: Recommended autocapitalization behavior (for supported input methods)
        :param autocorrect: Recommended autocorrection behavior (for supported input methods)
        :param autofocus: Automatically focus the element when the page is loaded
        :param contenteditable: Whether the element is editable
        :param dir: The text directionality of the element
        :param draggable: Whether the element is draggable
        :param enterkeyhint: Hint for selecting an enter key action
        :param hidden: Whether the element is relevant
        :param inert: Whether the element is inert.
        :param inputmode: Hint for selecting an input modality
        :param is_: Creates a customized built-in element
            | Valid custom element name of a defined customized built-in element
        :param itemid: Global identifier for a microdata item
            | Valid URL potentially surrounded by spaces
        :param itemprop: Property names of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs, defined property names, or text*
        :param itemref: Referenced elements
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param itemscope: Introduces a microdata item
        :param itemtype: Item types of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs*
        :param lang: Language of the element
            | Valid BCP 47 language tag or the empty string
        :param nonce: Cryptographic nonce used in Content Security Policy checks [CSP]
        :param popover: Makes the element a popover element
        :param slot: The element's desired slot
        :param spellcheck: Whether the element is to have its spelling and grammar checked
        :param style: Presentational and formatting instructions
            | CSS declarations*
        :param tabindex: Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation
        :param title: Advisory information for the element
        :param translate: Whether the element is to be translated when the page is localized
        :param writingsuggestions: Whether the element can offer writing suggestions or not.
        """ #fmt: skip
        super().__init__(
            "em",
            void_element=False,
            attrs=attrs,
            children=children
        )
        if not (id is None or id is False):
            self._process_attr("id", id)
        if not (class_ is None or class_ is False):
            self._process_attr("class", class_)
        if not (accesskey is None or accesskey is False):
            self._process_attr("accesskey", accesskey)
        if not (autocapitalize is None or autocapitalize is False):
            self._process_attr("autocapitalize", autocapitalize)
        if not (autocorrect is None or autocorrect is False):
            self._process_attr("autocorrect", autocorrect)
        if not (autofocus is None or autofocus is False):
            self._process_attr("autofocus", autofocus)
        if not (contenteditable is None or contenteditable is False):
            self._process_attr("contenteditable", contenteditable)
        if not (dir is None or dir is False):
            self._process_attr("dir", dir)
        if not (draggable is None or draggable is False):
            self._process_attr("draggable", draggable)
        if not (enterkeyhint is None or enterkeyhint is False):
            self._process_attr("enterkeyhint", enterkeyhint)
        if not (hidden is None or hidden is False):
            self._process_attr("hidden", hidden)
        if not (inert is None or inert is False):
            self._process_attr("inert", inert)
        if not (inputmode is None or inputmode is False):
            self._process_attr("inputmode", inputmode)
        if not (is_ is None or is_ is False):
            self._process_attr("is", is_)
        if not (itemid is None or itemid is False):
            self._process_attr("itemid", itemid)
        if not (itemprop is None or itemprop is False):
            self._process_attr("itemprop", itemprop)
        if not (itemref is None or itemref is False):
            self._process_attr("itemref", itemref)
        if not (itemscope is None or itemscope is False):
            self._process_attr("itemscope", itemscope)
        if not (itemtype is None or itemtype is False):
            self._process_attr("itemtype", itemtype)
        if not (lang is None or lang is False):
            self._process_attr("lang", lang)
        if not (nonce is None or nonce is False):
            self._process_attr("nonce", nonce)
        if not (popover is None or popover is False):
            self._process_attr("popover", popover)
        if not (slot is None or slot is False):
            self._process_attr("slot", slot)
        if not (spellcheck is None or spellcheck is False):
            self._process_attr("spellcheck", spellcheck)
        if not (style is None or style is False):
            self._process_attr("style", style)
        if not (tabindex is None or tabindex is False):
            self._process_attr("tabindex", tabindex)
        if not (title is None or title is False):
            self._process_attr("title", title)
        if not (translate is None or translate is False):
            self._process_attr("translate", translate)
        if not (writingsuggestions is None or writingsuggestions is False):
            self._process_attr("writingsuggestions", writingsuggestions)


class embed(BaseElement, GlobalAttrs, EmbedAttrs):
    """
    The 'embed' element.  
    Description: Plugin  
    Categories: flow phrasing embedded interactive palpable  
    Parents: phrasing  
    Children: empty  
    Interface: HTMLEmbedElement  
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/embed  
    """ # fmt: skip


    def __init__(
        self,
        attrs: Optional[Union[dict[str, Union[str, dict, list]], list[BaseAttribute]]] = None,
        id: Optional[Union[str, GlobalAttrs.id]] = None,
        class_: Optional[Union[str, GlobalAttrs.class_]] = None,
        height: Optional[Union[str, EmbedAttrs.height, int]] = None,
        src: Optional[Union[str, EmbedAttrs.src]] = None,
        type: Optional[Union[str, EmbedAttrs.type]] = None,
        width: Optional[Union[str, EmbedAttrs.width, int]] = None,
        accesskey: Optional[Union[str, GlobalAttrs.accesskey]] = None,
        autocapitalize: Optional[Union[str, GlobalAttrs.autocapitalize, Literal['on', 'off', 'none', 'sentences', 'words', 'characters']]] = None,
        autocorrect: Optional[Union[str, GlobalAttrs.autocorrect, Literal['on', 'off']]] = None,
        autofocus: Optional[Union[str, GlobalAttrs.autofocus, bool]] = None,
        contenteditable: Optional[Union[str, GlobalAttrs.contenteditable, Literal['true', 'plaintext-only', 'false']]] = None,
        dir: Optional[Union[str, GlobalAttrs.dir, Literal['ltr', 'rtl', 'auto']]] = None,
        draggable: Optional[Union[str, GlobalAttrs.draggable, Literal['true', 'false']]] = None,
        enterkeyhint: Optional[Union[str, GlobalAttrs.enterkeyhint, Literal['enter', 'done', 'go', 'next', 'previous', 'search', 'send']]] = None,
        hidden: Optional[Union[str, GlobalAttrs.hidden, Literal['until-found', 'hidden', '']]] = None,
        inert: Optional[Union[str, GlobalAttrs.inert, bool]] = None,
        inputmode: Optional[Union[str, GlobalAttrs.inputmode, Literal['none', 'text', 'tel', 'email', 'url', 'numeric', 'decimal', 'search']]] = None,
        is_: Optional[Union[str, GlobalAttrs.is_]] = None,
        itemid: Optional[Union[str, GlobalAttrs.itemid]] = None,
        itemprop: Optional[Union[str, GlobalAttrs.itemprop]] = None,
        itemref: Optional[Union[str, GlobalAttrs.itemref]] = None,
        itemscope: Optional[Union[str, GlobalAttrs.itemscope, bool]] = None,
        itemtype: Optional[Union[str, GlobalAttrs.itemtype]] = None,
        lang: Optional[Union[str, GlobalAttrs.lang]] = None,
        nonce: Optional[Union[str, GlobalAttrs.nonce]] = None,
        popover: Optional[Union[str, GlobalAttrs.popover, Literal['auto', 'manual']]] = None,
        slot: Optional[Union[str, GlobalAttrs.slot]] = None,
        spellcheck: Optional[Union[str, GlobalAttrs.spellcheck, Literal['true', 'false', '']]] = None,
        style: Optional[Union[str, GlobalAttrs.style]] = None,
        tabindex: Optional[Union[str, GlobalAttrs.tabindex, int]] = None,
        title: Optional[Union[str, GlobalAttrs.title]] = None,
        translate: Optional[Union[str, GlobalAttrs.translate, Literal['yes', 'no']]] = None,
        writingsuggestions: Optional[Union[str, GlobalAttrs.writingsuggestions, Literal['true', 'false', '']]] = None,
        children: Optional[list] = None
    ) -> None:
        """
        Initialize 'embed' (Plugin) element.  
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/embed

        :param attrs: A list or dictionary of attributes for the element
        :param id: The element's ID
        :param class_: Classes to which the element belongs
            | Set of space-separated tokens
        :param height: Vertical dimension
        :param src: Address of the resource
            | Valid non-empty URL potentially surrounded by spaces
        :param type: Type of embedded resource
            | Valid MIME type string
        :param width: Horizontal dimension
        :param accesskey: Keyboard shortcut to activate or focus element
            | Ordered set of unique space-separated tokens, none of which are identical to another, each consisting of one code point in length
        :param autocapitalize: Recommended autocapitalization behavior (for supported input methods)
        :param autocorrect: Recommended autocorrection behavior (for supported input methods)
        :param autofocus: Automatically focus the element when the page is loaded
        :param contenteditable: Whether the element is editable
        :param dir: The text directionality of the element
        :param draggable: Whether the element is draggable
        :param enterkeyhint: Hint for selecting an enter key action
        :param hidden: Whether the element is relevant
        :param inert: Whether the element is inert.
        :param inputmode: Hint for selecting an input modality
        :param is_: Creates a customized built-in element
            | Valid custom element name of a defined customized built-in element
        :param itemid: Global identifier for a microdata item
            | Valid URL potentially surrounded by spaces
        :param itemprop: Property names of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs, defined property names, or text*
        :param itemref: Referenced elements
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param itemscope: Introduces a microdata item
        :param itemtype: Item types of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs*
        :param lang: Language of the element
            | Valid BCP 47 language tag or the empty string
        :param nonce: Cryptographic nonce used in Content Security Policy checks [CSP]
        :param popover: Makes the element a popover element
        :param slot: The element's desired slot
        :param spellcheck: Whether the element is to have its spelling and grammar checked
        :param style: Presentational and formatting instructions
            | CSS declarations*
        :param tabindex: Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation
        :param title: Advisory information for the element
        :param translate: Whether the element is to be translated when the page is localized
        :param writingsuggestions: Whether the element can offer writing suggestions or not.
        """ #fmt: skip
        super().__init__(
            "embed",
            void_element=True,
            attrs=attrs,
            children=children
        )
        if not (id is None or id is False):
            self._process_attr("id", id)
        if not (class_ is None or class_ is False):
            self._process_attr("class", class_)
        if not (height is None or height is False):
            self._process_attr("height", height)
        if not (src is None or src is False):
            self._process_attr("src", src)
        if not (type is None or type is False):
            self._process_attr("type", type)
        if not (width is None or width is False):
            self._process_attr("width", width)
        if not (accesskey is None or accesskey is False):
            self._process_attr("accesskey", accesskey)
        if not (autocapitalize is None or autocapitalize is False):
            self._process_attr("autocapitalize", autocapitalize)
        if not (autocorrect is None or autocorrect is False):
            self._process_attr("autocorrect", autocorrect)
        if not (autofocus is None or autofocus is False):
            self._process_attr("autofocus", autofocus)
        if not (contenteditable is None or contenteditable is False):
            self._process_attr("contenteditable", contenteditable)
        if not (dir is None or dir is False):
            self._process_attr("dir", dir)
        if not (draggable is None or draggable is False):
            self._process_attr("draggable", draggable)
        if not (enterkeyhint is None or enterkeyhint is False):
            self._process_attr("enterkeyhint", enterkeyhint)
        if not (hidden is None or hidden is False):
            self._process_attr("hidden", hidden)
        if not (inert is None or inert is False):
            self._process_attr("inert", inert)
        if not (inputmode is None or inputmode is False):
            self._process_attr("inputmode", inputmode)
        if not (is_ is None or is_ is False):
            self._process_attr("is", is_)
        if not (itemid is None or itemid is False):
            self._process_attr("itemid", itemid)
        if not (itemprop is None or itemprop is False):
            self._process_attr("itemprop", itemprop)
        if not (itemref is None or itemref is False):
            self._process_attr("itemref", itemref)
        if not (itemscope is None or itemscope is False):
            self._process_attr("itemscope", itemscope)
        if not (itemtype is None or itemtype is False):
            self._process_attr("itemtype", itemtype)
        if not (lang is None or lang is False):
            self._process_attr("lang", lang)
        if not (nonce is None or nonce is False):
            self._process_attr("nonce", nonce)
        if not (popover is None or popover is False):
            self._process_attr("popover", popover)
        if not (slot is None or slot is False):
            self._process_attr("slot", slot)
        if not (spellcheck is None or spellcheck is False):
            self._process_attr("spellcheck", spellcheck)
        if not (style is None or style is False):
            self._process_attr("style", style)
        if not (tabindex is None or tabindex is False):
            self._process_attr("tabindex", tabindex)
        if not (title is None or title is False):
            self._process_attr("title", title)
        if not (translate is None or translate is False):
            self._process_attr("translate", translate)
        if not (writingsuggestions is None or writingsuggestions is False):
            self._process_attr("writingsuggestions", writingsuggestions)


class fieldset(BaseElement, GlobalAttrs, FieldsetAttrs):
    """
    The 'fieldset' element.  
    Description: Group of form controls  
    Categories: flow listed form-associated palpable  
    Parents: flow  
    Children: legend* flow  
    Interface: HTMLFieldSetElement  
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/fieldset  
    """ # fmt: skip


    def __init__(
        self,
        attrs: Optional[Union[dict[str, Union[str, dict, list]], list[BaseAttribute]]] = None,
        id: Optional[Union[str, GlobalAttrs.id]] = None,
        class_: Optional[Union[str, GlobalAttrs.class_]] = None,
        disabled: Optional[Union[str, FieldsetAttrs.disabled, bool]] = None,
        form: Optional[Union[str, FieldsetAttrs.form]] = None,
        name: Optional[Union[str, FieldsetAttrs.name]] = None,
        accesskey: Optional[Union[str, GlobalAttrs.accesskey]] = None,
        autocapitalize: Optional[Union[str, GlobalAttrs.autocapitalize, Literal['on', 'off', 'none', 'sentences', 'words', 'characters']]] = None,
        autocorrect: Optional[Union[str, GlobalAttrs.autocorrect, Literal['on', 'off']]] = None,
        autofocus: Optional[Union[str, GlobalAttrs.autofocus, bool]] = None,
        contenteditable: Optional[Union[str, GlobalAttrs.contenteditable, Literal['true', 'plaintext-only', 'false']]] = None,
        dir: Optional[Union[str, GlobalAttrs.dir, Literal['ltr', 'rtl', 'auto']]] = None,
        draggable: Optional[Union[str, GlobalAttrs.draggable, Literal['true', 'false']]] = None,
        enterkeyhint: Optional[Union[str, GlobalAttrs.enterkeyhint, Literal['enter', 'done', 'go', 'next', 'previous', 'search', 'send']]] = None,
        hidden: Optional[Union[str, GlobalAttrs.hidden, Literal['until-found', 'hidden', '']]] = None,
        inert: Optional[Union[str, GlobalAttrs.inert, bool]] = None,
        inputmode: Optional[Union[str, GlobalAttrs.inputmode, Literal['none', 'text', 'tel', 'email', 'url', 'numeric', 'decimal', 'search']]] = None,
        is_: Optional[Union[str, GlobalAttrs.is_]] = None,
        itemid: Optional[Union[str, GlobalAttrs.itemid]] = None,
        itemprop: Optional[Union[str, GlobalAttrs.itemprop]] = None,
        itemref: Optional[Union[str, GlobalAttrs.itemref]] = None,
        itemscope: Optional[Union[str, GlobalAttrs.itemscope, bool]] = None,
        itemtype: Optional[Union[str, GlobalAttrs.itemtype]] = None,
        lang: Optional[Union[str, GlobalAttrs.lang]] = None,
        nonce: Optional[Union[str, GlobalAttrs.nonce]] = None,
        popover: Optional[Union[str, GlobalAttrs.popover, Literal['auto', 'manual']]] = None,
        slot: Optional[Union[str, GlobalAttrs.slot]] = None,
        spellcheck: Optional[Union[str, GlobalAttrs.spellcheck, Literal['true', 'false', '']]] = None,
        style: Optional[Union[str, GlobalAttrs.style]] = None,
        tabindex: Optional[Union[str, GlobalAttrs.tabindex, int]] = None,
        title: Optional[Union[str, GlobalAttrs.title]] = None,
        translate: Optional[Union[str, GlobalAttrs.translate, Literal['yes', 'no']]] = None,
        writingsuggestions: Optional[Union[str, GlobalAttrs.writingsuggestions, Literal['true', 'false', '']]] = None,
        children: Optional[list] = None
    ) -> None:
        """
        Initialize 'fieldset' (Group of form controls) element.  
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/fieldset

        :param attrs: A list or dictionary of attributes for the element
        :param id: The element's ID
        :param class_: Classes to which the element belongs
            | Set of space-separated tokens
        :param disabled: Whether the descendant form controls, except any inside legend, are disabled
        :param form: Associates the element with a form element
            | ID*
        :param name: Name of the element to use for form submission and in the form.elements API
        :param accesskey: Keyboard shortcut to activate or focus element
            | Ordered set of unique space-separated tokens, none of which are identical to another, each consisting of one code point in length
        :param autocapitalize: Recommended autocapitalization behavior (for supported input methods)
        :param autocorrect: Recommended autocorrection behavior (for supported input methods)
        :param autofocus: Automatically focus the element when the page is loaded
        :param contenteditable: Whether the element is editable
        :param dir: The text directionality of the element
        :param draggable: Whether the element is draggable
        :param enterkeyhint: Hint for selecting an enter key action
        :param hidden: Whether the element is relevant
        :param inert: Whether the element is inert.
        :param inputmode: Hint for selecting an input modality
        :param is_: Creates a customized built-in element
            | Valid custom element name of a defined customized built-in element
        :param itemid: Global identifier for a microdata item
            | Valid URL potentially surrounded by spaces
        :param itemprop: Property names of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs, defined property names, or text*
        :param itemref: Referenced elements
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param itemscope: Introduces a microdata item
        :param itemtype: Item types of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs*
        :param lang: Language of the element
            | Valid BCP 47 language tag or the empty string
        :param nonce: Cryptographic nonce used in Content Security Policy checks [CSP]
        :param popover: Makes the element a popover element
        :param slot: The element's desired slot
        :param spellcheck: Whether the element is to have its spelling and grammar checked
        :param style: Presentational and formatting instructions
            | CSS declarations*
        :param tabindex: Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation
        :param title: Advisory information for the element
        :param translate: Whether the element is to be translated when the page is localized
        :param writingsuggestions: Whether the element can offer writing suggestions or not.
        """ #fmt: skip
        super().__init__(
            "fieldset",
            void_element=False,
            attrs=attrs,
            children=children
        )
        if not (id is None or id is False):
            self._process_attr("id", id)
        if not (class_ is None or class_ is False):
            self._process_attr("class", class_)
        if not (disabled is None or disabled is False):
            self._process_attr("disabled", disabled)
        if not (form is None or form is False):
            self._process_attr("form", form)
        if not (name is None or name is False):
            self._process_attr("name", name)
        if not (accesskey is None or accesskey is False):
            self._process_attr("accesskey", accesskey)
        if not (autocapitalize is None or autocapitalize is False):
            self._process_attr("autocapitalize", autocapitalize)
        if not (autocorrect is None or autocorrect is False):
            self._process_attr("autocorrect", autocorrect)
        if not (autofocus is None or autofocus is False):
            self._process_attr("autofocus", autofocus)
        if not (contenteditable is None or contenteditable is False):
            self._process_attr("contenteditable", contenteditable)
        if not (dir is None or dir is False):
            self._process_attr("dir", dir)
        if not (draggable is None or draggable is False):
            self._process_attr("draggable", draggable)
        if not (enterkeyhint is None or enterkeyhint is False):
            self._process_attr("enterkeyhint", enterkeyhint)
        if not (hidden is None or hidden is False):
            self._process_attr("hidden", hidden)
        if not (inert is None or inert is False):
            self._process_attr("inert", inert)
        if not (inputmode is None or inputmode is False):
            self._process_attr("inputmode", inputmode)
        if not (is_ is None or is_ is False):
            self._process_attr("is", is_)
        if not (itemid is None or itemid is False):
            self._process_attr("itemid", itemid)
        if not (itemprop is None or itemprop is False):
            self._process_attr("itemprop", itemprop)
        if not (itemref is None or itemref is False):
            self._process_attr("itemref", itemref)
        if not (itemscope is None or itemscope is False):
            self._process_attr("itemscope", itemscope)
        if not (itemtype is None or itemtype is False):
            self._process_attr("itemtype", itemtype)
        if not (lang is None or lang is False):
            self._process_attr("lang", lang)
        if not (nonce is None or nonce is False):
            self._process_attr("nonce", nonce)
        if not (popover is None or popover is False):
            self._process_attr("popover", popover)
        if not (slot is None or slot is False):
            self._process_attr("slot", slot)
        if not (spellcheck is None or spellcheck is False):
            self._process_attr("spellcheck", spellcheck)
        if not (style is None or style is False):
            self._process_attr("style", style)
        if not (tabindex is None or tabindex is False):
            self._process_attr("tabindex", tabindex)
        if not (title is None or title is False):
            self._process_attr("title", title)
        if not (translate is None or translate is False):
            self._process_attr("translate", translate)
        if not (writingsuggestions is None or writingsuggestions is False):
            self._process_attr("writingsuggestions", writingsuggestions)


class figcaption(BaseElement, GlobalAttrs):
    """
    The 'figcaption' element.  
    Description: Caption for figure  
    Categories: none  
    Parents: figure  
    Children: flow  
    Interface: HTMLElement  
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/figcaption  
    """ # fmt: skip


    def __init__(
        self,
        attrs: Optional[Union[dict[str, Union[str, dict, list]], list[BaseAttribute]]] = None,
        id: Optional[Union[str, GlobalAttrs.id]] = None,
        class_: Optional[Union[str, GlobalAttrs.class_]] = None,
        accesskey: Optional[Union[str, GlobalAttrs.accesskey]] = None,
        autocapitalize: Optional[Union[str, GlobalAttrs.autocapitalize, Literal['on', 'off', 'none', 'sentences', 'words', 'characters']]] = None,
        autocorrect: Optional[Union[str, GlobalAttrs.autocorrect, Literal['on', 'off']]] = None,
        autofocus: Optional[Union[str, GlobalAttrs.autofocus, bool]] = None,
        contenteditable: Optional[Union[str, GlobalAttrs.contenteditable, Literal['true', 'plaintext-only', 'false']]] = None,
        dir: Optional[Union[str, GlobalAttrs.dir, Literal['ltr', 'rtl', 'auto']]] = None,
        draggable: Optional[Union[str, GlobalAttrs.draggable, Literal['true', 'false']]] = None,
        enterkeyhint: Optional[Union[str, GlobalAttrs.enterkeyhint, Literal['enter', 'done', 'go', 'next', 'previous', 'search', 'send']]] = None,
        hidden: Optional[Union[str, GlobalAttrs.hidden, Literal['until-found', 'hidden', '']]] = None,
        inert: Optional[Union[str, GlobalAttrs.inert, bool]] = None,
        inputmode: Optional[Union[str, GlobalAttrs.inputmode, Literal['none', 'text', 'tel', 'email', 'url', 'numeric', 'decimal', 'search']]] = None,
        is_: Optional[Union[str, GlobalAttrs.is_]] = None,
        itemid: Optional[Union[str, GlobalAttrs.itemid]] = None,
        itemprop: Optional[Union[str, GlobalAttrs.itemprop]] = None,
        itemref: Optional[Union[str, GlobalAttrs.itemref]] = None,
        itemscope: Optional[Union[str, GlobalAttrs.itemscope, bool]] = None,
        itemtype: Optional[Union[str, GlobalAttrs.itemtype]] = None,
        lang: Optional[Union[str, GlobalAttrs.lang]] = None,
        nonce: Optional[Union[str, GlobalAttrs.nonce]] = None,
        popover: Optional[Union[str, GlobalAttrs.popover, Literal['auto', 'manual']]] = None,
        slot: Optional[Union[str, GlobalAttrs.slot]] = None,
        spellcheck: Optional[Union[str, GlobalAttrs.spellcheck, Literal['true', 'false', '']]] = None,
        style: Optional[Union[str, GlobalAttrs.style]] = None,
        tabindex: Optional[Union[str, GlobalAttrs.tabindex, int]] = None,
        title: Optional[Union[str, GlobalAttrs.title]] = None,
        translate: Optional[Union[str, GlobalAttrs.translate, Literal['yes', 'no']]] = None,
        writingsuggestions: Optional[Union[str, GlobalAttrs.writingsuggestions, Literal['true', 'false', '']]] = None,
        children: Optional[list] = None
    ) -> None:
        """
        Initialize 'figcaption' (Caption for figure) element.  
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/figcaption

        :param attrs: A list or dictionary of attributes for the element
        :param id: The element's ID
        :param class_: Classes to which the element belongs
            | Set of space-separated tokens
        :param accesskey: Keyboard shortcut to activate or focus element
            | Ordered set of unique space-separated tokens, none of which are identical to another, each consisting of one code point in length
        :param autocapitalize: Recommended autocapitalization behavior (for supported input methods)
        :param autocorrect: Recommended autocorrection behavior (for supported input methods)
        :param autofocus: Automatically focus the element when the page is loaded
        :param contenteditable: Whether the element is editable
        :param dir: The text directionality of the element
        :param draggable: Whether the element is draggable
        :param enterkeyhint: Hint for selecting an enter key action
        :param hidden: Whether the element is relevant
        :param inert: Whether the element is inert.
        :param inputmode: Hint for selecting an input modality
        :param is_: Creates a customized built-in element
            | Valid custom element name of a defined customized built-in element
        :param itemid: Global identifier for a microdata item
            | Valid URL potentially surrounded by spaces
        :param itemprop: Property names of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs, defined property names, or text*
        :param itemref: Referenced elements
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param itemscope: Introduces a microdata item
        :param itemtype: Item types of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs*
        :param lang: Language of the element
            | Valid BCP 47 language tag or the empty string
        :param nonce: Cryptographic nonce used in Content Security Policy checks [CSP]
        :param popover: Makes the element a popover element
        :param slot: The element's desired slot
        :param spellcheck: Whether the element is to have its spelling and grammar checked
        :param style: Presentational and formatting instructions
            | CSS declarations*
        :param tabindex: Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation
        :param title: Advisory information for the element
        :param translate: Whether the element is to be translated when the page is localized
        :param writingsuggestions: Whether the element can offer writing suggestions or not.
        """ #fmt: skip
        super().__init__(
            "figcaption",
            void_element=False,
            attrs=attrs,
            children=children
        )
        if not (id is None or id is False):
            self._process_attr("id", id)
        if not (class_ is None or class_ is False):
            self._process_attr("class", class_)
        if not (accesskey is None or accesskey is False):
            self._process_attr("accesskey", accesskey)
        if not (autocapitalize is None or autocapitalize is False):
            self._process_attr("autocapitalize", autocapitalize)
        if not (autocorrect is None or autocorrect is False):
            self._process_attr("autocorrect", autocorrect)
        if not (autofocus is None or autofocus is False):
            self._process_attr("autofocus", autofocus)
        if not (contenteditable is None or contenteditable is False):
            self._process_attr("contenteditable", contenteditable)
        if not (dir is None or dir is False):
            self._process_attr("dir", dir)
        if not (draggable is None or draggable is False):
            self._process_attr("draggable", draggable)
        if not (enterkeyhint is None or enterkeyhint is False):
            self._process_attr("enterkeyhint", enterkeyhint)
        if not (hidden is None or hidden is False):
            self._process_attr("hidden", hidden)
        if not (inert is None or inert is False):
            self._process_attr("inert", inert)
        if not (inputmode is None or inputmode is False):
            self._process_attr("inputmode", inputmode)
        if not (is_ is None or is_ is False):
            self._process_attr("is", is_)
        if not (itemid is None or itemid is False):
            self._process_attr("itemid", itemid)
        if not (itemprop is None or itemprop is False):
            self._process_attr("itemprop", itemprop)
        if not (itemref is None or itemref is False):
            self._process_attr("itemref", itemref)
        if not (itemscope is None or itemscope is False):
            self._process_attr("itemscope", itemscope)
        if not (itemtype is None or itemtype is False):
            self._process_attr("itemtype", itemtype)
        if not (lang is None or lang is False):
            self._process_attr("lang", lang)
        if not (nonce is None or nonce is False):
            self._process_attr("nonce", nonce)
        if not (popover is None or popover is False):
            self._process_attr("popover", popover)
        if not (slot is None or slot is False):
            self._process_attr("slot", slot)
        if not (spellcheck is None or spellcheck is False):
            self._process_attr("spellcheck", spellcheck)
        if not (style is None or style is False):
            self._process_attr("style", style)
        if not (tabindex is None or tabindex is False):
            self._process_attr("tabindex", tabindex)
        if not (title is None or title is False):
            self._process_attr("title", title)
        if not (translate is None or translate is False):
            self._process_attr("translate", translate)
        if not (writingsuggestions is None or writingsuggestions is False):
            self._process_attr("writingsuggestions", writingsuggestions)


class figure(BaseElement, GlobalAttrs):
    """
    The 'figure' element.  
    Description: Figure with optional caption  
    Categories: flow palpable  
    Parents: flow  
    Children: figcaption* flow  
    Interface: HTMLElement  
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/figure  
    """ # fmt: skip


    def __init__(
        self,
        attrs: Optional[Union[dict[str, Union[str, dict, list]], list[BaseAttribute]]] = None,
        id: Optional[Union[str, GlobalAttrs.id]] = None,
        class_: Optional[Union[str, GlobalAttrs.class_]] = None,
        accesskey: Optional[Union[str, GlobalAttrs.accesskey]] = None,
        autocapitalize: Optional[Union[str, GlobalAttrs.autocapitalize, Literal['on', 'off', 'none', 'sentences', 'words', 'characters']]] = None,
        autocorrect: Optional[Union[str, GlobalAttrs.autocorrect, Literal['on', 'off']]] = None,
        autofocus: Optional[Union[str, GlobalAttrs.autofocus, bool]] = None,
        contenteditable: Optional[Union[str, GlobalAttrs.contenteditable, Literal['true', 'plaintext-only', 'false']]] = None,
        dir: Optional[Union[str, GlobalAttrs.dir, Literal['ltr', 'rtl', 'auto']]] = None,
        draggable: Optional[Union[str, GlobalAttrs.draggable, Literal['true', 'false']]] = None,
        enterkeyhint: Optional[Union[str, GlobalAttrs.enterkeyhint, Literal['enter', 'done', 'go', 'next', 'previous', 'search', 'send']]] = None,
        hidden: Optional[Union[str, GlobalAttrs.hidden, Literal['until-found', 'hidden', '']]] = None,
        inert: Optional[Union[str, GlobalAttrs.inert, bool]] = None,
        inputmode: Optional[Union[str, GlobalAttrs.inputmode, Literal['none', 'text', 'tel', 'email', 'url', 'numeric', 'decimal', 'search']]] = None,
        is_: Optional[Union[str, GlobalAttrs.is_]] = None,
        itemid: Optional[Union[str, GlobalAttrs.itemid]] = None,
        itemprop: Optional[Union[str, GlobalAttrs.itemprop]] = None,
        itemref: Optional[Union[str, GlobalAttrs.itemref]] = None,
        itemscope: Optional[Union[str, GlobalAttrs.itemscope, bool]] = None,
        itemtype: Optional[Union[str, GlobalAttrs.itemtype]] = None,
        lang: Optional[Union[str, GlobalAttrs.lang]] = None,
        nonce: Optional[Union[str, GlobalAttrs.nonce]] = None,
        popover: Optional[Union[str, GlobalAttrs.popover, Literal['auto', 'manual']]] = None,
        slot: Optional[Union[str, GlobalAttrs.slot]] = None,
        spellcheck: Optional[Union[str, GlobalAttrs.spellcheck, Literal['true', 'false', '']]] = None,
        style: Optional[Union[str, GlobalAttrs.style]] = None,
        tabindex: Optional[Union[str, GlobalAttrs.tabindex, int]] = None,
        title: Optional[Union[str, GlobalAttrs.title]] = None,
        translate: Optional[Union[str, GlobalAttrs.translate, Literal['yes', 'no']]] = None,
        writingsuggestions: Optional[Union[str, GlobalAttrs.writingsuggestions, Literal['true', 'false', '']]] = None,
        children: Optional[list] = None
    ) -> None:
        """
        Initialize 'figure' (Figure with optional caption) element.  
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/figure

        :param attrs: A list or dictionary of attributes for the element
        :param id: The element's ID
        :param class_: Classes to which the element belongs
            | Set of space-separated tokens
        :param accesskey: Keyboard shortcut to activate or focus element
            | Ordered set of unique space-separated tokens, none of which are identical to another, each consisting of one code point in length
        :param autocapitalize: Recommended autocapitalization behavior (for supported input methods)
        :param autocorrect: Recommended autocorrection behavior (for supported input methods)
        :param autofocus: Automatically focus the element when the page is loaded
        :param contenteditable: Whether the element is editable
        :param dir: The text directionality of the element
        :param draggable: Whether the element is draggable
        :param enterkeyhint: Hint for selecting an enter key action
        :param hidden: Whether the element is relevant
        :param inert: Whether the element is inert.
        :param inputmode: Hint for selecting an input modality
        :param is_: Creates a customized built-in element
            | Valid custom element name of a defined customized built-in element
        :param itemid: Global identifier for a microdata item
            | Valid URL potentially surrounded by spaces
        :param itemprop: Property names of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs, defined property names, or text*
        :param itemref: Referenced elements
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param itemscope: Introduces a microdata item
        :param itemtype: Item types of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs*
        :param lang: Language of the element
            | Valid BCP 47 language tag or the empty string
        :param nonce: Cryptographic nonce used in Content Security Policy checks [CSP]
        :param popover: Makes the element a popover element
        :param slot: The element's desired slot
        :param spellcheck: Whether the element is to have its spelling and grammar checked
        :param style: Presentational and formatting instructions
            | CSS declarations*
        :param tabindex: Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation
        :param title: Advisory information for the element
        :param translate: Whether the element is to be translated when the page is localized
        :param writingsuggestions: Whether the element can offer writing suggestions or not.
        """ #fmt: skip
        super().__init__(
            "figure",
            void_element=False,
            attrs=attrs,
            children=children
        )
        if not (id is None or id is False):
            self._process_attr("id", id)
        if not (class_ is None or class_ is False):
            self._process_attr("class", class_)
        if not (accesskey is None or accesskey is False):
            self._process_attr("accesskey", accesskey)
        if not (autocapitalize is None or autocapitalize is False):
            self._process_attr("autocapitalize", autocapitalize)
        if not (autocorrect is None or autocorrect is False):
            self._process_attr("autocorrect", autocorrect)
        if not (autofocus is None or autofocus is False):
            self._process_attr("autofocus", autofocus)
        if not (contenteditable is None or contenteditable is False):
            self._process_attr("contenteditable", contenteditable)
        if not (dir is None or dir is False):
            self._process_attr("dir", dir)
        if not (draggable is None or draggable is False):
            self._process_attr("draggable", draggable)
        if not (enterkeyhint is None or enterkeyhint is False):
            self._process_attr("enterkeyhint", enterkeyhint)
        if not (hidden is None or hidden is False):
            self._process_attr("hidden", hidden)
        if not (inert is None or inert is False):
            self._process_attr("inert", inert)
        if not (inputmode is None or inputmode is False):
            self._process_attr("inputmode", inputmode)
        if not (is_ is None or is_ is False):
            self._process_attr("is", is_)
        if not (itemid is None or itemid is False):
            self._process_attr("itemid", itemid)
        if not (itemprop is None or itemprop is False):
            self._process_attr("itemprop", itemprop)
        if not (itemref is None or itemref is False):
            self._process_attr("itemref", itemref)
        if not (itemscope is None or itemscope is False):
            self._process_attr("itemscope", itemscope)
        if not (itemtype is None or itemtype is False):
            self._process_attr("itemtype", itemtype)
        if not (lang is None or lang is False):
            self._process_attr("lang", lang)
        if not (nonce is None or nonce is False):
            self._process_attr("nonce", nonce)
        if not (popover is None or popover is False):
            self._process_attr("popover", popover)
        if not (slot is None or slot is False):
            self._process_attr("slot", slot)
        if not (spellcheck is None or spellcheck is False):
            self._process_attr("spellcheck", spellcheck)
        if not (style is None or style is False):
            self._process_attr("style", style)
        if not (tabindex is None or tabindex is False):
            self._process_attr("tabindex", tabindex)
        if not (title is None or title is False):
            self._process_attr("title", title)
        if not (translate is None or translate is False):
            self._process_attr("translate", translate)
        if not (writingsuggestions is None or writingsuggestions is False):
            self._process_attr("writingsuggestions", writingsuggestions)


class footer(BaseElement, GlobalAttrs):
    """
    The 'footer' element.  
    Description: Footer for a page or section  
    Categories: flow palpable  
    Parents: flow  
    Children: flow*  
    Interface: HTMLElement  
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/footer  
    """ # fmt: skip


    def __init__(
        self,
        attrs: Optional[Union[dict[str, Union[str, dict, list]], list[BaseAttribute]]] = None,
        id: Optional[Union[str, GlobalAttrs.id]] = None,
        class_: Optional[Union[str, GlobalAttrs.class_]] = None,
        accesskey: Optional[Union[str, GlobalAttrs.accesskey]] = None,
        autocapitalize: Optional[Union[str, GlobalAttrs.autocapitalize, Literal['on', 'off', 'none', 'sentences', 'words', 'characters']]] = None,
        autocorrect: Optional[Union[str, GlobalAttrs.autocorrect, Literal['on', 'off']]] = None,
        autofocus: Optional[Union[str, GlobalAttrs.autofocus, bool]] = None,
        contenteditable: Optional[Union[str, GlobalAttrs.contenteditable, Literal['true', 'plaintext-only', 'false']]] = None,
        dir: Optional[Union[str, GlobalAttrs.dir, Literal['ltr', 'rtl', 'auto']]] = None,
        draggable: Optional[Union[str, GlobalAttrs.draggable, Literal['true', 'false']]] = None,
        enterkeyhint: Optional[Union[str, GlobalAttrs.enterkeyhint, Literal['enter', 'done', 'go', 'next', 'previous', 'search', 'send']]] = None,
        hidden: Optional[Union[str, GlobalAttrs.hidden, Literal['until-found', 'hidden', '']]] = None,
        inert: Optional[Union[str, GlobalAttrs.inert, bool]] = None,
        inputmode: Optional[Union[str, GlobalAttrs.inputmode, Literal['none', 'text', 'tel', 'email', 'url', 'numeric', 'decimal', 'search']]] = None,
        is_: Optional[Union[str, GlobalAttrs.is_]] = None,
        itemid: Optional[Union[str, GlobalAttrs.itemid]] = None,
        itemprop: Optional[Union[str, GlobalAttrs.itemprop]] = None,
        itemref: Optional[Union[str, GlobalAttrs.itemref]] = None,
        itemscope: Optional[Union[str, GlobalAttrs.itemscope, bool]] = None,
        itemtype: Optional[Union[str, GlobalAttrs.itemtype]] = None,
        lang: Optional[Union[str, GlobalAttrs.lang]] = None,
        nonce: Optional[Union[str, GlobalAttrs.nonce]] = None,
        popover: Optional[Union[str, GlobalAttrs.popover, Literal['auto', 'manual']]] = None,
        slot: Optional[Union[str, GlobalAttrs.slot]] = None,
        spellcheck: Optional[Union[str, GlobalAttrs.spellcheck, Literal['true', 'false', '']]] = None,
        style: Optional[Union[str, GlobalAttrs.style]] = None,
        tabindex: Optional[Union[str, GlobalAttrs.tabindex, int]] = None,
        title: Optional[Union[str, GlobalAttrs.title]] = None,
        translate: Optional[Union[str, GlobalAttrs.translate, Literal['yes', 'no']]] = None,
        writingsuggestions: Optional[Union[str, GlobalAttrs.writingsuggestions, Literal['true', 'false', '']]] = None,
        children: Optional[list] = None
    ) -> None:
        """
        Initialize 'footer' (Footer for a page or section) element.  
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/footer

        :param attrs: A list or dictionary of attributes for the element
        :param id: The element's ID
        :param class_: Classes to which the element belongs
            | Set of space-separated tokens
        :param accesskey: Keyboard shortcut to activate or focus element
            | Ordered set of unique space-separated tokens, none of which are identical to another, each consisting of one code point in length
        :param autocapitalize: Recommended autocapitalization behavior (for supported input methods)
        :param autocorrect: Recommended autocorrection behavior (for supported input methods)
        :param autofocus: Automatically focus the element when the page is loaded
        :param contenteditable: Whether the element is editable
        :param dir: The text directionality of the element
        :param draggable: Whether the element is draggable
        :param enterkeyhint: Hint for selecting an enter key action
        :param hidden: Whether the element is relevant
        :param inert: Whether the element is inert.
        :param inputmode: Hint for selecting an input modality
        :param is_: Creates a customized built-in element
            | Valid custom element name of a defined customized built-in element
        :param itemid: Global identifier for a microdata item
            | Valid URL potentially surrounded by spaces
        :param itemprop: Property names of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs, defined property names, or text*
        :param itemref: Referenced elements
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param itemscope: Introduces a microdata item
        :param itemtype: Item types of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs*
        :param lang: Language of the element
            | Valid BCP 47 language tag or the empty string
        :param nonce: Cryptographic nonce used in Content Security Policy checks [CSP]
        :param popover: Makes the element a popover element
        :param slot: The element's desired slot
        :param spellcheck: Whether the element is to have its spelling and grammar checked
        :param style: Presentational and formatting instructions
            | CSS declarations*
        :param tabindex: Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation
        :param title: Advisory information for the element
        :param translate: Whether the element is to be translated when the page is localized
        :param writingsuggestions: Whether the element can offer writing suggestions or not.
        """ #fmt: skip
        super().__init__(
            "footer",
            void_element=False,
            attrs=attrs,
            children=children
        )
        if not (id is None or id is False):
            self._process_attr("id", id)
        if not (class_ is None or class_ is False):
            self._process_attr("class", class_)
        if not (accesskey is None or accesskey is False):
            self._process_attr("accesskey", accesskey)
        if not (autocapitalize is None or autocapitalize is False):
            self._process_attr("autocapitalize", autocapitalize)
        if not (autocorrect is None or autocorrect is False):
            self._process_attr("autocorrect", autocorrect)
        if not (autofocus is None or autofocus is False):
            self._process_attr("autofocus", autofocus)
        if not (contenteditable is None or contenteditable is False):
            self._process_attr("contenteditable", contenteditable)
        if not (dir is None or dir is False):
            self._process_attr("dir", dir)
        if not (draggable is None or draggable is False):
            self._process_attr("draggable", draggable)
        if not (enterkeyhint is None or enterkeyhint is False):
            self._process_attr("enterkeyhint", enterkeyhint)
        if not (hidden is None or hidden is False):
            self._process_attr("hidden", hidden)
        if not (inert is None or inert is False):
            self._process_attr("inert", inert)
        if not (inputmode is None or inputmode is False):
            self._process_attr("inputmode", inputmode)
        if not (is_ is None or is_ is False):
            self._process_attr("is", is_)
        if not (itemid is None or itemid is False):
            self._process_attr("itemid", itemid)
        if not (itemprop is None or itemprop is False):
            self._process_attr("itemprop", itemprop)
        if not (itemref is None or itemref is False):
            self._process_attr("itemref", itemref)
        if not (itemscope is None or itemscope is False):
            self._process_attr("itemscope", itemscope)
        if not (itemtype is None or itemtype is False):
            self._process_attr("itemtype", itemtype)
        if not (lang is None or lang is False):
            self._process_attr("lang", lang)
        if not (nonce is None or nonce is False):
            self._process_attr("nonce", nonce)
        if not (popover is None or popover is False):
            self._process_attr("popover", popover)
        if not (slot is None or slot is False):
            self._process_attr("slot", slot)
        if not (spellcheck is None or spellcheck is False):
            self._process_attr("spellcheck", spellcheck)
        if not (style is None or style is False):
            self._process_attr("style", style)
        if not (tabindex is None or tabindex is False):
            self._process_attr("tabindex", tabindex)
        if not (title is None or title is False):
            self._process_attr("title", title)
        if not (translate is None or translate is False):
            self._process_attr("translate", translate)
        if not (writingsuggestions is None or writingsuggestions is False):
            self._process_attr("writingsuggestions", writingsuggestions)


class form(BaseElement, GlobalAttrs, FormAttrs):
    """
    The 'form' element.  
    Description: User-submittable form  
    Categories: flow palpable  
    Parents: flow  
    Children: flow*  
    Interface: HTMLFormElement  
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form  
    """ # fmt: skip


    def __init__(
        self,
        attrs: Optional[Union[dict[str, Union[str, dict, list]], list[BaseAttribute]]] = None,
        id: Optional[Union[str, GlobalAttrs.id]] = None,
        class_: Optional[Union[str, GlobalAttrs.class_]] = None,
        accept_charset: Optional[Union[str, FormAttrs.accept_charset]] = None,
        action: Optional[Union[str, FormAttrs.action]] = None,
        autocomplete: Optional[Union[str, FormAttrs.autocomplete, Literal['on', 'off']]] = None,
        enctype: Optional[Union[str, FormAttrs.enctype, Literal['application/x-www-form-urlencoded', 'multipart/form-data', 'text/plain']]] = None,
        method: Optional[Union[str, FormAttrs.method, Literal['GET', 'POST', 'dialog']]] = None,
        name: Optional[Union[str, FormAttrs.name]] = None,
        novalidate: Optional[Union[str, FormAttrs.novalidate, bool]] = None,
        target: Optional[Union[str, FormAttrs.target]] = None,
        accesskey: Optional[Union[str, GlobalAttrs.accesskey]] = None,
        autocapitalize: Optional[Union[str, GlobalAttrs.autocapitalize, Literal['on', 'off', 'none', 'sentences', 'words', 'characters']]] = None,
        autocorrect: Optional[Union[str, GlobalAttrs.autocorrect, Literal['on', 'off']]] = None,
        autofocus: Optional[Union[str, GlobalAttrs.autofocus, bool]] = None,
        contenteditable: Optional[Union[str, GlobalAttrs.contenteditable, Literal['true', 'plaintext-only', 'false']]] = None,
        dir: Optional[Union[str, GlobalAttrs.dir, Literal['ltr', 'rtl', 'auto']]] = None,
        draggable: Optional[Union[str, GlobalAttrs.draggable, Literal['true', 'false']]] = None,
        enterkeyhint: Optional[Union[str, GlobalAttrs.enterkeyhint, Literal['enter', 'done', 'go', 'next', 'previous', 'search', 'send']]] = None,
        hidden: Optional[Union[str, GlobalAttrs.hidden, Literal['until-found', 'hidden', '']]] = None,
        inert: Optional[Union[str, GlobalAttrs.inert, bool]] = None,
        inputmode: Optional[Union[str, GlobalAttrs.inputmode, Literal['none', 'text', 'tel', 'email', 'url', 'numeric', 'decimal', 'search']]] = None,
        is_: Optional[Union[str, GlobalAttrs.is_]] = None,
        itemid: Optional[Union[str, GlobalAttrs.itemid]] = None,
        itemprop: Optional[Union[str, GlobalAttrs.itemprop]] = None,
        itemref: Optional[Union[str, GlobalAttrs.itemref]] = None,
        itemscope: Optional[Union[str, GlobalAttrs.itemscope, bool]] = None,
        itemtype: Optional[Union[str, GlobalAttrs.itemtype]] = None,
        lang: Optional[Union[str, GlobalAttrs.lang]] = None,
        nonce: Optional[Union[str, GlobalAttrs.nonce]] = None,
        popover: Optional[Union[str, GlobalAttrs.popover, Literal['auto', 'manual']]] = None,
        slot: Optional[Union[str, GlobalAttrs.slot]] = None,
        spellcheck: Optional[Union[str, GlobalAttrs.spellcheck, Literal['true', 'false', '']]] = None,
        style: Optional[Union[str, GlobalAttrs.style]] = None,
        tabindex: Optional[Union[str, GlobalAttrs.tabindex, int]] = None,
        title: Optional[Union[str, GlobalAttrs.title]] = None,
        translate: Optional[Union[str, GlobalAttrs.translate, Literal['yes', 'no']]] = None,
        writingsuggestions: Optional[Union[str, GlobalAttrs.writingsuggestions, Literal['true', 'false', '']]] = None,
        children: Optional[list] = None
    ) -> None:
        """
        Initialize 'form' (User-submittable form) element.  
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form

        :param attrs: A list or dictionary of attributes for the element
        :param id: The element's ID
        :param class_: Classes to which the element belongs
            | Set of space-separated tokens
        :param accept_charset: Character encodings to use for form submission
            | ASCII case-insensitive match for "UTF-8"
        :param action: URL to use for form submission
            | Valid non-empty URL potentially surrounded by spaces
        :param autocomplete: Default setting for autofill feature for controls in the form
        :param enctype: Entry list encoding type to use for form submission
        :param method: Variant to use for form submission
        :param name: Name of form to use in the document.forms API
        :param novalidate: Bypass form control validation for form submission
        :param target: Navigable for form submission
            | Valid navigable target name or keyword
        :param accesskey: Keyboard shortcut to activate or focus element
            | Ordered set of unique space-separated tokens, none of which are identical to another, each consisting of one code point in length
        :param autocapitalize: Recommended autocapitalization behavior (for supported input methods)
        :param autocorrect: Recommended autocorrection behavior (for supported input methods)
        :param autofocus: Automatically focus the element when the page is loaded
        :param contenteditable: Whether the element is editable
        :param dir: The text directionality of the element
        :param draggable: Whether the element is draggable
        :param enterkeyhint: Hint for selecting an enter key action
        :param hidden: Whether the element is relevant
        :param inert: Whether the element is inert.
        :param inputmode: Hint for selecting an input modality
        :param is_: Creates a customized built-in element
            | Valid custom element name of a defined customized built-in element
        :param itemid: Global identifier for a microdata item
            | Valid URL potentially surrounded by spaces
        :param itemprop: Property names of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs, defined property names, or text*
        :param itemref: Referenced elements
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param itemscope: Introduces a microdata item
        :param itemtype: Item types of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs*
        :param lang: Language of the element
            | Valid BCP 47 language tag or the empty string
        :param nonce: Cryptographic nonce used in Content Security Policy checks [CSP]
        :param popover: Makes the element a popover element
        :param slot: The element's desired slot
        :param spellcheck: Whether the element is to have its spelling and grammar checked
        :param style: Presentational and formatting instructions
            | CSS declarations*
        :param tabindex: Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation
        :param title: Advisory information for the element
        :param translate: Whether the element is to be translated when the page is localized
        :param writingsuggestions: Whether the element can offer writing suggestions or not.
        """ #fmt: skip
        super().__init__(
            "form",
            void_element=False,
            attrs=attrs,
            children=children
        )
        if not (id is None or id is False):
            self._process_attr("id", id)
        if not (class_ is None or class_ is False):
            self._process_attr("class", class_)
        if not (accept_charset is None or accept_charset is False):
            self._process_attr("accept-charset", accept_charset)
        if not (action is None or action is False):
            self._process_attr("action", action)
        if not (autocomplete is None or autocomplete is False):
            self._process_attr("autocomplete", autocomplete)
        if not (enctype is None or enctype is False):
            self._process_attr("enctype", enctype)
        if not (method is None or method is False):
            self._process_attr("method", method)
        if not (name is None or name is False):
            self._process_attr("name", name)
        if not (novalidate is None or novalidate is False):
            self._process_attr("novalidate", novalidate)
        if not (target is None or target is False):
            self._process_attr("target", target)
        if not (accesskey is None or accesskey is False):
            self._process_attr("accesskey", accesskey)
        if not (autocapitalize is None or autocapitalize is False):
            self._process_attr("autocapitalize", autocapitalize)
        if not (autocorrect is None or autocorrect is False):
            self._process_attr("autocorrect", autocorrect)
        if not (autofocus is None or autofocus is False):
            self._process_attr("autofocus", autofocus)
        if not (contenteditable is None or contenteditable is False):
            self._process_attr("contenteditable", contenteditable)
        if not (dir is None or dir is False):
            self._process_attr("dir", dir)
        if not (draggable is None or draggable is False):
            self._process_attr("draggable", draggable)
        if not (enterkeyhint is None or enterkeyhint is False):
            self._process_attr("enterkeyhint", enterkeyhint)
        if not (hidden is None or hidden is False):
            self._process_attr("hidden", hidden)
        if not (inert is None or inert is False):
            self._process_attr("inert", inert)
        if not (inputmode is None or inputmode is False):
            self._process_attr("inputmode", inputmode)
        if not (is_ is None or is_ is False):
            self._process_attr("is", is_)
        if not (itemid is None or itemid is False):
            self._process_attr("itemid", itemid)
        if not (itemprop is None or itemprop is False):
            self._process_attr("itemprop", itemprop)
        if not (itemref is None or itemref is False):
            self._process_attr("itemref", itemref)
        if not (itemscope is None or itemscope is False):
            self._process_attr("itemscope", itemscope)
        if not (itemtype is None or itemtype is False):
            self._process_attr("itemtype", itemtype)
        if not (lang is None or lang is False):
            self._process_attr("lang", lang)
        if not (nonce is None or nonce is False):
            self._process_attr("nonce", nonce)
        if not (popover is None or popover is False):
            self._process_attr("popover", popover)
        if not (slot is None or slot is False):
            self._process_attr("slot", slot)
        if not (spellcheck is None or spellcheck is False):
            self._process_attr("spellcheck", spellcheck)
        if not (style is None or style is False):
            self._process_attr("style", style)
        if not (tabindex is None or tabindex is False):
            self._process_attr("tabindex", tabindex)
        if not (title is None or title is False):
            self._process_attr("title", title)
        if not (translate is None or translate is False):
            self._process_attr("translate", translate)
        if not (writingsuggestions is None or writingsuggestions is False):
            self._process_attr("writingsuggestions", writingsuggestions)


class h1(BaseElement, GlobalAttrs):
    """
    The 'h1' element.  
    Description: Heading  
    Categories: flow heading palpable  
    Parents: legend summary flow  
    Children: phrasing  
    Interface: HTMLHeadingElement  
    Documentation: None  
    """ # fmt: skip


    def __init__(
        self,
        attrs: Optional[Union[dict[str, Union[str, dict, list]], list[BaseAttribute]]] = None,
        id: Optional[Union[str, GlobalAttrs.id]] = None,
        class_: Optional[Union[str, GlobalAttrs.class_]] = None,
        accesskey: Optional[Union[str, GlobalAttrs.accesskey]] = None,
        autocapitalize: Optional[Union[str, GlobalAttrs.autocapitalize, Literal['on', 'off', 'none', 'sentences', 'words', 'characters']]] = None,
        autocorrect: Optional[Union[str, GlobalAttrs.autocorrect, Literal['on', 'off']]] = None,
        autofocus: Optional[Union[str, GlobalAttrs.autofocus, bool]] = None,
        contenteditable: Optional[Union[str, GlobalAttrs.contenteditable, Literal['true', 'plaintext-only', 'false']]] = None,
        dir: Optional[Union[str, GlobalAttrs.dir, Literal['ltr', 'rtl', 'auto']]] = None,
        draggable: Optional[Union[str, GlobalAttrs.draggable, Literal['true', 'false']]] = None,
        enterkeyhint: Optional[Union[str, GlobalAttrs.enterkeyhint, Literal['enter', 'done', 'go', 'next', 'previous', 'search', 'send']]] = None,
        hidden: Optional[Union[str, GlobalAttrs.hidden, Literal['until-found', 'hidden', '']]] = None,
        inert: Optional[Union[str, GlobalAttrs.inert, bool]] = None,
        inputmode: Optional[Union[str, GlobalAttrs.inputmode, Literal['none', 'text', 'tel', 'email', 'url', 'numeric', 'decimal', 'search']]] = None,
        is_: Optional[Union[str, GlobalAttrs.is_]] = None,
        itemid: Optional[Union[str, GlobalAttrs.itemid]] = None,
        itemprop: Optional[Union[str, GlobalAttrs.itemprop]] = None,
        itemref: Optional[Union[str, GlobalAttrs.itemref]] = None,
        itemscope: Optional[Union[str, GlobalAttrs.itemscope, bool]] = None,
        itemtype: Optional[Union[str, GlobalAttrs.itemtype]] = None,
        lang: Optional[Union[str, GlobalAttrs.lang]] = None,
        nonce: Optional[Union[str, GlobalAttrs.nonce]] = None,
        popover: Optional[Union[str, GlobalAttrs.popover, Literal['auto', 'manual']]] = None,
        slot: Optional[Union[str, GlobalAttrs.slot]] = None,
        spellcheck: Optional[Union[str, GlobalAttrs.spellcheck, Literal['true', 'false', '']]] = None,
        style: Optional[Union[str, GlobalAttrs.style]] = None,
        tabindex: Optional[Union[str, GlobalAttrs.tabindex, int]] = None,
        title: Optional[Union[str, GlobalAttrs.title]] = None,
        translate: Optional[Union[str, GlobalAttrs.translate, Literal['yes', 'no']]] = None,
        writingsuggestions: Optional[Union[str, GlobalAttrs.writingsuggestions, Literal['true', 'false', '']]] = None,
        children: Optional[list] = None
    ) -> None:
        """
        Initialize 'h1' (Heading) element.  
        Documentation: None

        :param attrs: A list or dictionary of attributes for the element
        :param id: The element's ID
        :param class_: Classes to which the element belongs
            | Set of space-separated tokens
        :param accesskey: Keyboard shortcut to activate or focus element
            | Ordered set of unique space-separated tokens, none of which are identical to another, each consisting of one code point in length
        :param autocapitalize: Recommended autocapitalization behavior (for supported input methods)
        :param autocorrect: Recommended autocorrection behavior (for supported input methods)
        :param autofocus: Automatically focus the element when the page is loaded
        :param contenteditable: Whether the element is editable
        :param dir: The text directionality of the element
        :param draggable: Whether the element is draggable
        :param enterkeyhint: Hint for selecting an enter key action
        :param hidden: Whether the element is relevant
        :param inert: Whether the element is inert.
        :param inputmode: Hint for selecting an input modality
        :param is_: Creates a customized built-in element
            | Valid custom element name of a defined customized built-in element
        :param itemid: Global identifier for a microdata item
            | Valid URL potentially surrounded by spaces
        :param itemprop: Property names of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs, defined property names, or text*
        :param itemref: Referenced elements
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param itemscope: Introduces a microdata item
        :param itemtype: Item types of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs*
        :param lang: Language of the element
            | Valid BCP 47 language tag or the empty string
        :param nonce: Cryptographic nonce used in Content Security Policy checks [CSP]
        :param popover: Makes the element a popover element
        :param slot: The element's desired slot
        :param spellcheck: Whether the element is to have its spelling and grammar checked
        :param style: Presentational and formatting instructions
            | CSS declarations*
        :param tabindex: Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation
        :param title: Advisory information for the element
        :param translate: Whether the element is to be translated when the page is localized
        :param writingsuggestions: Whether the element can offer writing suggestions or not.
        """ #fmt: skip
        super().__init__(
            "h1",
            void_element=False,
            attrs=attrs,
            children=children
        )
        if not (id is None or id is False):
            self._process_attr("id", id)
        if not (class_ is None or class_ is False):
            self._process_attr("class", class_)
        if not (accesskey is None or accesskey is False):
            self._process_attr("accesskey", accesskey)
        if not (autocapitalize is None or autocapitalize is False):
            self._process_attr("autocapitalize", autocapitalize)
        if not (autocorrect is None or autocorrect is False):
            self._process_attr("autocorrect", autocorrect)
        if not (autofocus is None or autofocus is False):
            self._process_attr("autofocus", autofocus)
        if not (contenteditable is None or contenteditable is False):
            self._process_attr("contenteditable", contenteditable)
        if not (dir is None or dir is False):
            self._process_attr("dir", dir)
        if not (draggable is None or draggable is False):
            self._process_attr("draggable", draggable)
        if not (enterkeyhint is None or enterkeyhint is False):
            self._process_attr("enterkeyhint", enterkeyhint)
        if not (hidden is None or hidden is False):
            self._process_attr("hidden", hidden)
        if not (inert is None or inert is False):
            self._process_attr("inert", inert)
        if not (inputmode is None or inputmode is False):
            self._process_attr("inputmode", inputmode)
        if not (is_ is None or is_ is False):
            self._process_attr("is", is_)
        if not (itemid is None or itemid is False):
            self._process_attr("itemid", itemid)
        if not (itemprop is None or itemprop is False):
            self._process_attr("itemprop", itemprop)
        if not (itemref is None or itemref is False):
            self._process_attr("itemref", itemref)
        if not (itemscope is None or itemscope is False):
            self._process_attr("itemscope", itemscope)
        if not (itemtype is None or itemtype is False):
            self._process_attr("itemtype", itemtype)
        if not (lang is None or lang is False):
            self._process_attr("lang", lang)
        if not (nonce is None or nonce is False):
            self._process_attr("nonce", nonce)
        if not (popover is None or popover is False):
            self._process_attr("popover", popover)
        if not (slot is None or slot is False):
            self._process_attr("slot", slot)
        if not (spellcheck is None or spellcheck is False):
            self._process_attr("spellcheck", spellcheck)
        if not (style is None or style is False):
            self._process_attr("style", style)
        if not (tabindex is None or tabindex is False):
            self._process_attr("tabindex", tabindex)
        if not (title is None or title is False):
            self._process_attr("title", title)
        if not (translate is None or translate is False):
            self._process_attr("translate", translate)
        if not (writingsuggestions is None or writingsuggestions is False):
            self._process_attr("writingsuggestions", writingsuggestions)


class h2(BaseElement, GlobalAttrs):
    """
    The 'h2' element.  
    Description: Heading  
    Categories: flow heading palpable  
    Parents: legend summary flow  
    Children: phrasing  
    Interface: HTMLHeadingElement  
    Documentation: None  
    """ # fmt: skip


    def __init__(
        self,
        attrs: Optional[Union[dict[str, Union[str, dict, list]], list[BaseAttribute]]] = None,
        id: Optional[Union[str, GlobalAttrs.id]] = None,
        class_: Optional[Union[str, GlobalAttrs.class_]] = None,
        accesskey: Optional[Union[str, GlobalAttrs.accesskey]] = None,
        autocapitalize: Optional[Union[str, GlobalAttrs.autocapitalize, Literal['on', 'off', 'none', 'sentences', 'words', 'characters']]] = None,
        autocorrect: Optional[Union[str, GlobalAttrs.autocorrect, Literal['on', 'off']]] = None,
        autofocus: Optional[Union[str, GlobalAttrs.autofocus, bool]] = None,
        contenteditable: Optional[Union[str, GlobalAttrs.contenteditable, Literal['true', 'plaintext-only', 'false']]] = None,
        dir: Optional[Union[str, GlobalAttrs.dir, Literal['ltr', 'rtl', 'auto']]] = None,
        draggable: Optional[Union[str, GlobalAttrs.draggable, Literal['true', 'false']]] = None,
        enterkeyhint: Optional[Union[str, GlobalAttrs.enterkeyhint, Literal['enter', 'done', 'go', 'next', 'previous', 'search', 'send']]] = None,
        hidden: Optional[Union[str, GlobalAttrs.hidden, Literal['until-found', 'hidden', '']]] = None,
        inert: Optional[Union[str, GlobalAttrs.inert, bool]] = None,
        inputmode: Optional[Union[str, GlobalAttrs.inputmode, Literal['none', 'text', 'tel', 'email', 'url', 'numeric', 'decimal', 'search']]] = None,
        is_: Optional[Union[str, GlobalAttrs.is_]] = None,
        itemid: Optional[Union[str, GlobalAttrs.itemid]] = None,
        itemprop: Optional[Union[str, GlobalAttrs.itemprop]] = None,
        itemref: Optional[Union[str, GlobalAttrs.itemref]] = None,
        itemscope: Optional[Union[str, GlobalAttrs.itemscope, bool]] = None,
        itemtype: Optional[Union[str, GlobalAttrs.itemtype]] = None,
        lang: Optional[Union[str, GlobalAttrs.lang]] = None,
        nonce: Optional[Union[str, GlobalAttrs.nonce]] = None,
        popover: Optional[Union[str, GlobalAttrs.popover, Literal['auto', 'manual']]] = None,
        slot: Optional[Union[str, GlobalAttrs.slot]] = None,
        spellcheck: Optional[Union[str, GlobalAttrs.spellcheck, Literal['true', 'false', '']]] = None,
        style: Optional[Union[str, GlobalAttrs.style]] = None,
        tabindex: Optional[Union[str, GlobalAttrs.tabindex, int]] = None,
        title: Optional[Union[str, GlobalAttrs.title]] = None,
        translate: Optional[Union[str, GlobalAttrs.translate, Literal['yes', 'no']]] = None,
        writingsuggestions: Optional[Union[str, GlobalAttrs.writingsuggestions, Literal['true', 'false', '']]] = None,
        children: Optional[list] = None
    ) -> None:
        """
        Initialize 'h2' (Heading) element.  
        Documentation: None

        :param attrs: A list or dictionary of attributes for the element
        :param id: The element's ID
        :param class_: Classes to which the element belongs
            | Set of space-separated tokens
        :param accesskey: Keyboard shortcut to activate or focus element
            | Ordered set of unique space-separated tokens, none of which are identical to another, each consisting of one code point in length
        :param autocapitalize: Recommended autocapitalization behavior (for supported input methods)
        :param autocorrect: Recommended autocorrection behavior (for supported input methods)
        :param autofocus: Automatically focus the element when the page is loaded
        :param contenteditable: Whether the element is editable
        :param dir: The text directionality of the element
        :param draggable: Whether the element is draggable
        :param enterkeyhint: Hint for selecting an enter key action
        :param hidden: Whether the element is relevant
        :param inert: Whether the element is inert.
        :param inputmode: Hint for selecting an input modality
        :param is_: Creates a customized built-in element
            | Valid custom element name of a defined customized built-in element
        :param itemid: Global identifier for a microdata item
            | Valid URL potentially surrounded by spaces
        :param itemprop: Property names of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs, defined property names, or text*
        :param itemref: Referenced elements
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param itemscope: Introduces a microdata item
        :param itemtype: Item types of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs*
        :param lang: Language of the element
            | Valid BCP 47 language tag or the empty string
        :param nonce: Cryptographic nonce used in Content Security Policy checks [CSP]
        :param popover: Makes the element a popover element
        :param slot: The element's desired slot
        :param spellcheck: Whether the element is to have its spelling and grammar checked
        :param style: Presentational and formatting instructions
            | CSS declarations*
        :param tabindex: Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation
        :param title: Advisory information for the element
        :param translate: Whether the element is to be translated when the page is localized
        :param writingsuggestions: Whether the element can offer writing suggestions or not.
        """ #fmt: skip
        super().__init__(
            "h2",
            void_element=False,
            attrs=attrs,
            children=children
        )
        if not (id is None or id is False):
            self._process_attr("id", id)
        if not (class_ is None or class_ is False):
            self._process_attr("class", class_)
        if not (accesskey is None or accesskey is False):
            self._process_attr("accesskey", accesskey)
        if not (autocapitalize is None or autocapitalize is False):
            self._process_attr("autocapitalize", autocapitalize)
        if not (autocorrect is None or autocorrect is False):
            self._process_attr("autocorrect", autocorrect)
        if not (autofocus is None or autofocus is False):
            self._process_attr("autofocus", autofocus)
        if not (contenteditable is None or contenteditable is False):
            self._process_attr("contenteditable", contenteditable)
        if not (dir is None or dir is False):
            self._process_attr("dir", dir)
        if not (draggable is None or draggable is False):
            self._process_attr("draggable", draggable)
        if not (enterkeyhint is None or enterkeyhint is False):
            self._process_attr("enterkeyhint", enterkeyhint)
        if not (hidden is None or hidden is False):
            self._process_attr("hidden", hidden)
        if not (inert is None or inert is False):
            self._process_attr("inert", inert)
        if not (inputmode is None or inputmode is False):
            self._process_attr("inputmode", inputmode)
        if not (is_ is None or is_ is False):
            self._process_attr("is", is_)
        if not (itemid is None or itemid is False):
            self._process_attr("itemid", itemid)
        if not (itemprop is None or itemprop is False):
            self._process_attr("itemprop", itemprop)
        if not (itemref is None or itemref is False):
            self._process_attr("itemref", itemref)
        if not (itemscope is None or itemscope is False):
            self._process_attr("itemscope", itemscope)
        if not (itemtype is None or itemtype is False):
            self._process_attr("itemtype", itemtype)
        if not (lang is None or lang is False):
            self._process_attr("lang", lang)
        if not (nonce is None or nonce is False):
            self._process_attr("nonce", nonce)
        if not (popover is None or popover is False):
            self._process_attr("popover", popover)
        if not (slot is None or slot is False):
            self._process_attr("slot", slot)
        if not (spellcheck is None or spellcheck is False):
            self._process_attr("spellcheck", spellcheck)
        if not (style is None or style is False):
            self._process_attr("style", style)
        if not (tabindex is None or tabindex is False):
            self._process_attr("tabindex", tabindex)
        if not (title is None or title is False):
            self._process_attr("title", title)
        if not (translate is None or translate is False):
            self._process_attr("translate", translate)
        if not (writingsuggestions is None or writingsuggestions is False):
            self._process_attr("writingsuggestions", writingsuggestions)


class h3(BaseElement, GlobalAttrs):
    """
    The 'h3' element.  
    Description: Heading  
    Categories: flow heading palpable  
    Parents: legend summary flow  
    Children: phrasing  
    Interface: HTMLHeadingElement  
    Documentation: None  
    """ # fmt: skip


    def __init__(
        self,
        attrs: Optional[Union[dict[str, Union[str, dict, list]], list[BaseAttribute]]] = None,
        id: Optional[Union[str, GlobalAttrs.id]] = None,
        class_: Optional[Union[str, GlobalAttrs.class_]] = None,
        accesskey: Optional[Union[str, GlobalAttrs.accesskey]] = None,
        autocapitalize: Optional[Union[str, GlobalAttrs.autocapitalize, Literal['on', 'off', 'none', 'sentences', 'words', 'characters']]] = None,
        autocorrect: Optional[Union[str, GlobalAttrs.autocorrect, Literal['on', 'off']]] = None,
        autofocus: Optional[Union[str, GlobalAttrs.autofocus, bool]] = None,
        contenteditable: Optional[Union[str, GlobalAttrs.contenteditable, Literal['true', 'plaintext-only', 'false']]] = None,
        dir: Optional[Union[str, GlobalAttrs.dir, Literal['ltr', 'rtl', 'auto']]] = None,
        draggable: Optional[Union[str, GlobalAttrs.draggable, Literal['true', 'false']]] = None,
        enterkeyhint: Optional[Union[str, GlobalAttrs.enterkeyhint, Literal['enter', 'done', 'go', 'next', 'previous', 'search', 'send']]] = None,
        hidden: Optional[Union[str, GlobalAttrs.hidden, Literal['until-found', 'hidden', '']]] = None,
        inert: Optional[Union[str, GlobalAttrs.inert, bool]] = None,
        inputmode: Optional[Union[str, GlobalAttrs.inputmode, Literal['none', 'text', 'tel', 'email', 'url', 'numeric', 'decimal', 'search']]] = None,
        is_: Optional[Union[str, GlobalAttrs.is_]] = None,
        itemid: Optional[Union[str, GlobalAttrs.itemid]] = None,
        itemprop: Optional[Union[str, GlobalAttrs.itemprop]] = None,
        itemref: Optional[Union[str, GlobalAttrs.itemref]] = None,
        itemscope: Optional[Union[str, GlobalAttrs.itemscope, bool]] = None,
        itemtype: Optional[Union[str, GlobalAttrs.itemtype]] = None,
        lang: Optional[Union[str, GlobalAttrs.lang]] = None,
        nonce: Optional[Union[str, GlobalAttrs.nonce]] = None,
        popover: Optional[Union[str, GlobalAttrs.popover, Literal['auto', 'manual']]] = None,
        slot: Optional[Union[str, GlobalAttrs.slot]] = None,
        spellcheck: Optional[Union[str, GlobalAttrs.spellcheck, Literal['true', 'false', '']]] = None,
        style: Optional[Union[str, GlobalAttrs.style]] = None,
        tabindex: Optional[Union[str, GlobalAttrs.tabindex, int]] = None,
        title: Optional[Union[str, GlobalAttrs.title]] = None,
        translate: Optional[Union[str, GlobalAttrs.translate, Literal['yes', 'no']]] = None,
        writingsuggestions: Optional[Union[str, GlobalAttrs.writingsuggestions, Literal['true', 'false', '']]] = None,
        children: Optional[list] = None
    ) -> None:
        """
        Initialize 'h3' (Heading) element.  
        Documentation: None

        :param attrs: A list or dictionary of attributes for the element
        :param id: The element's ID
        :param class_: Classes to which the element belongs
            | Set of space-separated tokens
        :param accesskey: Keyboard shortcut to activate or focus element
            | Ordered set of unique space-separated tokens, none of which are identical to another, each consisting of one code point in length
        :param autocapitalize: Recommended autocapitalization behavior (for supported input methods)
        :param autocorrect: Recommended autocorrection behavior (for supported input methods)
        :param autofocus: Automatically focus the element when the page is loaded
        :param contenteditable: Whether the element is editable
        :param dir: The text directionality of the element
        :param draggable: Whether the element is draggable
        :param enterkeyhint: Hint for selecting an enter key action
        :param hidden: Whether the element is relevant
        :param inert: Whether the element is inert.
        :param inputmode: Hint for selecting an input modality
        :param is_: Creates a customized built-in element
            | Valid custom element name of a defined customized built-in element
        :param itemid: Global identifier for a microdata item
            | Valid URL potentially surrounded by spaces
        :param itemprop: Property names of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs, defined property names, or text*
        :param itemref: Referenced elements
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param itemscope: Introduces a microdata item
        :param itemtype: Item types of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs*
        :param lang: Language of the element
            | Valid BCP 47 language tag or the empty string
        :param nonce: Cryptographic nonce used in Content Security Policy checks [CSP]
        :param popover: Makes the element a popover element
        :param slot: The element's desired slot
        :param spellcheck: Whether the element is to have its spelling and grammar checked
        :param style: Presentational and formatting instructions
            | CSS declarations*
        :param tabindex: Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation
        :param title: Advisory information for the element
        :param translate: Whether the element is to be translated when the page is localized
        :param writingsuggestions: Whether the element can offer writing suggestions or not.
        """ #fmt: skip
        super().__init__(
            "h3",
            void_element=False,
            attrs=attrs,
            children=children
        )
        if not (id is None or id is False):
            self._process_attr("id", id)
        if not (class_ is None or class_ is False):
            self._process_attr("class", class_)
        if not (accesskey is None or accesskey is False):
            self._process_attr("accesskey", accesskey)
        if not (autocapitalize is None or autocapitalize is False):
            self._process_attr("autocapitalize", autocapitalize)
        if not (autocorrect is None or autocorrect is False):
            self._process_attr("autocorrect", autocorrect)
        if not (autofocus is None or autofocus is False):
            self._process_attr("autofocus", autofocus)
        if not (contenteditable is None or contenteditable is False):
            self._process_attr("contenteditable", contenteditable)
        if not (dir is None or dir is False):
            self._process_attr("dir", dir)
        if not (draggable is None or draggable is False):
            self._process_attr("draggable", draggable)
        if not (enterkeyhint is None or enterkeyhint is False):
            self._process_attr("enterkeyhint", enterkeyhint)
        if not (hidden is None or hidden is False):
            self._process_attr("hidden", hidden)
        if not (inert is None or inert is False):
            self._process_attr("inert", inert)
        if not (inputmode is None or inputmode is False):
            self._process_attr("inputmode", inputmode)
        if not (is_ is None or is_ is False):
            self._process_attr("is", is_)
        if not (itemid is None or itemid is False):
            self._process_attr("itemid", itemid)
        if not (itemprop is None or itemprop is False):
            self._process_attr("itemprop", itemprop)
        if not (itemref is None or itemref is False):
            self._process_attr("itemref", itemref)
        if not (itemscope is None or itemscope is False):
            self._process_attr("itemscope", itemscope)
        if not (itemtype is None or itemtype is False):
            self._process_attr("itemtype", itemtype)
        if not (lang is None or lang is False):
            self._process_attr("lang", lang)
        if not (nonce is None or nonce is False):
            self._process_attr("nonce", nonce)
        if not (popover is None or popover is False):
            self._process_attr("popover", popover)
        if not (slot is None or slot is False):
            self._process_attr("slot", slot)
        if not (spellcheck is None or spellcheck is False):
            self._process_attr("spellcheck", spellcheck)
        if not (style is None or style is False):
            self._process_attr("style", style)
        if not (tabindex is None or tabindex is False):
            self._process_attr("tabindex", tabindex)
        if not (title is None or title is False):
            self._process_attr("title", title)
        if not (translate is None or translate is False):
            self._process_attr("translate", translate)
        if not (writingsuggestions is None or writingsuggestions is False):
            self._process_attr("writingsuggestions", writingsuggestions)


class h4(BaseElement, GlobalAttrs):
    """
    The 'h4' element.  
    Description: Heading  
    Categories: flow heading palpable  
    Parents: legend summary flow  
    Children: phrasing  
    Interface: HTMLHeadingElement  
    Documentation: None  
    """ # fmt: skip


    def __init__(
        self,
        attrs: Optional[Union[dict[str, Union[str, dict, list]], list[BaseAttribute]]] = None,
        id: Optional[Union[str, GlobalAttrs.id]] = None,
        class_: Optional[Union[str, GlobalAttrs.class_]] = None,
        accesskey: Optional[Union[str, GlobalAttrs.accesskey]] = None,
        autocapitalize: Optional[Union[str, GlobalAttrs.autocapitalize, Literal['on', 'off', 'none', 'sentences', 'words', 'characters']]] = None,
        autocorrect: Optional[Union[str, GlobalAttrs.autocorrect, Literal['on', 'off']]] = None,
        autofocus: Optional[Union[str, GlobalAttrs.autofocus, bool]] = None,
        contenteditable: Optional[Union[str, GlobalAttrs.contenteditable, Literal['true', 'plaintext-only', 'false']]] = None,
        dir: Optional[Union[str, GlobalAttrs.dir, Literal['ltr', 'rtl', 'auto']]] = None,
        draggable: Optional[Union[str, GlobalAttrs.draggable, Literal['true', 'false']]] = None,
        enterkeyhint: Optional[Union[str, GlobalAttrs.enterkeyhint, Literal['enter', 'done', 'go', 'next', 'previous', 'search', 'send']]] = None,
        hidden: Optional[Union[str, GlobalAttrs.hidden, Literal['until-found', 'hidden', '']]] = None,
        inert: Optional[Union[str, GlobalAttrs.inert, bool]] = None,
        inputmode: Optional[Union[str, GlobalAttrs.inputmode, Literal['none', 'text', 'tel', 'email', 'url', 'numeric', 'decimal', 'search']]] = None,
        is_: Optional[Union[str, GlobalAttrs.is_]] = None,
        itemid: Optional[Union[str, GlobalAttrs.itemid]] = None,
        itemprop: Optional[Union[str, GlobalAttrs.itemprop]] = None,
        itemref: Optional[Union[str, GlobalAttrs.itemref]] = None,
        itemscope: Optional[Union[str, GlobalAttrs.itemscope, bool]] = None,
        itemtype: Optional[Union[str, GlobalAttrs.itemtype]] = None,
        lang: Optional[Union[str, GlobalAttrs.lang]] = None,
        nonce: Optional[Union[str, GlobalAttrs.nonce]] = None,
        popover: Optional[Union[str, GlobalAttrs.popover, Literal['auto', 'manual']]] = None,
        slot: Optional[Union[str, GlobalAttrs.slot]] = None,
        spellcheck: Optional[Union[str, GlobalAttrs.spellcheck, Literal['true', 'false', '']]] = None,
        style: Optional[Union[str, GlobalAttrs.style]] = None,
        tabindex: Optional[Union[str, GlobalAttrs.tabindex, int]] = None,
        title: Optional[Union[str, GlobalAttrs.title]] = None,
        translate: Optional[Union[str, GlobalAttrs.translate, Literal['yes', 'no']]] = None,
        writingsuggestions: Optional[Union[str, GlobalAttrs.writingsuggestions, Literal['true', 'false', '']]] = None,
        children: Optional[list] = None
    ) -> None:
        """
        Initialize 'h4' (Heading) element.  
        Documentation: None

        :param attrs: A list or dictionary of attributes for the element
        :param id: The element's ID
        :param class_: Classes to which the element belongs
            | Set of space-separated tokens
        :param accesskey: Keyboard shortcut to activate or focus element
            | Ordered set of unique space-separated tokens, none of which are identical to another, each consisting of one code point in length
        :param autocapitalize: Recommended autocapitalization behavior (for supported input methods)
        :param autocorrect: Recommended autocorrection behavior (for supported input methods)
        :param autofocus: Automatically focus the element when the page is loaded
        :param contenteditable: Whether the element is editable
        :param dir: The text directionality of the element
        :param draggable: Whether the element is draggable
        :param enterkeyhint: Hint for selecting an enter key action
        :param hidden: Whether the element is relevant
        :param inert: Whether the element is inert.
        :param inputmode: Hint for selecting an input modality
        :param is_: Creates a customized built-in element
            | Valid custom element name of a defined customized built-in element
        :param itemid: Global identifier for a microdata item
            | Valid URL potentially surrounded by spaces
        :param itemprop: Property names of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs, defined property names, or text*
        :param itemref: Referenced elements
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param itemscope: Introduces a microdata item
        :param itemtype: Item types of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs*
        :param lang: Language of the element
            | Valid BCP 47 language tag or the empty string
        :param nonce: Cryptographic nonce used in Content Security Policy checks [CSP]
        :param popover: Makes the element a popover element
        :param slot: The element's desired slot
        :param spellcheck: Whether the element is to have its spelling and grammar checked
        :param style: Presentational and formatting instructions
            | CSS declarations*
        :param tabindex: Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation
        :param title: Advisory information for the element
        :param translate: Whether the element is to be translated when the page is localized
        :param writingsuggestions: Whether the element can offer writing suggestions or not.
        """ #fmt: skip
        super().__init__(
            "h4",
            void_element=False,
            attrs=attrs,
            children=children
        )
        if not (id is None or id is False):
            self._process_attr("id", id)
        if not (class_ is None or class_ is False):
            self._process_attr("class", class_)
        if not (accesskey is None or accesskey is False):
            self._process_attr("accesskey", accesskey)
        if not (autocapitalize is None or autocapitalize is False):
            self._process_attr("autocapitalize", autocapitalize)
        if not (autocorrect is None or autocorrect is False):
            self._process_attr("autocorrect", autocorrect)
        if not (autofocus is None or autofocus is False):
            self._process_attr("autofocus", autofocus)
        if not (contenteditable is None or contenteditable is False):
            self._process_attr("contenteditable", contenteditable)
        if not (dir is None or dir is False):
            self._process_attr("dir", dir)
        if not (draggable is None or draggable is False):
            self._process_attr("draggable", draggable)
        if not (enterkeyhint is None or enterkeyhint is False):
            self._process_attr("enterkeyhint", enterkeyhint)
        if not (hidden is None or hidden is False):
            self._process_attr("hidden", hidden)
        if not (inert is None or inert is False):
            self._process_attr("inert", inert)
        if not (inputmode is None or inputmode is False):
            self._process_attr("inputmode", inputmode)
        if not (is_ is None or is_ is False):
            self._process_attr("is", is_)
        if not (itemid is None or itemid is False):
            self._process_attr("itemid", itemid)
        if not (itemprop is None or itemprop is False):
            self._process_attr("itemprop", itemprop)
        if not (itemref is None or itemref is False):
            self._process_attr("itemref", itemref)
        if not (itemscope is None or itemscope is False):
            self._process_attr("itemscope", itemscope)
        if not (itemtype is None or itemtype is False):
            self._process_attr("itemtype", itemtype)
        if not (lang is None or lang is False):
            self._process_attr("lang", lang)
        if not (nonce is None or nonce is False):
            self._process_attr("nonce", nonce)
        if not (popover is None or popover is False):
            self._process_attr("popover", popover)
        if not (slot is None or slot is False):
            self._process_attr("slot", slot)
        if not (spellcheck is None or spellcheck is False):
            self._process_attr("spellcheck", spellcheck)
        if not (style is None or style is False):
            self._process_attr("style", style)
        if not (tabindex is None or tabindex is False):
            self._process_attr("tabindex", tabindex)
        if not (title is None or title is False):
            self._process_attr("title", title)
        if not (translate is None or translate is False):
            self._process_attr("translate", translate)
        if not (writingsuggestions is None or writingsuggestions is False):
            self._process_attr("writingsuggestions", writingsuggestions)


class h5(BaseElement, GlobalAttrs):
    """
    The 'h5' element.  
    Description: Heading  
    Categories: flow heading palpable  
    Parents: legend summary flow  
    Children: phrasing  
    Interface: HTMLHeadingElement  
    Documentation: None  
    """ # fmt: skip


    def __init__(
        self,
        attrs: Optional[Union[dict[str, Union[str, dict, list]], list[BaseAttribute]]] = None,
        id: Optional[Union[str, GlobalAttrs.id]] = None,
        class_: Optional[Union[str, GlobalAttrs.class_]] = None,
        accesskey: Optional[Union[str, GlobalAttrs.accesskey]] = None,
        autocapitalize: Optional[Union[str, GlobalAttrs.autocapitalize, Literal['on', 'off', 'none', 'sentences', 'words', 'characters']]] = None,
        autocorrect: Optional[Union[str, GlobalAttrs.autocorrect, Literal['on', 'off']]] = None,
        autofocus: Optional[Union[str, GlobalAttrs.autofocus, bool]] = None,
        contenteditable: Optional[Union[str, GlobalAttrs.contenteditable, Literal['true', 'plaintext-only', 'false']]] = None,
        dir: Optional[Union[str, GlobalAttrs.dir, Literal['ltr', 'rtl', 'auto']]] = None,
        draggable: Optional[Union[str, GlobalAttrs.draggable, Literal['true', 'false']]] = None,
        enterkeyhint: Optional[Union[str, GlobalAttrs.enterkeyhint, Literal['enter', 'done', 'go', 'next', 'previous', 'search', 'send']]] = None,
        hidden: Optional[Union[str, GlobalAttrs.hidden, Literal['until-found', 'hidden', '']]] = None,
        inert: Optional[Union[str, GlobalAttrs.inert, bool]] = None,
        inputmode: Optional[Union[str, GlobalAttrs.inputmode, Literal['none', 'text', 'tel', 'email', 'url', 'numeric', 'decimal', 'search']]] = None,
        is_: Optional[Union[str, GlobalAttrs.is_]] = None,
        itemid: Optional[Union[str, GlobalAttrs.itemid]] = None,
        itemprop: Optional[Union[str, GlobalAttrs.itemprop]] = None,
        itemref: Optional[Union[str, GlobalAttrs.itemref]] = None,
        itemscope: Optional[Union[str, GlobalAttrs.itemscope, bool]] = None,
        itemtype: Optional[Union[str, GlobalAttrs.itemtype]] = None,
        lang: Optional[Union[str, GlobalAttrs.lang]] = None,
        nonce: Optional[Union[str, GlobalAttrs.nonce]] = None,
        popover: Optional[Union[str, GlobalAttrs.popover, Literal['auto', 'manual']]] = None,
        slot: Optional[Union[str, GlobalAttrs.slot]] = None,
        spellcheck: Optional[Union[str, GlobalAttrs.spellcheck, Literal['true', 'false', '']]] = None,
        style: Optional[Union[str, GlobalAttrs.style]] = None,
        tabindex: Optional[Union[str, GlobalAttrs.tabindex, int]] = None,
        title: Optional[Union[str, GlobalAttrs.title]] = None,
        translate: Optional[Union[str, GlobalAttrs.translate, Literal['yes', 'no']]] = None,
        writingsuggestions: Optional[Union[str, GlobalAttrs.writingsuggestions, Literal['true', 'false', '']]] = None,
        children: Optional[list] = None
    ) -> None:
        """
        Initialize 'h5' (Heading) element.  
        Documentation: None

        :param attrs: A list or dictionary of attributes for the element
        :param id: The element's ID
        :param class_: Classes to which the element belongs
            | Set of space-separated tokens
        :param accesskey: Keyboard shortcut to activate or focus element
            | Ordered set of unique space-separated tokens, none of which are identical to another, each consisting of one code point in length
        :param autocapitalize: Recommended autocapitalization behavior (for supported input methods)
        :param autocorrect: Recommended autocorrection behavior (for supported input methods)
        :param autofocus: Automatically focus the element when the page is loaded
        :param contenteditable: Whether the element is editable
        :param dir: The text directionality of the element
        :param draggable: Whether the element is draggable
        :param enterkeyhint: Hint for selecting an enter key action
        :param hidden: Whether the element is relevant
        :param inert: Whether the element is inert.
        :param inputmode: Hint for selecting an input modality
        :param is_: Creates a customized built-in element
            | Valid custom element name of a defined customized built-in element
        :param itemid: Global identifier for a microdata item
            | Valid URL potentially surrounded by spaces
        :param itemprop: Property names of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs, defined property names, or text*
        :param itemref: Referenced elements
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param itemscope: Introduces a microdata item
        :param itemtype: Item types of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs*
        :param lang: Language of the element
            | Valid BCP 47 language tag or the empty string
        :param nonce: Cryptographic nonce used in Content Security Policy checks [CSP]
        :param popover: Makes the element a popover element
        :param slot: The element's desired slot
        :param spellcheck: Whether the element is to have its spelling and grammar checked
        :param style: Presentational and formatting instructions
            | CSS declarations*
        :param tabindex: Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation
        :param title: Advisory information for the element
        :param translate: Whether the element is to be translated when the page is localized
        :param writingsuggestions: Whether the element can offer writing suggestions or not.
        """ #fmt: skip
        super().__init__(
            "h5",
            void_element=False,
            attrs=attrs,
            children=children
        )
        if not (id is None or id is False):
            self._process_attr("id", id)
        if not (class_ is None or class_ is False):
            self._process_attr("class", class_)
        if not (accesskey is None or accesskey is False):
            self._process_attr("accesskey", accesskey)
        if not (autocapitalize is None or autocapitalize is False):
            self._process_attr("autocapitalize", autocapitalize)
        if not (autocorrect is None or autocorrect is False):
            self._process_attr("autocorrect", autocorrect)
        if not (autofocus is None or autofocus is False):
            self._process_attr("autofocus", autofocus)
        if not (contenteditable is None or contenteditable is False):
            self._process_attr("contenteditable", contenteditable)
        if not (dir is None or dir is False):
            self._process_attr("dir", dir)
        if not (draggable is None or draggable is False):
            self._process_attr("draggable", draggable)
        if not (enterkeyhint is None or enterkeyhint is False):
            self._process_attr("enterkeyhint", enterkeyhint)
        if not (hidden is None or hidden is False):
            self._process_attr("hidden", hidden)
        if not (inert is None or inert is False):
            self._process_attr("inert", inert)
        if not (inputmode is None or inputmode is False):
            self._process_attr("inputmode", inputmode)
        if not (is_ is None or is_ is False):
            self._process_attr("is", is_)
        if not (itemid is None or itemid is False):
            self._process_attr("itemid", itemid)
        if not (itemprop is None or itemprop is False):
            self._process_attr("itemprop", itemprop)
        if not (itemref is None or itemref is False):
            self._process_attr("itemref", itemref)
        if not (itemscope is None or itemscope is False):
            self._process_attr("itemscope", itemscope)
        if not (itemtype is None or itemtype is False):
            self._process_attr("itemtype", itemtype)
        if not (lang is None or lang is False):
            self._process_attr("lang", lang)
        if not (nonce is None or nonce is False):
            self._process_attr("nonce", nonce)
        if not (popover is None or popover is False):
            self._process_attr("popover", popover)
        if not (slot is None or slot is False):
            self._process_attr("slot", slot)
        if not (spellcheck is None or spellcheck is False):
            self._process_attr("spellcheck", spellcheck)
        if not (style is None or style is False):
            self._process_attr("style", style)
        if not (tabindex is None or tabindex is False):
            self._process_attr("tabindex", tabindex)
        if not (title is None or title is False):
            self._process_attr("title", title)
        if not (translate is None or translate is False):
            self._process_attr("translate", translate)
        if not (writingsuggestions is None or writingsuggestions is False):
            self._process_attr("writingsuggestions", writingsuggestions)


class h6(BaseElement, GlobalAttrs):
    """
    The 'h6' element.  
    Description: Heading  
    Categories: flow heading palpable  
    Parents: legend summary flow  
    Children: phrasing  
    Interface: HTMLHeadingElement  
    Documentation: None  
    """ # fmt: skip


    def __init__(
        self,
        attrs: Optional[Union[dict[str, Union[str, dict, list]], list[BaseAttribute]]] = None,
        id: Optional[Union[str, GlobalAttrs.id]] = None,
        class_: Optional[Union[str, GlobalAttrs.class_]] = None,
        accesskey: Optional[Union[str, GlobalAttrs.accesskey]] = None,
        autocapitalize: Optional[Union[str, GlobalAttrs.autocapitalize, Literal['on', 'off', 'none', 'sentences', 'words', 'characters']]] = None,
        autocorrect: Optional[Union[str, GlobalAttrs.autocorrect, Literal['on', 'off']]] = None,
        autofocus: Optional[Union[str, GlobalAttrs.autofocus, bool]] = None,
        contenteditable: Optional[Union[str, GlobalAttrs.contenteditable, Literal['true', 'plaintext-only', 'false']]] = None,
        dir: Optional[Union[str, GlobalAttrs.dir, Literal['ltr', 'rtl', 'auto']]] = None,
        draggable: Optional[Union[str, GlobalAttrs.draggable, Literal['true', 'false']]] = None,
        enterkeyhint: Optional[Union[str, GlobalAttrs.enterkeyhint, Literal['enter', 'done', 'go', 'next', 'previous', 'search', 'send']]] = None,
        hidden: Optional[Union[str, GlobalAttrs.hidden, Literal['until-found', 'hidden', '']]] = None,
        inert: Optional[Union[str, GlobalAttrs.inert, bool]] = None,
        inputmode: Optional[Union[str, GlobalAttrs.inputmode, Literal['none', 'text', 'tel', 'email', 'url', 'numeric', 'decimal', 'search']]] = None,
        is_: Optional[Union[str, GlobalAttrs.is_]] = None,
        itemid: Optional[Union[str, GlobalAttrs.itemid]] = None,
        itemprop: Optional[Union[str, GlobalAttrs.itemprop]] = None,
        itemref: Optional[Union[str, GlobalAttrs.itemref]] = None,
        itemscope: Optional[Union[str, GlobalAttrs.itemscope, bool]] = None,
        itemtype: Optional[Union[str, GlobalAttrs.itemtype]] = None,
        lang: Optional[Union[str, GlobalAttrs.lang]] = None,
        nonce: Optional[Union[str, GlobalAttrs.nonce]] = None,
        popover: Optional[Union[str, GlobalAttrs.popover, Literal['auto', 'manual']]] = None,
        slot: Optional[Union[str, GlobalAttrs.slot]] = None,
        spellcheck: Optional[Union[str, GlobalAttrs.spellcheck, Literal['true', 'false', '']]] = None,
        style: Optional[Union[str, GlobalAttrs.style]] = None,
        tabindex: Optional[Union[str, GlobalAttrs.tabindex, int]] = None,
        title: Optional[Union[str, GlobalAttrs.title]] = None,
        translate: Optional[Union[str, GlobalAttrs.translate, Literal['yes', 'no']]] = None,
        writingsuggestions: Optional[Union[str, GlobalAttrs.writingsuggestions, Literal['true', 'false', '']]] = None,
        children: Optional[list] = None
    ) -> None:
        """
        Initialize 'h6' (Heading) element.  
        Documentation: None

        :param attrs: A list or dictionary of attributes for the element
        :param id: The element's ID
        :param class_: Classes to which the element belongs
            | Set of space-separated tokens
        :param accesskey: Keyboard shortcut to activate or focus element
            | Ordered set of unique space-separated tokens, none of which are identical to another, each consisting of one code point in length
        :param autocapitalize: Recommended autocapitalization behavior (for supported input methods)
        :param autocorrect: Recommended autocorrection behavior (for supported input methods)
        :param autofocus: Automatically focus the element when the page is loaded
        :param contenteditable: Whether the element is editable
        :param dir: The text directionality of the element
        :param draggable: Whether the element is draggable
        :param enterkeyhint: Hint for selecting an enter key action
        :param hidden: Whether the element is relevant
        :param inert: Whether the element is inert.
        :param inputmode: Hint for selecting an input modality
        :param is_: Creates a customized built-in element
            | Valid custom element name of a defined customized built-in element
        :param itemid: Global identifier for a microdata item
            | Valid URL potentially surrounded by spaces
        :param itemprop: Property names of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs, defined property names, or text*
        :param itemref: Referenced elements
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param itemscope: Introduces a microdata item
        :param itemtype: Item types of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs*
        :param lang: Language of the element
            | Valid BCP 47 language tag or the empty string
        :param nonce: Cryptographic nonce used in Content Security Policy checks [CSP]
        :param popover: Makes the element a popover element
        :param slot: The element's desired slot
        :param spellcheck: Whether the element is to have its spelling and grammar checked
        :param style: Presentational and formatting instructions
            | CSS declarations*
        :param tabindex: Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation
        :param title: Advisory information for the element
        :param translate: Whether the element is to be translated when the page is localized
        :param writingsuggestions: Whether the element can offer writing suggestions or not.
        """ #fmt: skip
        super().__init__(
            "h6",
            void_element=False,
            attrs=attrs,
            children=children
        )
        if not (id is None or id is False):
            self._process_attr("id", id)
        if not (class_ is None or class_ is False):
            self._process_attr("class", class_)
        if not (accesskey is None or accesskey is False):
            self._process_attr("accesskey", accesskey)
        if not (autocapitalize is None or autocapitalize is False):
            self._process_attr("autocapitalize", autocapitalize)
        if not (autocorrect is None or autocorrect is False):
            self._process_attr("autocorrect", autocorrect)
        if not (autofocus is None or autofocus is False):
            self._process_attr("autofocus", autofocus)
        if not (contenteditable is None or contenteditable is False):
            self._process_attr("contenteditable", contenteditable)
        if not (dir is None or dir is False):
            self._process_attr("dir", dir)
        if not (draggable is None or draggable is False):
            self._process_attr("draggable", draggable)
        if not (enterkeyhint is None or enterkeyhint is False):
            self._process_attr("enterkeyhint", enterkeyhint)
        if not (hidden is None or hidden is False):
            self._process_attr("hidden", hidden)
        if not (inert is None or inert is False):
            self._process_attr("inert", inert)
        if not (inputmode is None or inputmode is False):
            self._process_attr("inputmode", inputmode)
        if not (is_ is None or is_ is False):
            self._process_attr("is", is_)
        if not (itemid is None or itemid is False):
            self._process_attr("itemid", itemid)
        if not (itemprop is None or itemprop is False):
            self._process_attr("itemprop", itemprop)
        if not (itemref is None or itemref is False):
            self._process_attr("itemref", itemref)
        if not (itemscope is None or itemscope is False):
            self._process_attr("itemscope", itemscope)
        if not (itemtype is None or itemtype is False):
            self._process_attr("itemtype", itemtype)
        if not (lang is None or lang is False):
            self._process_attr("lang", lang)
        if not (nonce is None or nonce is False):
            self._process_attr("nonce", nonce)
        if not (popover is None or popover is False):
            self._process_attr("popover", popover)
        if not (slot is None or slot is False):
            self._process_attr("slot", slot)
        if not (spellcheck is None or spellcheck is False):
            self._process_attr("spellcheck", spellcheck)
        if not (style is None or style is False):
            self._process_attr("style", style)
        if not (tabindex is None or tabindex is False):
            self._process_attr("tabindex", tabindex)
        if not (title is None or title is False):
            self._process_attr("title", title)
        if not (translate is None or translate is False):
            self._process_attr("translate", translate)
        if not (writingsuggestions is None or writingsuggestions is False):
            self._process_attr("writingsuggestions", writingsuggestions)


class head(BaseElement, GlobalAttrs):
    """
    The 'head' element.  
    Description: Container for document metadata  
    Categories: none  
    Parents: html  
    Children: metadata content*  
    Interface: HTMLHeadElement  
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/head  
    """ # fmt: skip


    def __init__(
        self,
        attrs: Optional[Union[dict[str, Union[str, dict, list]], list[BaseAttribute]]] = None,
        id: Optional[Union[str, GlobalAttrs.id]] = None,
        class_: Optional[Union[str, GlobalAttrs.class_]] = None,
        accesskey: Optional[Union[str, GlobalAttrs.accesskey]] = None,
        autocapitalize: Optional[Union[str, GlobalAttrs.autocapitalize, Literal['on', 'off', 'none', 'sentences', 'words', 'characters']]] = None,
        autocorrect: Optional[Union[str, GlobalAttrs.autocorrect, Literal['on', 'off']]] = None,
        autofocus: Optional[Union[str, GlobalAttrs.autofocus, bool]] = None,
        contenteditable: Optional[Union[str, GlobalAttrs.contenteditable, Literal['true', 'plaintext-only', 'false']]] = None,
        dir: Optional[Union[str, GlobalAttrs.dir, Literal['ltr', 'rtl', 'auto']]] = None,
        draggable: Optional[Union[str, GlobalAttrs.draggable, Literal['true', 'false']]] = None,
        enterkeyhint: Optional[Union[str, GlobalAttrs.enterkeyhint, Literal['enter', 'done', 'go', 'next', 'previous', 'search', 'send']]] = None,
        hidden: Optional[Union[str, GlobalAttrs.hidden, Literal['until-found', 'hidden', '']]] = None,
        inert: Optional[Union[str, GlobalAttrs.inert, bool]] = None,
        inputmode: Optional[Union[str, GlobalAttrs.inputmode, Literal['none', 'text', 'tel', 'email', 'url', 'numeric', 'decimal', 'search']]] = None,
        is_: Optional[Union[str, GlobalAttrs.is_]] = None,
        itemid: Optional[Union[str, GlobalAttrs.itemid]] = None,
        itemprop: Optional[Union[str, GlobalAttrs.itemprop]] = None,
        itemref: Optional[Union[str, GlobalAttrs.itemref]] = None,
        itemscope: Optional[Union[str, GlobalAttrs.itemscope, bool]] = None,
        itemtype: Optional[Union[str, GlobalAttrs.itemtype]] = None,
        lang: Optional[Union[str, GlobalAttrs.lang]] = None,
        nonce: Optional[Union[str, GlobalAttrs.nonce]] = None,
        popover: Optional[Union[str, GlobalAttrs.popover, Literal['auto', 'manual']]] = None,
        slot: Optional[Union[str, GlobalAttrs.slot]] = None,
        spellcheck: Optional[Union[str, GlobalAttrs.spellcheck, Literal['true', 'false', '']]] = None,
        style: Optional[Union[str, GlobalAttrs.style]] = None,
        tabindex: Optional[Union[str, GlobalAttrs.tabindex, int]] = None,
        title: Optional[Union[str, GlobalAttrs.title]] = None,
        translate: Optional[Union[str, GlobalAttrs.translate, Literal['yes', 'no']]] = None,
        writingsuggestions: Optional[Union[str, GlobalAttrs.writingsuggestions, Literal['true', 'false', '']]] = None,
        children: Optional[list] = None
    ) -> None:
        """
        Initialize 'head' (Container for document metadata) element.  
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/head

        :param attrs: A list or dictionary of attributes for the element
        :param id: The element's ID
        :param class_: Classes to which the element belongs
            | Set of space-separated tokens
        :param accesskey: Keyboard shortcut to activate or focus element
            | Ordered set of unique space-separated tokens, none of which are identical to another, each consisting of one code point in length
        :param autocapitalize: Recommended autocapitalization behavior (for supported input methods)
        :param autocorrect: Recommended autocorrection behavior (for supported input methods)
        :param autofocus: Automatically focus the element when the page is loaded
        :param contenteditable: Whether the element is editable
        :param dir: The text directionality of the element
        :param draggable: Whether the element is draggable
        :param enterkeyhint: Hint for selecting an enter key action
        :param hidden: Whether the element is relevant
        :param inert: Whether the element is inert.
        :param inputmode: Hint for selecting an input modality
        :param is_: Creates a customized built-in element
            | Valid custom element name of a defined customized built-in element
        :param itemid: Global identifier for a microdata item
            | Valid URL potentially surrounded by spaces
        :param itemprop: Property names of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs, defined property names, or text*
        :param itemref: Referenced elements
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param itemscope: Introduces a microdata item
        :param itemtype: Item types of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs*
        :param lang: Language of the element
            | Valid BCP 47 language tag or the empty string
        :param nonce: Cryptographic nonce used in Content Security Policy checks [CSP]
        :param popover: Makes the element a popover element
        :param slot: The element's desired slot
        :param spellcheck: Whether the element is to have its spelling and grammar checked
        :param style: Presentational and formatting instructions
            | CSS declarations*
        :param tabindex: Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation
        :param title: Advisory information for the element
        :param translate: Whether the element is to be translated when the page is localized
        :param writingsuggestions: Whether the element can offer writing suggestions or not.
        """ #fmt: skip
        super().__init__(
            "head",
            void_element=False,
            attrs=attrs,
            children=children
        )
        if not (id is None or id is False):
            self._process_attr("id", id)
        if not (class_ is None or class_ is False):
            self._process_attr("class", class_)
        if not (accesskey is None or accesskey is False):
            self._process_attr("accesskey", accesskey)
        if not (autocapitalize is None or autocapitalize is False):
            self._process_attr("autocapitalize", autocapitalize)
        if not (autocorrect is None or autocorrect is False):
            self._process_attr("autocorrect", autocorrect)
        if not (autofocus is None or autofocus is False):
            self._process_attr("autofocus", autofocus)
        if not (contenteditable is None or contenteditable is False):
            self._process_attr("contenteditable", contenteditable)
        if not (dir is None or dir is False):
            self._process_attr("dir", dir)
        if not (draggable is None or draggable is False):
            self._process_attr("draggable", draggable)
        if not (enterkeyhint is None or enterkeyhint is False):
            self._process_attr("enterkeyhint", enterkeyhint)
        if not (hidden is None or hidden is False):
            self._process_attr("hidden", hidden)
        if not (inert is None or inert is False):
            self._process_attr("inert", inert)
        if not (inputmode is None or inputmode is False):
            self._process_attr("inputmode", inputmode)
        if not (is_ is None or is_ is False):
            self._process_attr("is", is_)
        if not (itemid is None or itemid is False):
            self._process_attr("itemid", itemid)
        if not (itemprop is None or itemprop is False):
            self._process_attr("itemprop", itemprop)
        if not (itemref is None or itemref is False):
            self._process_attr("itemref", itemref)
        if not (itemscope is None or itemscope is False):
            self._process_attr("itemscope", itemscope)
        if not (itemtype is None or itemtype is False):
            self._process_attr("itemtype", itemtype)
        if not (lang is None or lang is False):
            self._process_attr("lang", lang)
        if not (nonce is None or nonce is False):
            self._process_attr("nonce", nonce)
        if not (popover is None or popover is False):
            self._process_attr("popover", popover)
        if not (slot is None or slot is False):
            self._process_attr("slot", slot)
        if not (spellcheck is None or spellcheck is False):
            self._process_attr("spellcheck", spellcheck)
        if not (style is None or style is False):
            self._process_attr("style", style)
        if not (tabindex is None or tabindex is False):
            self._process_attr("tabindex", tabindex)
        if not (title is None or title is False):
            self._process_attr("title", title)
        if not (translate is None or translate is False):
            self._process_attr("translate", translate)
        if not (writingsuggestions is None or writingsuggestions is False):
            self._process_attr("writingsuggestions", writingsuggestions)


class header(BaseElement, GlobalAttrs):
    """
    The 'header' element.  
    Description: Introductory or navigational aids for a page or section  
    Categories: flow palpable  
    Parents: flow  
    Children: flow*  
    Interface: HTMLElement  
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/header  
    """ # fmt: skip


    def __init__(
        self,
        attrs: Optional[Union[dict[str, Union[str, dict, list]], list[BaseAttribute]]] = None,
        id: Optional[Union[str, GlobalAttrs.id]] = None,
        class_: Optional[Union[str, GlobalAttrs.class_]] = None,
        accesskey: Optional[Union[str, GlobalAttrs.accesskey]] = None,
        autocapitalize: Optional[Union[str, GlobalAttrs.autocapitalize, Literal['on', 'off', 'none', 'sentences', 'words', 'characters']]] = None,
        autocorrect: Optional[Union[str, GlobalAttrs.autocorrect, Literal['on', 'off']]] = None,
        autofocus: Optional[Union[str, GlobalAttrs.autofocus, bool]] = None,
        contenteditable: Optional[Union[str, GlobalAttrs.contenteditable, Literal['true', 'plaintext-only', 'false']]] = None,
        dir: Optional[Union[str, GlobalAttrs.dir, Literal['ltr', 'rtl', 'auto']]] = None,
        draggable: Optional[Union[str, GlobalAttrs.draggable, Literal['true', 'false']]] = None,
        enterkeyhint: Optional[Union[str, GlobalAttrs.enterkeyhint, Literal['enter', 'done', 'go', 'next', 'previous', 'search', 'send']]] = None,
        hidden: Optional[Union[str, GlobalAttrs.hidden, Literal['until-found', 'hidden', '']]] = None,
        inert: Optional[Union[str, GlobalAttrs.inert, bool]] = None,
        inputmode: Optional[Union[str, GlobalAttrs.inputmode, Literal['none', 'text', 'tel', 'email', 'url', 'numeric', 'decimal', 'search']]] = None,
        is_: Optional[Union[str, GlobalAttrs.is_]] = None,
        itemid: Optional[Union[str, GlobalAttrs.itemid]] = None,
        itemprop: Optional[Union[str, GlobalAttrs.itemprop]] = None,
        itemref: Optional[Union[str, GlobalAttrs.itemref]] = None,
        itemscope: Optional[Union[str, GlobalAttrs.itemscope, bool]] = None,
        itemtype: Optional[Union[str, GlobalAttrs.itemtype]] = None,
        lang: Optional[Union[str, GlobalAttrs.lang]] = None,
        nonce: Optional[Union[str, GlobalAttrs.nonce]] = None,
        popover: Optional[Union[str, GlobalAttrs.popover, Literal['auto', 'manual']]] = None,
        slot: Optional[Union[str, GlobalAttrs.slot]] = None,
        spellcheck: Optional[Union[str, GlobalAttrs.spellcheck, Literal['true', 'false', '']]] = None,
        style: Optional[Union[str, GlobalAttrs.style]] = None,
        tabindex: Optional[Union[str, GlobalAttrs.tabindex, int]] = None,
        title: Optional[Union[str, GlobalAttrs.title]] = None,
        translate: Optional[Union[str, GlobalAttrs.translate, Literal['yes', 'no']]] = None,
        writingsuggestions: Optional[Union[str, GlobalAttrs.writingsuggestions, Literal['true', 'false', '']]] = None,
        children: Optional[list] = None
    ) -> None:
        """
        Initialize 'header' (Introductory or navigational aids for a page or section) element.  
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/header

        :param attrs: A list or dictionary of attributes for the element
        :param id: The element's ID
        :param class_: Classes to which the element belongs
            | Set of space-separated tokens
        :param accesskey: Keyboard shortcut to activate or focus element
            | Ordered set of unique space-separated tokens, none of which are identical to another, each consisting of one code point in length
        :param autocapitalize: Recommended autocapitalization behavior (for supported input methods)
        :param autocorrect: Recommended autocorrection behavior (for supported input methods)
        :param autofocus: Automatically focus the element when the page is loaded
        :param contenteditable: Whether the element is editable
        :param dir: The text directionality of the element
        :param draggable: Whether the element is draggable
        :param enterkeyhint: Hint for selecting an enter key action
        :param hidden: Whether the element is relevant
        :param inert: Whether the element is inert.
        :param inputmode: Hint for selecting an input modality
        :param is_: Creates a customized built-in element
            | Valid custom element name of a defined customized built-in element
        :param itemid: Global identifier for a microdata item
            | Valid URL potentially surrounded by spaces
        :param itemprop: Property names of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs, defined property names, or text*
        :param itemref: Referenced elements
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param itemscope: Introduces a microdata item
        :param itemtype: Item types of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs*
        :param lang: Language of the element
            | Valid BCP 47 language tag or the empty string
        :param nonce: Cryptographic nonce used in Content Security Policy checks [CSP]
        :param popover: Makes the element a popover element
        :param slot: The element's desired slot
        :param spellcheck: Whether the element is to have its spelling and grammar checked
        :param style: Presentational and formatting instructions
            | CSS declarations*
        :param tabindex: Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation
        :param title: Advisory information for the element
        :param translate: Whether the element is to be translated when the page is localized
        :param writingsuggestions: Whether the element can offer writing suggestions or not.
        """ #fmt: skip
        super().__init__(
            "header",
            void_element=False,
            attrs=attrs,
            children=children
        )
        if not (id is None or id is False):
            self._process_attr("id", id)
        if not (class_ is None or class_ is False):
            self._process_attr("class", class_)
        if not (accesskey is None or accesskey is False):
            self._process_attr("accesskey", accesskey)
        if not (autocapitalize is None or autocapitalize is False):
            self._process_attr("autocapitalize", autocapitalize)
        if not (autocorrect is None or autocorrect is False):
            self._process_attr("autocorrect", autocorrect)
        if not (autofocus is None or autofocus is False):
            self._process_attr("autofocus", autofocus)
        if not (contenteditable is None or contenteditable is False):
            self._process_attr("contenteditable", contenteditable)
        if not (dir is None or dir is False):
            self._process_attr("dir", dir)
        if not (draggable is None or draggable is False):
            self._process_attr("draggable", draggable)
        if not (enterkeyhint is None or enterkeyhint is False):
            self._process_attr("enterkeyhint", enterkeyhint)
        if not (hidden is None or hidden is False):
            self._process_attr("hidden", hidden)
        if not (inert is None or inert is False):
            self._process_attr("inert", inert)
        if not (inputmode is None or inputmode is False):
            self._process_attr("inputmode", inputmode)
        if not (is_ is None or is_ is False):
            self._process_attr("is", is_)
        if not (itemid is None or itemid is False):
            self._process_attr("itemid", itemid)
        if not (itemprop is None or itemprop is False):
            self._process_attr("itemprop", itemprop)
        if not (itemref is None or itemref is False):
            self._process_attr("itemref", itemref)
        if not (itemscope is None or itemscope is False):
            self._process_attr("itemscope", itemscope)
        if not (itemtype is None or itemtype is False):
            self._process_attr("itemtype", itemtype)
        if not (lang is None or lang is False):
            self._process_attr("lang", lang)
        if not (nonce is None or nonce is False):
            self._process_attr("nonce", nonce)
        if not (popover is None or popover is False):
            self._process_attr("popover", popover)
        if not (slot is None or slot is False):
            self._process_attr("slot", slot)
        if not (spellcheck is None or spellcheck is False):
            self._process_attr("spellcheck", spellcheck)
        if not (style is None or style is False):
            self._process_attr("style", style)
        if not (tabindex is None or tabindex is False):
            self._process_attr("tabindex", tabindex)
        if not (title is None or title is False):
            self._process_attr("title", title)
        if not (translate is None or translate is False):
            self._process_attr("translate", translate)
        if not (writingsuggestions is None or writingsuggestions is False):
            self._process_attr("writingsuggestions", writingsuggestions)


class hgroup(BaseElement, GlobalAttrs):
    """
    The 'hgroup' element.  
    Description: Heading container  
    Categories: flow palpable  
    Parents: legend summary flow  
    Children: h1 h2 h3 h4 h5 h6 script-supporting elements  
    Interface: HTMLElement  
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/hgroup  
    """ # fmt: skip


    def __init__(
        self,
        attrs: Optional[Union[dict[str, Union[str, dict, list]], list[BaseAttribute]]] = None,
        id: Optional[Union[str, GlobalAttrs.id]] = None,
        class_: Optional[Union[str, GlobalAttrs.class_]] = None,
        accesskey: Optional[Union[str, GlobalAttrs.accesskey]] = None,
        autocapitalize: Optional[Union[str, GlobalAttrs.autocapitalize, Literal['on', 'off', 'none', 'sentences', 'words', 'characters']]] = None,
        autocorrect: Optional[Union[str, GlobalAttrs.autocorrect, Literal['on', 'off']]] = None,
        autofocus: Optional[Union[str, GlobalAttrs.autofocus, bool]] = None,
        contenteditable: Optional[Union[str, GlobalAttrs.contenteditable, Literal['true', 'plaintext-only', 'false']]] = None,
        dir: Optional[Union[str, GlobalAttrs.dir, Literal['ltr', 'rtl', 'auto']]] = None,
        draggable: Optional[Union[str, GlobalAttrs.draggable, Literal['true', 'false']]] = None,
        enterkeyhint: Optional[Union[str, GlobalAttrs.enterkeyhint, Literal['enter', 'done', 'go', 'next', 'previous', 'search', 'send']]] = None,
        hidden: Optional[Union[str, GlobalAttrs.hidden, Literal['until-found', 'hidden', '']]] = None,
        inert: Optional[Union[str, GlobalAttrs.inert, bool]] = None,
        inputmode: Optional[Union[str, GlobalAttrs.inputmode, Literal['none', 'text', 'tel', 'email', 'url', 'numeric', 'decimal', 'search']]] = None,
        is_: Optional[Union[str, GlobalAttrs.is_]] = None,
        itemid: Optional[Union[str, GlobalAttrs.itemid]] = None,
        itemprop: Optional[Union[str, GlobalAttrs.itemprop]] = None,
        itemref: Optional[Union[str, GlobalAttrs.itemref]] = None,
        itemscope: Optional[Union[str, GlobalAttrs.itemscope, bool]] = None,
        itemtype: Optional[Union[str, GlobalAttrs.itemtype]] = None,
        lang: Optional[Union[str, GlobalAttrs.lang]] = None,
        nonce: Optional[Union[str, GlobalAttrs.nonce]] = None,
        popover: Optional[Union[str, GlobalAttrs.popover, Literal['auto', 'manual']]] = None,
        slot: Optional[Union[str, GlobalAttrs.slot]] = None,
        spellcheck: Optional[Union[str, GlobalAttrs.spellcheck, Literal['true', 'false', '']]] = None,
        style: Optional[Union[str, GlobalAttrs.style]] = None,
        tabindex: Optional[Union[str, GlobalAttrs.tabindex, int]] = None,
        title: Optional[Union[str, GlobalAttrs.title]] = None,
        translate: Optional[Union[str, GlobalAttrs.translate, Literal['yes', 'no']]] = None,
        writingsuggestions: Optional[Union[str, GlobalAttrs.writingsuggestions, Literal['true', 'false', '']]] = None,
        children: Optional[list] = None
    ) -> None:
        """
        Initialize 'hgroup' (Heading container) element.  
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/hgroup

        :param attrs: A list or dictionary of attributes for the element
        :param id: The element's ID
        :param class_: Classes to which the element belongs
            | Set of space-separated tokens
        :param accesskey: Keyboard shortcut to activate or focus element
            | Ordered set of unique space-separated tokens, none of which are identical to another, each consisting of one code point in length
        :param autocapitalize: Recommended autocapitalization behavior (for supported input methods)
        :param autocorrect: Recommended autocorrection behavior (for supported input methods)
        :param autofocus: Automatically focus the element when the page is loaded
        :param contenteditable: Whether the element is editable
        :param dir: The text directionality of the element
        :param draggable: Whether the element is draggable
        :param enterkeyhint: Hint for selecting an enter key action
        :param hidden: Whether the element is relevant
        :param inert: Whether the element is inert.
        :param inputmode: Hint for selecting an input modality
        :param is_: Creates a customized built-in element
            | Valid custom element name of a defined customized built-in element
        :param itemid: Global identifier for a microdata item
            | Valid URL potentially surrounded by spaces
        :param itemprop: Property names of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs, defined property names, or text*
        :param itemref: Referenced elements
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param itemscope: Introduces a microdata item
        :param itemtype: Item types of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs*
        :param lang: Language of the element
            | Valid BCP 47 language tag or the empty string
        :param nonce: Cryptographic nonce used in Content Security Policy checks [CSP]
        :param popover: Makes the element a popover element
        :param slot: The element's desired slot
        :param spellcheck: Whether the element is to have its spelling and grammar checked
        :param style: Presentational and formatting instructions
            | CSS declarations*
        :param tabindex: Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation
        :param title: Advisory information for the element
        :param translate: Whether the element is to be translated when the page is localized
        :param writingsuggestions: Whether the element can offer writing suggestions or not.
        """ #fmt: skip
        super().__init__(
            "hgroup",
            void_element=False,
            attrs=attrs,
            children=children
        )
        if not (id is None or id is False):
            self._process_attr("id", id)
        if not (class_ is None or class_ is False):
            self._process_attr("class", class_)
        if not (accesskey is None or accesskey is False):
            self._process_attr("accesskey", accesskey)
        if not (autocapitalize is None or autocapitalize is False):
            self._process_attr("autocapitalize", autocapitalize)
        if not (autocorrect is None or autocorrect is False):
            self._process_attr("autocorrect", autocorrect)
        if not (autofocus is None or autofocus is False):
            self._process_attr("autofocus", autofocus)
        if not (contenteditable is None or contenteditable is False):
            self._process_attr("contenteditable", contenteditable)
        if not (dir is None or dir is False):
            self._process_attr("dir", dir)
        if not (draggable is None or draggable is False):
            self._process_attr("draggable", draggable)
        if not (enterkeyhint is None or enterkeyhint is False):
            self._process_attr("enterkeyhint", enterkeyhint)
        if not (hidden is None or hidden is False):
            self._process_attr("hidden", hidden)
        if not (inert is None or inert is False):
            self._process_attr("inert", inert)
        if not (inputmode is None or inputmode is False):
            self._process_attr("inputmode", inputmode)
        if not (is_ is None or is_ is False):
            self._process_attr("is", is_)
        if not (itemid is None or itemid is False):
            self._process_attr("itemid", itemid)
        if not (itemprop is None or itemprop is False):
            self._process_attr("itemprop", itemprop)
        if not (itemref is None or itemref is False):
            self._process_attr("itemref", itemref)
        if not (itemscope is None or itemscope is False):
            self._process_attr("itemscope", itemscope)
        if not (itemtype is None or itemtype is False):
            self._process_attr("itemtype", itemtype)
        if not (lang is None or lang is False):
            self._process_attr("lang", lang)
        if not (nonce is None or nonce is False):
            self._process_attr("nonce", nonce)
        if not (popover is None or popover is False):
            self._process_attr("popover", popover)
        if not (slot is None or slot is False):
            self._process_attr("slot", slot)
        if not (spellcheck is None or spellcheck is False):
            self._process_attr("spellcheck", spellcheck)
        if not (style is None or style is False):
            self._process_attr("style", style)
        if not (tabindex is None or tabindex is False):
            self._process_attr("tabindex", tabindex)
        if not (title is None or title is False):
            self._process_attr("title", title)
        if not (translate is None or translate is False):
            self._process_attr("translate", translate)
        if not (writingsuggestions is None or writingsuggestions is False):
            self._process_attr("writingsuggestions", writingsuggestions)


class hr(BaseElement, GlobalAttrs):
    """
    The 'hr' element.  
    Description: Thematic break  
    Categories: flow  
    Parents: flow  
    Children: empty  
    Interface: HTMLHRElement  
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/hr  
    """ # fmt: skip


    def __init__(
        self,
        attrs: Optional[Union[dict[str, Union[str, dict, list]], list[BaseAttribute]]] = None,
        id: Optional[Union[str, GlobalAttrs.id]] = None,
        class_: Optional[Union[str, GlobalAttrs.class_]] = None,
        accesskey: Optional[Union[str, GlobalAttrs.accesskey]] = None,
        autocapitalize: Optional[Union[str, GlobalAttrs.autocapitalize, Literal['on', 'off', 'none', 'sentences', 'words', 'characters']]] = None,
        autocorrect: Optional[Union[str, GlobalAttrs.autocorrect, Literal['on', 'off']]] = None,
        autofocus: Optional[Union[str, GlobalAttrs.autofocus, bool]] = None,
        contenteditable: Optional[Union[str, GlobalAttrs.contenteditable, Literal['true', 'plaintext-only', 'false']]] = None,
        dir: Optional[Union[str, GlobalAttrs.dir, Literal['ltr', 'rtl', 'auto']]] = None,
        draggable: Optional[Union[str, GlobalAttrs.draggable, Literal['true', 'false']]] = None,
        enterkeyhint: Optional[Union[str, GlobalAttrs.enterkeyhint, Literal['enter', 'done', 'go', 'next', 'previous', 'search', 'send']]] = None,
        hidden: Optional[Union[str, GlobalAttrs.hidden, Literal['until-found', 'hidden', '']]] = None,
        inert: Optional[Union[str, GlobalAttrs.inert, bool]] = None,
        inputmode: Optional[Union[str, GlobalAttrs.inputmode, Literal['none', 'text', 'tel', 'email', 'url', 'numeric', 'decimal', 'search']]] = None,
        is_: Optional[Union[str, GlobalAttrs.is_]] = None,
        itemid: Optional[Union[str, GlobalAttrs.itemid]] = None,
        itemprop: Optional[Union[str, GlobalAttrs.itemprop]] = None,
        itemref: Optional[Union[str, GlobalAttrs.itemref]] = None,
        itemscope: Optional[Union[str, GlobalAttrs.itemscope, bool]] = None,
        itemtype: Optional[Union[str, GlobalAttrs.itemtype]] = None,
        lang: Optional[Union[str, GlobalAttrs.lang]] = None,
        nonce: Optional[Union[str, GlobalAttrs.nonce]] = None,
        popover: Optional[Union[str, GlobalAttrs.popover, Literal['auto', 'manual']]] = None,
        slot: Optional[Union[str, GlobalAttrs.slot]] = None,
        spellcheck: Optional[Union[str, GlobalAttrs.spellcheck, Literal['true', 'false', '']]] = None,
        style: Optional[Union[str, GlobalAttrs.style]] = None,
        tabindex: Optional[Union[str, GlobalAttrs.tabindex, int]] = None,
        title: Optional[Union[str, GlobalAttrs.title]] = None,
        translate: Optional[Union[str, GlobalAttrs.translate, Literal['yes', 'no']]] = None,
        writingsuggestions: Optional[Union[str, GlobalAttrs.writingsuggestions, Literal['true', 'false', '']]] = None,
        children: Optional[list] = None
    ) -> None:
        """
        Initialize 'hr' (Thematic break) element.  
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/hr

        :param attrs: A list or dictionary of attributes for the element
        :param id: The element's ID
        :param class_: Classes to which the element belongs
            | Set of space-separated tokens
        :param accesskey: Keyboard shortcut to activate or focus element
            | Ordered set of unique space-separated tokens, none of which are identical to another, each consisting of one code point in length
        :param autocapitalize: Recommended autocapitalization behavior (for supported input methods)
        :param autocorrect: Recommended autocorrection behavior (for supported input methods)
        :param autofocus: Automatically focus the element when the page is loaded
        :param contenteditable: Whether the element is editable
        :param dir: The text directionality of the element
        :param draggable: Whether the element is draggable
        :param enterkeyhint: Hint for selecting an enter key action
        :param hidden: Whether the element is relevant
        :param inert: Whether the element is inert.
        :param inputmode: Hint for selecting an input modality
        :param is_: Creates a customized built-in element
            | Valid custom element name of a defined customized built-in element
        :param itemid: Global identifier for a microdata item
            | Valid URL potentially surrounded by spaces
        :param itemprop: Property names of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs, defined property names, or text*
        :param itemref: Referenced elements
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param itemscope: Introduces a microdata item
        :param itemtype: Item types of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs*
        :param lang: Language of the element
            | Valid BCP 47 language tag or the empty string
        :param nonce: Cryptographic nonce used in Content Security Policy checks [CSP]
        :param popover: Makes the element a popover element
        :param slot: The element's desired slot
        :param spellcheck: Whether the element is to have its spelling and grammar checked
        :param style: Presentational and formatting instructions
            | CSS declarations*
        :param tabindex: Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation
        :param title: Advisory information for the element
        :param translate: Whether the element is to be translated when the page is localized
        :param writingsuggestions: Whether the element can offer writing suggestions or not.
        """ #fmt: skip
        super().__init__(
            "hr",
            void_element=True,
            attrs=attrs,
            children=children
        )
        if not (id is None or id is False):
            self._process_attr("id", id)
        if not (class_ is None or class_ is False):
            self._process_attr("class", class_)
        if not (accesskey is None or accesskey is False):
            self._process_attr("accesskey", accesskey)
        if not (autocapitalize is None or autocapitalize is False):
            self._process_attr("autocapitalize", autocapitalize)
        if not (autocorrect is None or autocorrect is False):
            self._process_attr("autocorrect", autocorrect)
        if not (autofocus is None or autofocus is False):
            self._process_attr("autofocus", autofocus)
        if not (contenteditable is None or contenteditable is False):
            self._process_attr("contenteditable", contenteditable)
        if not (dir is None or dir is False):
            self._process_attr("dir", dir)
        if not (draggable is None or draggable is False):
            self._process_attr("draggable", draggable)
        if not (enterkeyhint is None or enterkeyhint is False):
            self._process_attr("enterkeyhint", enterkeyhint)
        if not (hidden is None or hidden is False):
            self._process_attr("hidden", hidden)
        if not (inert is None or inert is False):
            self._process_attr("inert", inert)
        if not (inputmode is None or inputmode is False):
            self._process_attr("inputmode", inputmode)
        if not (is_ is None or is_ is False):
            self._process_attr("is", is_)
        if not (itemid is None or itemid is False):
            self._process_attr("itemid", itemid)
        if not (itemprop is None or itemprop is False):
            self._process_attr("itemprop", itemprop)
        if not (itemref is None or itemref is False):
            self._process_attr("itemref", itemref)
        if not (itemscope is None or itemscope is False):
            self._process_attr("itemscope", itemscope)
        if not (itemtype is None or itemtype is False):
            self._process_attr("itemtype", itemtype)
        if not (lang is None or lang is False):
            self._process_attr("lang", lang)
        if not (nonce is None or nonce is False):
            self._process_attr("nonce", nonce)
        if not (popover is None or popover is False):
            self._process_attr("popover", popover)
        if not (slot is None or slot is False):
            self._process_attr("slot", slot)
        if not (spellcheck is None or spellcheck is False):
            self._process_attr("spellcheck", spellcheck)
        if not (style is None or style is False):
            self._process_attr("style", style)
        if not (tabindex is None or tabindex is False):
            self._process_attr("tabindex", tabindex)
        if not (title is None or title is False):
            self._process_attr("title", title)
        if not (translate is None or translate is False):
            self._process_attr("translate", translate)
        if not (writingsuggestions is None or writingsuggestions is False):
            self._process_attr("writingsuggestions", writingsuggestions)


class html(BaseElement, GlobalAttrs):
    """
    The 'html' element.  
    Description: Root element  
    Categories: none  
    Parents: none*  
    Children: head* body*  
    Interface: HTMLHtmlElement  
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/html  
    """ # fmt: skip


    def __init__(
        self,
        attrs: Optional[Union[dict[str, Union[str, dict, list]], list[BaseAttribute]]] = None,
        id: Optional[Union[str, GlobalAttrs.id]] = None,
        class_: Optional[Union[str, GlobalAttrs.class_]] = None,
        accesskey: Optional[Union[str, GlobalAttrs.accesskey]] = None,
        autocapitalize: Optional[Union[str, GlobalAttrs.autocapitalize, Literal['on', 'off', 'none', 'sentences', 'words', 'characters']]] = None,
        autocorrect: Optional[Union[str, GlobalAttrs.autocorrect, Literal['on', 'off']]] = None,
        autofocus: Optional[Union[str, GlobalAttrs.autofocus, bool]] = None,
        contenteditable: Optional[Union[str, GlobalAttrs.contenteditable, Literal['true', 'plaintext-only', 'false']]] = None,
        dir: Optional[Union[str, GlobalAttrs.dir, Literal['ltr', 'rtl', 'auto']]] = None,
        draggable: Optional[Union[str, GlobalAttrs.draggable, Literal['true', 'false']]] = None,
        enterkeyhint: Optional[Union[str, GlobalAttrs.enterkeyhint, Literal['enter', 'done', 'go', 'next', 'previous', 'search', 'send']]] = None,
        hidden: Optional[Union[str, GlobalAttrs.hidden, Literal['until-found', 'hidden', '']]] = None,
        inert: Optional[Union[str, GlobalAttrs.inert, bool]] = None,
        inputmode: Optional[Union[str, GlobalAttrs.inputmode, Literal['none', 'text', 'tel', 'email', 'url', 'numeric', 'decimal', 'search']]] = None,
        is_: Optional[Union[str, GlobalAttrs.is_]] = None,
        itemid: Optional[Union[str, GlobalAttrs.itemid]] = None,
        itemprop: Optional[Union[str, GlobalAttrs.itemprop]] = None,
        itemref: Optional[Union[str, GlobalAttrs.itemref]] = None,
        itemscope: Optional[Union[str, GlobalAttrs.itemscope, bool]] = None,
        itemtype: Optional[Union[str, GlobalAttrs.itemtype]] = None,
        lang: Optional[Union[str, GlobalAttrs.lang]] = None,
        nonce: Optional[Union[str, GlobalAttrs.nonce]] = None,
        popover: Optional[Union[str, GlobalAttrs.popover, Literal['auto', 'manual']]] = None,
        slot: Optional[Union[str, GlobalAttrs.slot]] = None,
        spellcheck: Optional[Union[str, GlobalAttrs.spellcheck, Literal['true', 'false', '']]] = None,
        style: Optional[Union[str, GlobalAttrs.style]] = None,
        tabindex: Optional[Union[str, GlobalAttrs.tabindex, int]] = None,
        title: Optional[Union[str, GlobalAttrs.title]] = None,
        translate: Optional[Union[str, GlobalAttrs.translate, Literal['yes', 'no']]] = None,
        writingsuggestions: Optional[Union[str, GlobalAttrs.writingsuggestions, Literal['true', 'false', '']]] = None,
        children: Optional[list] = None
    ) -> None:
        """
        Initialize 'html' (Root element) element.  
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/html

        :param attrs: A list or dictionary of attributes for the element
        :param id: The element's ID
        :param class_: Classes to which the element belongs
            | Set of space-separated tokens
        :param accesskey: Keyboard shortcut to activate or focus element
            | Ordered set of unique space-separated tokens, none of which are identical to another, each consisting of one code point in length
        :param autocapitalize: Recommended autocapitalization behavior (for supported input methods)
        :param autocorrect: Recommended autocorrection behavior (for supported input methods)
        :param autofocus: Automatically focus the element when the page is loaded
        :param contenteditable: Whether the element is editable
        :param dir: The text directionality of the element
        :param draggable: Whether the element is draggable
        :param enterkeyhint: Hint for selecting an enter key action
        :param hidden: Whether the element is relevant
        :param inert: Whether the element is inert.
        :param inputmode: Hint for selecting an input modality
        :param is_: Creates a customized built-in element
            | Valid custom element name of a defined customized built-in element
        :param itemid: Global identifier for a microdata item
            | Valid URL potentially surrounded by spaces
        :param itemprop: Property names of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs, defined property names, or text*
        :param itemref: Referenced elements
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param itemscope: Introduces a microdata item
        :param itemtype: Item types of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs*
        :param lang: Language of the element
            | Valid BCP 47 language tag or the empty string
        :param nonce: Cryptographic nonce used in Content Security Policy checks [CSP]
        :param popover: Makes the element a popover element
        :param slot: The element's desired slot
        :param spellcheck: Whether the element is to have its spelling and grammar checked
        :param style: Presentational and formatting instructions
            | CSS declarations*
        :param tabindex: Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation
        :param title: Advisory information for the element
        :param translate: Whether the element is to be translated when the page is localized
        :param writingsuggestions: Whether the element can offer writing suggestions or not.
        """ #fmt: skip
        super().__init__(
            "html",
            void_element=False,
            attrs=attrs,
            children=children
        )
        if not (id is None or id is False):
            self._process_attr("id", id)
        if not (class_ is None or class_ is False):
            self._process_attr("class", class_)
        if not (accesskey is None or accesskey is False):
            self._process_attr("accesskey", accesskey)
        if not (autocapitalize is None or autocapitalize is False):
            self._process_attr("autocapitalize", autocapitalize)
        if not (autocorrect is None or autocorrect is False):
            self._process_attr("autocorrect", autocorrect)
        if not (autofocus is None or autofocus is False):
            self._process_attr("autofocus", autofocus)
        if not (contenteditable is None or contenteditable is False):
            self._process_attr("contenteditable", contenteditable)
        if not (dir is None or dir is False):
            self._process_attr("dir", dir)
        if not (draggable is None or draggable is False):
            self._process_attr("draggable", draggable)
        if not (enterkeyhint is None or enterkeyhint is False):
            self._process_attr("enterkeyhint", enterkeyhint)
        if not (hidden is None or hidden is False):
            self._process_attr("hidden", hidden)
        if not (inert is None or inert is False):
            self._process_attr("inert", inert)
        if not (inputmode is None or inputmode is False):
            self._process_attr("inputmode", inputmode)
        if not (is_ is None or is_ is False):
            self._process_attr("is", is_)
        if not (itemid is None or itemid is False):
            self._process_attr("itemid", itemid)
        if not (itemprop is None or itemprop is False):
            self._process_attr("itemprop", itemprop)
        if not (itemref is None or itemref is False):
            self._process_attr("itemref", itemref)
        if not (itemscope is None or itemscope is False):
            self._process_attr("itemscope", itemscope)
        if not (itemtype is None or itemtype is False):
            self._process_attr("itemtype", itemtype)
        if not (lang is None or lang is False):
            self._process_attr("lang", lang)
        if not (nonce is None or nonce is False):
            self._process_attr("nonce", nonce)
        if not (popover is None or popover is False):
            self._process_attr("popover", popover)
        if not (slot is None or slot is False):
            self._process_attr("slot", slot)
        if not (spellcheck is None or spellcheck is False):
            self._process_attr("spellcheck", spellcheck)
        if not (style is None or style is False):
            self._process_attr("style", style)
        if not (tabindex is None or tabindex is False):
            self._process_attr("tabindex", tabindex)
        if not (title is None or title is False):
            self._process_attr("title", title)
        if not (translate is None or translate is False):
            self._process_attr("translate", translate)
        if not (writingsuggestions is None or writingsuggestions is False):
            self._process_attr("writingsuggestions", writingsuggestions)


class i(BaseElement, GlobalAttrs):
    """
    The 'i' element.  
    Description: Alternate voice  
    Categories: flow phrasing palpable  
    Parents: phrasing  
    Children: phrasing  
    Interface: HTMLElement  
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/i  
    """ # fmt: skip


    def __init__(
        self,
        attrs: Optional[Union[dict[str, Union[str, dict, list]], list[BaseAttribute]]] = None,
        id: Optional[Union[str, GlobalAttrs.id]] = None,
        class_: Optional[Union[str, GlobalAttrs.class_]] = None,
        accesskey: Optional[Union[str, GlobalAttrs.accesskey]] = None,
        autocapitalize: Optional[Union[str, GlobalAttrs.autocapitalize, Literal['on', 'off', 'none', 'sentences', 'words', 'characters']]] = None,
        autocorrect: Optional[Union[str, GlobalAttrs.autocorrect, Literal['on', 'off']]] = None,
        autofocus: Optional[Union[str, GlobalAttrs.autofocus, bool]] = None,
        contenteditable: Optional[Union[str, GlobalAttrs.contenteditable, Literal['true', 'plaintext-only', 'false']]] = None,
        dir: Optional[Union[str, GlobalAttrs.dir, Literal['ltr', 'rtl', 'auto']]] = None,
        draggable: Optional[Union[str, GlobalAttrs.draggable, Literal['true', 'false']]] = None,
        enterkeyhint: Optional[Union[str, GlobalAttrs.enterkeyhint, Literal['enter', 'done', 'go', 'next', 'previous', 'search', 'send']]] = None,
        hidden: Optional[Union[str, GlobalAttrs.hidden, Literal['until-found', 'hidden', '']]] = None,
        inert: Optional[Union[str, GlobalAttrs.inert, bool]] = None,
        inputmode: Optional[Union[str, GlobalAttrs.inputmode, Literal['none', 'text', 'tel', 'email', 'url', 'numeric', 'decimal', 'search']]] = None,
        is_: Optional[Union[str, GlobalAttrs.is_]] = None,
        itemid: Optional[Union[str, GlobalAttrs.itemid]] = None,
        itemprop: Optional[Union[str, GlobalAttrs.itemprop]] = None,
        itemref: Optional[Union[str, GlobalAttrs.itemref]] = None,
        itemscope: Optional[Union[str, GlobalAttrs.itemscope, bool]] = None,
        itemtype: Optional[Union[str, GlobalAttrs.itemtype]] = None,
        lang: Optional[Union[str, GlobalAttrs.lang]] = None,
        nonce: Optional[Union[str, GlobalAttrs.nonce]] = None,
        popover: Optional[Union[str, GlobalAttrs.popover, Literal['auto', 'manual']]] = None,
        slot: Optional[Union[str, GlobalAttrs.slot]] = None,
        spellcheck: Optional[Union[str, GlobalAttrs.spellcheck, Literal['true', 'false', '']]] = None,
        style: Optional[Union[str, GlobalAttrs.style]] = None,
        tabindex: Optional[Union[str, GlobalAttrs.tabindex, int]] = None,
        title: Optional[Union[str, GlobalAttrs.title]] = None,
        translate: Optional[Union[str, GlobalAttrs.translate, Literal['yes', 'no']]] = None,
        writingsuggestions: Optional[Union[str, GlobalAttrs.writingsuggestions, Literal['true', 'false', '']]] = None,
        children: Optional[list] = None
    ) -> None:
        """
        Initialize 'i' (Alternate voice) element.  
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/i

        :param attrs: A list or dictionary of attributes for the element
        :param id: The element's ID
        :param class_: Classes to which the element belongs
            | Set of space-separated tokens
        :param accesskey: Keyboard shortcut to activate or focus element
            | Ordered set of unique space-separated tokens, none of which are identical to another, each consisting of one code point in length
        :param autocapitalize: Recommended autocapitalization behavior (for supported input methods)
        :param autocorrect: Recommended autocorrection behavior (for supported input methods)
        :param autofocus: Automatically focus the element when the page is loaded
        :param contenteditable: Whether the element is editable
        :param dir: The text directionality of the element
        :param draggable: Whether the element is draggable
        :param enterkeyhint: Hint for selecting an enter key action
        :param hidden: Whether the element is relevant
        :param inert: Whether the element is inert.
        :param inputmode: Hint for selecting an input modality
        :param is_: Creates a customized built-in element
            | Valid custom element name of a defined customized built-in element
        :param itemid: Global identifier for a microdata item
            | Valid URL potentially surrounded by spaces
        :param itemprop: Property names of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs, defined property names, or text*
        :param itemref: Referenced elements
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param itemscope: Introduces a microdata item
        :param itemtype: Item types of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs*
        :param lang: Language of the element
            | Valid BCP 47 language tag or the empty string
        :param nonce: Cryptographic nonce used in Content Security Policy checks [CSP]
        :param popover: Makes the element a popover element
        :param slot: The element's desired slot
        :param spellcheck: Whether the element is to have its spelling and grammar checked
        :param style: Presentational and formatting instructions
            | CSS declarations*
        :param tabindex: Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation
        :param title: Advisory information for the element
        :param translate: Whether the element is to be translated when the page is localized
        :param writingsuggestions: Whether the element can offer writing suggestions or not.
        """ #fmt: skip
        super().__init__(
            "i",
            void_element=False,
            attrs=attrs,
            children=children
        )
        if not (id is None or id is False):
            self._process_attr("id", id)
        if not (class_ is None or class_ is False):
            self._process_attr("class", class_)
        if not (accesskey is None or accesskey is False):
            self._process_attr("accesskey", accesskey)
        if not (autocapitalize is None or autocapitalize is False):
            self._process_attr("autocapitalize", autocapitalize)
        if not (autocorrect is None or autocorrect is False):
            self._process_attr("autocorrect", autocorrect)
        if not (autofocus is None or autofocus is False):
            self._process_attr("autofocus", autofocus)
        if not (contenteditable is None or contenteditable is False):
            self._process_attr("contenteditable", contenteditable)
        if not (dir is None or dir is False):
            self._process_attr("dir", dir)
        if not (draggable is None or draggable is False):
            self._process_attr("draggable", draggable)
        if not (enterkeyhint is None or enterkeyhint is False):
            self._process_attr("enterkeyhint", enterkeyhint)
        if not (hidden is None or hidden is False):
            self._process_attr("hidden", hidden)
        if not (inert is None or inert is False):
            self._process_attr("inert", inert)
        if not (inputmode is None or inputmode is False):
            self._process_attr("inputmode", inputmode)
        if not (is_ is None or is_ is False):
            self._process_attr("is", is_)
        if not (itemid is None or itemid is False):
            self._process_attr("itemid", itemid)
        if not (itemprop is None or itemprop is False):
            self._process_attr("itemprop", itemprop)
        if not (itemref is None or itemref is False):
            self._process_attr("itemref", itemref)
        if not (itemscope is None or itemscope is False):
            self._process_attr("itemscope", itemscope)
        if not (itemtype is None or itemtype is False):
            self._process_attr("itemtype", itemtype)
        if not (lang is None or lang is False):
            self._process_attr("lang", lang)
        if not (nonce is None or nonce is False):
            self._process_attr("nonce", nonce)
        if not (popover is None or popover is False):
            self._process_attr("popover", popover)
        if not (slot is None or slot is False):
            self._process_attr("slot", slot)
        if not (spellcheck is None or spellcheck is False):
            self._process_attr("spellcheck", spellcheck)
        if not (style is None or style is False):
            self._process_attr("style", style)
        if not (tabindex is None or tabindex is False):
            self._process_attr("tabindex", tabindex)
        if not (title is None or title is False):
            self._process_attr("title", title)
        if not (translate is None or translate is False):
            self._process_attr("translate", translate)
        if not (writingsuggestions is None or writingsuggestions is False):
            self._process_attr("writingsuggestions", writingsuggestions)


class iframe(BaseElement, GlobalAttrs, IframeAttrs):
    """
    The 'iframe' element.  
    Description: Child navigable  
    Categories: flow phrasing embedded interactive palpable  
    Parents: phrasing  
    Children: empty  
    Interface: HTMLIFrameElement  
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe  
    """ # fmt: skip


    def __init__(
        self,
        attrs: Optional[Union[dict[str, Union[str, dict, list]], list[BaseAttribute]]] = None,
        id: Optional[Union[str, GlobalAttrs.id]] = None,
        class_: Optional[Union[str, GlobalAttrs.class_]] = None,
        allow: Optional[Union[str, IframeAttrs.allow]] = None,
        allowfullscreen: Optional[Union[str, IframeAttrs.allowfullscreen, bool]] = None,
        height: Optional[Union[str, IframeAttrs.height, int]] = None,
        loading: Optional[Union[str, IframeAttrs.loading, Literal['lazy', 'eager']]] = None,
        name: Optional[Union[str, IframeAttrs.name]] = None,
        referrerpolicy: Optional[Union[str, IframeAttrs.referrerpolicy]] = None,
        sandbox: Optional[Union[str, IframeAttrs.sandbox]] = None,
        src: Optional[Union[str, IframeAttrs.src]] = None,
        srcdoc: Optional[Union[str, IframeAttrs.srcdoc]] = None,
        width: Optional[Union[str, IframeAttrs.width, int]] = None,
        accesskey: Optional[Union[str, GlobalAttrs.accesskey]] = None,
        autocapitalize: Optional[Union[str, GlobalAttrs.autocapitalize, Literal['on', 'off', 'none', 'sentences', 'words', 'characters']]] = None,
        autocorrect: Optional[Union[str, GlobalAttrs.autocorrect, Literal['on', 'off']]] = None,
        autofocus: Optional[Union[str, GlobalAttrs.autofocus, bool]] = None,
        contenteditable: Optional[Union[str, GlobalAttrs.contenteditable, Literal['true', 'plaintext-only', 'false']]] = None,
        dir: Optional[Union[str, GlobalAttrs.dir, Literal['ltr', 'rtl', 'auto']]] = None,
        draggable: Optional[Union[str, GlobalAttrs.draggable, Literal['true', 'false']]] = None,
        enterkeyhint: Optional[Union[str, GlobalAttrs.enterkeyhint, Literal['enter', 'done', 'go', 'next', 'previous', 'search', 'send']]] = None,
        hidden: Optional[Union[str, GlobalAttrs.hidden, Literal['until-found', 'hidden', '']]] = None,
        inert: Optional[Union[str, GlobalAttrs.inert, bool]] = None,
        inputmode: Optional[Union[str, GlobalAttrs.inputmode, Literal['none', 'text', 'tel', 'email', 'url', 'numeric', 'decimal', 'search']]] = None,
        is_: Optional[Union[str, GlobalAttrs.is_]] = None,
        itemid: Optional[Union[str, GlobalAttrs.itemid]] = None,
        itemprop: Optional[Union[str, GlobalAttrs.itemprop]] = None,
        itemref: Optional[Union[str, GlobalAttrs.itemref]] = None,
        itemscope: Optional[Union[str, GlobalAttrs.itemscope, bool]] = None,
        itemtype: Optional[Union[str, GlobalAttrs.itemtype]] = None,
        lang: Optional[Union[str, GlobalAttrs.lang]] = None,
        nonce: Optional[Union[str, GlobalAttrs.nonce]] = None,
        popover: Optional[Union[str, GlobalAttrs.popover, Literal['auto', 'manual']]] = None,
        slot: Optional[Union[str, GlobalAttrs.slot]] = None,
        spellcheck: Optional[Union[str, GlobalAttrs.spellcheck, Literal['true', 'false', '']]] = None,
        style: Optional[Union[str, GlobalAttrs.style]] = None,
        tabindex: Optional[Union[str, GlobalAttrs.tabindex, int]] = None,
        title: Optional[Union[str, GlobalAttrs.title]] = None,
        translate: Optional[Union[str, GlobalAttrs.translate, Literal['yes', 'no']]] = None,
        writingsuggestions: Optional[Union[str, GlobalAttrs.writingsuggestions, Literal['true', 'false', '']]] = None,
        children: Optional[list] = None
    ) -> None:
        """
        Initialize 'iframe' (Child navigable) element.  
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe

        :param attrs: A list or dictionary of attributes for the element
        :param id: The element's ID
        :param class_: Classes to which the element belongs
            | Set of space-separated tokens
        :param allow: Permissions policy to be applied to the iframe's contents
            | Serialized permissions policy
        :param allowfullscreen: Whether to allow the iframe's contents to use requestFullscreen()
        :param height: Vertical dimension
        :param loading: Used when determining loading deferral
        :param name: Name of content navigable
            | Valid navigable target name or keyword
        :param referrerpolicy: Referrer policy for fetches initiated by the element
            | Referrer policy
        :param sandbox: Security rules for nested content
            | Unordered set of unique space-separated tokens, ASCII case-insensitive, consisting of "allow-downloads" "allow-forms" "allow-modals" "allow-orientation-lock" "allow-pointer-lock" "allow-popups" "allow-popups-to-escape-sandbox" "allow-presentation" "allow-same-origin" "allow-scripts" "allow-top-navigation" "allow-top-navigation-by-user-activation" "allow-top-navigation-to-custom-protocols"
        :param src: Address of the resource
            | Valid non-empty URL potentially surrounded by spaces
        :param srcdoc: A document to render in the iframe
            | The source of an iframe srcdoc document*
        :param width: Horizontal dimension
        :param accesskey: Keyboard shortcut to activate or focus element
            | Ordered set of unique space-separated tokens, none of which are identical to another, each consisting of one code point in length
        :param autocapitalize: Recommended autocapitalization behavior (for supported input methods)
        :param autocorrect: Recommended autocorrection behavior (for supported input methods)
        :param autofocus: Automatically focus the element when the page is loaded
        :param contenteditable: Whether the element is editable
        :param dir: The text directionality of the element
        :param draggable: Whether the element is draggable
        :param enterkeyhint: Hint for selecting an enter key action
        :param hidden: Whether the element is relevant
        :param inert: Whether the element is inert.
        :param inputmode: Hint for selecting an input modality
        :param is_: Creates a customized built-in element
            | Valid custom element name of a defined customized built-in element
        :param itemid: Global identifier for a microdata item
            | Valid URL potentially surrounded by spaces
        :param itemprop: Property names of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs, defined property names, or text*
        :param itemref: Referenced elements
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param itemscope: Introduces a microdata item
        :param itemtype: Item types of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs*
        :param lang: Language of the element
            | Valid BCP 47 language tag or the empty string
        :param nonce: Cryptographic nonce used in Content Security Policy checks [CSP]
        :param popover: Makes the element a popover element
        :param slot: The element's desired slot
        :param spellcheck: Whether the element is to have its spelling and grammar checked
        :param style: Presentational and formatting instructions
            | CSS declarations*
        :param tabindex: Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation
        :param title: Advisory information for the element
        :param translate: Whether the element is to be translated when the page is localized
        :param writingsuggestions: Whether the element can offer writing suggestions or not.
        """ #fmt: skip
        super().__init__(
            "iframe",
            void_element=True,
            attrs=attrs,
            children=children
        )
        if not (id is None or id is False):
            self._process_attr("id", id)
        if not (class_ is None or class_ is False):
            self._process_attr("class", class_)
        if not (allow is None or allow is False):
            self._process_attr("allow", allow)
        if not (allowfullscreen is None or allowfullscreen is False):
            self._process_attr("allowfullscreen", allowfullscreen)
        if not (height is None or height is False):
            self._process_attr("height", height)
        if not (loading is None or loading is False):
            self._process_attr("loading", loading)
        if not (name is None or name is False):
            self._process_attr("name", name)
        if not (referrerpolicy is None or referrerpolicy is False):
            self._process_attr("referrerpolicy", referrerpolicy)
        if not (sandbox is None or sandbox is False):
            self._process_attr("sandbox", sandbox)
        if not (src is None or src is False):
            self._process_attr("src", src)
        if not (srcdoc is None or srcdoc is False):
            self._process_attr("srcdoc", srcdoc)
        if not (width is None or width is False):
            self._process_attr("width", width)
        if not (accesskey is None or accesskey is False):
            self._process_attr("accesskey", accesskey)
        if not (autocapitalize is None or autocapitalize is False):
            self._process_attr("autocapitalize", autocapitalize)
        if not (autocorrect is None or autocorrect is False):
            self._process_attr("autocorrect", autocorrect)
        if not (autofocus is None or autofocus is False):
            self._process_attr("autofocus", autofocus)
        if not (contenteditable is None or contenteditable is False):
            self._process_attr("contenteditable", contenteditable)
        if not (dir is None or dir is False):
            self._process_attr("dir", dir)
        if not (draggable is None or draggable is False):
            self._process_attr("draggable", draggable)
        if not (enterkeyhint is None or enterkeyhint is False):
            self._process_attr("enterkeyhint", enterkeyhint)
        if not (hidden is None or hidden is False):
            self._process_attr("hidden", hidden)
        if not (inert is None or inert is False):
            self._process_attr("inert", inert)
        if not (inputmode is None or inputmode is False):
            self._process_attr("inputmode", inputmode)
        if not (is_ is None or is_ is False):
            self._process_attr("is", is_)
        if not (itemid is None or itemid is False):
            self._process_attr("itemid", itemid)
        if not (itemprop is None or itemprop is False):
            self._process_attr("itemprop", itemprop)
        if not (itemref is None or itemref is False):
            self._process_attr("itemref", itemref)
        if not (itemscope is None or itemscope is False):
            self._process_attr("itemscope", itemscope)
        if not (itemtype is None or itemtype is False):
            self._process_attr("itemtype", itemtype)
        if not (lang is None or lang is False):
            self._process_attr("lang", lang)
        if not (nonce is None or nonce is False):
            self._process_attr("nonce", nonce)
        if not (popover is None or popover is False):
            self._process_attr("popover", popover)
        if not (slot is None or slot is False):
            self._process_attr("slot", slot)
        if not (spellcheck is None or spellcheck is False):
            self._process_attr("spellcheck", spellcheck)
        if not (style is None or style is False):
            self._process_attr("style", style)
        if not (tabindex is None or tabindex is False):
            self._process_attr("tabindex", tabindex)
        if not (title is None or title is False):
            self._process_attr("title", title)
        if not (translate is None or translate is False):
            self._process_attr("translate", translate)
        if not (writingsuggestions is None or writingsuggestions is False):
            self._process_attr("writingsuggestions", writingsuggestions)


class img(BaseElement, GlobalAttrs, ImgAttrs):
    """
    The 'img' element.  
    Description: Image  
    Categories: flow phrasing embedded interactive* form-associated palpable  
    Parents: phrasing picture  
    Children: empty  
    Interface: HTMLImageElement  
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img  
    """ # fmt: skip


    def __init__(
        self,
        attrs: Optional[Union[dict[str, Union[str, dict, list]], list[BaseAttribute]]] = None,
        id: Optional[Union[str, GlobalAttrs.id]] = None,
        class_: Optional[Union[str, GlobalAttrs.class_]] = None,
        alt: Optional[Union[str, ImgAttrs.alt]] = None,
        crossorigin: Optional[Union[str, ImgAttrs.crossorigin, Literal['anonymous', 'use-credentials']]] = None,
        decoding: Optional[Union[str, ImgAttrs.decoding, Literal['sync', 'async', 'auto']]] = None,
        fetchpriority: Optional[Union[str, ImgAttrs.fetchpriority, Literal['auto', 'high', 'low']]] = None,
        height: Optional[Union[str, ImgAttrs.height, int]] = None,
        ismap: Optional[Union[str, ImgAttrs.ismap, bool]] = None,
        loading: Optional[Union[str, ImgAttrs.loading, Literal['lazy', 'eager']]] = None,
        referrerpolicy: Optional[Union[str, ImgAttrs.referrerpolicy]] = None,
        sizes: Optional[Union[str, ImgAttrs.sizes]] = None,
        src: Optional[Union[str, ImgAttrs.src]] = None,
        srcset: Optional[Union[str, ImgAttrs.srcset]] = None,
        usemap: Optional[Union[str, ImgAttrs.usemap]] = None,
        width: Optional[Union[str, ImgAttrs.width, int]] = None,
        accesskey: Optional[Union[str, GlobalAttrs.accesskey]] = None,
        autocapitalize: Optional[Union[str, GlobalAttrs.autocapitalize, Literal['on', 'off', 'none', 'sentences', 'words', 'characters']]] = None,
        autocorrect: Optional[Union[str, GlobalAttrs.autocorrect, Literal['on', 'off']]] = None,
        autofocus: Optional[Union[str, GlobalAttrs.autofocus, bool]] = None,
        contenteditable: Optional[Union[str, GlobalAttrs.contenteditable, Literal['true', 'plaintext-only', 'false']]] = None,
        dir: Optional[Union[str, GlobalAttrs.dir, Literal['ltr', 'rtl', 'auto']]] = None,
        draggable: Optional[Union[str, GlobalAttrs.draggable, Literal['true', 'false']]] = None,
        enterkeyhint: Optional[Union[str, GlobalAttrs.enterkeyhint, Literal['enter', 'done', 'go', 'next', 'previous', 'search', 'send']]] = None,
        hidden: Optional[Union[str, GlobalAttrs.hidden, Literal['until-found', 'hidden', '']]] = None,
        inert: Optional[Union[str, GlobalAttrs.inert, bool]] = None,
        inputmode: Optional[Union[str, GlobalAttrs.inputmode, Literal['none', 'text', 'tel', 'email', 'url', 'numeric', 'decimal', 'search']]] = None,
        is_: Optional[Union[str, GlobalAttrs.is_]] = None,
        itemid: Optional[Union[str, GlobalAttrs.itemid]] = None,
        itemprop: Optional[Union[str, GlobalAttrs.itemprop]] = None,
        itemref: Optional[Union[str, GlobalAttrs.itemref]] = None,
        itemscope: Optional[Union[str, GlobalAttrs.itemscope, bool]] = None,
        itemtype: Optional[Union[str, GlobalAttrs.itemtype]] = None,
        lang: Optional[Union[str, GlobalAttrs.lang]] = None,
        nonce: Optional[Union[str, GlobalAttrs.nonce]] = None,
        popover: Optional[Union[str, GlobalAttrs.popover, Literal['auto', 'manual']]] = None,
        slot: Optional[Union[str, GlobalAttrs.slot]] = None,
        spellcheck: Optional[Union[str, GlobalAttrs.spellcheck, Literal['true', 'false', '']]] = None,
        style: Optional[Union[str, GlobalAttrs.style]] = None,
        tabindex: Optional[Union[str, GlobalAttrs.tabindex, int]] = None,
        title: Optional[Union[str, GlobalAttrs.title]] = None,
        translate: Optional[Union[str, GlobalAttrs.translate, Literal['yes', 'no']]] = None,
        writingsuggestions: Optional[Union[str, GlobalAttrs.writingsuggestions, Literal['true', 'false', '']]] = None,
        children: Optional[list] = None
    ) -> None:
        """
        Initialize 'img' (Image) element.  
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img

        :param attrs: A list or dictionary of attributes for the element
        :param id: The element's ID
        :param class_: Classes to which the element belongs
            | Set of space-separated tokens
        :param alt: Replacement text for use when images are not available
        :param crossorigin: How the element handles crossorigin requests
        :param decoding: Decoding hint to use when processing this image for presentation
        :param fetchpriority: Sets the priority for fetches initiated by the element
        :param height: Vertical dimension
        :param ismap: Whether the image is a server-side image map
        :param loading: Used when determining loading deferral
        :param referrerpolicy: Referrer policy for fetches initiated by the element
            | Referrer policy
        :param sizes: Image sizes for different page layouts
            | Valid source size list
        :param src: Address of the resource
            | Valid non-empty URL potentially surrounded by spaces
        :param srcset: Images to use in different situations, e.g., high-resolution displays, small monitors, etc.
            | Comma-separated list of image candidate strings
        :param usemap: Name of image map to use
            | Valid hash-name reference*
        :param width: Horizontal dimension
        :param accesskey: Keyboard shortcut to activate or focus element
            | Ordered set of unique space-separated tokens, none of which are identical to another, each consisting of one code point in length
        :param autocapitalize: Recommended autocapitalization behavior (for supported input methods)
        :param autocorrect: Recommended autocorrection behavior (for supported input methods)
        :param autofocus: Automatically focus the element when the page is loaded
        :param contenteditable: Whether the element is editable
        :param dir: The text directionality of the element
        :param draggable: Whether the element is draggable
        :param enterkeyhint: Hint for selecting an enter key action
        :param hidden: Whether the element is relevant
        :param inert: Whether the element is inert.
        :param inputmode: Hint for selecting an input modality
        :param is_: Creates a customized built-in element
            | Valid custom element name of a defined customized built-in element
        :param itemid: Global identifier for a microdata item
            | Valid URL potentially surrounded by spaces
        :param itemprop: Property names of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs, defined property names, or text*
        :param itemref: Referenced elements
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param itemscope: Introduces a microdata item
        :param itemtype: Item types of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs*
        :param lang: Language of the element
            | Valid BCP 47 language tag or the empty string
        :param nonce: Cryptographic nonce used in Content Security Policy checks [CSP]
        :param popover: Makes the element a popover element
        :param slot: The element's desired slot
        :param spellcheck: Whether the element is to have its spelling and grammar checked
        :param style: Presentational and formatting instructions
            | CSS declarations*
        :param tabindex: Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation
        :param title: Advisory information for the element
        :param translate: Whether the element is to be translated when the page is localized
        :param writingsuggestions: Whether the element can offer writing suggestions or not.
        """ #fmt: skip
        super().__init__(
            "img",
            void_element=True,
            attrs=attrs,
            children=children
        )
        if not (id is None or id is False):
            self._process_attr("id", id)
        if not (class_ is None or class_ is False):
            self._process_attr("class", class_)
        if not (alt is None or alt is False):
            self._process_attr("alt", alt)
        if not (crossorigin is None or crossorigin is False):
            self._process_attr("crossorigin", crossorigin)
        if not (decoding is None or decoding is False):
            self._process_attr("decoding", decoding)
        if not (fetchpriority is None or fetchpriority is False):
            self._process_attr("fetchpriority", fetchpriority)
        if not (height is None or height is False):
            self._process_attr("height", height)
        if not (ismap is None or ismap is False):
            self._process_attr("ismap", ismap)
        if not (loading is None or loading is False):
            self._process_attr("loading", loading)
        if not (referrerpolicy is None or referrerpolicy is False):
            self._process_attr("referrerpolicy", referrerpolicy)
        if not (sizes is None or sizes is False):
            self._process_attr("sizes", sizes)
        if not (src is None or src is False):
            self._process_attr("src", src)
        if not (srcset is None or srcset is False):
            self._process_attr("srcset", srcset)
        if not (usemap is None or usemap is False):
            self._process_attr("usemap", usemap)
        if not (width is None or width is False):
            self._process_attr("width", width)
        if not (accesskey is None or accesskey is False):
            self._process_attr("accesskey", accesskey)
        if not (autocapitalize is None or autocapitalize is False):
            self._process_attr("autocapitalize", autocapitalize)
        if not (autocorrect is None or autocorrect is False):
            self._process_attr("autocorrect", autocorrect)
        if not (autofocus is None or autofocus is False):
            self._process_attr("autofocus", autofocus)
        if not (contenteditable is None or contenteditable is False):
            self._process_attr("contenteditable", contenteditable)
        if not (dir is None or dir is False):
            self._process_attr("dir", dir)
        if not (draggable is None or draggable is False):
            self._process_attr("draggable", draggable)
        if not (enterkeyhint is None or enterkeyhint is False):
            self._process_attr("enterkeyhint", enterkeyhint)
        if not (hidden is None or hidden is False):
            self._process_attr("hidden", hidden)
        if not (inert is None or inert is False):
            self._process_attr("inert", inert)
        if not (inputmode is None or inputmode is False):
            self._process_attr("inputmode", inputmode)
        if not (is_ is None or is_ is False):
            self._process_attr("is", is_)
        if not (itemid is None or itemid is False):
            self._process_attr("itemid", itemid)
        if not (itemprop is None or itemprop is False):
            self._process_attr("itemprop", itemprop)
        if not (itemref is None or itemref is False):
            self._process_attr("itemref", itemref)
        if not (itemscope is None or itemscope is False):
            self._process_attr("itemscope", itemscope)
        if not (itemtype is None or itemtype is False):
            self._process_attr("itemtype", itemtype)
        if not (lang is None or lang is False):
            self._process_attr("lang", lang)
        if not (nonce is None or nonce is False):
            self._process_attr("nonce", nonce)
        if not (popover is None or popover is False):
            self._process_attr("popover", popover)
        if not (slot is None or slot is False):
            self._process_attr("slot", slot)
        if not (spellcheck is None or spellcheck is False):
            self._process_attr("spellcheck", spellcheck)
        if not (style is None or style is False):
            self._process_attr("style", style)
        if not (tabindex is None or tabindex is False):
            self._process_attr("tabindex", tabindex)
        if not (title is None or title is False):
            self._process_attr("title", title)
        if not (translate is None or translate is False):
            self._process_attr("translate", translate)
        if not (writingsuggestions is None or writingsuggestions is False):
            self._process_attr("writingsuggestions", writingsuggestions)


class input(BaseElement, GlobalAttrs, InputAttrs): # type: ignore[misc]
    """
    The 'input' element.  
    Description: Form control  
    Categories: flow phrasing interactive* listed labelable submittable resettable form-associated palpable*  
    Parents: phrasing  
    Children: empty  
    Interface: HTMLInputElement  
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input  
    """ # fmt: skip


    def __init__(
        self,
        attrs: Optional[Union[dict[str, Union[str, dict, list]], list[BaseAttribute]]] = None,
        id: Optional[Union[str, GlobalAttrs.id]] = None,
        class_: Optional[Union[str, GlobalAttrs.class_]] = None,
        accept: Optional[Union[str, InputAttrs.accept]] = None,
        alpha: Optional[Union[str, InputAttrs.alpha, bool]] = None,
        alt: Optional[Union[str, InputAttrs.alt]] = None,
        autocomplete: Optional[Union[str, InputAttrs.autocomplete]] = None,
        checked: Optional[Union[str, InputAttrs.checked, bool]] = None,
        colorspace: Optional[Union[str, InputAttrs.colorspace, Literal['limited-srgb', 'display-p3']]] = None,
        dirname: Optional[Union[str, InputAttrs.dirname]] = None,
        disabled: Optional[Union[str, InputAttrs.disabled, bool]] = None,
        form: Optional[Union[str, InputAttrs.form]] = None,
        formaction: Optional[Union[str, InputAttrs.formaction]] = None,
        formenctype: Optional[Union[str, InputAttrs.formenctype, Literal['application/x-www-form-urlencoded', 'multipart/form-data', 'text/plain']]] = None,
        formmethod: Optional[Union[str, InputAttrs.formmethod, Literal['GET', 'POST', 'dialog']]] = None,
        formnovalidate: Optional[Union[str, InputAttrs.formnovalidate, bool]] = None,
        formtarget: Optional[Union[str, InputAttrs.formtarget]] = None,
        height: Optional[Union[str, InputAttrs.height, int]] = None,
        list: Optional[Union[str, InputAttrs.list]] = None,
        max: Optional[Union[str, InputAttrs.max]] = None,
        maxlength: Optional[Union[str, InputAttrs.maxlength, int]] = None,
        min: Optional[Union[str, InputAttrs.min]] = None,
        minlength: Optional[Union[str, InputAttrs.minlength, int]] = None,
        multiple: Optional[Union[str, InputAttrs.multiple, bool]] = None,
        name: Optional[Union[str, InputAttrs.name]] = None,
        pattern: Optional[Union[str, InputAttrs.pattern]] = None,
        placeholder: Optional[Union[str, InputAttrs.placeholder]] = None,
        popovertarget: Optional[Union[str, InputAttrs.popovertarget]] = None,
        popovertargetaction: Optional[Union[str, InputAttrs.popovertargetaction, Literal['toggle', 'show', 'hide']]] = None,
        readonly: Optional[Union[str, InputAttrs.readonly, bool]] = None,
        required: Optional[Union[str, InputAttrs.required, bool]] = None,
        size: Optional[Union[str, InputAttrs.size]] = None,
        src: Optional[Union[str, InputAttrs.src]] = None,
        step: Optional[Union[str, InputAttrs.step, float]] = None,
        title: Optional[Union[str, InputAttrs.title]] = None,
        type: Optional[Union[str, InputAttrs.type]] = None,
        value: Optional[Union[str, InputAttrs.value]] = None,
        width: Optional[Union[str, InputAttrs.width, int]] = None,
        accesskey: Optional[Union[str, GlobalAttrs.accesskey]] = None,
        autocapitalize: Optional[Union[str, GlobalAttrs.autocapitalize, Literal['on', 'off', 'none', 'sentences', 'words', 'characters']]] = None,
        autocorrect: Optional[Union[str, GlobalAttrs.autocorrect, Literal['on', 'off']]] = None,
        autofocus: Optional[Union[str, GlobalAttrs.autofocus, bool]] = None,
        contenteditable: Optional[Union[str, GlobalAttrs.contenteditable, Literal['true', 'plaintext-only', 'false']]] = None,
        dir: Optional[Union[str, GlobalAttrs.dir, Literal['ltr', 'rtl', 'auto']]] = None,
        draggable: Optional[Union[str, GlobalAttrs.draggable, Literal['true', 'false']]] = None,
        enterkeyhint: Optional[Union[str, GlobalAttrs.enterkeyhint, Literal['enter', 'done', 'go', 'next', 'previous', 'search', 'send']]] = None,
        hidden: Optional[Union[str, GlobalAttrs.hidden, Literal['until-found', 'hidden', '']]] = None,
        inert: Optional[Union[str, GlobalAttrs.inert, bool]] = None,
        inputmode: Optional[Union[str, GlobalAttrs.inputmode, Literal['none', 'text', 'tel', 'email', 'url', 'numeric', 'decimal', 'search']]] = None,
        is_: Optional[Union[str, GlobalAttrs.is_]] = None,
        itemid: Optional[Union[str, GlobalAttrs.itemid]] = None,
        itemprop: Optional[Union[str, GlobalAttrs.itemprop]] = None,
        itemref: Optional[Union[str, GlobalAttrs.itemref]] = None,
        itemscope: Optional[Union[str, GlobalAttrs.itemscope, bool]] = None,
        itemtype: Optional[Union[str, GlobalAttrs.itemtype]] = None,
        lang: Optional[Union[str, GlobalAttrs.lang]] = None,
        nonce: Optional[Union[str, GlobalAttrs.nonce]] = None,
        popover: Optional[Union[str, GlobalAttrs.popover, Literal['auto', 'manual']]] = None,
        slot: Optional[Union[str, GlobalAttrs.slot]] = None,
        spellcheck: Optional[Union[str, GlobalAttrs.spellcheck, Literal['true', 'false', '']]] = None,
        style: Optional[Union[str, GlobalAttrs.style]] = None,
        tabindex: Optional[Union[str, GlobalAttrs.tabindex, int]] = None,
        translate: Optional[Union[str, GlobalAttrs.translate, Literal['yes', 'no']]] = None,
        writingsuggestions: Optional[Union[str, GlobalAttrs.writingsuggestions, Literal['true', 'false', '']]] = None,
        children: Optional[list] = None
    ) -> None:
        """
        Initialize 'input' (Form control) element.  
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input

        :param attrs: A list or dictionary of attributes for the element
        :param id: The element's ID
        :param class_: Classes to which the element belongs
            | Set of space-separated tokens
        :param accept: Hint for expected file type in file upload controls
            | Set of comma-separated tokens* consisting of valid MIME type strings with no parameters or audio/*, video/*, or image/*
        :param alpha: Allow the color's alpha component to be set
        :param alt: Replacement text for use when images are not available
        :param autocomplete: Hint for form autofill feature
            | Autofill field name and related tokens*
        :param checked: Whether the control is checked
        :param colorspace: The color space of the serialized color
        :param dirname: Name of form control to use for sending the element's directionality in form submission
        :param disabled: Whether the form control is disabled
        :param form: Associates the element with a form element
            | ID*
        :param formaction: URL to use for form submission
            | Valid non-empty URL potentially surrounded by spaces
        :param formenctype: Entry list encoding type to use for form submission
        :param formmethod: Variant to use for form submission
        :param formnovalidate: Bypass form control validation for form submission
        :param formtarget: Navigable for form submission
            | Valid navigable target name or keyword
        :param height: Vertical dimension
        :param list: List of autocomplete options
            | ID*
        :param max: Maximum value
            | Varies*
        :param maxlength: Maximum length of value
        :param min: Minimum value
            | Varies*
        :param minlength: Minimum length of value
        :param multiple: Whether to allow multiple values
        :param name: Name of the element to use for form submission and in the form.elements API
        :param pattern: Pattern to be matched by the form control's value
            | Regular expression matching the JavaScript Pattern production
        :param placeholder: User-visible label to be placed within the form control
        :param popovertarget: Targets a popover element to toggle, show, or hide
            | ID*
        :param popovertargetaction: Indicates whether a targeted popover element is to be toggled, shown, or hidden
        :param readonly: Whether to allow the value to be edited by the user
        :param required: Whether the control is required for form submission
        :param size: Size of the control
            | Valid non-negative integer greater than zero
        :param src: Address of the resource
            | Valid non-empty URL potentially surrounded by spaces
        :param step: Granularity to be matched by the form control's value
        :param title: Description of pattern (when used with pattern attribute)
        :param type: Type of form control
            | input type keyword
        :param value: Value of the form control
            | Varies*
        :param width: Horizontal dimension
        :param accesskey: Keyboard shortcut to activate or focus element
            | Ordered set of unique space-separated tokens, none of which are identical to another, each consisting of one code point in length
        :param autocapitalize: Recommended autocapitalization behavior (for supported input methods)
        :param autocorrect: Recommended autocorrection behavior (for supported input methods)
        :param autofocus: Automatically focus the element when the page is loaded
        :param contenteditable: Whether the element is editable
        :param dir: The text directionality of the element
        :param draggable: Whether the element is draggable
        :param enterkeyhint: Hint for selecting an enter key action
        :param hidden: Whether the element is relevant
        :param inert: Whether the element is inert.
        :param inputmode: Hint for selecting an input modality
        :param is_: Creates a customized built-in element
            | Valid custom element name of a defined customized built-in element
        :param itemid: Global identifier for a microdata item
            | Valid URL potentially surrounded by spaces
        :param itemprop: Property names of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs, defined property names, or text*
        :param itemref: Referenced elements
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param itemscope: Introduces a microdata item
        :param itemtype: Item types of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs*
        :param lang: Language of the element
            | Valid BCP 47 language tag or the empty string
        :param nonce: Cryptographic nonce used in Content Security Policy checks [CSP]
        :param popover: Makes the element a popover element
        :param slot: The element's desired slot
        :param spellcheck: Whether the element is to have its spelling and grammar checked
        :param style: Presentational and formatting instructions
            | CSS declarations*
        :param tabindex: Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation
        :param translate: Whether the element is to be translated when the page is localized
        :param writingsuggestions: Whether the element can offer writing suggestions or not.
        """ #fmt: skip
        super().__init__(
            "input",
            void_element=True,
            attrs=attrs,
            children=children
        )
        if not (id is None or id is False):
            self._process_attr("id", id)
        if not (class_ is None or class_ is False):
            self._process_attr("class", class_)
        if not (accept is None or accept is False):
            self._process_attr("accept", accept)
        if not (alpha is None or alpha is False):
            self._process_attr("alpha", alpha)
        if not (alt is None or alt is False):
            self._process_attr("alt", alt)
        if not (autocomplete is None or autocomplete is False):
            self._process_attr("autocomplete", autocomplete)
        if not (checked is None or checked is False):
            self._process_attr("checked", checked)
        if not (colorspace is None or colorspace is False):
            self._process_attr("colorspace", colorspace)
        if not (dirname is None or dirname is False):
            self._process_attr("dirname", dirname)
        if not (disabled is None or disabled is False):
            self._process_attr("disabled", disabled)
        if not (form is None or form is False):
            self._process_attr("form", form)
        if not (formaction is None or formaction is False):
            self._process_attr("formaction", formaction)
        if not (formenctype is None or formenctype is False):
            self._process_attr("formenctype", formenctype)
        if not (formmethod is None or formmethod is False):
            self._process_attr("formmethod", formmethod)
        if not (formnovalidate is None or formnovalidate is False):
            self._process_attr("formnovalidate", formnovalidate)
        if not (formtarget is None or formtarget is False):
            self._process_attr("formtarget", formtarget)
        if not (height is None or height is False):
            self._process_attr("height", height)
        if not (list is None or list is False):
            self._process_attr("list", list)
        if not (max is None or max is False):
            self._process_attr("max", max)
        if not (maxlength is None or maxlength is False):
            self._process_attr("maxlength", maxlength)
        if not (min is None or min is False):
            self._process_attr("min", min)
        if not (minlength is None or minlength is False):
            self._process_attr("minlength", minlength)
        if not (multiple is None or multiple is False):
            self._process_attr("multiple", multiple)
        if not (name is None or name is False):
            self._process_attr("name", name)
        if not (pattern is None or pattern is False):
            self._process_attr("pattern", pattern)
        if not (placeholder is None or placeholder is False):
            self._process_attr("placeholder", placeholder)
        if not (popovertarget is None or popovertarget is False):
            self._process_attr("popovertarget", popovertarget)
        if not (popovertargetaction is None or popovertargetaction is False):
            self._process_attr("popovertargetaction", popovertargetaction)
        if not (readonly is None or readonly is False):
            self._process_attr("readonly", readonly)
        if not (required is None or required is False):
            self._process_attr("required", required)
        if not (size is None or size is False):
            self._process_attr("size", size)
        if not (src is None or src is False):
            self._process_attr("src", src)
        if not (step is None or step is False):
            self._process_attr("step", step)
        if not (title is None or title is False):
            self._process_attr("title", title)
        if not (type is None or type is False):
            self._process_attr("type", type)
        if not (value is None or value is False):
            self._process_attr("value", value)
        if not (width is None or width is False):
            self._process_attr("width", width)
        if not (accesskey is None or accesskey is False):
            self._process_attr("accesskey", accesskey)
        if not (autocapitalize is None or autocapitalize is False):
            self._process_attr("autocapitalize", autocapitalize)
        if not (autocorrect is None or autocorrect is False):
            self._process_attr("autocorrect", autocorrect)
        if not (autofocus is None or autofocus is False):
            self._process_attr("autofocus", autofocus)
        if not (contenteditable is None or contenteditable is False):
            self._process_attr("contenteditable", contenteditable)
        if not (dir is None or dir is False):
            self._process_attr("dir", dir)
        if not (draggable is None or draggable is False):
            self._process_attr("draggable", draggable)
        if not (enterkeyhint is None or enterkeyhint is False):
            self._process_attr("enterkeyhint", enterkeyhint)
        if not (hidden is None or hidden is False):
            self._process_attr("hidden", hidden)
        if not (inert is None or inert is False):
            self._process_attr("inert", inert)
        if not (inputmode is None or inputmode is False):
            self._process_attr("inputmode", inputmode)
        if not (is_ is None or is_ is False):
            self._process_attr("is", is_)
        if not (itemid is None or itemid is False):
            self._process_attr("itemid", itemid)
        if not (itemprop is None or itemprop is False):
            self._process_attr("itemprop", itemprop)
        if not (itemref is None or itemref is False):
            self._process_attr("itemref", itemref)
        if not (itemscope is None or itemscope is False):
            self._process_attr("itemscope", itemscope)
        if not (itemtype is None or itemtype is False):
            self._process_attr("itemtype", itemtype)
        if not (lang is None or lang is False):
            self._process_attr("lang", lang)
        if not (nonce is None or nonce is False):
            self._process_attr("nonce", nonce)
        if not (popover is None or popover is False):
            self._process_attr("popover", popover)
        if not (slot is None or slot is False):
            self._process_attr("slot", slot)
        if not (spellcheck is None or spellcheck is False):
            self._process_attr("spellcheck", spellcheck)
        if not (style is None or style is False):
            self._process_attr("style", style)
        if not (tabindex is None or tabindex is False):
            self._process_attr("tabindex", tabindex)
        if not (translate is None or translate is False):
            self._process_attr("translate", translate)
        if not (writingsuggestions is None or writingsuggestions is False):
            self._process_attr("writingsuggestions", writingsuggestions)


class ins(BaseElement, GlobalAttrs, InsAttrs):
    """
    The 'ins' element.  
    Description: An addition to the document  
    Categories: flow phrasing* palpable  
    Parents: phrasing  
    Children: transparent  
    Interface: HTMLModElement  
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ins  
    """ # fmt: skip


    def __init__(
        self,
        attrs: Optional[Union[dict[str, Union[str, dict, list]], list[BaseAttribute]]] = None,
        id: Optional[Union[str, GlobalAttrs.id]] = None,
        class_: Optional[Union[str, GlobalAttrs.class_]] = None,
        cite: Optional[Union[str, InsAttrs.cite]] = None,
        datetime: Optional[Union[str, InsAttrs.datetime]] = None,
        accesskey: Optional[Union[str, GlobalAttrs.accesskey]] = None,
        autocapitalize: Optional[Union[str, GlobalAttrs.autocapitalize, Literal['on', 'off', 'none', 'sentences', 'words', 'characters']]] = None,
        autocorrect: Optional[Union[str, GlobalAttrs.autocorrect, Literal['on', 'off']]] = None,
        autofocus: Optional[Union[str, GlobalAttrs.autofocus, bool]] = None,
        contenteditable: Optional[Union[str, GlobalAttrs.contenteditable, Literal['true', 'plaintext-only', 'false']]] = None,
        dir: Optional[Union[str, GlobalAttrs.dir, Literal['ltr', 'rtl', 'auto']]] = None,
        draggable: Optional[Union[str, GlobalAttrs.draggable, Literal['true', 'false']]] = None,
        enterkeyhint: Optional[Union[str, GlobalAttrs.enterkeyhint, Literal['enter', 'done', 'go', 'next', 'previous', 'search', 'send']]] = None,
        hidden: Optional[Union[str, GlobalAttrs.hidden, Literal['until-found', 'hidden', '']]] = None,
        inert: Optional[Union[str, GlobalAttrs.inert, bool]] = None,
        inputmode: Optional[Union[str, GlobalAttrs.inputmode, Literal['none', 'text', 'tel', 'email', 'url', 'numeric', 'decimal', 'search']]] = None,
        is_: Optional[Union[str, GlobalAttrs.is_]] = None,
        itemid: Optional[Union[str, GlobalAttrs.itemid]] = None,
        itemprop: Optional[Union[str, GlobalAttrs.itemprop]] = None,
        itemref: Optional[Union[str, GlobalAttrs.itemref]] = None,
        itemscope: Optional[Union[str, GlobalAttrs.itemscope, bool]] = None,
        itemtype: Optional[Union[str, GlobalAttrs.itemtype]] = None,
        lang: Optional[Union[str, GlobalAttrs.lang]] = None,
        nonce: Optional[Union[str, GlobalAttrs.nonce]] = None,
        popover: Optional[Union[str, GlobalAttrs.popover, Literal['auto', 'manual']]] = None,
        slot: Optional[Union[str, GlobalAttrs.slot]] = None,
        spellcheck: Optional[Union[str, GlobalAttrs.spellcheck, Literal['true', 'false', '']]] = None,
        style: Optional[Union[str, GlobalAttrs.style]] = None,
        tabindex: Optional[Union[str, GlobalAttrs.tabindex, int]] = None,
        title: Optional[Union[str, GlobalAttrs.title]] = None,
        translate: Optional[Union[str, GlobalAttrs.translate, Literal['yes', 'no']]] = None,
        writingsuggestions: Optional[Union[str, GlobalAttrs.writingsuggestions, Literal['true', 'false', '']]] = None,
        children: Optional[list] = None
    ) -> None:
        """
        Initialize 'ins' (An addition to the document) element.  
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ins

        :param attrs: A list or dictionary of attributes for the element
        :param id: The element's ID
        :param class_: Classes to which the element belongs
            | Set of space-separated tokens
        :param cite: Link to the source of the quotation or more information about the edit
            | Valid URL potentially surrounded by spaces
        :param datetime: Date and (optionally) time of the change
            | Valid date string with optional time
        :param accesskey: Keyboard shortcut to activate or focus element
            | Ordered set of unique space-separated tokens, none of which are identical to another, each consisting of one code point in length
        :param autocapitalize: Recommended autocapitalization behavior (for supported input methods)
        :param autocorrect: Recommended autocorrection behavior (for supported input methods)
        :param autofocus: Automatically focus the element when the page is loaded
        :param contenteditable: Whether the element is editable
        :param dir: The text directionality of the element
        :param draggable: Whether the element is draggable
        :param enterkeyhint: Hint for selecting an enter key action
        :param hidden: Whether the element is relevant
        :param inert: Whether the element is inert.
        :param inputmode: Hint for selecting an input modality
        :param is_: Creates a customized built-in element
            | Valid custom element name of a defined customized built-in element
        :param itemid: Global identifier for a microdata item
            | Valid URL potentially surrounded by spaces
        :param itemprop: Property names of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs, defined property names, or text*
        :param itemref: Referenced elements
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param itemscope: Introduces a microdata item
        :param itemtype: Item types of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs*
        :param lang: Language of the element
            | Valid BCP 47 language tag or the empty string
        :param nonce: Cryptographic nonce used in Content Security Policy checks [CSP]
        :param popover: Makes the element a popover element
        :param slot: The element's desired slot
        :param spellcheck: Whether the element is to have its spelling and grammar checked
        :param style: Presentational and formatting instructions
            | CSS declarations*
        :param tabindex: Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation
        :param title: Advisory information for the element
        :param translate: Whether the element is to be translated when the page is localized
        :param writingsuggestions: Whether the element can offer writing suggestions or not.
        """ #fmt: skip
        super().__init__(
            "ins",
            void_element=False,
            attrs=attrs,
            children=children
        )
        if not (id is None or id is False):
            self._process_attr("id", id)
        if not (class_ is None or class_ is False):
            self._process_attr("class", class_)
        if not (cite is None or cite is False):
            self._process_attr("cite", cite)
        if not (datetime is None or datetime is False):
            self._process_attr("datetime", datetime)
        if not (accesskey is None or accesskey is False):
            self._process_attr("accesskey", accesskey)
        if not (autocapitalize is None or autocapitalize is False):
            self._process_attr("autocapitalize", autocapitalize)
        if not (autocorrect is None or autocorrect is False):
            self._process_attr("autocorrect", autocorrect)
        if not (autofocus is None or autofocus is False):
            self._process_attr("autofocus", autofocus)
        if not (contenteditable is None or contenteditable is False):
            self._process_attr("contenteditable", contenteditable)
        if not (dir is None or dir is False):
            self._process_attr("dir", dir)
        if not (draggable is None or draggable is False):
            self._process_attr("draggable", draggable)
        if not (enterkeyhint is None or enterkeyhint is False):
            self._process_attr("enterkeyhint", enterkeyhint)
        if not (hidden is None or hidden is False):
            self._process_attr("hidden", hidden)
        if not (inert is None or inert is False):
            self._process_attr("inert", inert)
        if not (inputmode is None or inputmode is False):
            self._process_attr("inputmode", inputmode)
        if not (is_ is None or is_ is False):
            self._process_attr("is", is_)
        if not (itemid is None or itemid is False):
            self._process_attr("itemid", itemid)
        if not (itemprop is None or itemprop is False):
            self._process_attr("itemprop", itemprop)
        if not (itemref is None or itemref is False):
            self._process_attr("itemref", itemref)
        if not (itemscope is None or itemscope is False):
            self._process_attr("itemscope", itemscope)
        if not (itemtype is None or itemtype is False):
            self._process_attr("itemtype", itemtype)
        if not (lang is None or lang is False):
            self._process_attr("lang", lang)
        if not (nonce is None or nonce is False):
            self._process_attr("nonce", nonce)
        if not (popover is None or popover is False):
            self._process_attr("popover", popover)
        if not (slot is None or slot is False):
            self._process_attr("slot", slot)
        if not (spellcheck is None or spellcheck is False):
            self._process_attr("spellcheck", spellcheck)
        if not (style is None or style is False):
            self._process_attr("style", style)
        if not (tabindex is None or tabindex is False):
            self._process_attr("tabindex", tabindex)
        if not (title is None or title is False):
            self._process_attr("title", title)
        if not (translate is None or translate is False):
            self._process_attr("translate", translate)
        if not (writingsuggestions is None or writingsuggestions is False):
            self._process_attr("writingsuggestions", writingsuggestions)


class kbd(BaseElement, GlobalAttrs):
    """
    The 'kbd' element.  
    Description: User input  
    Categories: flow phrasing palpable  
    Parents: phrasing  
    Children: phrasing  
    Interface: HTMLElement  
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/kbd  
    """ # fmt: skip


    def __init__(
        self,
        attrs: Optional[Union[dict[str, Union[str, dict, list]], list[BaseAttribute]]] = None,
        id: Optional[Union[str, GlobalAttrs.id]] = None,
        class_: Optional[Union[str, GlobalAttrs.class_]] = None,
        accesskey: Optional[Union[str, GlobalAttrs.accesskey]] = None,
        autocapitalize: Optional[Union[str, GlobalAttrs.autocapitalize, Literal['on', 'off', 'none', 'sentences', 'words', 'characters']]] = None,
        autocorrect: Optional[Union[str, GlobalAttrs.autocorrect, Literal['on', 'off']]] = None,
        autofocus: Optional[Union[str, GlobalAttrs.autofocus, bool]] = None,
        contenteditable: Optional[Union[str, GlobalAttrs.contenteditable, Literal['true', 'plaintext-only', 'false']]] = None,
        dir: Optional[Union[str, GlobalAttrs.dir, Literal['ltr', 'rtl', 'auto']]] = None,
        draggable: Optional[Union[str, GlobalAttrs.draggable, Literal['true', 'false']]] = None,
        enterkeyhint: Optional[Union[str, GlobalAttrs.enterkeyhint, Literal['enter', 'done', 'go', 'next', 'previous', 'search', 'send']]] = None,
        hidden: Optional[Union[str, GlobalAttrs.hidden, Literal['until-found', 'hidden', '']]] = None,
        inert: Optional[Union[str, GlobalAttrs.inert, bool]] = None,
        inputmode: Optional[Union[str, GlobalAttrs.inputmode, Literal['none', 'text', 'tel', 'email', 'url', 'numeric', 'decimal', 'search']]] = None,
        is_: Optional[Union[str, GlobalAttrs.is_]] = None,
        itemid: Optional[Union[str, GlobalAttrs.itemid]] = None,
        itemprop: Optional[Union[str, GlobalAttrs.itemprop]] = None,
        itemref: Optional[Union[str, GlobalAttrs.itemref]] = None,
        itemscope: Optional[Union[str, GlobalAttrs.itemscope, bool]] = None,
        itemtype: Optional[Union[str, GlobalAttrs.itemtype]] = None,
        lang: Optional[Union[str, GlobalAttrs.lang]] = None,
        nonce: Optional[Union[str, GlobalAttrs.nonce]] = None,
        popover: Optional[Union[str, GlobalAttrs.popover, Literal['auto', 'manual']]] = None,
        slot: Optional[Union[str, GlobalAttrs.slot]] = None,
        spellcheck: Optional[Union[str, GlobalAttrs.spellcheck, Literal['true', 'false', '']]] = None,
        style: Optional[Union[str, GlobalAttrs.style]] = None,
        tabindex: Optional[Union[str, GlobalAttrs.tabindex, int]] = None,
        title: Optional[Union[str, GlobalAttrs.title]] = None,
        translate: Optional[Union[str, GlobalAttrs.translate, Literal['yes', 'no']]] = None,
        writingsuggestions: Optional[Union[str, GlobalAttrs.writingsuggestions, Literal['true', 'false', '']]] = None,
        children: Optional[list] = None
    ) -> None:
        """
        Initialize 'kbd' (User input) element.  
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/kbd

        :param attrs: A list or dictionary of attributes for the element
        :param id: The element's ID
        :param class_: Classes to which the element belongs
            | Set of space-separated tokens
        :param accesskey: Keyboard shortcut to activate or focus element
            | Ordered set of unique space-separated tokens, none of which are identical to another, each consisting of one code point in length
        :param autocapitalize: Recommended autocapitalization behavior (for supported input methods)
        :param autocorrect: Recommended autocorrection behavior (for supported input methods)
        :param autofocus: Automatically focus the element when the page is loaded
        :param contenteditable: Whether the element is editable
        :param dir: The text directionality of the element
        :param draggable: Whether the element is draggable
        :param enterkeyhint: Hint for selecting an enter key action
        :param hidden: Whether the element is relevant
        :param inert: Whether the element is inert.
        :param inputmode: Hint for selecting an input modality
        :param is_: Creates a customized built-in element
            | Valid custom element name of a defined customized built-in element
        :param itemid: Global identifier for a microdata item
            | Valid URL potentially surrounded by spaces
        :param itemprop: Property names of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs, defined property names, or text*
        :param itemref: Referenced elements
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param itemscope: Introduces a microdata item
        :param itemtype: Item types of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs*
        :param lang: Language of the element
            | Valid BCP 47 language tag or the empty string
        :param nonce: Cryptographic nonce used in Content Security Policy checks [CSP]
        :param popover: Makes the element a popover element
        :param slot: The element's desired slot
        :param spellcheck: Whether the element is to have its spelling and grammar checked
        :param style: Presentational and formatting instructions
            | CSS declarations*
        :param tabindex: Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation
        :param title: Advisory information for the element
        :param translate: Whether the element is to be translated when the page is localized
        :param writingsuggestions: Whether the element can offer writing suggestions or not.
        """ #fmt: skip
        super().__init__(
            "kbd",
            void_element=False,
            attrs=attrs,
            children=children
        )
        if not (id is None or id is False):
            self._process_attr("id", id)
        if not (class_ is None or class_ is False):
            self._process_attr("class", class_)
        if not (accesskey is None or accesskey is False):
            self._process_attr("accesskey", accesskey)
        if not (autocapitalize is None or autocapitalize is False):
            self._process_attr("autocapitalize", autocapitalize)
        if not (autocorrect is None or autocorrect is False):
            self._process_attr("autocorrect", autocorrect)
        if not (autofocus is None or autofocus is False):
            self._process_attr("autofocus", autofocus)
        if not (contenteditable is None or contenteditable is False):
            self._process_attr("contenteditable", contenteditable)
        if not (dir is None or dir is False):
            self._process_attr("dir", dir)
        if not (draggable is None or draggable is False):
            self._process_attr("draggable", draggable)
        if not (enterkeyhint is None or enterkeyhint is False):
            self._process_attr("enterkeyhint", enterkeyhint)
        if not (hidden is None or hidden is False):
            self._process_attr("hidden", hidden)
        if not (inert is None or inert is False):
            self._process_attr("inert", inert)
        if not (inputmode is None or inputmode is False):
            self._process_attr("inputmode", inputmode)
        if not (is_ is None or is_ is False):
            self._process_attr("is", is_)
        if not (itemid is None or itemid is False):
            self._process_attr("itemid", itemid)
        if not (itemprop is None or itemprop is False):
            self._process_attr("itemprop", itemprop)
        if not (itemref is None or itemref is False):
            self._process_attr("itemref", itemref)
        if not (itemscope is None or itemscope is False):
            self._process_attr("itemscope", itemscope)
        if not (itemtype is None or itemtype is False):
            self._process_attr("itemtype", itemtype)
        if not (lang is None or lang is False):
            self._process_attr("lang", lang)
        if not (nonce is None or nonce is False):
            self._process_attr("nonce", nonce)
        if not (popover is None or popover is False):
            self._process_attr("popover", popover)
        if not (slot is None or slot is False):
            self._process_attr("slot", slot)
        if not (spellcheck is None or spellcheck is False):
            self._process_attr("spellcheck", spellcheck)
        if not (style is None or style is False):
            self._process_attr("style", style)
        if not (tabindex is None or tabindex is False):
            self._process_attr("tabindex", tabindex)
        if not (title is None or title is False):
            self._process_attr("title", title)
        if not (translate is None or translate is False):
            self._process_attr("translate", translate)
        if not (writingsuggestions is None or writingsuggestions is False):
            self._process_attr("writingsuggestions", writingsuggestions)


class label(BaseElement, GlobalAttrs, LabelAttrs):
    """
    The 'label' element.  
    Description: Caption for a form control  
    Categories: flow phrasing interactive palpable  
    Parents: phrasing  
    Children: phrasing*  
    Interface: HTMLLabelElement  
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/label  
    """ # fmt: skip


    def __init__(
        self,
        attrs: Optional[Union[dict[str, Union[str, dict, list]], list[BaseAttribute]]] = None,
        id: Optional[Union[str, GlobalAttrs.id]] = None,
        class_: Optional[Union[str, GlobalAttrs.class_]] = None,
        for_: Optional[Union[str, LabelAttrs.for_]] = None,
        accesskey: Optional[Union[str, GlobalAttrs.accesskey]] = None,
        autocapitalize: Optional[Union[str, GlobalAttrs.autocapitalize, Literal['on', 'off', 'none', 'sentences', 'words', 'characters']]] = None,
        autocorrect: Optional[Union[str, GlobalAttrs.autocorrect, Literal['on', 'off']]] = None,
        autofocus: Optional[Union[str, GlobalAttrs.autofocus, bool]] = None,
        contenteditable: Optional[Union[str, GlobalAttrs.contenteditable, Literal['true', 'plaintext-only', 'false']]] = None,
        dir: Optional[Union[str, GlobalAttrs.dir, Literal['ltr', 'rtl', 'auto']]] = None,
        draggable: Optional[Union[str, GlobalAttrs.draggable, Literal['true', 'false']]] = None,
        enterkeyhint: Optional[Union[str, GlobalAttrs.enterkeyhint, Literal['enter', 'done', 'go', 'next', 'previous', 'search', 'send']]] = None,
        hidden: Optional[Union[str, GlobalAttrs.hidden, Literal['until-found', 'hidden', '']]] = None,
        inert: Optional[Union[str, GlobalAttrs.inert, bool]] = None,
        inputmode: Optional[Union[str, GlobalAttrs.inputmode, Literal['none', 'text', 'tel', 'email', 'url', 'numeric', 'decimal', 'search']]] = None,
        is_: Optional[Union[str, GlobalAttrs.is_]] = None,
        itemid: Optional[Union[str, GlobalAttrs.itemid]] = None,
        itemprop: Optional[Union[str, GlobalAttrs.itemprop]] = None,
        itemref: Optional[Union[str, GlobalAttrs.itemref]] = None,
        itemscope: Optional[Union[str, GlobalAttrs.itemscope, bool]] = None,
        itemtype: Optional[Union[str, GlobalAttrs.itemtype]] = None,
        lang: Optional[Union[str, GlobalAttrs.lang]] = None,
        nonce: Optional[Union[str, GlobalAttrs.nonce]] = None,
        popover: Optional[Union[str, GlobalAttrs.popover, Literal['auto', 'manual']]] = None,
        slot: Optional[Union[str, GlobalAttrs.slot]] = None,
        spellcheck: Optional[Union[str, GlobalAttrs.spellcheck, Literal['true', 'false', '']]] = None,
        style: Optional[Union[str, GlobalAttrs.style]] = None,
        tabindex: Optional[Union[str, GlobalAttrs.tabindex, int]] = None,
        title: Optional[Union[str, GlobalAttrs.title]] = None,
        translate: Optional[Union[str, GlobalAttrs.translate, Literal['yes', 'no']]] = None,
        writingsuggestions: Optional[Union[str, GlobalAttrs.writingsuggestions, Literal['true', 'false', '']]] = None,
        children: Optional[list] = None
    ) -> None:
        """
        Initialize 'label' (Caption for a form control) element.  
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/label

        :param attrs: A list or dictionary of attributes for the element
        :param id: The element's ID
        :param class_: Classes to which the element belongs
            | Set of space-separated tokens
        :param for_: Associate the label with form control
            | ID*
        :param accesskey: Keyboard shortcut to activate or focus element
            | Ordered set of unique space-separated tokens, none of which are identical to another, each consisting of one code point in length
        :param autocapitalize: Recommended autocapitalization behavior (for supported input methods)
        :param autocorrect: Recommended autocorrection behavior (for supported input methods)
        :param autofocus: Automatically focus the element when the page is loaded
        :param contenteditable: Whether the element is editable
        :param dir: The text directionality of the element
        :param draggable: Whether the element is draggable
        :param enterkeyhint: Hint for selecting an enter key action
        :param hidden: Whether the element is relevant
        :param inert: Whether the element is inert.
        :param inputmode: Hint for selecting an input modality
        :param is_: Creates a customized built-in element
            | Valid custom element name of a defined customized built-in element
        :param itemid: Global identifier for a microdata item
            | Valid URL potentially surrounded by spaces
        :param itemprop: Property names of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs, defined property names, or text*
        :param itemref: Referenced elements
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param itemscope: Introduces a microdata item
        :param itemtype: Item types of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs*
        :param lang: Language of the element
            | Valid BCP 47 language tag or the empty string
        :param nonce: Cryptographic nonce used in Content Security Policy checks [CSP]
        :param popover: Makes the element a popover element
        :param slot: The element's desired slot
        :param spellcheck: Whether the element is to have its spelling and grammar checked
        :param style: Presentational and formatting instructions
            | CSS declarations*
        :param tabindex: Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation
        :param title: Advisory information for the element
        :param translate: Whether the element is to be translated when the page is localized
        :param writingsuggestions: Whether the element can offer writing suggestions or not.
        """ #fmt: skip
        super().__init__(
            "label",
            void_element=False,
            attrs=attrs,
            children=children
        )
        if not (id is None or id is False):
            self._process_attr("id", id)
        if not (class_ is None or class_ is False):
            self._process_attr("class", class_)
        if not (for_ is None or for_ is False):
            self._process_attr("for", for_)
        if not (accesskey is None or accesskey is False):
            self._process_attr("accesskey", accesskey)
        if not (autocapitalize is None or autocapitalize is False):
            self._process_attr("autocapitalize", autocapitalize)
        if not (autocorrect is None or autocorrect is False):
            self._process_attr("autocorrect", autocorrect)
        if not (autofocus is None or autofocus is False):
            self._process_attr("autofocus", autofocus)
        if not (contenteditable is None or contenteditable is False):
            self._process_attr("contenteditable", contenteditable)
        if not (dir is None or dir is False):
            self._process_attr("dir", dir)
        if not (draggable is None or draggable is False):
            self._process_attr("draggable", draggable)
        if not (enterkeyhint is None or enterkeyhint is False):
            self._process_attr("enterkeyhint", enterkeyhint)
        if not (hidden is None or hidden is False):
            self._process_attr("hidden", hidden)
        if not (inert is None or inert is False):
            self._process_attr("inert", inert)
        if not (inputmode is None or inputmode is False):
            self._process_attr("inputmode", inputmode)
        if not (is_ is None or is_ is False):
            self._process_attr("is", is_)
        if not (itemid is None or itemid is False):
            self._process_attr("itemid", itemid)
        if not (itemprop is None or itemprop is False):
            self._process_attr("itemprop", itemprop)
        if not (itemref is None or itemref is False):
            self._process_attr("itemref", itemref)
        if not (itemscope is None or itemscope is False):
            self._process_attr("itemscope", itemscope)
        if not (itemtype is None or itemtype is False):
            self._process_attr("itemtype", itemtype)
        if not (lang is None or lang is False):
            self._process_attr("lang", lang)
        if not (nonce is None or nonce is False):
            self._process_attr("nonce", nonce)
        if not (popover is None or popover is False):
            self._process_attr("popover", popover)
        if not (slot is None or slot is False):
            self._process_attr("slot", slot)
        if not (spellcheck is None or spellcheck is False):
            self._process_attr("spellcheck", spellcheck)
        if not (style is None or style is False):
            self._process_attr("style", style)
        if not (tabindex is None or tabindex is False):
            self._process_attr("tabindex", tabindex)
        if not (title is None or title is False):
            self._process_attr("title", title)
        if not (translate is None or translate is False):
            self._process_attr("translate", translate)
        if not (writingsuggestions is None or writingsuggestions is False):
            self._process_attr("writingsuggestions", writingsuggestions)


class legend(BaseElement, GlobalAttrs):
    """
    The 'legend' element.  
    Description: Caption for fieldset  
    Categories: none  
    Parents: fieldset  
    Children: phrasing heading content  
    Interface: HTMLLegendElement  
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/legend  
    """ # fmt: skip


    def __init__(
        self,
        attrs: Optional[Union[dict[str, Union[str, dict, list]], list[BaseAttribute]]] = None,
        id: Optional[Union[str, GlobalAttrs.id]] = None,
        class_: Optional[Union[str, GlobalAttrs.class_]] = None,
        accesskey: Optional[Union[str, GlobalAttrs.accesskey]] = None,
        autocapitalize: Optional[Union[str, GlobalAttrs.autocapitalize, Literal['on', 'off', 'none', 'sentences', 'words', 'characters']]] = None,
        autocorrect: Optional[Union[str, GlobalAttrs.autocorrect, Literal['on', 'off']]] = None,
        autofocus: Optional[Union[str, GlobalAttrs.autofocus, bool]] = None,
        contenteditable: Optional[Union[str, GlobalAttrs.contenteditable, Literal['true', 'plaintext-only', 'false']]] = None,
        dir: Optional[Union[str, GlobalAttrs.dir, Literal['ltr', 'rtl', 'auto']]] = None,
        draggable: Optional[Union[str, GlobalAttrs.draggable, Literal['true', 'false']]] = None,
        enterkeyhint: Optional[Union[str, GlobalAttrs.enterkeyhint, Literal['enter', 'done', 'go', 'next', 'previous', 'search', 'send']]] = None,
        hidden: Optional[Union[str, GlobalAttrs.hidden, Literal['until-found', 'hidden', '']]] = None,
        inert: Optional[Union[str, GlobalAttrs.inert, bool]] = None,
        inputmode: Optional[Union[str, GlobalAttrs.inputmode, Literal['none', 'text', 'tel', 'email', 'url', 'numeric', 'decimal', 'search']]] = None,
        is_: Optional[Union[str, GlobalAttrs.is_]] = None,
        itemid: Optional[Union[str, GlobalAttrs.itemid]] = None,
        itemprop: Optional[Union[str, GlobalAttrs.itemprop]] = None,
        itemref: Optional[Union[str, GlobalAttrs.itemref]] = None,
        itemscope: Optional[Union[str, GlobalAttrs.itemscope, bool]] = None,
        itemtype: Optional[Union[str, GlobalAttrs.itemtype]] = None,
        lang: Optional[Union[str, GlobalAttrs.lang]] = None,
        nonce: Optional[Union[str, GlobalAttrs.nonce]] = None,
        popover: Optional[Union[str, GlobalAttrs.popover, Literal['auto', 'manual']]] = None,
        slot: Optional[Union[str, GlobalAttrs.slot]] = None,
        spellcheck: Optional[Union[str, GlobalAttrs.spellcheck, Literal['true', 'false', '']]] = None,
        style: Optional[Union[str, GlobalAttrs.style]] = None,
        tabindex: Optional[Union[str, GlobalAttrs.tabindex, int]] = None,
        title: Optional[Union[str, GlobalAttrs.title]] = None,
        translate: Optional[Union[str, GlobalAttrs.translate, Literal['yes', 'no']]] = None,
        writingsuggestions: Optional[Union[str, GlobalAttrs.writingsuggestions, Literal['true', 'false', '']]] = None,
        children: Optional[list] = None
    ) -> None:
        """
        Initialize 'legend' (Caption for fieldset) element.  
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/legend

        :param attrs: A list or dictionary of attributes for the element
        :param id: The element's ID
        :param class_: Classes to which the element belongs
            | Set of space-separated tokens
        :param accesskey: Keyboard shortcut to activate or focus element
            | Ordered set of unique space-separated tokens, none of which are identical to another, each consisting of one code point in length
        :param autocapitalize: Recommended autocapitalization behavior (for supported input methods)
        :param autocorrect: Recommended autocorrection behavior (for supported input methods)
        :param autofocus: Automatically focus the element when the page is loaded
        :param contenteditable: Whether the element is editable
        :param dir: The text directionality of the element
        :param draggable: Whether the element is draggable
        :param enterkeyhint: Hint for selecting an enter key action
        :param hidden: Whether the element is relevant
        :param inert: Whether the element is inert.
        :param inputmode: Hint for selecting an input modality
        :param is_: Creates a customized built-in element
            | Valid custom element name of a defined customized built-in element
        :param itemid: Global identifier for a microdata item
            | Valid URL potentially surrounded by spaces
        :param itemprop: Property names of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs, defined property names, or text*
        :param itemref: Referenced elements
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param itemscope: Introduces a microdata item
        :param itemtype: Item types of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs*
        :param lang: Language of the element
            | Valid BCP 47 language tag or the empty string
        :param nonce: Cryptographic nonce used in Content Security Policy checks [CSP]
        :param popover: Makes the element a popover element
        :param slot: The element's desired slot
        :param spellcheck: Whether the element is to have its spelling and grammar checked
        :param style: Presentational and formatting instructions
            | CSS declarations*
        :param tabindex: Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation
        :param title: Advisory information for the element
        :param translate: Whether the element is to be translated when the page is localized
        :param writingsuggestions: Whether the element can offer writing suggestions or not.
        """ #fmt: skip
        super().__init__(
            "legend",
            void_element=False,
            attrs=attrs,
            children=children
        )
        if not (id is None or id is False):
            self._process_attr("id", id)
        if not (class_ is None or class_ is False):
            self._process_attr("class", class_)
        if not (accesskey is None or accesskey is False):
            self._process_attr("accesskey", accesskey)
        if not (autocapitalize is None or autocapitalize is False):
            self._process_attr("autocapitalize", autocapitalize)
        if not (autocorrect is None or autocorrect is False):
            self._process_attr("autocorrect", autocorrect)
        if not (autofocus is None or autofocus is False):
            self._process_attr("autofocus", autofocus)
        if not (contenteditable is None or contenteditable is False):
            self._process_attr("contenteditable", contenteditable)
        if not (dir is None or dir is False):
            self._process_attr("dir", dir)
        if not (draggable is None or draggable is False):
            self._process_attr("draggable", draggable)
        if not (enterkeyhint is None or enterkeyhint is False):
            self._process_attr("enterkeyhint", enterkeyhint)
        if not (hidden is None or hidden is False):
            self._process_attr("hidden", hidden)
        if not (inert is None or inert is False):
            self._process_attr("inert", inert)
        if not (inputmode is None or inputmode is False):
            self._process_attr("inputmode", inputmode)
        if not (is_ is None or is_ is False):
            self._process_attr("is", is_)
        if not (itemid is None or itemid is False):
            self._process_attr("itemid", itemid)
        if not (itemprop is None or itemprop is False):
            self._process_attr("itemprop", itemprop)
        if not (itemref is None or itemref is False):
            self._process_attr("itemref", itemref)
        if not (itemscope is None or itemscope is False):
            self._process_attr("itemscope", itemscope)
        if not (itemtype is None or itemtype is False):
            self._process_attr("itemtype", itemtype)
        if not (lang is None or lang is False):
            self._process_attr("lang", lang)
        if not (nonce is None or nonce is False):
            self._process_attr("nonce", nonce)
        if not (popover is None or popover is False):
            self._process_attr("popover", popover)
        if not (slot is None or slot is False):
            self._process_attr("slot", slot)
        if not (spellcheck is None or spellcheck is False):
            self._process_attr("spellcheck", spellcheck)
        if not (style is None or style is False):
            self._process_attr("style", style)
        if not (tabindex is None or tabindex is False):
            self._process_attr("tabindex", tabindex)
        if not (title is None or title is False):
            self._process_attr("title", title)
        if not (translate is None or translate is False):
            self._process_attr("translate", translate)
        if not (writingsuggestions is None or writingsuggestions is False):
            self._process_attr("writingsuggestions", writingsuggestions)


class li(BaseElement, GlobalAttrs, LiAttrs):
    """
    The 'li' element.  
    Description: List item  
    Categories: none  
    Parents: ol ul menu*  
    Children: flow  
    Interface: HTMLLIElement  
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/li  
    """ # fmt: skip


    def __init__(
        self,
        attrs: Optional[Union[dict[str, Union[str, dict, list]], list[BaseAttribute]]] = None,
        id: Optional[Union[str, GlobalAttrs.id]] = None,
        class_: Optional[Union[str, GlobalAttrs.class_]] = None,
        value: Optional[Union[str, LiAttrs.value, int]] = None,
        accesskey: Optional[Union[str, GlobalAttrs.accesskey]] = None,
        autocapitalize: Optional[Union[str, GlobalAttrs.autocapitalize, Literal['on', 'off', 'none', 'sentences', 'words', 'characters']]] = None,
        autocorrect: Optional[Union[str, GlobalAttrs.autocorrect, Literal['on', 'off']]] = None,
        autofocus: Optional[Union[str, GlobalAttrs.autofocus, bool]] = None,
        contenteditable: Optional[Union[str, GlobalAttrs.contenteditable, Literal['true', 'plaintext-only', 'false']]] = None,
        dir: Optional[Union[str, GlobalAttrs.dir, Literal['ltr', 'rtl', 'auto']]] = None,
        draggable: Optional[Union[str, GlobalAttrs.draggable, Literal['true', 'false']]] = None,
        enterkeyhint: Optional[Union[str, GlobalAttrs.enterkeyhint, Literal['enter', 'done', 'go', 'next', 'previous', 'search', 'send']]] = None,
        hidden: Optional[Union[str, GlobalAttrs.hidden, Literal['until-found', 'hidden', '']]] = None,
        inert: Optional[Union[str, GlobalAttrs.inert, bool]] = None,
        inputmode: Optional[Union[str, GlobalAttrs.inputmode, Literal['none', 'text', 'tel', 'email', 'url', 'numeric', 'decimal', 'search']]] = None,
        is_: Optional[Union[str, GlobalAttrs.is_]] = None,
        itemid: Optional[Union[str, GlobalAttrs.itemid]] = None,
        itemprop: Optional[Union[str, GlobalAttrs.itemprop]] = None,
        itemref: Optional[Union[str, GlobalAttrs.itemref]] = None,
        itemscope: Optional[Union[str, GlobalAttrs.itemscope, bool]] = None,
        itemtype: Optional[Union[str, GlobalAttrs.itemtype]] = None,
        lang: Optional[Union[str, GlobalAttrs.lang]] = None,
        nonce: Optional[Union[str, GlobalAttrs.nonce]] = None,
        popover: Optional[Union[str, GlobalAttrs.popover, Literal['auto', 'manual']]] = None,
        slot: Optional[Union[str, GlobalAttrs.slot]] = None,
        spellcheck: Optional[Union[str, GlobalAttrs.spellcheck, Literal['true', 'false', '']]] = None,
        style: Optional[Union[str, GlobalAttrs.style]] = None,
        tabindex: Optional[Union[str, GlobalAttrs.tabindex, int]] = None,
        title: Optional[Union[str, GlobalAttrs.title]] = None,
        translate: Optional[Union[str, GlobalAttrs.translate, Literal['yes', 'no']]] = None,
        writingsuggestions: Optional[Union[str, GlobalAttrs.writingsuggestions, Literal['true', 'false', '']]] = None,
        children: Optional[list] = None
    ) -> None:
        """
        Initialize 'li' (List item) element.  
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/li

        :param attrs: A list or dictionary of attributes for the element
        :param id: The element's ID
        :param class_: Classes to which the element belongs
            | Set of space-separated tokens
        :param value: Ordinal value of the list item
        :param accesskey: Keyboard shortcut to activate or focus element
            | Ordered set of unique space-separated tokens, none of which are identical to another, each consisting of one code point in length
        :param autocapitalize: Recommended autocapitalization behavior (for supported input methods)
        :param autocorrect: Recommended autocorrection behavior (for supported input methods)
        :param autofocus: Automatically focus the element when the page is loaded
        :param contenteditable: Whether the element is editable
        :param dir: The text directionality of the element
        :param draggable: Whether the element is draggable
        :param enterkeyhint: Hint for selecting an enter key action
        :param hidden: Whether the element is relevant
        :param inert: Whether the element is inert.
        :param inputmode: Hint for selecting an input modality
        :param is_: Creates a customized built-in element
            | Valid custom element name of a defined customized built-in element
        :param itemid: Global identifier for a microdata item
            | Valid URL potentially surrounded by spaces
        :param itemprop: Property names of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs, defined property names, or text*
        :param itemref: Referenced elements
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param itemscope: Introduces a microdata item
        :param itemtype: Item types of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs*
        :param lang: Language of the element
            | Valid BCP 47 language tag or the empty string
        :param nonce: Cryptographic nonce used in Content Security Policy checks [CSP]
        :param popover: Makes the element a popover element
        :param slot: The element's desired slot
        :param spellcheck: Whether the element is to have its spelling and grammar checked
        :param style: Presentational and formatting instructions
            | CSS declarations*
        :param tabindex: Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation
        :param title: Advisory information for the element
        :param translate: Whether the element is to be translated when the page is localized
        :param writingsuggestions: Whether the element can offer writing suggestions or not.
        """ #fmt: skip
        super().__init__(
            "li",
            void_element=False,
            attrs=attrs,
            children=children
        )
        if not (id is None or id is False):
            self._process_attr("id", id)
        if not (class_ is None or class_ is False):
            self._process_attr("class", class_)
        if not (value is None or value is False):
            self._process_attr("value", value)
        if not (accesskey is None or accesskey is False):
            self._process_attr("accesskey", accesskey)
        if not (autocapitalize is None or autocapitalize is False):
            self._process_attr("autocapitalize", autocapitalize)
        if not (autocorrect is None or autocorrect is False):
            self._process_attr("autocorrect", autocorrect)
        if not (autofocus is None or autofocus is False):
            self._process_attr("autofocus", autofocus)
        if not (contenteditable is None or contenteditable is False):
            self._process_attr("contenteditable", contenteditable)
        if not (dir is None or dir is False):
            self._process_attr("dir", dir)
        if not (draggable is None or draggable is False):
            self._process_attr("draggable", draggable)
        if not (enterkeyhint is None or enterkeyhint is False):
            self._process_attr("enterkeyhint", enterkeyhint)
        if not (hidden is None or hidden is False):
            self._process_attr("hidden", hidden)
        if not (inert is None or inert is False):
            self._process_attr("inert", inert)
        if not (inputmode is None or inputmode is False):
            self._process_attr("inputmode", inputmode)
        if not (is_ is None or is_ is False):
            self._process_attr("is", is_)
        if not (itemid is None or itemid is False):
            self._process_attr("itemid", itemid)
        if not (itemprop is None or itemprop is False):
            self._process_attr("itemprop", itemprop)
        if not (itemref is None or itemref is False):
            self._process_attr("itemref", itemref)
        if not (itemscope is None or itemscope is False):
            self._process_attr("itemscope", itemscope)
        if not (itemtype is None or itemtype is False):
            self._process_attr("itemtype", itemtype)
        if not (lang is None or lang is False):
            self._process_attr("lang", lang)
        if not (nonce is None or nonce is False):
            self._process_attr("nonce", nonce)
        if not (popover is None or popover is False):
            self._process_attr("popover", popover)
        if not (slot is None or slot is False):
            self._process_attr("slot", slot)
        if not (spellcheck is None or spellcheck is False):
            self._process_attr("spellcheck", spellcheck)
        if not (style is None or style is False):
            self._process_attr("style", style)
        if not (tabindex is None or tabindex is False):
            self._process_attr("tabindex", tabindex)
        if not (title is None or title is False):
            self._process_attr("title", title)
        if not (translate is None or translate is False):
            self._process_attr("translate", translate)
        if not (writingsuggestions is None or writingsuggestions is False):
            self._process_attr("writingsuggestions", writingsuggestions)


class link(BaseElement, GlobalAttrs, LinkAttrs): # type: ignore[misc]
    """
    The 'link' element.  
    Description: Link metadata  
    Categories: metadata flow* phrasing*  
    Parents: head noscript* phrasing*  
    Children: empty  
    Interface: HTMLLinkElement  
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link  
    """ # fmt: skip


    def __init__(
        self,
        attrs: Optional[Union[dict[str, Union[str, dict, list]], list[BaseAttribute]]] = None,
        id: Optional[Union[str, GlobalAttrs.id]] = None,
        class_: Optional[Union[str, GlobalAttrs.class_]] = None,
        as_: Optional[Union[str, LinkAttrs.as_]] = None,
        blocking: Optional[Union[str, LinkAttrs.blocking]] = None,
        color: Optional[Union[str, LinkAttrs.color]] = None,
        crossorigin: Optional[Union[str, LinkAttrs.crossorigin, Literal['anonymous', 'use-credentials']]] = None,
        disabled: Optional[Union[str, LinkAttrs.disabled, bool]] = None,
        fetchpriority: Optional[Union[str, LinkAttrs.fetchpriority, Literal['auto', 'high', 'low']]] = None,
        href: Optional[Union[str, LinkAttrs.href]] = None,
        hreflang: Optional[Union[str, LinkAttrs.hreflang]] = None,
        imagesizes: Optional[Union[str, LinkAttrs.imagesizes]] = None,
        imagesrcset: Optional[Union[str, LinkAttrs.imagesrcset]] = None,
        integrity: Optional[Union[str, LinkAttrs.integrity]] = None,
        media: Optional[Union[str, LinkAttrs.media]] = None,
        referrerpolicy: Optional[Union[str, LinkAttrs.referrerpolicy]] = None,
        rel: Optional[Union[str, LinkAttrs.rel]] = None,
        sizes: Optional[Union[str, LinkAttrs.sizes]] = None,
        title: Optional[Union[str, LinkAttrs.title]] = None,
        type: Optional[Union[str, LinkAttrs.type]] = None,
        accesskey: Optional[Union[str, GlobalAttrs.accesskey]] = None,
        autocapitalize: Optional[Union[str, GlobalAttrs.autocapitalize, Literal['on', 'off', 'none', 'sentences', 'words', 'characters']]] = None,
        autocorrect: Optional[Union[str, GlobalAttrs.autocorrect, Literal['on', 'off']]] = None,
        autofocus: Optional[Union[str, GlobalAttrs.autofocus, bool]] = None,
        contenteditable: Optional[Union[str, GlobalAttrs.contenteditable, Literal['true', 'plaintext-only', 'false']]] = None,
        dir: Optional[Union[str, GlobalAttrs.dir, Literal['ltr', 'rtl', 'auto']]] = None,
        draggable: Optional[Union[str, GlobalAttrs.draggable, Literal['true', 'false']]] = None,
        enterkeyhint: Optional[Union[str, GlobalAttrs.enterkeyhint, Literal['enter', 'done', 'go', 'next', 'previous', 'search', 'send']]] = None,
        hidden: Optional[Union[str, GlobalAttrs.hidden, Literal['until-found', 'hidden', '']]] = None,
        inert: Optional[Union[str, GlobalAttrs.inert, bool]] = None,
        inputmode: Optional[Union[str, GlobalAttrs.inputmode, Literal['none', 'text', 'tel', 'email', 'url', 'numeric', 'decimal', 'search']]] = None,
        is_: Optional[Union[str, GlobalAttrs.is_]] = None,
        itemid: Optional[Union[str, GlobalAttrs.itemid]] = None,
        itemprop: Optional[Union[str, GlobalAttrs.itemprop]] = None,
        itemref: Optional[Union[str, GlobalAttrs.itemref]] = None,
        itemscope: Optional[Union[str, GlobalAttrs.itemscope, bool]] = None,
        itemtype: Optional[Union[str, GlobalAttrs.itemtype]] = None,
        lang: Optional[Union[str, GlobalAttrs.lang]] = None,
        nonce: Optional[Union[str, GlobalAttrs.nonce]] = None,
        popover: Optional[Union[str, GlobalAttrs.popover, Literal['auto', 'manual']]] = None,
        slot: Optional[Union[str, GlobalAttrs.slot]] = None,
        spellcheck: Optional[Union[str, GlobalAttrs.spellcheck, Literal['true', 'false', '']]] = None,
        style: Optional[Union[str, GlobalAttrs.style]] = None,
        tabindex: Optional[Union[str, GlobalAttrs.tabindex, int]] = None,
        translate: Optional[Union[str, GlobalAttrs.translate, Literal['yes', 'no']]] = None,
        writingsuggestions: Optional[Union[str, GlobalAttrs.writingsuggestions, Literal['true', 'false', '']]] = None,
        children: Optional[list] = None
    ) -> None:
        """
        Initialize 'link' (Link metadata) element.  
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link

        :param attrs: A list or dictionary of attributes for the element
        :param id: The element's ID
        :param class_: Classes to which the element belongs
            | Set of space-separated tokens
        :param as_: Potential destination for a preload request (for rel="preload" and rel="modulepreload")
            | Potential destination, for rel="preload"; script-like destination, for rel="modulepreload"
        :param blocking: Whether the element is potentially render-blocking
            | Unordered set of unique space-separated tokens*
        :param color: Color to use when customizing a site's icon (for rel="mask-icon")
            | CSS <color>
        :param crossorigin: How the element handles crossorigin requests
        :param disabled: Whether the link is disabled
        :param fetchpriority: Sets the priority for fetches initiated by the element
        :param href: Address of the hyperlink
            | Valid non-empty URL potentially surrounded by spaces
        :param hreflang: Language of the linked resource
            | Valid BCP 47 language tag
        :param imagesizes: Image sizes for different page layouts (for rel="preload")
            | Valid source size list
        :param imagesrcset: Images to use in different situations, e.g., high-resolution displays, small monitors, etc. (for rel="preload")
            | Comma-separated list of image candidate strings
        :param integrity: Integrity metadata used in Subresource Integrity checks [SRI]
        :param media: Applicable media
            | Valid media query list
        :param referrerpolicy: Referrer policy for fetches initiated by the element
            | Referrer policy
        :param rel: Relationship between the document containing the hyperlink and the destination resource
            | Unordered set of unique space-separated tokens*
        :param sizes: Sizes of the icons (for rel="icon")
            | Unordered set of unique space-separated tokens, ASCII case-insensitive, consisting of sizes*
        :param title: CSS style sheet set name
        :param title: Title of the link
        :param type: Hint for the type of the referenced resource
            | Valid MIME type string
        :param accesskey: Keyboard shortcut to activate or focus element
            | Ordered set of unique space-separated tokens, none of which are identical to another, each consisting of one code point in length
        :param autocapitalize: Recommended autocapitalization behavior (for supported input methods)
        :param autocorrect: Recommended autocorrection behavior (for supported input methods)
        :param autofocus: Automatically focus the element when the page is loaded
        :param contenteditable: Whether the element is editable
        :param dir: The text directionality of the element
        :param draggable: Whether the element is draggable
        :param enterkeyhint: Hint for selecting an enter key action
        :param hidden: Whether the element is relevant
        :param inert: Whether the element is inert.
        :param inputmode: Hint for selecting an input modality
        :param is_: Creates a customized built-in element
            | Valid custom element name of a defined customized built-in element
        :param itemid: Global identifier for a microdata item
            | Valid URL potentially surrounded by spaces
        :param itemprop: Property names of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs, defined property names, or text*
        :param itemref: Referenced elements
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param itemscope: Introduces a microdata item
        :param itemtype: Item types of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs*
        :param lang: Language of the element
            | Valid BCP 47 language tag or the empty string
        :param nonce: Cryptographic nonce used in Content Security Policy checks [CSP]
        :param popover: Makes the element a popover element
        :param slot: The element's desired slot
        :param spellcheck: Whether the element is to have its spelling and grammar checked
        :param style: Presentational and formatting instructions
            | CSS declarations*
        :param tabindex: Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation
        :param translate: Whether the element is to be translated when the page is localized
        :param writingsuggestions: Whether the element can offer writing suggestions or not.
        """ #fmt: skip
        super().__init__(
            "link",
            void_element=True,
            attrs=attrs,
            children=children
        )
        if not (id is None or id is False):
            self._process_attr("id", id)
        if not (class_ is None or class_ is False):
            self._process_attr("class", class_)
        if not (as_ is None or as_ is False):
            self._process_attr("as", as_)
        if not (blocking is None or blocking is False):
            self._process_attr("blocking", blocking)
        if not (color is None or color is False):
            self._process_attr("color", color)
        if not (crossorigin is None or crossorigin is False):
            self._process_attr("crossorigin", crossorigin)
        if not (disabled is None or disabled is False):
            self._process_attr("disabled", disabled)
        if not (fetchpriority is None or fetchpriority is False):
            self._process_attr("fetchpriority", fetchpriority)
        if not (href is None or href is False):
            self._process_attr("href", href)
        if not (hreflang is None or hreflang is False):
            self._process_attr("hreflang", hreflang)
        if not (imagesizes is None or imagesizes is False):
            self._process_attr("imagesizes", imagesizes)
        if not (imagesrcset is None or imagesrcset is False):
            self._process_attr("imagesrcset", imagesrcset)
        if not (integrity is None or integrity is False):
            self._process_attr("integrity", integrity)
        if not (media is None or media is False):
            self._process_attr("media", media)
        if not (referrerpolicy is None or referrerpolicy is False):
            self._process_attr("referrerpolicy", referrerpolicy)
        if not (rel is None or rel is False):
            self._process_attr("rel", rel)
        if not (sizes is None or sizes is False):
            self._process_attr("sizes", sizes)
        if not (title is None or title is False):
            self._process_attr("title", title)
        if not (type is None or type is False):
            self._process_attr("type", type)
        if not (accesskey is None or accesskey is False):
            self._process_attr("accesskey", accesskey)
        if not (autocapitalize is None or autocapitalize is False):
            self._process_attr("autocapitalize", autocapitalize)
        if not (autocorrect is None or autocorrect is False):
            self._process_attr("autocorrect", autocorrect)
        if not (autofocus is None or autofocus is False):
            self._process_attr("autofocus", autofocus)
        if not (contenteditable is None or contenteditable is False):
            self._process_attr("contenteditable", contenteditable)
        if not (dir is None or dir is False):
            self._process_attr("dir", dir)
        if not (draggable is None or draggable is False):
            self._process_attr("draggable", draggable)
        if not (enterkeyhint is None or enterkeyhint is False):
            self._process_attr("enterkeyhint", enterkeyhint)
        if not (hidden is None or hidden is False):
            self._process_attr("hidden", hidden)
        if not (inert is None or inert is False):
            self._process_attr("inert", inert)
        if not (inputmode is None or inputmode is False):
            self._process_attr("inputmode", inputmode)
        if not (is_ is None or is_ is False):
            self._process_attr("is", is_)
        if not (itemid is None or itemid is False):
            self._process_attr("itemid", itemid)
        if not (itemprop is None or itemprop is False):
            self._process_attr("itemprop", itemprop)
        if not (itemref is None or itemref is False):
            self._process_attr("itemref", itemref)
        if not (itemscope is None or itemscope is False):
            self._process_attr("itemscope", itemscope)
        if not (itemtype is None or itemtype is False):
            self._process_attr("itemtype", itemtype)
        if not (lang is None or lang is False):
            self._process_attr("lang", lang)
        if not (nonce is None or nonce is False):
            self._process_attr("nonce", nonce)
        if not (popover is None or popover is False):
            self._process_attr("popover", popover)
        if not (slot is None or slot is False):
            self._process_attr("slot", slot)
        if not (spellcheck is None or spellcheck is False):
            self._process_attr("spellcheck", spellcheck)
        if not (style is None or style is False):
            self._process_attr("style", style)
        if not (tabindex is None or tabindex is False):
            self._process_attr("tabindex", tabindex)
        if not (translate is None or translate is False):
            self._process_attr("translate", translate)
        if not (writingsuggestions is None or writingsuggestions is False):
            self._process_attr("writingsuggestions", writingsuggestions)


class main(BaseElement, GlobalAttrs):
    """
    The 'main' element.  
    Description: Container for the dominant contents of the document  
    Categories: flow palpable  
    Parents: flow*  
    Children: flow  
    Interface: HTMLElement  
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/main  
    """ # fmt: skip


    def __init__(
        self,
        attrs: Optional[Union[dict[str, Union[str, dict, list]], list[BaseAttribute]]] = None,
        id: Optional[Union[str, GlobalAttrs.id]] = None,
        class_: Optional[Union[str, GlobalAttrs.class_]] = None,
        accesskey: Optional[Union[str, GlobalAttrs.accesskey]] = None,
        autocapitalize: Optional[Union[str, GlobalAttrs.autocapitalize, Literal['on', 'off', 'none', 'sentences', 'words', 'characters']]] = None,
        autocorrect: Optional[Union[str, GlobalAttrs.autocorrect, Literal['on', 'off']]] = None,
        autofocus: Optional[Union[str, GlobalAttrs.autofocus, bool]] = None,
        contenteditable: Optional[Union[str, GlobalAttrs.contenteditable, Literal['true', 'plaintext-only', 'false']]] = None,
        dir: Optional[Union[str, GlobalAttrs.dir, Literal['ltr', 'rtl', 'auto']]] = None,
        draggable: Optional[Union[str, GlobalAttrs.draggable, Literal['true', 'false']]] = None,
        enterkeyhint: Optional[Union[str, GlobalAttrs.enterkeyhint, Literal['enter', 'done', 'go', 'next', 'previous', 'search', 'send']]] = None,
        hidden: Optional[Union[str, GlobalAttrs.hidden, Literal['until-found', 'hidden', '']]] = None,
        inert: Optional[Union[str, GlobalAttrs.inert, bool]] = None,
        inputmode: Optional[Union[str, GlobalAttrs.inputmode, Literal['none', 'text', 'tel', 'email', 'url', 'numeric', 'decimal', 'search']]] = None,
        is_: Optional[Union[str, GlobalAttrs.is_]] = None,
        itemid: Optional[Union[str, GlobalAttrs.itemid]] = None,
        itemprop: Optional[Union[str, GlobalAttrs.itemprop]] = None,
        itemref: Optional[Union[str, GlobalAttrs.itemref]] = None,
        itemscope: Optional[Union[str, GlobalAttrs.itemscope, bool]] = None,
        itemtype: Optional[Union[str, GlobalAttrs.itemtype]] = None,
        lang: Optional[Union[str, GlobalAttrs.lang]] = None,
        nonce: Optional[Union[str, GlobalAttrs.nonce]] = None,
        popover: Optional[Union[str, GlobalAttrs.popover, Literal['auto', 'manual']]] = None,
        slot: Optional[Union[str, GlobalAttrs.slot]] = None,
        spellcheck: Optional[Union[str, GlobalAttrs.spellcheck, Literal['true', 'false', '']]] = None,
        style: Optional[Union[str, GlobalAttrs.style]] = None,
        tabindex: Optional[Union[str, GlobalAttrs.tabindex, int]] = None,
        title: Optional[Union[str, GlobalAttrs.title]] = None,
        translate: Optional[Union[str, GlobalAttrs.translate, Literal['yes', 'no']]] = None,
        writingsuggestions: Optional[Union[str, GlobalAttrs.writingsuggestions, Literal['true', 'false', '']]] = None,
        children: Optional[list] = None
    ) -> None:
        """
        Initialize 'main' (Container for the dominant contents of the document) element.  
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/main

        :param attrs: A list or dictionary of attributes for the element
        :param id: The element's ID
        :param class_: Classes to which the element belongs
            | Set of space-separated tokens
        :param accesskey: Keyboard shortcut to activate or focus element
            | Ordered set of unique space-separated tokens, none of which are identical to another, each consisting of one code point in length
        :param autocapitalize: Recommended autocapitalization behavior (for supported input methods)
        :param autocorrect: Recommended autocorrection behavior (for supported input methods)
        :param autofocus: Automatically focus the element when the page is loaded
        :param contenteditable: Whether the element is editable
        :param dir: The text directionality of the element
        :param draggable: Whether the element is draggable
        :param enterkeyhint: Hint for selecting an enter key action
        :param hidden: Whether the element is relevant
        :param inert: Whether the element is inert.
        :param inputmode: Hint for selecting an input modality
        :param is_: Creates a customized built-in element
            | Valid custom element name of a defined customized built-in element
        :param itemid: Global identifier for a microdata item
            | Valid URL potentially surrounded by spaces
        :param itemprop: Property names of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs, defined property names, or text*
        :param itemref: Referenced elements
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param itemscope: Introduces a microdata item
        :param itemtype: Item types of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs*
        :param lang: Language of the element
            | Valid BCP 47 language tag or the empty string
        :param nonce: Cryptographic nonce used in Content Security Policy checks [CSP]
        :param popover: Makes the element a popover element
        :param slot: The element's desired slot
        :param spellcheck: Whether the element is to have its spelling and grammar checked
        :param style: Presentational and formatting instructions
            | CSS declarations*
        :param tabindex: Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation
        :param title: Advisory information for the element
        :param translate: Whether the element is to be translated when the page is localized
        :param writingsuggestions: Whether the element can offer writing suggestions or not.
        """ #fmt: skip
        super().__init__(
            "main",
            void_element=False,
            attrs=attrs,
            children=children
        )
        if not (id is None or id is False):
            self._process_attr("id", id)
        if not (class_ is None or class_ is False):
            self._process_attr("class", class_)
        if not (accesskey is None or accesskey is False):
            self._process_attr("accesskey", accesskey)
        if not (autocapitalize is None or autocapitalize is False):
            self._process_attr("autocapitalize", autocapitalize)
        if not (autocorrect is None or autocorrect is False):
            self._process_attr("autocorrect", autocorrect)
        if not (autofocus is None or autofocus is False):
            self._process_attr("autofocus", autofocus)
        if not (contenteditable is None or contenteditable is False):
            self._process_attr("contenteditable", contenteditable)
        if not (dir is None or dir is False):
            self._process_attr("dir", dir)
        if not (draggable is None or draggable is False):
            self._process_attr("draggable", draggable)
        if not (enterkeyhint is None or enterkeyhint is False):
            self._process_attr("enterkeyhint", enterkeyhint)
        if not (hidden is None or hidden is False):
            self._process_attr("hidden", hidden)
        if not (inert is None or inert is False):
            self._process_attr("inert", inert)
        if not (inputmode is None or inputmode is False):
            self._process_attr("inputmode", inputmode)
        if not (is_ is None or is_ is False):
            self._process_attr("is", is_)
        if not (itemid is None or itemid is False):
            self._process_attr("itemid", itemid)
        if not (itemprop is None or itemprop is False):
            self._process_attr("itemprop", itemprop)
        if not (itemref is None or itemref is False):
            self._process_attr("itemref", itemref)
        if not (itemscope is None or itemscope is False):
            self._process_attr("itemscope", itemscope)
        if not (itemtype is None or itemtype is False):
            self._process_attr("itemtype", itemtype)
        if not (lang is None or lang is False):
            self._process_attr("lang", lang)
        if not (nonce is None or nonce is False):
            self._process_attr("nonce", nonce)
        if not (popover is None or popover is False):
            self._process_attr("popover", popover)
        if not (slot is None or slot is False):
            self._process_attr("slot", slot)
        if not (spellcheck is None or spellcheck is False):
            self._process_attr("spellcheck", spellcheck)
        if not (style is None or style is False):
            self._process_attr("style", style)
        if not (tabindex is None or tabindex is False):
            self._process_attr("tabindex", tabindex)
        if not (title is None or title is False):
            self._process_attr("title", title)
        if not (translate is None or translate is False):
            self._process_attr("translate", translate)
        if not (writingsuggestions is None or writingsuggestions is False):
            self._process_attr("writingsuggestions", writingsuggestions)


class map(BaseElement, GlobalAttrs, MapAttrs):
    """
    The 'map' element.  
    Description: Image map  
    Categories: flow phrasing* palpable  
    Parents: phrasing  
    Children: transparent area*  
    Interface: HTMLMapElement  
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/map  
    """ # fmt: skip


    def __init__(
        self,
        attrs: Optional[Union[dict[str, Union[str, dict, list]], list[BaseAttribute]]] = None,
        id: Optional[Union[str, GlobalAttrs.id]] = None,
        class_: Optional[Union[str, GlobalAttrs.class_]] = None,
        name: Optional[Union[str, MapAttrs.name]] = None,
        accesskey: Optional[Union[str, GlobalAttrs.accesskey]] = None,
        autocapitalize: Optional[Union[str, GlobalAttrs.autocapitalize, Literal['on', 'off', 'none', 'sentences', 'words', 'characters']]] = None,
        autocorrect: Optional[Union[str, GlobalAttrs.autocorrect, Literal['on', 'off']]] = None,
        autofocus: Optional[Union[str, GlobalAttrs.autofocus, bool]] = None,
        contenteditable: Optional[Union[str, GlobalAttrs.contenteditable, Literal['true', 'plaintext-only', 'false']]] = None,
        dir: Optional[Union[str, GlobalAttrs.dir, Literal['ltr', 'rtl', 'auto']]] = None,
        draggable: Optional[Union[str, GlobalAttrs.draggable, Literal['true', 'false']]] = None,
        enterkeyhint: Optional[Union[str, GlobalAttrs.enterkeyhint, Literal['enter', 'done', 'go', 'next', 'previous', 'search', 'send']]] = None,
        hidden: Optional[Union[str, GlobalAttrs.hidden, Literal['until-found', 'hidden', '']]] = None,
        inert: Optional[Union[str, GlobalAttrs.inert, bool]] = None,
        inputmode: Optional[Union[str, GlobalAttrs.inputmode, Literal['none', 'text', 'tel', 'email', 'url', 'numeric', 'decimal', 'search']]] = None,
        is_: Optional[Union[str, GlobalAttrs.is_]] = None,
        itemid: Optional[Union[str, GlobalAttrs.itemid]] = None,
        itemprop: Optional[Union[str, GlobalAttrs.itemprop]] = None,
        itemref: Optional[Union[str, GlobalAttrs.itemref]] = None,
        itemscope: Optional[Union[str, GlobalAttrs.itemscope, bool]] = None,
        itemtype: Optional[Union[str, GlobalAttrs.itemtype]] = None,
        lang: Optional[Union[str, GlobalAttrs.lang]] = None,
        nonce: Optional[Union[str, GlobalAttrs.nonce]] = None,
        popover: Optional[Union[str, GlobalAttrs.popover, Literal['auto', 'manual']]] = None,
        slot: Optional[Union[str, GlobalAttrs.slot]] = None,
        spellcheck: Optional[Union[str, GlobalAttrs.spellcheck, Literal['true', 'false', '']]] = None,
        style: Optional[Union[str, GlobalAttrs.style]] = None,
        tabindex: Optional[Union[str, GlobalAttrs.tabindex, int]] = None,
        title: Optional[Union[str, GlobalAttrs.title]] = None,
        translate: Optional[Union[str, GlobalAttrs.translate, Literal['yes', 'no']]] = None,
        writingsuggestions: Optional[Union[str, GlobalAttrs.writingsuggestions, Literal['true', 'false', '']]] = None,
        children: Optional[list] = None
    ) -> None:
        """
        Initialize 'map' (Image map) element.  
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/map

        :param attrs: A list or dictionary of attributes for the element
        :param id: The element's ID
        :param class_: Classes to which the element belongs
            | Set of space-separated tokens
        :param name: Name of image map to reference from the usemap attribute
        :param accesskey: Keyboard shortcut to activate or focus element
            | Ordered set of unique space-separated tokens, none of which are identical to another, each consisting of one code point in length
        :param autocapitalize: Recommended autocapitalization behavior (for supported input methods)
        :param autocorrect: Recommended autocorrection behavior (for supported input methods)
        :param autofocus: Automatically focus the element when the page is loaded
        :param contenteditable: Whether the element is editable
        :param dir: The text directionality of the element
        :param draggable: Whether the element is draggable
        :param enterkeyhint: Hint for selecting an enter key action
        :param hidden: Whether the element is relevant
        :param inert: Whether the element is inert.
        :param inputmode: Hint for selecting an input modality
        :param is_: Creates a customized built-in element
            | Valid custom element name of a defined customized built-in element
        :param itemid: Global identifier for a microdata item
            | Valid URL potentially surrounded by spaces
        :param itemprop: Property names of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs, defined property names, or text*
        :param itemref: Referenced elements
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param itemscope: Introduces a microdata item
        :param itemtype: Item types of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs*
        :param lang: Language of the element
            | Valid BCP 47 language tag or the empty string
        :param nonce: Cryptographic nonce used in Content Security Policy checks [CSP]
        :param popover: Makes the element a popover element
        :param slot: The element's desired slot
        :param spellcheck: Whether the element is to have its spelling and grammar checked
        :param style: Presentational and formatting instructions
            | CSS declarations*
        :param tabindex: Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation
        :param title: Advisory information for the element
        :param translate: Whether the element is to be translated when the page is localized
        :param writingsuggestions: Whether the element can offer writing suggestions or not.
        """ #fmt: skip
        super().__init__(
            "map",
            void_element=False,
            attrs=attrs,
            children=children
        )
        if not (id is None or id is False):
            self._process_attr("id", id)
        if not (class_ is None or class_ is False):
            self._process_attr("class", class_)
        if not (name is None or name is False):
            self._process_attr("name", name)
        if not (accesskey is None or accesskey is False):
            self._process_attr("accesskey", accesskey)
        if not (autocapitalize is None or autocapitalize is False):
            self._process_attr("autocapitalize", autocapitalize)
        if not (autocorrect is None or autocorrect is False):
            self._process_attr("autocorrect", autocorrect)
        if not (autofocus is None or autofocus is False):
            self._process_attr("autofocus", autofocus)
        if not (contenteditable is None or contenteditable is False):
            self._process_attr("contenteditable", contenteditable)
        if not (dir is None or dir is False):
            self._process_attr("dir", dir)
        if not (draggable is None or draggable is False):
            self._process_attr("draggable", draggable)
        if not (enterkeyhint is None or enterkeyhint is False):
            self._process_attr("enterkeyhint", enterkeyhint)
        if not (hidden is None or hidden is False):
            self._process_attr("hidden", hidden)
        if not (inert is None or inert is False):
            self._process_attr("inert", inert)
        if not (inputmode is None or inputmode is False):
            self._process_attr("inputmode", inputmode)
        if not (is_ is None or is_ is False):
            self._process_attr("is", is_)
        if not (itemid is None or itemid is False):
            self._process_attr("itemid", itemid)
        if not (itemprop is None or itemprop is False):
            self._process_attr("itemprop", itemprop)
        if not (itemref is None or itemref is False):
            self._process_attr("itemref", itemref)
        if not (itemscope is None or itemscope is False):
            self._process_attr("itemscope", itemscope)
        if not (itemtype is None or itemtype is False):
            self._process_attr("itemtype", itemtype)
        if not (lang is None or lang is False):
            self._process_attr("lang", lang)
        if not (nonce is None or nonce is False):
            self._process_attr("nonce", nonce)
        if not (popover is None or popover is False):
            self._process_attr("popover", popover)
        if not (slot is None or slot is False):
            self._process_attr("slot", slot)
        if not (spellcheck is None or spellcheck is False):
            self._process_attr("spellcheck", spellcheck)
        if not (style is None or style is False):
            self._process_attr("style", style)
        if not (tabindex is None or tabindex is False):
            self._process_attr("tabindex", tabindex)
        if not (title is None or title is False):
            self._process_attr("title", title)
        if not (translate is None or translate is False):
            self._process_attr("translate", translate)
        if not (writingsuggestions is None or writingsuggestions is False):
            self._process_attr("writingsuggestions", writingsuggestions)


class mark(BaseElement, GlobalAttrs):
    """
    The 'mark' element.  
    Description: Highlight  
    Categories: flow phrasing palpable  
    Parents: phrasing  
    Children: phrasing  
    Interface: HTMLElement  
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/mark  
    """ # fmt: skip


    def __init__(
        self,
        attrs: Optional[Union[dict[str, Union[str, dict, list]], list[BaseAttribute]]] = None,
        id: Optional[Union[str, GlobalAttrs.id]] = None,
        class_: Optional[Union[str, GlobalAttrs.class_]] = None,
        accesskey: Optional[Union[str, GlobalAttrs.accesskey]] = None,
        autocapitalize: Optional[Union[str, GlobalAttrs.autocapitalize, Literal['on', 'off', 'none', 'sentences', 'words', 'characters']]] = None,
        autocorrect: Optional[Union[str, GlobalAttrs.autocorrect, Literal['on', 'off']]] = None,
        autofocus: Optional[Union[str, GlobalAttrs.autofocus, bool]] = None,
        contenteditable: Optional[Union[str, GlobalAttrs.contenteditable, Literal['true', 'plaintext-only', 'false']]] = None,
        dir: Optional[Union[str, GlobalAttrs.dir, Literal['ltr', 'rtl', 'auto']]] = None,
        draggable: Optional[Union[str, GlobalAttrs.draggable, Literal['true', 'false']]] = None,
        enterkeyhint: Optional[Union[str, GlobalAttrs.enterkeyhint, Literal['enter', 'done', 'go', 'next', 'previous', 'search', 'send']]] = None,
        hidden: Optional[Union[str, GlobalAttrs.hidden, Literal['until-found', 'hidden', '']]] = None,
        inert: Optional[Union[str, GlobalAttrs.inert, bool]] = None,
        inputmode: Optional[Union[str, GlobalAttrs.inputmode, Literal['none', 'text', 'tel', 'email', 'url', 'numeric', 'decimal', 'search']]] = None,
        is_: Optional[Union[str, GlobalAttrs.is_]] = None,
        itemid: Optional[Union[str, GlobalAttrs.itemid]] = None,
        itemprop: Optional[Union[str, GlobalAttrs.itemprop]] = None,
        itemref: Optional[Union[str, GlobalAttrs.itemref]] = None,
        itemscope: Optional[Union[str, GlobalAttrs.itemscope, bool]] = None,
        itemtype: Optional[Union[str, GlobalAttrs.itemtype]] = None,
        lang: Optional[Union[str, GlobalAttrs.lang]] = None,
        nonce: Optional[Union[str, GlobalAttrs.nonce]] = None,
        popover: Optional[Union[str, GlobalAttrs.popover, Literal['auto', 'manual']]] = None,
        slot: Optional[Union[str, GlobalAttrs.slot]] = None,
        spellcheck: Optional[Union[str, GlobalAttrs.spellcheck, Literal['true', 'false', '']]] = None,
        style: Optional[Union[str, GlobalAttrs.style]] = None,
        tabindex: Optional[Union[str, GlobalAttrs.tabindex, int]] = None,
        title: Optional[Union[str, GlobalAttrs.title]] = None,
        translate: Optional[Union[str, GlobalAttrs.translate, Literal['yes', 'no']]] = None,
        writingsuggestions: Optional[Union[str, GlobalAttrs.writingsuggestions, Literal['true', 'false', '']]] = None,
        children: Optional[list] = None
    ) -> None:
        """
        Initialize 'mark' (Highlight) element.  
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/mark

        :param attrs: A list or dictionary of attributes for the element
        :param id: The element's ID
        :param class_: Classes to which the element belongs
            | Set of space-separated tokens
        :param accesskey: Keyboard shortcut to activate or focus element
            | Ordered set of unique space-separated tokens, none of which are identical to another, each consisting of one code point in length
        :param autocapitalize: Recommended autocapitalization behavior (for supported input methods)
        :param autocorrect: Recommended autocorrection behavior (for supported input methods)
        :param autofocus: Automatically focus the element when the page is loaded
        :param contenteditable: Whether the element is editable
        :param dir: The text directionality of the element
        :param draggable: Whether the element is draggable
        :param enterkeyhint: Hint for selecting an enter key action
        :param hidden: Whether the element is relevant
        :param inert: Whether the element is inert.
        :param inputmode: Hint for selecting an input modality
        :param is_: Creates a customized built-in element
            | Valid custom element name of a defined customized built-in element
        :param itemid: Global identifier for a microdata item
            | Valid URL potentially surrounded by spaces
        :param itemprop: Property names of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs, defined property names, or text*
        :param itemref: Referenced elements
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param itemscope: Introduces a microdata item
        :param itemtype: Item types of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs*
        :param lang: Language of the element
            | Valid BCP 47 language tag or the empty string
        :param nonce: Cryptographic nonce used in Content Security Policy checks [CSP]
        :param popover: Makes the element a popover element
        :param slot: The element's desired slot
        :param spellcheck: Whether the element is to have its spelling and grammar checked
        :param style: Presentational and formatting instructions
            | CSS declarations*
        :param tabindex: Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation
        :param title: Advisory information for the element
        :param translate: Whether the element is to be translated when the page is localized
        :param writingsuggestions: Whether the element can offer writing suggestions or not.
        """ #fmt: skip
        super().__init__(
            "mark",
            void_element=False,
            attrs=attrs,
            children=children
        )
        if not (id is None or id is False):
            self._process_attr("id", id)
        if not (class_ is None or class_ is False):
            self._process_attr("class", class_)
        if not (accesskey is None or accesskey is False):
            self._process_attr("accesskey", accesskey)
        if not (autocapitalize is None or autocapitalize is False):
            self._process_attr("autocapitalize", autocapitalize)
        if not (autocorrect is None or autocorrect is False):
            self._process_attr("autocorrect", autocorrect)
        if not (autofocus is None or autofocus is False):
            self._process_attr("autofocus", autofocus)
        if not (contenteditable is None or contenteditable is False):
            self._process_attr("contenteditable", contenteditable)
        if not (dir is None or dir is False):
            self._process_attr("dir", dir)
        if not (draggable is None or draggable is False):
            self._process_attr("draggable", draggable)
        if not (enterkeyhint is None or enterkeyhint is False):
            self._process_attr("enterkeyhint", enterkeyhint)
        if not (hidden is None or hidden is False):
            self._process_attr("hidden", hidden)
        if not (inert is None or inert is False):
            self._process_attr("inert", inert)
        if not (inputmode is None or inputmode is False):
            self._process_attr("inputmode", inputmode)
        if not (is_ is None or is_ is False):
            self._process_attr("is", is_)
        if not (itemid is None or itemid is False):
            self._process_attr("itemid", itemid)
        if not (itemprop is None or itemprop is False):
            self._process_attr("itemprop", itemprop)
        if not (itemref is None or itemref is False):
            self._process_attr("itemref", itemref)
        if not (itemscope is None or itemscope is False):
            self._process_attr("itemscope", itemscope)
        if not (itemtype is None or itemtype is False):
            self._process_attr("itemtype", itemtype)
        if not (lang is None or lang is False):
            self._process_attr("lang", lang)
        if not (nonce is None or nonce is False):
            self._process_attr("nonce", nonce)
        if not (popover is None or popover is False):
            self._process_attr("popover", popover)
        if not (slot is None or slot is False):
            self._process_attr("slot", slot)
        if not (spellcheck is None or spellcheck is False):
            self._process_attr("spellcheck", spellcheck)
        if not (style is None or style is False):
            self._process_attr("style", style)
        if not (tabindex is None or tabindex is False):
            self._process_attr("tabindex", tabindex)
        if not (title is None or title is False):
            self._process_attr("title", title)
        if not (translate is None or translate is False):
            self._process_attr("translate", translate)
        if not (writingsuggestions is None or writingsuggestions is False):
            self._process_attr("writingsuggestions", writingsuggestions)


class menu(BaseElement, GlobalAttrs):
    """
    The 'menu' element.  
    Description: Menu of commands  
    Categories: flow palpable*  
    Parents: flow  
    Children: li script-supporting elements  
    Interface: HTMLMenuElement  
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/menu  
    """ # fmt: skip


    def __init__(
        self,
        attrs: Optional[Union[dict[str, Union[str, dict, list]], list[BaseAttribute]]] = None,
        id: Optional[Union[str, GlobalAttrs.id]] = None,
        class_: Optional[Union[str, GlobalAttrs.class_]] = None,
        accesskey: Optional[Union[str, GlobalAttrs.accesskey]] = None,
        autocapitalize: Optional[Union[str, GlobalAttrs.autocapitalize, Literal['on', 'off', 'none', 'sentences', 'words', 'characters']]] = None,
        autocorrect: Optional[Union[str, GlobalAttrs.autocorrect, Literal['on', 'off']]] = None,
        autofocus: Optional[Union[str, GlobalAttrs.autofocus, bool]] = None,
        contenteditable: Optional[Union[str, GlobalAttrs.contenteditable, Literal['true', 'plaintext-only', 'false']]] = None,
        dir: Optional[Union[str, GlobalAttrs.dir, Literal['ltr', 'rtl', 'auto']]] = None,
        draggable: Optional[Union[str, GlobalAttrs.draggable, Literal['true', 'false']]] = None,
        enterkeyhint: Optional[Union[str, GlobalAttrs.enterkeyhint, Literal['enter', 'done', 'go', 'next', 'previous', 'search', 'send']]] = None,
        hidden: Optional[Union[str, GlobalAttrs.hidden, Literal['until-found', 'hidden', '']]] = None,
        inert: Optional[Union[str, GlobalAttrs.inert, bool]] = None,
        inputmode: Optional[Union[str, GlobalAttrs.inputmode, Literal['none', 'text', 'tel', 'email', 'url', 'numeric', 'decimal', 'search']]] = None,
        is_: Optional[Union[str, GlobalAttrs.is_]] = None,
        itemid: Optional[Union[str, GlobalAttrs.itemid]] = None,
        itemprop: Optional[Union[str, GlobalAttrs.itemprop]] = None,
        itemref: Optional[Union[str, GlobalAttrs.itemref]] = None,
        itemscope: Optional[Union[str, GlobalAttrs.itemscope, bool]] = None,
        itemtype: Optional[Union[str, GlobalAttrs.itemtype]] = None,
        lang: Optional[Union[str, GlobalAttrs.lang]] = None,
        nonce: Optional[Union[str, GlobalAttrs.nonce]] = None,
        popover: Optional[Union[str, GlobalAttrs.popover, Literal['auto', 'manual']]] = None,
        slot: Optional[Union[str, GlobalAttrs.slot]] = None,
        spellcheck: Optional[Union[str, GlobalAttrs.spellcheck, Literal['true', 'false', '']]] = None,
        style: Optional[Union[str, GlobalAttrs.style]] = None,
        tabindex: Optional[Union[str, GlobalAttrs.tabindex, int]] = None,
        title: Optional[Union[str, GlobalAttrs.title]] = None,
        translate: Optional[Union[str, GlobalAttrs.translate, Literal['yes', 'no']]] = None,
        writingsuggestions: Optional[Union[str, GlobalAttrs.writingsuggestions, Literal['true', 'false', '']]] = None,
        children: Optional[list] = None
    ) -> None:
        """
        Initialize 'menu' (Menu of commands) element.  
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/menu

        :param attrs: A list or dictionary of attributes for the element
        :param id: The element's ID
        :param class_: Classes to which the element belongs
            | Set of space-separated tokens
        :param accesskey: Keyboard shortcut to activate or focus element
            | Ordered set of unique space-separated tokens, none of which are identical to another, each consisting of one code point in length
        :param autocapitalize: Recommended autocapitalization behavior (for supported input methods)
        :param autocorrect: Recommended autocorrection behavior (for supported input methods)
        :param autofocus: Automatically focus the element when the page is loaded
        :param contenteditable: Whether the element is editable
        :param dir: The text directionality of the element
        :param draggable: Whether the element is draggable
        :param enterkeyhint: Hint for selecting an enter key action
        :param hidden: Whether the element is relevant
        :param inert: Whether the element is inert.
        :param inputmode: Hint for selecting an input modality
        :param is_: Creates a customized built-in element
            | Valid custom element name of a defined customized built-in element
        :param itemid: Global identifier for a microdata item
            | Valid URL potentially surrounded by spaces
        :param itemprop: Property names of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs, defined property names, or text*
        :param itemref: Referenced elements
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param itemscope: Introduces a microdata item
        :param itemtype: Item types of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs*
        :param lang: Language of the element
            | Valid BCP 47 language tag or the empty string
        :param nonce: Cryptographic nonce used in Content Security Policy checks [CSP]
        :param popover: Makes the element a popover element
        :param slot: The element's desired slot
        :param spellcheck: Whether the element is to have its spelling and grammar checked
        :param style: Presentational and formatting instructions
            | CSS declarations*
        :param tabindex: Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation
        :param title: Advisory information for the element
        :param translate: Whether the element is to be translated when the page is localized
        :param writingsuggestions: Whether the element can offer writing suggestions or not.
        """ #fmt: skip
        super().__init__(
            "menu",
            void_element=False,
            attrs=attrs,
            children=children
        )
        if not (id is None or id is False):
            self._process_attr("id", id)
        if not (class_ is None or class_ is False):
            self._process_attr("class", class_)
        if not (accesskey is None or accesskey is False):
            self._process_attr("accesskey", accesskey)
        if not (autocapitalize is None or autocapitalize is False):
            self._process_attr("autocapitalize", autocapitalize)
        if not (autocorrect is None or autocorrect is False):
            self._process_attr("autocorrect", autocorrect)
        if not (autofocus is None or autofocus is False):
            self._process_attr("autofocus", autofocus)
        if not (contenteditable is None or contenteditable is False):
            self._process_attr("contenteditable", contenteditable)
        if not (dir is None or dir is False):
            self._process_attr("dir", dir)
        if not (draggable is None or draggable is False):
            self._process_attr("draggable", draggable)
        if not (enterkeyhint is None or enterkeyhint is False):
            self._process_attr("enterkeyhint", enterkeyhint)
        if not (hidden is None or hidden is False):
            self._process_attr("hidden", hidden)
        if not (inert is None or inert is False):
            self._process_attr("inert", inert)
        if not (inputmode is None or inputmode is False):
            self._process_attr("inputmode", inputmode)
        if not (is_ is None or is_ is False):
            self._process_attr("is", is_)
        if not (itemid is None or itemid is False):
            self._process_attr("itemid", itemid)
        if not (itemprop is None or itemprop is False):
            self._process_attr("itemprop", itemprop)
        if not (itemref is None or itemref is False):
            self._process_attr("itemref", itemref)
        if not (itemscope is None or itemscope is False):
            self._process_attr("itemscope", itemscope)
        if not (itemtype is None or itemtype is False):
            self._process_attr("itemtype", itemtype)
        if not (lang is None or lang is False):
            self._process_attr("lang", lang)
        if not (nonce is None or nonce is False):
            self._process_attr("nonce", nonce)
        if not (popover is None or popover is False):
            self._process_attr("popover", popover)
        if not (slot is None or slot is False):
            self._process_attr("slot", slot)
        if not (spellcheck is None or spellcheck is False):
            self._process_attr("spellcheck", spellcheck)
        if not (style is None or style is False):
            self._process_attr("style", style)
        if not (tabindex is None or tabindex is False):
            self._process_attr("tabindex", tabindex)
        if not (title is None or title is False):
            self._process_attr("title", title)
        if not (translate is None or translate is False):
            self._process_attr("translate", translate)
        if not (writingsuggestions is None or writingsuggestions is False):
            self._process_attr("writingsuggestions", writingsuggestions)


class meta(BaseElement, GlobalAttrs, MetaAttrs):
    """
    The 'meta' element.  
    Description: Text metadata  
    Categories: metadata flow* phrasing*  
    Parents: head noscript* phrasing*  
    Children: empty  
    Interface: HTMLMetaElement  
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta  
    """ # fmt: skip


    def __init__(
        self,
        attrs: Optional[Union[dict[str, Union[str, dict, list]], list[BaseAttribute]]] = None,
        id: Optional[Union[str, GlobalAttrs.id]] = None,
        class_: Optional[Union[str, GlobalAttrs.class_]] = None,
        charset: Optional[Union[str, MetaAttrs.charset, Literal['utf-8']]] = None,
        content: Optional[Union[str, MetaAttrs.content]] = None,
        http_equiv: Optional[Union[str, MetaAttrs.http_equiv, Literal['content-type', 'default-style', 'refresh', 'x-ua-compatible', 'content-security-policy']]] = None,
        media: Optional[Union[str, MetaAttrs.media]] = None,
        name: Optional[Union[str, MetaAttrs.name]] = None,
        accesskey: Optional[Union[str, GlobalAttrs.accesskey]] = None,
        autocapitalize: Optional[Union[str, GlobalAttrs.autocapitalize, Literal['on', 'off', 'none', 'sentences', 'words', 'characters']]] = None,
        autocorrect: Optional[Union[str, GlobalAttrs.autocorrect, Literal['on', 'off']]] = None,
        autofocus: Optional[Union[str, GlobalAttrs.autofocus, bool]] = None,
        contenteditable: Optional[Union[str, GlobalAttrs.contenteditable, Literal['true', 'plaintext-only', 'false']]] = None,
        dir: Optional[Union[str, GlobalAttrs.dir, Literal['ltr', 'rtl', 'auto']]] = None,
        draggable: Optional[Union[str, GlobalAttrs.draggable, Literal['true', 'false']]] = None,
        enterkeyhint: Optional[Union[str, GlobalAttrs.enterkeyhint, Literal['enter', 'done', 'go', 'next', 'previous', 'search', 'send']]] = None,
        hidden: Optional[Union[str, GlobalAttrs.hidden, Literal['until-found', 'hidden', '']]] = None,
        inert: Optional[Union[str, GlobalAttrs.inert, bool]] = None,
        inputmode: Optional[Union[str, GlobalAttrs.inputmode, Literal['none', 'text', 'tel', 'email', 'url', 'numeric', 'decimal', 'search']]] = None,
        is_: Optional[Union[str, GlobalAttrs.is_]] = None,
        itemid: Optional[Union[str, GlobalAttrs.itemid]] = None,
        itemprop: Optional[Union[str, GlobalAttrs.itemprop]] = None,
        itemref: Optional[Union[str, GlobalAttrs.itemref]] = None,
        itemscope: Optional[Union[str, GlobalAttrs.itemscope, bool]] = None,
        itemtype: Optional[Union[str, GlobalAttrs.itemtype]] = None,
        lang: Optional[Union[str, GlobalAttrs.lang]] = None,
        nonce: Optional[Union[str, GlobalAttrs.nonce]] = None,
        popover: Optional[Union[str, GlobalAttrs.popover, Literal['auto', 'manual']]] = None,
        slot: Optional[Union[str, GlobalAttrs.slot]] = None,
        spellcheck: Optional[Union[str, GlobalAttrs.spellcheck, Literal['true', 'false', '']]] = None,
        style: Optional[Union[str, GlobalAttrs.style]] = None,
        tabindex: Optional[Union[str, GlobalAttrs.tabindex, int]] = None,
        title: Optional[Union[str, GlobalAttrs.title]] = None,
        translate: Optional[Union[str, GlobalAttrs.translate, Literal['yes', 'no']]] = None,
        writingsuggestions: Optional[Union[str, GlobalAttrs.writingsuggestions, Literal['true', 'false', '']]] = None,
        children: Optional[list] = None
    ) -> None:
        """
        Initialize 'meta' (Text metadata) element.  
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta

        :param attrs: A list or dictionary of attributes for the element
        :param id: The element's ID
        :param class_: Classes to which the element belongs
            | Set of space-separated tokens
        :param charset: Character encoding declaration
        :param content: Value of the element
        :param http_equiv: Pragma directive
        :param media: Applicable media
            | Valid media query list
        :param name: Metadata name
        :param accesskey: Keyboard shortcut to activate or focus element
            | Ordered set of unique space-separated tokens, none of which are identical to another, each consisting of one code point in length
        :param autocapitalize: Recommended autocapitalization behavior (for supported input methods)
        :param autocorrect: Recommended autocorrection behavior (for supported input methods)
        :param autofocus: Automatically focus the element when the page is loaded
        :param contenteditable: Whether the element is editable
        :param dir: The text directionality of the element
        :param draggable: Whether the element is draggable
        :param enterkeyhint: Hint for selecting an enter key action
        :param hidden: Whether the element is relevant
        :param inert: Whether the element is inert.
        :param inputmode: Hint for selecting an input modality
        :param is_: Creates a customized built-in element
            | Valid custom element name of a defined customized built-in element
        :param itemid: Global identifier for a microdata item
            | Valid URL potentially surrounded by spaces
        :param itemprop: Property names of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs, defined property names, or text*
        :param itemref: Referenced elements
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param itemscope: Introduces a microdata item
        :param itemtype: Item types of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs*
        :param lang: Language of the element
            | Valid BCP 47 language tag or the empty string
        :param nonce: Cryptographic nonce used in Content Security Policy checks [CSP]
        :param popover: Makes the element a popover element
        :param slot: The element's desired slot
        :param spellcheck: Whether the element is to have its spelling and grammar checked
        :param style: Presentational and formatting instructions
            | CSS declarations*
        :param tabindex: Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation
        :param title: Advisory information for the element
        :param translate: Whether the element is to be translated when the page is localized
        :param writingsuggestions: Whether the element can offer writing suggestions or not.
        """ #fmt: skip
        super().__init__(
            "meta",
            void_element=True,
            attrs=attrs,
            children=children
        )
        if not (id is None or id is False):
            self._process_attr("id", id)
        if not (class_ is None or class_ is False):
            self._process_attr("class", class_)
        if not (charset is None or charset is False):
            self._process_attr("charset", charset)
        if not (content is None or content is False):
            self._process_attr("content", content)
        if not (http_equiv is None or http_equiv is False):
            self._process_attr("http-equiv", http_equiv)
        if not (media is None or media is False):
            self._process_attr("media", media)
        if not (name is None or name is False):
            self._process_attr("name", name)
        if not (accesskey is None or accesskey is False):
            self._process_attr("accesskey", accesskey)
        if not (autocapitalize is None or autocapitalize is False):
            self._process_attr("autocapitalize", autocapitalize)
        if not (autocorrect is None or autocorrect is False):
            self._process_attr("autocorrect", autocorrect)
        if not (autofocus is None or autofocus is False):
            self._process_attr("autofocus", autofocus)
        if not (contenteditable is None or contenteditable is False):
            self._process_attr("contenteditable", contenteditable)
        if not (dir is None or dir is False):
            self._process_attr("dir", dir)
        if not (draggable is None or draggable is False):
            self._process_attr("draggable", draggable)
        if not (enterkeyhint is None or enterkeyhint is False):
            self._process_attr("enterkeyhint", enterkeyhint)
        if not (hidden is None or hidden is False):
            self._process_attr("hidden", hidden)
        if not (inert is None or inert is False):
            self._process_attr("inert", inert)
        if not (inputmode is None or inputmode is False):
            self._process_attr("inputmode", inputmode)
        if not (is_ is None or is_ is False):
            self._process_attr("is", is_)
        if not (itemid is None or itemid is False):
            self._process_attr("itemid", itemid)
        if not (itemprop is None or itemprop is False):
            self._process_attr("itemprop", itemprop)
        if not (itemref is None or itemref is False):
            self._process_attr("itemref", itemref)
        if not (itemscope is None or itemscope is False):
            self._process_attr("itemscope", itemscope)
        if not (itemtype is None or itemtype is False):
            self._process_attr("itemtype", itemtype)
        if not (lang is None or lang is False):
            self._process_attr("lang", lang)
        if not (nonce is None or nonce is False):
            self._process_attr("nonce", nonce)
        if not (popover is None or popover is False):
            self._process_attr("popover", popover)
        if not (slot is None or slot is False):
            self._process_attr("slot", slot)
        if not (spellcheck is None or spellcheck is False):
            self._process_attr("spellcheck", spellcheck)
        if not (style is None or style is False):
            self._process_attr("style", style)
        if not (tabindex is None or tabindex is False):
            self._process_attr("tabindex", tabindex)
        if not (title is None or title is False):
            self._process_attr("title", title)
        if not (translate is None or translate is False):
            self._process_attr("translate", translate)
        if not (writingsuggestions is None or writingsuggestions is False):
            self._process_attr("writingsuggestions", writingsuggestions)


class meter(BaseElement, GlobalAttrs, MeterAttrs):
    """
    The 'meter' element.  
    Description: Gauge  
    Categories: flow phrasing labelable palpable  
    Parents: phrasing  
    Children: phrasing*  
    Interface: HTMLMeterElement  
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meter  
    """ # fmt: skip


    def __init__(
        self,
        attrs: Optional[Union[dict[str, Union[str, dict, list]], list[BaseAttribute]]] = None,
        id: Optional[Union[str, GlobalAttrs.id]] = None,
        class_: Optional[Union[str, GlobalAttrs.class_]] = None,
        high: Optional[Union[str, MeterAttrs.high, float]] = None,
        low: Optional[Union[str, MeterAttrs.low, float]] = None,
        max: Optional[Union[str, MeterAttrs.max, float]] = None,
        min: Optional[Union[str, MeterAttrs.min, float]] = None,
        optimum: Optional[Union[str, MeterAttrs.optimum, float]] = None,
        value: Optional[Union[str, MeterAttrs.value, float]] = None,
        accesskey: Optional[Union[str, GlobalAttrs.accesskey]] = None,
        autocapitalize: Optional[Union[str, GlobalAttrs.autocapitalize, Literal['on', 'off', 'none', 'sentences', 'words', 'characters']]] = None,
        autocorrect: Optional[Union[str, GlobalAttrs.autocorrect, Literal['on', 'off']]] = None,
        autofocus: Optional[Union[str, GlobalAttrs.autofocus, bool]] = None,
        contenteditable: Optional[Union[str, GlobalAttrs.contenteditable, Literal['true', 'plaintext-only', 'false']]] = None,
        dir: Optional[Union[str, GlobalAttrs.dir, Literal['ltr', 'rtl', 'auto']]] = None,
        draggable: Optional[Union[str, GlobalAttrs.draggable, Literal['true', 'false']]] = None,
        enterkeyhint: Optional[Union[str, GlobalAttrs.enterkeyhint, Literal['enter', 'done', 'go', 'next', 'previous', 'search', 'send']]] = None,
        hidden: Optional[Union[str, GlobalAttrs.hidden, Literal['until-found', 'hidden', '']]] = None,
        inert: Optional[Union[str, GlobalAttrs.inert, bool]] = None,
        inputmode: Optional[Union[str, GlobalAttrs.inputmode, Literal['none', 'text', 'tel', 'email', 'url', 'numeric', 'decimal', 'search']]] = None,
        is_: Optional[Union[str, GlobalAttrs.is_]] = None,
        itemid: Optional[Union[str, GlobalAttrs.itemid]] = None,
        itemprop: Optional[Union[str, GlobalAttrs.itemprop]] = None,
        itemref: Optional[Union[str, GlobalAttrs.itemref]] = None,
        itemscope: Optional[Union[str, GlobalAttrs.itemscope, bool]] = None,
        itemtype: Optional[Union[str, GlobalAttrs.itemtype]] = None,
        lang: Optional[Union[str, GlobalAttrs.lang]] = None,
        nonce: Optional[Union[str, GlobalAttrs.nonce]] = None,
        popover: Optional[Union[str, GlobalAttrs.popover, Literal['auto', 'manual']]] = None,
        slot: Optional[Union[str, GlobalAttrs.slot]] = None,
        spellcheck: Optional[Union[str, GlobalAttrs.spellcheck, Literal['true', 'false', '']]] = None,
        style: Optional[Union[str, GlobalAttrs.style]] = None,
        tabindex: Optional[Union[str, GlobalAttrs.tabindex, int]] = None,
        title: Optional[Union[str, GlobalAttrs.title]] = None,
        translate: Optional[Union[str, GlobalAttrs.translate, Literal['yes', 'no']]] = None,
        writingsuggestions: Optional[Union[str, GlobalAttrs.writingsuggestions, Literal['true', 'false', '']]] = None,
        children: Optional[list] = None
    ) -> None:
        """
        Initialize 'meter' (Gauge) element.  
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meter

        :param attrs: A list or dictionary of attributes for the element
        :param id: The element's ID
        :param class_: Classes to which the element belongs
            | Set of space-separated tokens
        :param high: Low limit of high range
        :param low: High limit of low range
        :param max: Upper bound of range
        :param min: Lower bound of range
        :param optimum: Optimum value in gauge
        :param value: Current value of the element
        :param accesskey: Keyboard shortcut to activate or focus element
            | Ordered set of unique space-separated tokens, none of which are identical to another, each consisting of one code point in length
        :param autocapitalize: Recommended autocapitalization behavior (for supported input methods)
        :param autocorrect: Recommended autocorrection behavior (for supported input methods)
        :param autofocus: Automatically focus the element when the page is loaded
        :param contenteditable: Whether the element is editable
        :param dir: The text directionality of the element
        :param draggable: Whether the element is draggable
        :param enterkeyhint: Hint for selecting an enter key action
        :param hidden: Whether the element is relevant
        :param inert: Whether the element is inert.
        :param inputmode: Hint for selecting an input modality
        :param is_: Creates a customized built-in element
            | Valid custom element name of a defined customized built-in element
        :param itemid: Global identifier for a microdata item
            | Valid URL potentially surrounded by spaces
        :param itemprop: Property names of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs, defined property names, or text*
        :param itemref: Referenced elements
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param itemscope: Introduces a microdata item
        :param itemtype: Item types of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs*
        :param lang: Language of the element
            | Valid BCP 47 language tag or the empty string
        :param nonce: Cryptographic nonce used in Content Security Policy checks [CSP]
        :param popover: Makes the element a popover element
        :param slot: The element's desired slot
        :param spellcheck: Whether the element is to have its spelling and grammar checked
        :param style: Presentational and formatting instructions
            | CSS declarations*
        :param tabindex: Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation
        :param title: Advisory information for the element
        :param translate: Whether the element is to be translated when the page is localized
        :param writingsuggestions: Whether the element can offer writing suggestions or not.
        """ #fmt: skip
        super().__init__(
            "meter",
            void_element=False,
            attrs=attrs,
            children=children
        )
        if not (id is None or id is False):
            self._process_attr("id", id)
        if not (class_ is None or class_ is False):
            self._process_attr("class", class_)
        if not (high is None or high is False):
            self._process_attr("high", high)
        if not (low is None or low is False):
            self._process_attr("low", low)
        if not (max is None or max is False):
            self._process_attr("max", max)
        if not (min is None or min is False):
            self._process_attr("min", min)
        if not (optimum is None or optimum is False):
            self._process_attr("optimum", optimum)
        if not (value is None or value is False):
            self._process_attr("value", value)
        if not (accesskey is None or accesskey is False):
            self._process_attr("accesskey", accesskey)
        if not (autocapitalize is None or autocapitalize is False):
            self._process_attr("autocapitalize", autocapitalize)
        if not (autocorrect is None or autocorrect is False):
            self._process_attr("autocorrect", autocorrect)
        if not (autofocus is None or autofocus is False):
            self._process_attr("autofocus", autofocus)
        if not (contenteditable is None or contenteditable is False):
            self._process_attr("contenteditable", contenteditable)
        if not (dir is None or dir is False):
            self._process_attr("dir", dir)
        if not (draggable is None or draggable is False):
            self._process_attr("draggable", draggable)
        if not (enterkeyhint is None or enterkeyhint is False):
            self._process_attr("enterkeyhint", enterkeyhint)
        if not (hidden is None or hidden is False):
            self._process_attr("hidden", hidden)
        if not (inert is None or inert is False):
            self._process_attr("inert", inert)
        if not (inputmode is None or inputmode is False):
            self._process_attr("inputmode", inputmode)
        if not (is_ is None or is_ is False):
            self._process_attr("is", is_)
        if not (itemid is None or itemid is False):
            self._process_attr("itemid", itemid)
        if not (itemprop is None or itemprop is False):
            self._process_attr("itemprop", itemprop)
        if not (itemref is None or itemref is False):
            self._process_attr("itemref", itemref)
        if not (itemscope is None or itemscope is False):
            self._process_attr("itemscope", itemscope)
        if not (itemtype is None or itemtype is False):
            self._process_attr("itemtype", itemtype)
        if not (lang is None or lang is False):
            self._process_attr("lang", lang)
        if not (nonce is None or nonce is False):
            self._process_attr("nonce", nonce)
        if not (popover is None or popover is False):
            self._process_attr("popover", popover)
        if not (slot is None or slot is False):
            self._process_attr("slot", slot)
        if not (spellcheck is None or spellcheck is False):
            self._process_attr("spellcheck", spellcheck)
        if not (style is None or style is False):
            self._process_attr("style", style)
        if not (tabindex is None or tabindex is False):
            self._process_attr("tabindex", tabindex)
        if not (title is None or title is False):
            self._process_attr("title", title)
        if not (translate is None or translate is False):
            self._process_attr("translate", translate)
        if not (writingsuggestions is None or writingsuggestions is False):
            self._process_attr("writingsuggestions", writingsuggestions)


class nav(BaseElement, GlobalAttrs):
    """
    The 'nav' element.  
    Description: Section with navigational links  
    Categories: flow sectioning palpable  
    Parents: flow  
    Children: flow  
    Interface: HTMLElement  
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/nav  
    """ # fmt: skip


    def __init__(
        self,
        attrs: Optional[Union[dict[str, Union[str, dict, list]], list[BaseAttribute]]] = None,
        id: Optional[Union[str, GlobalAttrs.id]] = None,
        class_: Optional[Union[str, GlobalAttrs.class_]] = None,
        accesskey: Optional[Union[str, GlobalAttrs.accesskey]] = None,
        autocapitalize: Optional[Union[str, GlobalAttrs.autocapitalize, Literal['on', 'off', 'none', 'sentences', 'words', 'characters']]] = None,
        autocorrect: Optional[Union[str, GlobalAttrs.autocorrect, Literal['on', 'off']]] = None,
        autofocus: Optional[Union[str, GlobalAttrs.autofocus, bool]] = None,
        contenteditable: Optional[Union[str, GlobalAttrs.contenteditable, Literal['true', 'plaintext-only', 'false']]] = None,
        dir: Optional[Union[str, GlobalAttrs.dir, Literal['ltr', 'rtl', 'auto']]] = None,
        draggable: Optional[Union[str, GlobalAttrs.draggable, Literal['true', 'false']]] = None,
        enterkeyhint: Optional[Union[str, GlobalAttrs.enterkeyhint, Literal['enter', 'done', 'go', 'next', 'previous', 'search', 'send']]] = None,
        hidden: Optional[Union[str, GlobalAttrs.hidden, Literal['until-found', 'hidden', '']]] = None,
        inert: Optional[Union[str, GlobalAttrs.inert, bool]] = None,
        inputmode: Optional[Union[str, GlobalAttrs.inputmode, Literal['none', 'text', 'tel', 'email', 'url', 'numeric', 'decimal', 'search']]] = None,
        is_: Optional[Union[str, GlobalAttrs.is_]] = None,
        itemid: Optional[Union[str, GlobalAttrs.itemid]] = None,
        itemprop: Optional[Union[str, GlobalAttrs.itemprop]] = None,
        itemref: Optional[Union[str, GlobalAttrs.itemref]] = None,
        itemscope: Optional[Union[str, GlobalAttrs.itemscope, bool]] = None,
        itemtype: Optional[Union[str, GlobalAttrs.itemtype]] = None,
        lang: Optional[Union[str, GlobalAttrs.lang]] = None,
        nonce: Optional[Union[str, GlobalAttrs.nonce]] = None,
        popover: Optional[Union[str, GlobalAttrs.popover, Literal['auto', 'manual']]] = None,
        slot: Optional[Union[str, GlobalAttrs.slot]] = None,
        spellcheck: Optional[Union[str, GlobalAttrs.spellcheck, Literal['true', 'false', '']]] = None,
        style: Optional[Union[str, GlobalAttrs.style]] = None,
        tabindex: Optional[Union[str, GlobalAttrs.tabindex, int]] = None,
        title: Optional[Union[str, GlobalAttrs.title]] = None,
        translate: Optional[Union[str, GlobalAttrs.translate, Literal['yes', 'no']]] = None,
        writingsuggestions: Optional[Union[str, GlobalAttrs.writingsuggestions, Literal['true', 'false', '']]] = None,
        children: Optional[list] = None
    ) -> None:
        """
        Initialize 'nav' (Section with navigational links) element.  
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/nav

        :param attrs: A list or dictionary of attributes for the element
        :param id: The element's ID
        :param class_: Classes to which the element belongs
            | Set of space-separated tokens
        :param accesskey: Keyboard shortcut to activate or focus element
            | Ordered set of unique space-separated tokens, none of which are identical to another, each consisting of one code point in length
        :param autocapitalize: Recommended autocapitalization behavior (for supported input methods)
        :param autocorrect: Recommended autocorrection behavior (for supported input methods)
        :param autofocus: Automatically focus the element when the page is loaded
        :param contenteditable: Whether the element is editable
        :param dir: The text directionality of the element
        :param draggable: Whether the element is draggable
        :param enterkeyhint: Hint for selecting an enter key action
        :param hidden: Whether the element is relevant
        :param inert: Whether the element is inert.
        :param inputmode: Hint for selecting an input modality
        :param is_: Creates a customized built-in element
            | Valid custom element name of a defined customized built-in element
        :param itemid: Global identifier for a microdata item
            | Valid URL potentially surrounded by spaces
        :param itemprop: Property names of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs, defined property names, or text*
        :param itemref: Referenced elements
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param itemscope: Introduces a microdata item
        :param itemtype: Item types of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs*
        :param lang: Language of the element
            | Valid BCP 47 language tag or the empty string
        :param nonce: Cryptographic nonce used in Content Security Policy checks [CSP]
        :param popover: Makes the element a popover element
        :param slot: The element's desired slot
        :param spellcheck: Whether the element is to have its spelling and grammar checked
        :param style: Presentational and formatting instructions
            | CSS declarations*
        :param tabindex: Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation
        :param title: Advisory information for the element
        :param translate: Whether the element is to be translated when the page is localized
        :param writingsuggestions: Whether the element can offer writing suggestions or not.
        """ #fmt: skip
        super().__init__(
            "nav",
            void_element=False,
            attrs=attrs,
            children=children
        )
        if not (id is None or id is False):
            self._process_attr("id", id)
        if not (class_ is None or class_ is False):
            self._process_attr("class", class_)
        if not (accesskey is None or accesskey is False):
            self._process_attr("accesskey", accesskey)
        if not (autocapitalize is None or autocapitalize is False):
            self._process_attr("autocapitalize", autocapitalize)
        if not (autocorrect is None or autocorrect is False):
            self._process_attr("autocorrect", autocorrect)
        if not (autofocus is None or autofocus is False):
            self._process_attr("autofocus", autofocus)
        if not (contenteditable is None or contenteditable is False):
            self._process_attr("contenteditable", contenteditable)
        if not (dir is None or dir is False):
            self._process_attr("dir", dir)
        if not (draggable is None or draggable is False):
            self._process_attr("draggable", draggable)
        if not (enterkeyhint is None or enterkeyhint is False):
            self._process_attr("enterkeyhint", enterkeyhint)
        if not (hidden is None or hidden is False):
            self._process_attr("hidden", hidden)
        if not (inert is None or inert is False):
            self._process_attr("inert", inert)
        if not (inputmode is None or inputmode is False):
            self._process_attr("inputmode", inputmode)
        if not (is_ is None or is_ is False):
            self._process_attr("is", is_)
        if not (itemid is None or itemid is False):
            self._process_attr("itemid", itemid)
        if not (itemprop is None or itemprop is False):
            self._process_attr("itemprop", itemprop)
        if not (itemref is None or itemref is False):
            self._process_attr("itemref", itemref)
        if not (itemscope is None or itemscope is False):
            self._process_attr("itemscope", itemscope)
        if not (itemtype is None or itemtype is False):
            self._process_attr("itemtype", itemtype)
        if not (lang is None or lang is False):
            self._process_attr("lang", lang)
        if not (nonce is None or nonce is False):
            self._process_attr("nonce", nonce)
        if not (popover is None or popover is False):
            self._process_attr("popover", popover)
        if not (slot is None or slot is False):
            self._process_attr("slot", slot)
        if not (spellcheck is None or spellcheck is False):
            self._process_attr("spellcheck", spellcheck)
        if not (style is None or style is False):
            self._process_attr("style", style)
        if not (tabindex is None or tabindex is False):
            self._process_attr("tabindex", tabindex)
        if not (title is None or title is False):
            self._process_attr("title", title)
        if not (translate is None or translate is False):
            self._process_attr("translate", translate)
        if not (writingsuggestions is None or writingsuggestions is False):
            self._process_attr("writingsuggestions", writingsuggestions)


class noscript(BaseElement, GlobalAttrs):
    """
    The 'noscript' element.  
    Description: Fallback content for script  
    Categories: metadata flow phrasing  
    Parents: head* phrasing*  
    Children: varies*  
    Interface: HTMLElement  
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/noscript  
    """ # fmt: skip


    def __init__(
        self,
        attrs: Optional[Union[dict[str, Union[str, dict, list]], list[BaseAttribute]]] = None,
        id: Optional[Union[str, GlobalAttrs.id]] = None,
        class_: Optional[Union[str, GlobalAttrs.class_]] = None,
        accesskey: Optional[Union[str, GlobalAttrs.accesskey]] = None,
        autocapitalize: Optional[Union[str, GlobalAttrs.autocapitalize, Literal['on', 'off', 'none', 'sentences', 'words', 'characters']]] = None,
        autocorrect: Optional[Union[str, GlobalAttrs.autocorrect, Literal['on', 'off']]] = None,
        autofocus: Optional[Union[str, GlobalAttrs.autofocus, bool]] = None,
        contenteditable: Optional[Union[str, GlobalAttrs.contenteditable, Literal['true', 'plaintext-only', 'false']]] = None,
        dir: Optional[Union[str, GlobalAttrs.dir, Literal['ltr', 'rtl', 'auto']]] = None,
        draggable: Optional[Union[str, GlobalAttrs.draggable, Literal['true', 'false']]] = None,
        enterkeyhint: Optional[Union[str, GlobalAttrs.enterkeyhint, Literal['enter', 'done', 'go', 'next', 'previous', 'search', 'send']]] = None,
        hidden: Optional[Union[str, GlobalAttrs.hidden, Literal['until-found', 'hidden', '']]] = None,
        inert: Optional[Union[str, GlobalAttrs.inert, bool]] = None,
        inputmode: Optional[Union[str, GlobalAttrs.inputmode, Literal['none', 'text', 'tel', 'email', 'url', 'numeric', 'decimal', 'search']]] = None,
        is_: Optional[Union[str, GlobalAttrs.is_]] = None,
        itemid: Optional[Union[str, GlobalAttrs.itemid]] = None,
        itemprop: Optional[Union[str, GlobalAttrs.itemprop]] = None,
        itemref: Optional[Union[str, GlobalAttrs.itemref]] = None,
        itemscope: Optional[Union[str, GlobalAttrs.itemscope, bool]] = None,
        itemtype: Optional[Union[str, GlobalAttrs.itemtype]] = None,
        lang: Optional[Union[str, GlobalAttrs.lang]] = None,
        nonce: Optional[Union[str, GlobalAttrs.nonce]] = None,
        popover: Optional[Union[str, GlobalAttrs.popover, Literal['auto', 'manual']]] = None,
        slot: Optional[Union[str, GlobalAttrs.slot]] = None,
        spellcheck: Optional[Union[str, GlobalAttrs.spellcheck, Literal['true', 'false', '']]] = None,
        style: Optional[Union[str, GlobalAttrs.style]] = None,
        tabindex: Optional[Union[str, GlobalAttrs.tabindex, int]] = None,
        title: Optional[Union[str, GlobalAttrs.title]] = None,
        translate: Optional[Union[str, GlobalAttrs.translate, Literal['yes', 'no']]] = None,
        writingsuggestions: Optional[Union[str, GlobalAttrs.writingsuggestions, Literal['true', 'false', '']]] = None,
        children: Optional[list] = None
    ) -> None:
        """
        Initialize 'noscript' (Fallback content for script) element.  
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/noscript

        :param attrs: A list or dictionary of attributes for the element
        :param id: The element's ID
        :param class_: Classes to which the element belongs
            | Set of space-separated tokens
        :param accesskey: Keyboard shortcut to activate or focus element
            | Ordered set of unique space-separated tokens, none of which are identical to another, each consisting of one code point in length
        :param autocapitalize: Recommended autocapitalization behavior (for supported input methods)
        :param autocorrect: Recommended autocorrection behavior (for supported input methods)
        :param autofocus: Automatically focus the element when the page is loaded
        :param contenteditable: Whether the element is editable
        :param dir: The text directionality of the element
        :param draggable: Whether the element is draggable
        :param enterkeyhint: Hint for selecting an enter key action
        :param hidden: Whether the element is relevant
        :param inert: Whether the element is inert.
        :param inputmode: Hint for selecting an input modality
        :param is_: Creates a customized built-in element
            | Valid custom element name of a defined customized built-in element
        :param itemid: Global identifier for a microdata item
            | Valid URL potentially surrounded by spaces
        :param itemprop: Property names of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs, defined property names, or text*
        :param itemref: Referenced elements
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param itemscope: Introduces a microdata item
        :param itemtype: Item types of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs*
        :param lang: Language of the element
            | Valid BCP 47 language tag or the empty string
        :param nonce: Cryptographic nonce used in Content Security Policy checks [CSP]
        :param popover: Makes the element a popover element
        :param slot: The element's desired slot
        :param spellcheck: Whether the element is to have its spelling and grammar checked
        :param style: Presentational and formatting instructions
            | CSS declarations*
        :param tabindex: Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation
        :param title: Advisory information for the element
        :param translate: Whether the element is to be translated when the page is localized
        :param writingsuggestions: Whether the element can offer writing suggestions or not.
        """ #fmt: skip
        super().__init__(
            "noscript",
            void_element=False,
            attrs=attrs,
            children=children
        )
        if not (id is None or id is False):
            self._process_attr("id", id)
        if not (class_ is None or class_ is False):
            self._process_attr("class", class_)
        if not (accesskey is None or accesskey is False):
            self._process_attr("accesskey", accesskey)
        if not (autocapitalize is None or autocapitalize is False):
            self._process_attr("autocapitalize", autocapitalize)
        if not (autocorrect is None or autocorrect is False):
            self._process_attr("autocorrect", autocorrect)
        if not (autofocus is None or autofocus is False):
            self._process_attr("autofocus", autofocus)
        if not (contenteditable is None or contenteditable is False):
            self._process_attr("contenteditable", contenteditable)
        if not (dir is None or dir is False):
            self._process_attr("dir", dir)
        if not (draggable is None or draggable is False):
            self._process_attr("draggable", draggable)
        if not (enterkeyhint is None or enterkeyhint is False):
            self._process_attr("enterkeyhint", enterkeyhint)
        if not (hidden is None or hidden is False):
            self._process_attr("hidden", hidden)
        if not (inert is None or inert is False):
            self._process_attr("inert", inert)
        if not (inputmode is None or inputmode is False):
            self._process_attr("inputmode", inputmode)
        if not (is_ is None or is_ is False):
            self._process_attr("is", is_)
        if not (itemid is None or itemid is False):
            self._process_attr("itemid", itemid)
        if not (itemprop is None or itemprop is False):
            self._process_attr("itemprop", itemprop)
        if not (itemref is None or itemref is False):
            self._process_attr("itemref", itemref)
        if not (itemscope is None or itemscope is False):
            self._process_attr("itemscope", itemscope)
        if not (itemtype is None or itemtype is False):
            self._process_attr("itemtype", itemtype)
        if not (lang is None or lang is False):
            self._process_attr("lang", lang)
        if not (nonce is None or nonce is False):
            self._process_attr("nonce", nonce)
        if not (popover is None or popover is False):
            self._process_attr("popover", popover)
        if not (slot is None or slot is False):
            self._process_attr("slot", slot)
        if not (spellcheck is None or spellcheck is False):
            self._process_attr("spellcheck", spellcheck)
        if not (style is None or style is False):
            self._process_attr("style", style)
        if not (tabindex is None or tabindex is False):
            self._process_attr("tabindex", tabindex)
        if not (title is None or title is False):
            self._process_attr("title", title)
        if not (translate is None or translate is False):
            self._process_attr("translate", translate)
        if not (writingsuggestions is None or writingsuggestions is False):
            self._process_attr("writingsuggestions", writingsuggestions)


class object(BaseElement, GlobalAttrs, ObjectAttrs):
    """
    The 'object' element.  
    Description: Image, child navigable, or plugin  
    Categories: flow phrasing embedded interactive* listed form-associated palpable  
    Parents: phrasing  
    Children: transparent  
    Interface: HTMLObjectElement  
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/object  
    """ # fmt: skip


    def __init__(
        self,
        attrs: Optional[Union[dict[str, Union[str, dict, list]], list[BaseAttribute]]] = None,
        id: Optional[Union[str, GlobalAttrs.id]] = None,
        class_: Optional[Union[str, GlobalAttrs.class_]] = None,
        data: Optional[Union[str, ObjectAttrs.data]] = None,
        form: Optional[Union[str, ObjectAttrs.form]] = None,
        height: Optional[Union[str, ObjectAttrs.height, int]] = None,
        name: Optional[Union[str, ObjectAttrs.name]] = None,
        type: Optional[Union[str, ObjectAttrs.type]] = None,
        width: Optional[Union[str, ObjectAttrs.width, int]] = None,
        accesskey: Optional[Union[str, GlobalAttrs.accesskey]] = None,
        autocapitalize: Optional[Union[str, GlobalAttrs.autocapitalize, Literal['on', 'off', 'none', 'sentences', 'words', 'characters']]] = None,
        autocorrect: Optional[Union[str, GlobalAttrs.autocorrect, Literal['on', 'off']]] = None,
        autofocus: Optional[Union[str, GlobalAttrs.autofocus, bool]] = None,
        contenteditable: Optional[Union[str, GlobalAttrs.contenteditable, Literal['true', 'plaintext-only', 'false']]] = None,
        dir: Optional[Union[str, GlobalAttrs.dir, Literal['ltr', 'rtl', 'auto']]] = None,
        draggable: Optional[Union[str, GlobalAttrs.draggable, Literal['true', 'false']]] = None,
        enterkeyhint: Optional[Union[str, GlobalAttrs.enterkeyhint, Literal['enter', 'done', 'go', 'next', 'previous', 'search', 'send']]] = None,
        hidden: Optional[Union[str, GlobalAttrs.hidden, Literal['until-found', 'hidden', '']]] = None,
        inert: Optional[Union[str, GlobalAttrs.inert, bool]] = None,
        inputmode: Optional[Union[str, GlobalAttrs.inputmode, Literal['none', 'text', 'tel', 'email', 'url', 'numeric', 'decimal', 'search']]] = None,
        is_: Optional[Union[str, GlobalAttrs.is_]] = None,
        itemid: Optional[Union[str, GlobalAttrs.itemid]] = None,
        itemprop: Optional[Union[str, GlobalAttrs.itemprop]] = None,
        itemref: Optional[Union[str, GlobalAttrs.itemref]] = None,
        itemscope: Optional[Union[str, GlobalAttrs.itemscope, bool]] = None,
        itemtype: Optional[Union[str, GlobalAttrs.itemtype]] = None,
        lang: Optional[Union[str, GlobalAttrs.lang]] = None,
        nonce: Optional[Union[str, GlobalAttrs.nonce]] = None,
        popover: Optional[Union[str, GlobalAttrs.popover, Literal['auto', 'manual']]] = None,
        slot: Optional[Union[str, GlobalAttrs.slot]] = None,
        spellcheck: Optional[Union[str, GlobalAttrs.spellcheck, Literal['true', 'false', '']]] = None,
        style: Optional[Union[str, GlobalAttrs.style]] = None,
        tabindex: Optional[Union[str, GlobalAttrs.tabindex, int]] = None,
        title: Optional[Union[str, GlobalAttrs.title]] = None,
        translate: Optional[Union[str, GlobalAttrs.translate, Literal['yes', 'no']]] = None,
        writingsuggestions: Optional[Union[str, GlobalAttrs.writingsuggestions, Literal['true', 'false', '']]] = None,
        children: Optional[list] = None
    ) -> None:
        """
        Initialize 'object' (Image, child navigable, or plugin) element.  
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/object

        :param attrs: A list or dictionary of attributes for the element
        :param id: The element's ID
        :param class_: Classes to which the element belongs
            | Set of space-separated tokens
        :param data: Address of the resource
            | Valid non-empty URL potentially surrounded by spaces
        :param form: Associates the element with a form element
            | ID*
        :param height: Vertical dimension
        :param name: Name of content navigable
            | Valid navigable target name or keyword
        :param type: Type of embedded resource
            | Valid MIME type string
        :param width: Horizontal dimension
        :param accesskey: Keyboard shortcut to activate or focus element
            | Ordered set of unique space-separated tokens, none of which are identical to another, each consisting of one code point in length
        :param autocapitalize: Recommended autocapitalization behavior (for supported input methods)
        :param autocorrect: Recommended autocorrection behavior (for supported input methods)
        :param autofocus: Automatically focus the element when the page is loaded
        :param contenteditable: Whether the element is editable
        :param dir: The text directionality of the element
        :param draggable: Whether the element is draggable
        :param enterkeyhint: Hint for selecting an enter key action
        :param hidden: Whether the element is relevant
        :param inert: Whether the element is inert.
        :param inputmode: Hint for selecting an input modality
        :param is_: Creates a customized built-in element
            | Valid custom element name of a defined customized built-in element
        :param itemid: Global identifier for a microdata item
            | Valid URL potentially surrounded by spaces
        :param itemprop: Property names of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs, defined property names, or text*
        :param itemref: Referenced elements
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param itemscope: Introduces a microdata item
        :param itemtype: Item types of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs*
        :param lang: Language of the element
            | Valid BCP 47 language tag or the empty string
        :param nonce: Cryptographic nonce used in Content Security Policy checks [CSP]
        :param popover: Makes the element a popover element
        :param slot: The element's desired slot
        :param spellcheck: Whether the element is to have its spelling and grammar checked
        :param style: Presentational and formatting instructions
            | CSS declarations*
        :param tabindex: Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation
        :param title: Advisory information for the element
        :param translate: Whether the element is to be translated when the page is localized
        :param writingsuggestions: Whether the element can offer writing suggestions or not.
        """ #fmt: skip
        super().__init__(
            "object",
            void_element=False,
            attrs=attrs,
            children=children
        )
        if not (id is None or id is False):
            self._process_attr("id", id)
        if not (class_ is None or class_ is False):
            self._process_attr("class", class_)
        if not (data is None or data is False):
            self._process_attr("data", data)
        if not (form is None or form is False):
            self._process_attr("form", form)
        if not (height is None or height is False):
            self._process_attr("height", height)
        if not (name is None or name is False):
            self._process_attr("name", name)
        if not (type is None or type is False):
            self._process_attr("type", type)
        if not (width is None or width is False):
            self._process_attr("width", width)
        if not (accesskey is None or accesskey is False):
            self._process_attr("accesskey", accesskey)
        if not (autocapitalize is None or autocapitalize is False):
            self._process_attr("autocapitalize", autocapitalize)
        if not (autocorrect is None or autocorrect is False):
            self._process_attr("autocorrect", autocorrect)
        if not (autofocus is None or autofocus is False):
            self._process_attr("autofocus", autofocus)
        if not (contenteditable is None or contenteditable is False):
            self._process_attr("contenteditable", contenteditable)
        if not (dir is None or dir is False):
            self._process_attr("dir", dir)
        if not (draggable is None or draggable is False):
            self._process_attr("draggable", draggable)
        if not (enterkeyhint is None or enterkeyhint is False):
            self._process_attr("enterkeyhint", enterkeyhint)
        if not (hidden is None or hidden is False):
            self._process_attr("hidden", hidden)
        if not (inert is None or inert is False):
            self._process_attr("inert", inert)
        if not (inputmode is None or inputmode is False):
            self._process_attr("inputmode", inputmode)
        if not (is_ is None or is_ is False):
            self._process_attr("is", is_)
        if not (itemid is None or itemid is False):
            self._process_attr("itemid", itemid)
        if not (itemprop is None or itemprop is False):
            self._process_attr("itemprop", itemprop)
        if not (itemref is None or itemref is False):
            self._process_attr("itemref", itemref)
        if not (itemscope is None or itemscope is False):
            self._process_attr("itemscope", itemscope)
        if not (itemtype is None or itemtype is False):
            self._process_attr("itemtype", itemtype)
        if not (lang is None or lang is False):
            self._process_attr("lang", lang)
        if not (nonce is None or nonce is False):
            self._process_attr("nonce", nonce)
        if not (popover is None or popover is False):
            self._process_attr("popover", popover)
        if not (slot is None or slot is False):
            self._process_attr("slot", slot)
        if not (spellcheck is None or spellcheck is False):
            self._process_attr("spellcheck", spellcheck)
        if not (style is None or style is False):
            self._process_attr("style", style)
        if not (tabindex is None or tabindex is False):
            self._process_attr("tabindex", tabindex)
        if not (title is None or title is False):
            self._process_attr("title", title)
        if not (translate is None or translate is False):
            self._process_attr("translate", translate)
        if not (writingsuggestions is None or writingsuggestions is False):
            self._process_attr("writingsuggestions", writingsuggestions)


class ol(BaseElement, GlobalAttrs, OlAttrs):
    """
    The 'ol' element.  
    Description: Ordered list  
    Categories: flow palpable*  
    Parents: flow  
    Children: li script-supporting elements  
    Interface: HTMLOListElement  
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ol  
    """ # fmt: skip


    def __init__(
        self,
        attrs: Optional[Union[dict[str, Union[str, dict, list]], list[BaseAttribute]]] = None,
        id: Optional[Union[str, GlobalAttrs.id]] = None,
        class_: Optional[Union[str, GlobalAttrs.class_]] = None,
        reversed: Optional[Union[str, OlAttrs.reversed, bool]] = None,
        start: Optional[Union[str, OlAttrs.start, int]] = None,
        type: Optional[Union[str, OlAttrs.type, Literal['1', 'a', 'A', 'i', 'I']]] = None,
        accesskey: Optional[Union[str, GlobalAttrs.accesskey]] = None,
        autocapitalize: Optional[Union[str, GlobalAttrs.autocapitalize, Literal['on', 'off', 'none', 'sentences', 'words', 'characters']]] = None,
        autocorrect: Optional[Union[str, GlobalAttrs.autocorrect, Literal['on', 'off']]] = None,
        autofocus: Optional[Union[str, GlobalAttrs.autofocus, bool]] = None,
        contenteditable: Optional[Union[str, GlobalAttrs.contenteditable, Literal['true', 'plaintext-only', 'false']]] = None,
        dir: Optional[Union[str, GlobalAttrs.dir, Literal['ltr', 'rtl', 'auto']]] = None,
        draggable: Optional[Union[str, GlobalAttrs.draggable, Literal['true', 'false']]] = None,
        enterkeyhint: Optional[Union[str, GlobalAttrs.enterkeyhint, Literal['enter', 'done', 'go', 'next', 'previous', 'search', 'send']]] = None,
        hidden: Optional[Union[str, GlobalAttrs.hidden, Literal['until-found', 'hidden', '']]] = None,
        inert: Optional[Union[str, GlobalAttrs.inert, bool]] = None,
        inputmode: Optional[Union[str, GlobalAttrs.inputmode, Literal['none', 'text', 'tel', 'email', 'url', 'numeric', 'decimal', 'search']]] = None,
        is_: Optional[Union[str, GlobalAttrs.is_]] = None,
        itemid: Optional[Union[str, GlobalAttrs.itemid]] = None,
        itemprop: Optional[Union[str, GlobalAttrs.itemprop]] = None,
        itemref: Optional[Union[str, GlobalAttrs.itemref]] = None,
        itemscope: Optional[Union[str, GlobalAttrs.itemscope, bool]] = None,
        itemtype: Optional[Union[str, GlobalAttrs.itemtype]] = None,
        lang: Optional[Union[str, GlobalAttrs.lang]] = None,
        nonce: Optional[Union[str, GlobalAttrs.nonce]] = None,
        popover: Optional[Union[str, GlobalAttrs.popover, Literal['auto', 'manual']]] = None,
        slot: Optional[Union[str, GlobalAttrs.slot]] = None,
        spellcheck: Optional[Union[str, GlobalAttrs.spellcheck, Literal['true', 'false', '']]] = None,
        style: Optional[Union[str, GlobalAttrs.style]] = None,
        tabindex: Optional[Union[str, GlobalAttrs.tabindex, int]] = None,
        title: Optional[Union[str, GlobalAttrs.title]] = None,
        translate: Optional[Union[str, GlobalAttrs.translate, Literal['yes', 'no']]] = None,
        writingsuggestions: Optional[Union[str, GlobalAttrs.writingsuggestions, Literal['true', 'false', '']]] = None,
        children: Optional[list] = None
    ) -> None:
        """
        Initialize 'ol' (Ordered list) element.  
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ol

        :param attrs: A list or dictionary of attributes for the element
        :param id: The element's ID
        :param class_: Classes to which the element belongs
            | Set of space-separated tokens
        :param reversed: Number the list backwards
        :param start: Starting value of the list
        :param type: Kind of list marker
        :param accesskey: Keyboard shortcut to activate or focus element
            | Ordered set of unique space-separated tokens, none of which are identical to another, each consisting of one code point in length
        :param autocapitalize: Recommended autocapitalization behavior (for supported input methods)
        :param autocorrect: Recommended autocorrection behavior (for supported input methods)
        :param autofocus: Automatically focus the element when the page is loaded
        :param contenteditable: Whether the element is editable
        :param dir: The text directionality of the element
        :param draggable: Whether the element is draggable
        :param enterkeyhint: Hint for selecting an enter key action
        :param hidden: Whether the element is relevant
        :param inert: Whether the element is inert.
        :param inputmode: Hint for selecting an input modality
        :param is_: Creates a customized built-in element
            | Valid custom element name of a defined customized built-in element
        :param itemid: Global identifier for a microdata item
            | Valid URL potentially surrounded by spaces
        :param itemprop: Property names of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs, defined property names, or text*
        :param itemref: Referenced elements
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param itemscope: Introduces a microdata item
        :param itemtype: Item types of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs*
        :param lang: Language of the element
            | Valid BCP 47 language tag or the empty string
        :param nonce: Cryptographic nonce used in Content Security Policy checks [CSP]
        :param popover: Makes the element a popover element
        :param slot: The element's desired slot
        :param spellcheck: Whether the element is to have its spelling and grammar checked
        :param style: Presentational and formatting instructions
            | CSS declarations*
        :param tabindex: Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation
        :param title: Advisory information for the element
        :param translate: Whether the element is to be translated when the page is localized
        :param writingsuggestions: Whether the element can offer writing suggestions or not.
        """ #fmt: skip
        super().__init__(
            "ol",
            void_element=False,
            attrs=attrs,
            children=children
        )
        if not (id is None or id is False):
            self._process_attr("id", id)
        if not (class_ is None or class_ is False):
            self._process_attr("class", class_)
        if not (reversed is None or reversed is False):
            self._process_attr("reversed", reversed)
        if not (start is None or start is False):
            self._process_attr("start", start)
        if not (type is None or type is False):
            self._process_attr("type", type)
        if not (accesskey is None or accesskey is False):
            self._process_attr("accesskey", accesskey)
        if not (autocapitalize is None or autocapitalize is False):
            self._process_attr("autocapitalize", autocapitalize)
        if not (autocorrect is None or autocorrect is False):
            self._process_attr("autocorrect", autocorrect)
        if not (autofocus is None or autofocus is False):
            self._process_attr("autofocus", autofocus)
        if not (contenteditable is None or contenteditable is False):
            self._process_attr("contenteditable", contenteditable)
        if not (dir is None or dir is False):
            self._process_attr("dir", dir)
        if not (draggable is None or draggable is False):
            self._process_attr("draggable", draggable)
        if not (enterkeyhint is None or enterkeyhint is False):
            self._process_attr("enterkeyhint", enterkeyhint)
        if not (hidden is None or hidden is False):
            self._process_attr("hidden", hidden)
        if not (inert is None or inert is False):
            self._process_attr("inert", inert)
        if not (inputmode is None or inputmode is False):
            self._process_attr("inputmode", inputmode)
        if not (is_ is None or is_ is False):
            self._process_attr("is", is_)
        if not (itemid is None or itemid is False):
            self._process_attr("itemid", itemid)
        if not (itemprop is None or itemprop is False):
            self._process_attr("itemprop", itemprop)
        if not (itemref is None or itemref is False):
            self._process_attr("itemref", itemref)
        if not (itemscope is None or itemscope is False):
            self._process_attr("itemscope", itemscope)
        if not (itemtype is None or itemtype is False):
            self._process_attr("itemtype", itemtype)
        if not (lang is None or lang is False):
            self._process_attr("lang", lang)
        if not (nonce is None or nonce is False):
            self._process_attr("nonce", nonce)
        if not (popover is None or popover is False):
            self._process_attr("popover", popover)
        if not (slot is None or slot is False):
            self._process_attr("slot", slot)
        if not (spellcheck is None or spellcheck is False):
            self._process_attr("spellcheck", spellcheck)
        if not (style is None or style is False):
            self._process_attr("style", style)
        if not (tabindex is None or tabindex is False):
            self._process_attr("tabindex", tabindex)
        if not (title is None or title is False):
            self._process_attr("title", title)
        if not (translate is None or translate is False):
            self._process_attr("translate", translate)
        if not (writingsuggestions is None or writingsuggestions is False):
            self._process_attr("writingsuggestions", writingsuggestions)


class optgroup(BaseElement, GlobalAttrs, OptgroupAttrs):
    """
    The 'optgroup' element.  
    Description: Group of options in a list box  
    Categories: none  
    Parents: select  
    Children: option script-supporting elements  
    Interface: HTMLOptGroupElement  
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/optgroup  
    """ # fmt: skip


    def __init__(
        self,
        attrs: Optional[Union[dict[str, Union[str, dict, list]], list[BaseAttribute]]] = None,
        id: Optional[Union[str, GlobalAttrs.id]] = None,
        class_: Optional[Union[str, GlobalAttrs.class_]] = None,
        disabled: Optional[Union[str, OptgroupAttrs.disabled, bool]] = None,
        label: Optional[Union[str, OptgroupAttrs.label]] = None,
        accesskey: Optional[Union[str, GlobalAttrs.accesskey]] = None,
        autocapitalize: Optional[Union[str, GlobalAttrs.autocapitalize, Literal['on', 'off', 'none', 'sentences', 'words', 'characters']]] = None,
        autocorrect: Optional[Union[str, GlobalAttrs.autocorrect, Literal['on', 'off']]] = None,
        autofocus: Optional[Union[str, GlobalAttrs.autofocus, bool]] = None,
        contenteditable: Optional[Union[str, GlobalAttrs.contenteditable, Literal['true', 'plaintext-only', 'false']]] = None,
        dir: Optional[Union[str, GlobalAttrs.dir, Literal['ltr', 'rtl', 'auto']]] = None,
        draggable: Optional[Union[str, GlobalAttrs.draggable, Literal['true', 'false']]] = None,
        enterkeyhint: Optional[Union[str, GlobalAttrs.enterkeyhint, Literal['enter', 'done', 'go', 'next', 'previous', 'search', 'send']]] = None,
        hidden: Optional[Union[str, GlobalAttrs.hidden, Literal['until-found', 'hidden', '']]] = None,
        inert: Optional[Union[str, GlobalAttrs.inert, bool]] = None,
        inputmode: Optional[Union[str, GlobalAttrs.inputmode, Literal['none', 'text', 'tel', 'email', 'url', 'numeric', 'decimal', 'search']]] = None,
        is_: Optional[Union[str, GlobalAttrs.is_]] = None,
        itemid: Optional[Union[str, GlobalAttrs.itemid]] = None,
        itemprop: Optional[Union[str, GlobalAttrs.itemprop]] = None,
        itemref: Optional[Union[str, GlobalAttrs.itemref]] = None,
        itemscope: Optional[Union[str, GlobalAttrs.itemscope, bool]] = None,
        itemtype: Optional[Union[str, GlobalAttrs.itemtype]] = None,
        lang: Optional[Union[str, GlobalAttrs.lang]] = None,
        nonce: Optional[Union[str, GlobalAttrs.nonce]] = None,
        popover: Optional[Union[str, GlobalAttrs.popover, Literal['auto', 'manual']]] = None,
        slot: Optional[Union[str, GlobalAttrs.slot]] = None,
        spellcheck: Optional[Union[str, GlobalAttrs.spellcheck, Literal['true', 'false', '']]] = None,
        style: Optional[Union[str, GlobalAttrs.style]] = None,
        tabindex: Optional[Union[str, GlobalAttrs.tabindex, int]] = None,
        title: Optional[Union[str, GlobalAttrs.title]] = None,
        translate: Optional[Union[str, GlobalAttrs.translate, Literal['yes', 'no']]] = None,
        writingsuggestions: Optional[Union[str, GlobalAttrs.writingsuggestions, Literal['true', 'false', '']]] = None,
        children: Optional[list] = None
    ) -> None:
        """
        Initialize 'optgroup' (Group of options in a list box) element.  
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/optgroup

        :param attrs: A list or dictionary of attributes for the element
        :param id: The element's ID
        :param class_: Classes to which the element belongs
            | Set of space-separated tokens
        :param disabled: Whether the form control is disabled
        :param label: User-visible label
        :param accesskey: Keyboard shortcut to activate or focus element
            | Ordered set of unique space-separated tokens, none of which are identical to another, each consisting of one code point in length
        :param autocapitalize: Recommended autocapitalization behavior (for supported input methods)
        :param autocorrect: Recommended autocorrection behavior (for supported input methods)
        :param autofocus: Automatically focus the element when the page is loaded
        :param contenteditable: Whether the element is editable
        :param dir: The text directionality of the element
        :param draggable: Whether the element is draggable
        :param enterkeyhint: Hint for selecting an enter key action
        :param hidden: Whether the element is relevant
        :param inert: Whether the element is inert.
        :param inputmode: Hint for selecting an input modality
        :param is_: Creates a customized built-in element
            | Valid custom element name of a defined customized built-in element
        :param itemid: Global identifier for a microdata item
            | Valid URL potentially surrounded by spaces
        :param itemprop: Property names of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs, defined property names, or text*
        :param itemref: Referenced elements
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param itemscope: Introduces a microdata item
        :param itemtype: Item types of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs*
        :param lang: Language of the element
            | Valid BCP 47 language tag or the empty string
        :param nonce: Cryptographic nonce used in Content Security Policy checks [CSP]
        :param popover: Makes the element a popover element
        :param slot: The element's desired slot
        :param spellcheck: Whether the element is to have its spelling and grammar checked
        :param style: Presentational and formatting instructions
            | CSS declarations*
        :param tabindex: Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation
        :param title: Advisory information for the element
        :param translate: Whether the element is to be translated when the page is localized
        :param writingsuggestions: Whether the element can offer writing suggestions or not.
        """ #fmt: skip
        super().__init__(
            "optgroup",
            void_element=False,
            attrs=attrs,
            children=children
        )
        if not (id is None or id is False):
            self._process_attr("id", id)
        if not (class_ is None or class_ is False):
            self._process_attr("class", class_)
        if not (disabled is None or disabled is False):
            self._process_attr("disabled", disabled)
        if not (label is None or label is False):
            self._process_attr("label", label)
        if not (accesskey is None or accesskey is False):
            self._process_attr("accesskey", accesskey)
        if not (autocapitalize is None or autocapitalize is False):
            self._process_attr("autocapitalize", autocapitalize)
        if not (autocorrect is None or autocorrect is False):
            self._process_attr("autocorrect", autocorrect)
        if not (autofocus is None or autofocus is False):
            self._process_attr("autofocus", autofocus)
        if not (contenteditable is None or contenteditable is False):
            self._process_attr("contenteditable", contenteditable)
        if not (dir is None or dir is False):
            self._process_attr("dir", dir)
        if not (draggable is None or draggable is False):
            self._process_attr("draggable", draggable)
        if not (enterkeyhint is None or enterkeyhint is False):
            self._process_attr("enterkeyhint", enterkeyhint)
        if not (hidden is None or hidden is False):
            self._process_attr("hidden", hidden)
        if not (inert is None or inert is False):
            self._process_attr("inert", inert)
        if not (inputmode is None or inputmode is False):
            self._process_attr("inputmode", inputmode)
        if not (is_ is None or is_ is False):
            self._process_attr("is", is_)
        if not (itemid is None or itemid is False):
            self._process_attr("itemid", itemid)
        if not (itemprop is None or itemprop is False):
            self._process_attr("itemprop", itemprop)
        if not (itemref is None or itemref is False):
            self._process_attr("itemref", itemref)
        if not (itemscope is None or itemscope is False):
            self._process_attr("itemscope", itemscope)
        if not (itemtype is None or itemtype is False):
            self._process_attr("itemtype", itemtype)
        if not (lang is None or lang is False):
            self._process_attr("lang", lang)
        if not (nonce is None or nonce is False):
            self._process_attr("nonce", nonce)
        if not (popover is None or popover is False):
            self._process_attr("popover", popover)
        if not (slot is None or slot is False):
            self._process_attr("slot", slot)
        if not (spellcheck is None or spellcheck is False):
            self._process_attr("spellcheck", spellcheck)
        if not (style is None or style is False):
            self._process_attr("style", style)
        if not (tabindex is None or tabindex is False):
            self._process_attr("tabindex", tabindex)
        if not (title is None or title is False):
            self._process_attr("title", title)
        if not (translate is None or translate is False):
            self._process_attr("translate", translate)
        if not (writingsuggestions is None or writingsuggestions is False):
            self._process_attr("writingsuggestions", writingsuggestions)


class option(BaseElement, GlobalAttrs, OptionAttrs):
    """
    The 'option' element.  
    Description: Option in a list box or combo box control  
    Categories: none  
    Parents: select datalist optgroup  
    Children: text*  
    Interface: HTMLOptionElement  
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/option  
    """ # fmt: skip


    def __init__(
        self,
        attrs: Optional[Union[dict[str, Union[str, dict, list]], list[BaseAttribute]]] = None,
        id: Optional[Union[str, GlobalAttrs.id]] = None,
        class_: Optional[Union[str, GlobalAttrs.class_]] = None,
        disabled: Optional[Union[str, OptionAttrs.disabled, bool]] = None,
        label: Optional[Union[str, OptionAttrs.label]] = None,
        selected: Optional[Union[str, OptionAttrs.selected, bool]] = None,
        value: Optional[Union[str, OptionAttrs.value]] = None,
        accesskey: Optional[Union[str, GlobalAttrs.accesskey]] = None,
        autocapitalize: Optional[Union[str, GlobalAttrs.autocapitalize, Literal['on', 'off', 'none', 'sentences', 'words', 'characters']]] = None,
        autocorrect: Optional[Union[str, GlobalAttrs.autocorrect, Literal['on', 'off']]] = None,
        autofocus: Optional[Union[str, GlobalAttrs.autofocus, bool]] = None,
        contenteditable: Optional[Union[str, GlobalAttrs.contenteditable, Literal['true', 'plaintext-only', 'false']]] = None,
        dir: Optional[Union[str, GlobalAttrs.dir, Literal['ltr', 'rtl', 'auto']]] = None,
        draggable: Optional[Union[str, GlobalAttrs.draggable, Literal['true', 'false']]] = None,
        enterkeyhint: Optional[Union[str, GlobalAttrs.enterkeyhint, Literal['enter', 'done', 'go', 'next', 'previous', 'search', 'send']]] = None,
        hidden: Optional[Union[str, GlobalAttrs.hidden, Literal['until-found', 'hidden', '']]] = None,
        inert: Optional[Union[str, GlobalAttrs.inert, bool]] = None,
        inputmode: Optional[Union[str, GlobalAttrs.inputmode, Literal['none', 'text', 'tel', 'email', 'url', 'numeric', 'decimal', 'search']]] = None,
        is_: Optional[Union[str, GlobalAttrs.is_]] = None,
        itemid: Optional[Union[str, GlobalAttrs.itemid]] = None,
        itemprop: Optional[Union[str, GlobalAttrs.itemprop]] = None,
        itemref: Optional[Union[str, GlobalAttrs.itemref]] = None,
        itemscope: Optional[Union[str, GlobalAttrs.itemscope, bool]] = None,
        itemtype: Optional[Union[str, GlobalAttrs.itemtype]] = None,
        lang: Optional[Union[str, GlobalAttrs.lang]] = None,
        nonce: Optional[Union[str, GlobalAttrs.nonce]] = None,
        popover: Optional[Union[str, GlobalAttrs.popover, Literal['auto', 'manual']]] = None,
        slot: Optional[Union[str, GlobalAttrs.slot]] = None,
        spellcheck: Optional[Union[str, GlobalAttrs.spellcheck, Literal['true', 'false', '']]] = None,
        style: Optional[Union[str, GlobalAttrs.style]] = None,
        tabindex: Optional[Union[str, GlobalAttrs.tabindex, int]] = None,
        title: Optional[Union[str, GlobalAttrs.title]] = None,
        translate: Optional[Union[str, GlobalAttrs.translate, Literal['yes', 'no']]] = None,
        writingsuggestions: Optional[Union[str, GlobalAttrs.writingsuggestions, Literal['true', 'false', '']]] = None,
        children: Optional[list] = None
    ) -> None:
        """
        Initialize 'option' (Option in a list box or combo box control) element.  
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/option

        :param attrs: A list or dictionary of attributes for the element
        :param id: The element's ID
        :param class_: Classes to which the element belongs
            | Set of space-separated tokens
        :param disabled: Whether the form control is disabled
        :param label: User-visible label
        :param selected: Whether the option is selected by default
        :param value: Value to be used for form submission
        :param accesskey: Keyboard shortcut to activate or focus element
            | Ordered set of unique space-separated tokens, none of which are identical to another, each consisting of one code point in length
        :param autocapitalize: Recommended autocapitalization behavior (for supported input methods)
        :param autocorrect: Recommended autocorrection behavior (for supported input methods)
        :param autofocus: Automatically focus the element when the page is loaded
        :param contenteditable: Whether the element is editable
        :param dir: The text directionality of the element
        :param draggable: Whether the element is draggable
        :param enterkeyhint: Hint for selecting an enter key action
        :param hidden: Whether the element is relevant
        :param inert: Whether the element is inert.
        :param inputmode: Hint for selecting an input modality
        :param is_: Creates a customized built-in element
            | Valid custom element name of a defined customized built-in element
        :param itemid: Global identifier for a microdata item
            | Valid URL potentially surrounded by spaces
        :param itemprop: Property names of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs, defined property names, or text*
        :param itemref: Referenced elements
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param itemscope: Introduces a microdata item
        :param itemtype: Item types of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs*
        :param lang: Language of the element
            | Valid BCP 47 language tag or the empty string
        :param nonce: Cryptographic nonce used in Content Security Policy checks [CSP]
        :param popover: Makes the element a popover element
        :param slot: The element's desired slot
        :param spellcheck: Whether the element is to have its spelling and grammar checked
        :param style: Presentational and formatting instructions
            | CSS declarations*
        :param tabindex: Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation
        :param title: Advisory information for the element
        :param translate: Whether the element is to be translated when the page is localized
        :param writingsuggestions: Whether the element can offer writing suggestions or not.
        """ #fmt: skip
        super().__init__(
            "option",
            void_element=False,
            attrs=attrs,
            children=children
        )
        if not (id is None or id is False):
            self._process_attr("id", id)
        if not (class_ is None or class_ is False):
            self._process_attr("class", class_)
        if not (disabled is None or disabled is False):
            self._process_attr("disabled", disabled)
        if not (label is None or label is False):
            self._process_attr("label", label)
        if not (selected is None or selected is False):
            self._process_attr("selected", selected)
        if not (value is None or value is False):
            self._process_attr("value", value)
        if not (accesskey is None or accesskey is False):
            self._process_attr("accesskey", accesskey)
        if not (autocapitalize is None or autocapitalize is False):
            self._process_attr("autocapitalize", autocapitalize)
        if not (autocorrect is None or autocorrect is False):
            self._process_attr("autocorrect", autocorrect)
        if not (autofocus is None or autofocus is False):
            self._process_attr("autofocus", autofocus)
        if not (contenteditable is None or contenteditable is False):
            self._process_attr("contenteditable", contenteditable)
        if not (dir is None or dir is False):
            self._process_attr("dir", dir)
        if not (draggable is None or draggable is False):
            self._process_attr("draggable", draggable)
        if not (enterkeyhint is None or enterkeyhint is False):
            self._process_attr("enterkeyhint", enterkeyhint)
        if not (hidden is None or hidden is False):
            self._process_attr("hidden", hidden)
        if not (inert is None or inert is False):
            self._process_attr("inert", inert)
        if not (inputmode is None or inputmode is False):
            self._process_attr("inputmode", inputmode)
        if not (is_ is None or is_ is False):
            self._process_attr("is", is_)
        if not (itemid is None or itemid is False):
            self._process_attr("itemid", itemid)
        if not (itemprop is None or itemprop is False):
            self._process_attr("itemprop", itemprop)
        if not (itemref is None or itemref is False):
            self._process_attr("itemref", itemref)
        if not (itemscope is None or itemscope is False):
            self._process_attr("itemscope", itemscope)
        if not (itemtype is None or itemtype is False):
            self._process_attr("itemtype", itemtype)
        if not (lang is None or lang is False):
            self._process_attr("lang", lang)
        if not (nonce is None or nonce is False):
            self._process_attr("nonce", nonce)
        if not (popover is None or popover is False):
            self._process_attr("popover", popover)
        if not (slot is None or slot is False):
            self._process_attr("slot", slot)
        if not (spellcheck is None or spellcheck is False):
            self._process_attr("spellcheck", spellcheck)
        if not (style is None or style is False):
            self._process_attr("style", style)
        if not (tabindex is None or tabindex is False):
            self._process_attr("tabindex", tabindex)
        if not (title is None or title is False):
            self._process_attr("title", title)
        if not (translate is None or translate is False):
            self._process_attr("translate", translate)
        if not (writingsuggestions is None or writingsuggestions is False):
            self._process_attr("writingsuggestions", writingsuggestions)


class output(BaseElement, GlobalAttrs, OutputAttrs):
    """
    The 'output' element.  
    Description: Calculated output value  
    Categories: flow phrasing listed labelable resettable form-associated palpable  
    Parents: phrasing  
    Children: phrasing  
    Interface: HTMLOutputElement  
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/output  
    """ # fmt: skip


    def __init__(
        self,
        attrs: Optional[Union[dict[str, Union[str, dict, list]], list[BaseAttribute]]] = None,
        id: Optional[Union[str, GlobalAttrs.id]] = None,
        class_: Optional[Union[str, GlobalAttrs.class_]] = None,
        for_: Optional[Union[str, OutputAttrs.for_]] = None,
        form: Optional[Union[str, OutputAttrs.form]] = None,
        name: Optional[Union[str, OutputAttrs.name]] = None,
        accesskey: Optional[Union[str, GlobalAttrs.accesskey]] = None,
        autocapitalize: Optional[Union[str, GlobalAttrs.autocapitalize, Literal['on', 'off', 'none', 'sentences', 'words', 'characters']]] = None,
        autocorrect: Optional[Union[str, GlobalAttrs.autocorrect, Literal['on', 'off']]] = None,
        autofocus: Optional[Union[str, GlobalAttrs.autofocus, bool]] = None,
        contenteditable: Optional[Union[str, GlobalAttrs.contenteditable, Literal['true', 'plaintext-only', 'false']]] = None,
        dir: Optional[Union[str, GlobalAttrs.dir, Literal['ltr', 'rtl', 'auto']]] = None,
        draggable: Optional[Union[str, GlobalAttrs.draggable, Literal['true', 'false']]] = None,
        enterkeyhint: Optional[Union[str, GlobalAttrs.enterkeyhint, Literal['enter', 'done', 'go', 'next', 'previous', 'search', 'send']]] = None,
        hidden: Optional[Union[str, GlobalAttrs.hidden, Literal['until-found', 'hidden', '']]] = None,
        inert: Optional[Union[str, GlobalAttrs.inert, bool]] = None,
        inputmode: Optional[Union[str, GlobalAttrs.inputmode, Literal['none', 'text', 'tel', 'email', 'url', 'numeric', 'decimal', 'search']]] = None,
        is_: Optional[Union[str, GlobalAttrs.is_]] = None,
        itemid: Optional[Union[str, GlobalAttrs.itemid]] = None,
        itemprop: Optional[Union[str, GlobalAttrs.itemprop]] = None,
        itemref: Optional[Union[str, GlobalAttrs.itemref]] = None,
        itemscope: Optional[Union[str, GlobalAttrs.itemscope, bool]] = None,
        itemtype: Optional[Union[str, GlobalAttrs.itemtype]] = None,
        lang: Optional[Union[str, GlobalAttrs.lang]] = None,
        nonce: Optional[Union[str, GlobalAttrs.nonce]] = None,
        popover: Optional[Union[str, GlobalAttrs.popover, Literal['auto', 'manual']]] = None,
        slot: Optional[Union[str, GlobalAttrs.slot]] = None,
        spellcheck: Optional[Union[str, GlobalAttrs.spellcheck, Literal['true', 'false', '']]] = None,
        style: Optional[Union[str, GlobalAttrs.style]] = None,
        tabindex: Optional[Union[str, GlobalAttrs.tabindex, int]] = None,
        title: Optional[Union[str, GlobalAttrs.title]] = None,
        translate: Optional[Union[str, GlobalAttrs.translate, Literal['yes', 'no']]] = None,
        writingsuggestions: Optional[Union[str, GlobalAttrs.writingsuggestions, Literal['true', 'false', '']]] = None,
        children: Optional[list] = None
    ) -> None:
        """
        Initialize 'output' (Calculated output value) element.  
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/output

        :param attrs: A list or dictionary of attributes for the element
        :param id: The element's ID
        :param class_: Classes to which the element belongs
            | Set of space-separated tokens
        :param for_: Specifies controls from which the output was calculated
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param form: Associates the element with a form element
            | ID*
        :param name: Name of the element to use for form submission and in the form.elements API
        :param accesskey: Keyboard shortcut to activate or focus element
            | Ordered set of unique space-separated tokens, none of which are identical to another, each consisting of one code point in length
        :param autocapitalize: Recommended autocapitalization behavior (for supported input methods)
        :param autocorrect: Recommended autocorrection behavior (for supported input methods)
        :param autofocus: Automatically focus the element when the page is loaded
        :param contenteditable: Whether the element is editable
        :param dir: The text directionality of the element
        :param draggable: Whether the element is draggable
        :param enterkeyhint: Hint for selecting an enter key action
        :param hidden: Whether the element is relevant
        :param inert: Whether the element is inert.
        :param inputmode: Hint for selecting an input modality
        :param is_: Creates a customized built-in element
            | Valid custom element name of a defined customized built-in element
        :param itemid: Global identifier for a microdata item
            | Valid URL potentially surrounded by spaces
        :param itemprop: Property names of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs, defined property names, or text*
        :param itemref: Referenced elements
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param itemscope: Introduces a microdata item
        :param itemtype: Item types of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs*
        :param lang: Language of the element
            | Valid BCP 47 language tag or the empty string
        :param nonce: Cryptographic nonce used in Content Security Policy checks [CSP]
        :param popover: Makes the element a popover element
        :param slot: The element's desired slot
        :param spellcheck: Whether the element is to have its spelling and grammar checked
        :param style: Presentational and formatting instructions
            | CSS declarations*
        :param tabindex: Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation
        :param title: Advisory information for the element
        :param translate: Whether the element is to be translated when the page is localized
        :param writingsuggestions: Whether the element can offer writing suggestions or not.
        """ #fmt: skip
        super().__init__(
            "output",
            void_element=False,
            attrs=attrs,
            children=children
        )
        if not (id is None or id is False):
            self._process_attr("id", id)
        if not (class_ is None or class_ is False):
            self._process_attr("class", class_)
        if not (for_ is None or for_ is False):
            self._process_attr("for", for_)
        if not (form is None or form is False):
            self._process_attr("form", form)
        if not (name is None or name is False):
            self._process_attr("name", name)
        if not (accesskey is None or accesskey is False):
            self._process_attr("accesskey", accesskey)
        if not (autocapitalize is None or autocapitalize is False):
            self._process_attr("autocapitalize", autocapitalize)
        if not (autocorrect is None or autocorrect is False):
            self._process_attr("autocorrect", autocorrect)
        if not (autofocus is None or autofocus is False):
            self._process_attr("autofocus", autofocus)
        if not (contenteditable is None or contenteditable is False):
            self._process_attr("contenteditable", contenteditable)
        if not (dir is None or dir is False):
            self._process_attr("dir", dir)
        if not (draggable is None or draggable is False):
            self._process_attr("draggable", draggable)
        if not (enterkeyhint is None or enterkeyhint is False):
            self._process_attr("enterkeyhint", enterkeyhint)
        if not (hidden is None or hidden is False):
            self._process_attr("hidden", hidden)
        if not (inert is None or inert is False):
            self._process_attr("inert", inert)
        if not (inputmode is None or inputmode is False):
            self._process_attr("inputmode", inputmode)
        if not (is_ is None or is_ is False):
            self._process_attr("is", is_)
        if not (itemid is None or itemid is False):
            self._process_attr("itemid", itemid)
        if not (itemprop is None or itemprop is False):
            self._process_attr("itemprop", itemprop)
        if not (itemref is None or itemref is False):
            self._process_attr("itemref", itemref)
        if not (itemscope is None or itemscope is False):
            self._process_attr("itemscope", itemscope)
        if not (itemtype is None or itemtype is False):
            self._process_attr("itemtype", itemtype)
        if not (lang is None or lang is False):
            self._process_attr("lang", lang)
        if not (nonce is None or nonce is False):
            self._process_attr("nonce", nonce)
        if not (popover is None or popover is False):
            self._process_attr("popover", popover)
        if not (slot is None or slot is False):
            self._process_attr("slot", slot)
        if not (spellcheck is None or spellcheck is False):
            self._process_attr("spellcheck", spellcheck)
        if not (style is None or style is False):
            self._process_attr("style", style)
        if not (tabindex is None or tabindex is False):
            self._process_attr("tabindex", tabindex)
        if not (title is None or title is False):
            self._process_attr("title", title)
        if not (translate is None or translate is False):
            self._process_attr("translate", translate)
        if not (writingsuggestions is None or writingsuggestions is False):
            self._process_attr("writingsuggestions", writingsuggestions)


class p(BaseElement, GlobalAttrs):
    """
    The 'p' element.  
    Description: Paragraph  
    Categories: flow palpable  
    Parents: flow  
    Children: phrasing  
    Interface: HTMLParagraphElement  
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/p  
    """ # fmt: skip


    def __init__(
        self,
        attrs: Optional[Union[dict[str, Union[str, dict, list]], list[BaseAttribute]]] = None,
        id: Optional[Union[str, GlobalAttrs.id]] = None,
        class_: Optional[Union[str, GlobalAttrs.class_]] = None,
        accesskey: Optional[Union[str, GlobalAttrs.accesskey]] = None,
        autocapitalize: Optional[Union[str, GlobalAttrs.autocapitalize, Literal['on', 'off', 'none', 'sentences', 'words', 'characters']]] = None,
        autocorrect: Optional[Union[str, GlobalAttrs.autocorrect, Literal['on', 'off']]] = None,
        autofocus: Optional[Union[str, GlobalAttrs.autofocus, bool]] = None,
        contenteditable: Optional[Union[str, GlobalAttrs.contenteditable, Literal['true', 'plaintext-only', 'false']]] = None,
        dir: Optional[Union[str, GlobalAttrs.dir, Literal['ltr', 'rtl', 'auto']]] = None,
        draggable: Optional[Union[str, GlobalAttrs.draggable, Literal['true', 'false']]] = None,
        enterkeyhint: Optional[Union[str, GlobalAttrs.enterkeyhint, Literal['enter', 'done', 'go', 'next', 'previous', 'search', 'send']]] = None,
        hidden: Optional[Union[str, GlobalAttrs.hidden, Literal['until-found', 'hidden', '']]] = None,
        inert: Optional[Union[str, GlobalAttrs.inert, bool]] = None,
        inputmode: Optional[Union[str, GlobalAttrs.inputmode, Literal['none', 'text', 'tel', 'email', 'url', 'numeric', 'decimal', 'search']]] = None,
        is_: Optional[Union[str, GlobalAttrs.is_]] = None,
        itemid: Optional[Union[str, GlobalAttrs.itemid]] = None,
        itemprop: Optional[Union[str, GlobalAttrs.itemprop]] = None,
        itemref: Optional[Union[str, GlobalAttrs.itemref]] = None,
        itemscope: Optional[Union[str, GlobalAttrs.itemscope, bool]] = None,
        itemtype: Optional[Union[str, GlobalAttrs.itemtype]] = None,
        lang: Optional[Union[str, GlobalAttrs.lang]] = None,
        nonce: Optional[Union[str, GlobalAttrs.nonce]] = None,
        popover: Optional[Union[str, GlobalAttrs.popover, Literal['auto', 'manual']]] = None,
        slot: Optional[Union[str, GlobalAttrs.slot]] = None,
        spellcheck: Optional[Union[str, GlobalAttrs.spellcheck, Literal['true', 'false', '']]] = None,
        style: Optional[Union[str, GlobalAttrs.style]] = None,
        tabindex: Optional[Union[str, GlobalAttrs.tabindex, int]] = None,
        title: Optional[Union[str, GlobalAttrs.title]] = None,
        translate: Optional[Union[str, GlobalAttrs.translate, Literal['yes', 'no']]] = None,
        writingsuggestions: Optional[Union[str, GlobalAttrs.writingsuggestions, Literal['true', 'false', '']]] = None,
        children: Optional[list] = None
    ) -> None:
        """
        Initialize 'p' (Paragraph) element.  
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/p

        :param attrs: A list or dictionary of attributes for the element
        :param id: The element's ID
        :param class_: Classes to which the element belongs
            | Set of space-separated tokens
        :param accesskey: Keyboard shortcut to activate or focus element
            | Ordered set of unique space-separated tokens, none of which are identical to another, each consisting of one code point in length
        :param autocapitalize: Recommended autocapitalization behavior (for supported input methods)
        :param autocorrect: Recommended autocorrection behavior (for supported input methods)
        :param autofocus: Automatically focus the element when the page is loaded
        :param contenteditable: Whether the element is editable
        :param dir: The text directionality of the element
        :param draggable: Whether the element is draggable
        :param enterkeyhint: Hint for selecting an enter key action
        :param hidden: Whether the element is relevant
        :param inert: Whether the element is inert.
        :param inputmode: Hint for selecting an input modality
        :param is_: Creates a customized built-in element
            | Valid custom element name of a defined customized built-in element
        :param itemid: Global identifier for a microdata item
            | Valid URL potentially surrounded by spaces
        :param itemprop: Property names of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs, defined property names, or text*
        :param itemref: Referenced elements
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param itemscope: Introduces a microdata item
        :param itemtype: Item types of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs*
        :param lang: Language of the element
            | Valid BCP 47 language tag or the empty string
        :param nonce: Cryptographic nonce used in Content Security Policy checks [CSP]
        :param popover: Makes the element a popover element
        :param slot: The element's desired slot
        :param spellcheck: Whether the element is to have its spelling and grammar checked
        :param style: Presentational and formatting instructions
            | CSS declarations*
        :param tabindex: Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation
        :param title: Advisory information for the element
        :param translate: Whether the element is to be translated when the page is localized
        :param writingsuggestions: Whether the element can offer writing suggestions or not.
        """ #fmt: skip
        super().__init__(
            "p",
            void_element=False,
            attrs=attrs,
            children=children
        )
        if not (id is None or id is False):
            self._process_attr("id", id)
        if not (class_ is None or class_ is False):
            self._process_attr("class", class_)
        if not (accesskey is None or accesskey is False):
            self._process_attr("accesskey", accesskey)
        if not (autocapitalize is None or autocapitalize is False):
            self._process_attr("autocapitalize", autocapitalize)
        if not (autocorrect is None or autocorrect is False):
            self._process_attr("autocorrect", autocorrect)
        if not (autofocus is None or autofocus is False):
            self._process_attr("autofocus", autofocus)
        if not (contenteditable is None or contenteditable is False):
            self._process_attr("contenteditable", contenteditable)
        if not (dir is None or dir is False):
            self._process_attr("dir", dir)
        if not (draggable is None or draggable is False):
            self._process_attr("draggable", draggable)
        if not (enterkeyhint is None or enterkeyhint is False):
            self._process_attr("enterkeyhint", enterkeyhint)
        if not (hidden is None or hidden is False):
            self._process_attr("hidden", hidden)
        if not (inert is None or inert is False):
            self._process_attr("inert", inert)
        if not (inputmode is None or inputmode is False):
            self._process_attr("inputmode", inputmode)
        if not (is_ is None or is_ is False):
            self._process_attr("is", is_)
        if not (itemid is None or itemid is False):
            self._process_attr("itemid", itemid)
        if not (itemprop is None or itemprop is False):
            self._process_attr("itemprop", itemprop)
        if not (itemref is None or itemref is False):
            self._process_attr("itemref", itemref)
        if not (itemscope is None or itemscope is False):
            self._process_attr("itemscope", itemscope)
        if not (itemtype is None or itemtype is False):
            self._process_attr("itemtype", itemtype)
        if not (lang is None or lang is False):
            self._process_attr("lang", lang)
        if not (nonce is None or nonce is False):
            self._process_attr("nonce", nonce)
        if not (popover is None or popover is False):
            self._process_attr("popover", popover)
        if not (slot is None or slot is False):
            self._process_attr("slot", slot)
        if not (spellcheck is None or spellcheck is False):
            self._process_attr("spellcheck", spellcheck)
        if not (style is None or style is False):
            self._process_attr("style", style)
        if not (tabindex is None or tabindex is False):
            self._process_attr("tabindex", tabindex)
        if not (title is None or title is False):
            self._process_attr("title", title)
        if not (translate is None or translate is False):
            self._process_attr("translate", translate)
        if not (writingsuggestions is None or writingsuggestions is False):
            self._process_attr("writingsuggestions", writingsuggestions)


class picture(BaseElement, GlobalAttrs):
    """
    The 'picture' element.  
    Description: Image  
    Categories: flow phrasing embedded palpable  
    Parents: phrasing  
    Children: source* one img script-supporting elements  
    Interface: HTMLPictureElement  
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/picture  
    """ # fmt: skip


    def __init__(
        self,
        attrs: Optional[Union[dict[str, Union[str, dict, list]], list[BaseAttribute]]] = None,
        id: Optional[Union[str, GlobalAttrs.id]] = None,
        class_: Optional[Union[str, GlobalAttrs.class_]] = None,
        accesskey: Optional[Union[str, GlobalAttrs.accesskey]] = None,
        autocapitalize: Optional[Union[str, GlobalAttrs.autocapitalize, Literal['on', 'off', 'none', 'sentences', 'words', 'characters']]] = None,
        autocorrect: Optional[Union[str, GlobalAttrs.autocorrect, Literal['on', 'off']]] = None,
        autofocus: Optional[Union[str, GlobalAttrs.autofocus, bool]] = None,
        contenteditable: Optional[Union[str, GlobalAttrs.contenteditable, Literal['true', 'plaintext-only', 'false']]] = None,
        dir: Optional[Union[str, GlobalAttrs.dir, Literal['ltr', 'rtl', 'auto']]] = None,
        draggable: Optional[Union[str, GlobalAttrs.draggable, Literal['true', 'false']]] = None,
        enterkeyhint: Optional[Union[str, GlobalAttrs.enterkeyhint, Literal['enter', 'done', 'go', 'next', 'previous', 'search', 'send']]] = None,
        hidden: Optional[Union[str, GlobalAttrs.hidden, Literal['until-found', 'hidden', '']]] = None,
        inert: Optional[Union[str, GlobalAttrs.inert, bool]] = None,
        inputmode: Optional[Union[str, GlobalAttrs.inputmode, Literal['none', 'text', 'tel', 'email', 'url', 'numeric', 'decimal', 'search']]] = None,
        is_: Optional[Union[str, GlobalAttrs.is_]] = None,
        itemid: Optional[Union[str, GlobalAttrs.itemid]] = None,
        itemprop: Optional[Union[str, GlobalAttrs.itemprop]] = None,
        itemref: Optional[Union[str, GlobalAttrs.itemref]] = None,
        itemscope: Optional[Union[str, GlobalAttrs.itemscope, bool]] = None,
        itemtype: Optional[Union[str, GlobalAttrs.itemtype]] = None,
        lang: Optional[Union[str, GlobalAttrs.lang]] = None,
        nonce: Optional[Union[str, GlobalAttrs.nonce]] = None,
        popover: Optional[Union[str, GlobalAttrs.popover, Literal['auto', 'manual']]] = None,
        slot: Optional[Union[str, GlobalAttrs.slot]] = None,
        spellcheck: Optional[Union[str, GlobalAttrs.spellcheck, Literal['true', 'false', '']]] = None,
        style: Optional[Union[str, GlobalAttrs.style]] = None,
        tabindex: Optional[Union[str, GlobalAttrs.tabindex, int]] = None,
        title: Optional[Union[str, GlobalAttrs.title]] = None,
        translate: Optional[Union[str, GlobalAttrs.translate, Literal['yes', 'no']]] = None,
        writingsuggestions: Optional[Union[str, GlobalAttrs.writingsuggestions, Literal['true', 'false', '']]] = None,
        children: Optional[list] = None
    ) -> None:
        """
        Initialize 'picture' (Image) element.  
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/picture

        :param attrs: A list or dictionary of attributes for the element
        :param id: The element's ID
        :param class_: Classes to which the element belongs
            | Set of space-separated tokens
        :param accesskey: Keyboard shortcut to activate or focus element
            | Ordered set of unique space-separated tokens, none of which are identical to another, each consisting of one code point in length
        :param autocapitalize: Recommended autocapitalization behavior (for supported input methods)
        :param autocorrect: Recommended autocorrection behavior (for supported input methods)
        :param autofocus: Automatically focus the element when the page is loaded
        :param contenteditable: Whether the element is editable
        :param dir: The text directionality of the element
        :param draggable: Whether the element is draggable
        :param enterkeyhint: Hint for selecting an enter key action
        :param hidden: Whether the element is relevant
        :param inert: Whether the element is inert.
        :param inputmode: Hint for selecting an input modality
        :param is_: Creates a customized built-in element
            | Valid custom element name of a defined customized built-in element
        :param itemid: Global identifier for a microdata item
            | Valid URL potentially surrounded by spaces
        :param itemprop: Property names of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs, defined property names, or text*
        :param itemref: Referenced elements
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param itemscope: Introduces a microdata item
        :param itemtype: Item types of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs*
        :param lang: Language of the element
            | Valid BCP 47 language tag or the empty string
        :param nonce: Cryptographic nonce used in Content Security Policy checks [CSP]
        :param popover: Makes the element a popover element
        :param slot: The element's desired slot
        :param spellcheck: Whether the element is to have its spelling and grammar checked
        :param style: Presentational and formatting instructions
            | CSS declarations*
        :param tabindex: Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation
        :param title: Advisory information for the element
        :param translate: Whether the element is to be translated when the page is localized
        :param writingsuggestions: Whether the element can offer writing suggestions or not.
        """ #fmt: skip
        super().__init__(
            "picture",
            void_element=False,
            attrs=attrs,
            children=children
        )
        if not (id is None or id is False):
            self._process_attr("id", id)
        if not (class_ is None or class_ is False):
            self._process_attr("class", class_)
        if not (accesskey is None or accesskey is False):
            self._process_attr("accesskey", accesskey)
        if not (autocapitalize is None or autocapitalize is False):
            self._process_attr("autocapitalize", autocapitalize)
        if not (autocorrect is None or autocorrect is False):
            self._process_attr("autocorrect", autocorrect)
        if not (autofocus is None or autofocus is False):
            self._process_attr("autofocus", autofocus)
        if not (contenteditable is None or contenteditable is False):
            self._process_attr("contenteditable", contenteditable)
        if not (dir is None or dir is False):
            self._process_attr("dir", dir)
        if not (draggable is None or draggable is False):
            self._process_attr("draggable", draggable)
        if not (enterkeyhint is None or enterkeyhint is False):
            self._process_attr("enterkeyhint", enterkeyhint)
        if not (hidden is None or hidden is False):
            self._process_attr("hidden", hidden)
        if not (inert is None or inert is False):
            self._process_attr("inert", inert)
        if not (inputmode is None or inputmode is False):
            self._process_attr("inputmode", inputmode)
        if not (is_ is None or is_ is False):
            self._process_attr("is", is_)
        if not (itemid is None or itemid is False):
            self._process_attr("itemid", itemid)
        if not (itemprop is None or itemprop is False):
            self._process_attr("itemprop", itemprop)
        if not (itemref is None or itemref is False):
            self._process_attr("itemref", itemref)
        if not (itemscope is None or itemscope is False):
            self._process_attr("itemscope", itemscope)
        if not (itemtype is None or itemtype is False):
            self._process_attr("itemtype", itemtype)
        if not (lang is None or lang is False):
            self._process_attr("lang", lang)
        if not (nonce is None or nonce is False):
            self._process_attr("nonce", nonce)
        if not (popover is None or popover is False):
            self._process_attr("popover", popover)
        if not (slot is None or slot is False):
            self._process_attr("slot", slot)
        if not (spellcheck is None or spellcheck is False):
            self._process_attr("spellcheck", spellcheck)
        if not (style is None or style is False):
            self._process_attr("style", style)
        if not (tabindex is None or tabindex is False):
            self._process_attr("tabindex", tabindex)
        if not (title is None or title is False):
            self._process_attr("title", title)
        if not (translate is None or translate is False):
            self._process_attr("translate", translate)
        if not (writingsuggestions is None or writingsuggestions is False):
            self._process_attr("writingsuggestions", writingsuggestions)


class pre(BaseElement, GlobalAttrs):
    """
    The 'pre' element.  
    Description: Block of preformatted text  
    Categories: flow palpable  
    Parents: flow  
    Children: phrasing  
    Interface: HTMLPreElement  
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/pre  
    """ # fmt: skip


    def __init__(
        self,
        attrs: Optional[Union[dict[str, Union[str, dict, list]], list[BaseAttribute]]] = None,
        id: Optional[Union[str, GlobalAttrs.id]] = None,
        class_: Optional[Union[str, GlobalAttrs.class_]] = None,
        accesskey: Optional[Union[str, GlobalAttrs.accesskey]] = None,
        autocapitalize: Optional[Union[str, GlobalAttrs.autocapitalize, Literal['on', 'off', 'none', 'sentences', 'words', 'characters']]] = None,
        autocorrect: Optional[Union[str, GlobalAttrs.autocorrect, Literal['on', 'off']]] = None,
        autofocus: Optional[Union[str, GlobalAttrs.autofocus, bool]] = None,
        contenteditable: Optional[Union[str, GlobalAttrs.contenteditable, Literal['true', 'plaintext-only', 'false']]] = None,
        dir: Optional[Union[str, GlobalAttrs.dir, Literal['ltr', 'rtl', 'auto']]] = None,
        draggable: Optional[Union[str, GlobalAttrs.draggable, Literal['true', 'false']]] = None,
        enterkeyhint: Optional[Union[str, GlobalAttrs.enterkeyhint, Literal['enter', 'done', 'go', 'next', 'previous', 'search', 'send']]] = None,
        hidden: Optional[Union[str, GlobalAttrs.hidden, Literal['until-found', 'hidden', '']]] = None,
        inert: Optional[Union[str, GlobalAttrs.inert, bool]] = None,
        inputmode: Optional[Union[str, GlobalAttrs.inputmode, Literal['none', 'text', 'tel', 'email', 'url', 'numeric', 'decimal', 'search']]] = None,
        is_: Optional[Union[str, GlobalAttrs.is_]] = None,
        itemid: Optional[Union[str, GlobalAttrs.itemid]] = None,
        itemprop: Optional[Union[str, GlobalAttrs.itemprop]] = None,
        itemref: Optional[Union[str, GlobalAttrs.itemref]] = None,
        itemscope: Optional[Union[str, GlobalAttrs.itemscope, bool]] = None,
        itemtype: Optional[Union[str, GlobalAttrs.itemtype]] = None,
        lang: Optional[Union[str, GlobalAttrs.lang]] = None,
        nonce: Optional[Union[str, GlobalAttrs.nonce]] = None,
        popover: Optional[Union[str, GlobalAttrs.popover, Literal['auto', 'manual']]] = None,
        slot: Optional[Union[str, GlobalAttrs.slot]] = None,
        spellcheck: Optional[Union[str, GlobalAttrs.spellcheck, Literal['true', 'false', '']]] = None,
        style: Optional[Union[str, GlobalAttrs.style]] = None,
        tabindex: Optional[Union[str, GlobalAttrs.tabindex, int]] = None,
        title: Optional[Union[str, GlobalAttrs.title]] = None,
        translate: Optional[Union[str, GlobalAttrs.translate, Literal['yes', 'no']]] = None,
        writingsuggestions: Optional[Union[str, GlobalAttrs.writingsuggestions, Literal['true', 'false', '']]] = None,
        children: Optional[list] = None
    ) -> None:
        """
        Initialize 'pre' (Block of preformatted text) element.  
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/pre

        :param attrs: A list or dictionary of attributes for the element
        :param id: The element's ID
        :param class_: Classes to which the element belongs
            | Set of space-separated tokens
        :param accesskey: Keyboard shortcut to activate or focus element
            | Ordered set of unique space-separated tokens, none of which are identical to another, each consisting of one code point in length
        :param autocapitalize: Recommended autocapitalization behavior (for supported input methods)
        :param autocorrect: Recommended autocorrection behavior (for supported input methods)
        :param autofocus: Automatically focus the element when the page is loaded
        :param contenteditable: Whether the element is editable
        :param dir: The text directionality of the element
        :param draggable: Whether the element is draggable
        :param enterkeyhint: Hint for selecting an enter key action
        :param hidden: Whether the element is relevant
        :param inert: Whether the element is inert.
        :param inputmode: Hint for selecting an input modality
        :param is_: Creates a customized built-in element
            | Valid custom element name of a defined customized built-in element
        :param itemid: Global identifier for a microdata item
            | Valid URL potentially surrounded by spaces
        :param itemprop: Property names of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs, defined property names, or text*
        :param itemref: Referenced elements
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param itemscope: Introduces a microdata item
        :param itemtype: Item types of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs*
        :param lang: Language of the element
            | Valid BCP 47 language tag or the empty string
        :param nonce: Cryptographic nonce used in Content Security Policy checks [CSP]
        :param popover: Makes the element a popover element
        :param slot: The element's desired slot
        :param spellcheck: Whether the element is to have its spelling and grammar checked
        :param style: Presentational and formatting instructions
            | CSS declarations*
        :param tabindex: Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation
        :param title: Advisory information for the element
        :param translate: Whether the element is to be translated when the page is localized
        :param writingsuggestions: Whether the element can offer writing suggestions or not.
        """ #fmt: skip
        super().__init__(
            "pre",
            void_element=False,
            attrs=attrs,
            children=children
        )
        if not (id is None or id is False):
            self._process_attr("id", id)
        if not (class_ is None or class_ is False):
            self._process_attr("class", class_)
        if not (accesskey is None or accesskey is False):
            self._process_attr("accesskey", accesskey)
        if not (autocapitalize is None or autocapitalize is False):
            self._process_attr("autocapitalize", autocapitalize)
        if not (autocorrect is None or autocorrect is False):
            self._process_attr("autocorrect", autocorrect)
        if not (autofocus is None or autofocus is False):
            self._process_attr("autofocus", autofocus)
        if not (contenteditable is None or contenteditable is False):
            self._process_attr("contenteditable", contenteditable)
        if not (dir is None or dir is False):
            self._process_attr("dir", dir)
        if not (draggable is None or draggable is False):
            self._process_attr("draggable", draggable)
        if not (enterkeyhint is None or enterkeyhint is False):
            self._process_attr("enterkeyhint", enterkeyhint)
        if not (hidden is None or hidden is False):
            self._process_attr("hidden", hidden)
        if not (inert is None or inert is False):
            self._process_attr("inert", inert)
        if not (inputmode is None or inputmode is False):
            self._process_attr("inputmode", inputmode)
        if not (is_ is None or is_ is False):
            self._process_attr("is", is_)
        if not (itemid is None or itemid is False):
            self._process_attr("itemid", itemid)
        if not (itemprop is None or itemprop is False):
            self._process_attr("itemprop", itemprop)
        if not (itemref is None or itemref is False):
            self._process_attr("itemref", itemref)
        if not (itemscope is None or itemscope is False):
            self._process_attr("itemscope", itemscope)
        if not (itemtype is None or itemtype is False):
            self._process_attr("itemtype", itemtype)
        if not (lang is None or lang is False):
            self._process_attr("lang", lang)
        if not (nonce is None or nonce is False):
            self._process_attr("nonce", nonce)
        if not (popover is None or popover is False):
            self._process_attr("popover", popover)
        if not (slot is None or slot is False):
            self._process_attr("slot", slot)
        if not (spellcheck is None or spellcheck is False):
            self._process_attr("spellcheck", spellcheck)
        if not (style is None or style is False):
            self._process_attr("style", style)
        if not (tabindex is None or tabindex is False):
            self._process_attr("tabindex", tabindex)
        if not (title is None or title is False):
            self._process_attr("title", title)
        if not (translate is None or translate is False):
            self._process_attr("translate", translate)
        if not (writingsuggestions is None or writingsuggestions is False):
            self._process_attr("writingsuggestions", writingsuggestions)


class progress(BaseElement, GlobalAttrs, ProgressAttrs):
    """
    The 'progress' element.  
    Description: Progress bar  
    Categories: flow phrasing labelable palpable  
    Parents: phrasing  
    Children: phrasing*  
    Interface: HTMLProgressElement  
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/progress  
    """ # fmt: skip


    def __init__(
        self,
        attrs: Optional[Union[dict[str, Union[str, dict, list]], list[BaseAttribute]]] = None,
        id: Optional[Union[str, GlobalAttrs.id]] = None,
        class_: Optional[Union[str, GlobalAttrs.class_]] = None,
        max: Optional[Union[str, ProgressAttrs.max, float]] = None,
        value: Optional[Union[str, ProgressAttrs.value, float]] = None,
        accesskey: Optional[Union[str, GlobalAttrs.accesskey]] = None,
        autocapitalize: Optional[Union[str, GlobalAttrs.autocapitalize, Literal['on', 'off', 'none', 'sentences', 'words', 'characters']]] = None,
        autocorrect: Optional[Union[str, GlobalAttrs.autocorrect, Literal['on', 'off']]] = None,
        autofocus: Optional[Union[str, GlobalAttrs.autofocus, bool]] = None,
        contenteditable: Optional[Union[str, GlobalAttrs.contenteditable, Literal['true', 'plaintext-only', 'false']]] = None,
        dir: Optional[Union[str, GlobalAttrs.dir, Literal['ltr', 'rtl', 'auto']]] = None,
        draggable: Optional[Union[str, GlobalAttrs.draggable, Literal['true', 'false']]] = None,
        enterkeyhint: Optional[Union[str, GlobalAttrs.enterkeyhint, Literal['enter', 'done', 'go', 'next', 'previous', 'search', 'send']]] = None,
        hidden: Optional[Union[str, GlobalAttrs.hidden, Literal['until-found', 'hidden', '']]] = None,
        inert: Optional[Union[str, GlobalAttrs.inert, bool]] = None,
        inputmode: Optional[Union[str, GlobalAttrs.inputmode, Literal['none', 'text', 'tel', 'email', 'url', 'numeric', 'decimal', 'search']]] = None,
        is_: Optional[Union[str, GlobalAttrs.is_]] = None,
        itemid: Optional[Union[str, GlobalAttrs.itemid]] = None,
        itemprop: Optional[Union[str, GlobalAttrs.itemprop]] = None,
        itemref: Optional[Union[str, GlobalAttrs.itemref]] = None,
        itemscope: Optional[Union[str, GlobalAttrs.itemscope, bool]] = None,
        itemtype: Optional[Union[str, GlobalAttrs.itemtype]] = None,
        lang: Optional[Union[str, GlobalAttrs.lang]] = None,
        nonce: Optional[Union[str, GlobalAttrs.nonce]] = None,
        popover: Optional[Union[str, GlobalAttrs.popover, Literal['auto', 'manual']]] = None,
        slot: Optional[Union[str, GlobalAttrs.slot]] = None,
        spellcheck: Optional[Union[str, GlobalAttrs.spellcheck, Literal['true', 'false', '']]] = None,
        style: Optional[Union[str, GlobalAttrs.style]] = None,
        tabindex: Optional[Union[str, GlobalAttrs.tabindex, int]] = None,
        title: Optional[Union[str, GlobalAttrs.title]] = None,
        translate: Optional[Union[str, GlobalAttrs.translate, Literal['yes', 'no']]] = None,
        writingsuggestions: Optional[Union[str, GlobalAttrs.writingsuggestions, Literal['true', 'false', '']]] = None,
        children: Optional[list] = None
    ) -> None:
        """
        Initialize 'progress' (Progress bar) element.  
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/progress

        :param attrs: A list or dictionary of attributes for the element
        :param id: The element's ID
        :param class_: Classes to which the element belongs
            | Set of space-separated tokens
        :param max: Upper bound of range
        :param value: Current value of the element
        :param accesskey: Keyboard shortcut to activate or focus element
            | Ordered set of unique space-separated tokens, none of which are identical to another, each consisting of one code point in length
        :param autocapitalize: Recommended autocapitalization behavior (for supported input methods)
        :param autocorrect: Recommended autocorrection behavior (for supported input methods)
        :param autofocus: Automatically focus the element when the page is loaded
        :param contenteditable: Whether the element is editable
        :param dir: The text directionality of the element
        :param draggable: Whether the element is draggable
        :param enterkeyhint: Hint for selecting an enter key action
        :param hidden: Whether the element is relevant
        :param inert: Whether the element is inert.
        :param inputmode: Hint for selecting an input modality
        :param is_: Creates a customized built-in element
            | Valid custom element name of a defined customized built-in element
        :param itemid: Global identifier for a microdata item
            | Valid URL potentially surrounded by spaces
        :param itemprop: Property names of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs, defined property names, or text*
        :param itemref: Referenced elements
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param itemscope: Introduces a microdata item
        :param itemtype: Item types of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs*
        :param lang: Language of the element
            | Valid BCP 47 language tag or the empty string
        :param nonce: Cryptographic nonce used in Content Security Policy checks [CSP]
        :param popover: Makes the element a popover element
        :param slot: The element's desired slot
        :param spellcheck: Whether the element is to have its spelling and grammar checked
        :param style: Presentational and formatting instructions
            | CSS declarations*
        :param tabindex: Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation
        :param title: Advisory information for the element
        :param translate: Whether the element is to be translated when the page is localized
        :param writingsuggestions: Whether the element can offer writing suggestions or not.
        """ #fmt: skip
        super().__init__(
            "progress",
            void_element=False,
            attrs=attrs,
            children=children
        )
        if not (id is None or id is False):
            self._process_attr("id", id)
        if not (class_ is None or class_ is False):
            self._process_attr("class", class_)
        if not (max is None or max is False):
            self._process_attr("max", max)
        if not (value is None or value is False):
            self._process_attr("value", value)
        if not (accesskey is None or accesskey is False):
            self._process_attr("accesskey", accesskey)
        if not (autocapitalize is None or autocapitalize is False):
            self._process_attr("autocapitalize", autocapitalize)
        if not (autocorrect is None or autocorrect is False):
            self._process_attr("autocorrect", autocorrect)
        if not (autofocus is None or autofocus is False):
            self._process_attr("autofocus", autofocus)
        if not (contenteditable is None or contenteditable is False):
            self._process_attr("contenteditable", contenteditable)
        if not (dir is None or dir is False):
            self._process_attr("dir", dir)
        if not (draggable is None or draggable is False):
            self._process_attr("draggable", draggable)
        if not (enterkeyhint is None or enterkeyhint is False):
            self._process_attr("enterkeyhint", enterkeyhint)
        if not (hidden is None or hidden is False):
            self._process_attr("hidden", hidden)
        if not (inert is None or inert is False):
            self._process_attr("inert", inert)
        if not (inputmode is None or inputmode is False):
            self._process_attr("inputmode", inputmode)
        if not (is_ is None or is_ is False):
            self._process_attr("is", is_)
        if not (itemid is None or itemid is False):
            self._process_attr("itemid", itemid)
        if not (itemprop is None or itemprop is False):
            self._process_attr("itemprop", itemprop)
        if not (itemref is None or itemref is False):
            self._process_attr("itemref", itemref)
        if not (itemscope is None or itemscope is False):
            self._process_attr("itemscope", itemscope)
        if not (itemtype is None or itemtype is False):
            self._process_attr("itemtype", itemtype)
        if not (lang is None or lang is False):
            self._process_attr("lang", lang)
        if not (nonce is None or nonce is False):
            self._process_attr("nonce", nonce)
        if not (popover is None or popover is False):
            self._process_attr("popover", popover)
        if not (slot is None or slot is False):
            self._process_attr("slot", slot)
        if not (spellcheck is None or spellcheck is False):
            self._process_attr("spellcheck", spellcheck)
        if not (style is None or style is False):
            self._process_attr("style", style)
        if not (tabindex is None or tabindex is False):
            self._process_attr("tabindex", tabindex)
        if not (title is None or title is False):
            self._process_attr("title", title)
        if not (translate is None or translate is False):
            self._process_attr("translate", translate)
        if not (writingsuggestions is None or writingsuggestions is False):
            self._process_attr("writingsuggestions", writingsuggestions)


class q(BaseElement, GlobalAttrs, QAttrs):
    """
    The 'q' element.  
    Description: Quotation  
    Categories: flow phrasing palpable  
    Parents: phrasing  
    Children: phrasing  
    Interface: HTMLQuoteElement  
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/q  
    """ # fmt: skip


    def __init__(
        self,
        attrs: Optional[Union[dict[str, Union[str, dict, list]], list[BaseAttribute]]] = None,
        id: Optional[Union[str, GlobalAttrs.id]] = None,
        class_: Optional[Union[str, GlobalAttrs.class_]] = None,
        cite: Optional[Union[str, QAttrs.cite]] = None,
        accesskey: Optional[Union[str, GlobalAttrs.accesskey]] = None,
        autocapitalize: Optional[Union[str, GlobalAttrs.autocapitalize, Literal['on', 'off', 'none', 'sentences', 'words', 'characters']]] = None,
        autocorrect: Optional[Union[str, GlobalAttrs.autocorrect, Literal['on', 'off']]] = None,
        autofocus: Optional[Union[str, GlobalAttrs.autofocus, bool]] = None,
        contenteditable: Optional[Union[str, GlobalAttrs.contenteditable, Literal['true', 'plaintext-only', 'false']]] = None,
        dir: Optional[Union[str, GlobalAttrs.dir, Literal['ltr', 'rtl', 'auto']]] = None,
        draggable: Optional[Union[str, GlobalAttrs.draggable, Literal['true', 'false']]] = None,
        enterkeyhint: Optional[Union[str, GlobalAttrs.enterkeyhint, Literal['enter', 'done', 'go', 'next', 'previous', 'search', 'send']]] = None,
        hidden: Optional[Union[str, GlobalAttrs.hidden, Literal['until-found', 'hidden', '']]] = None,
        inert: Optional[Union[str, GlobalAttrs.inert, bool]] = None,
        inputmode: Optional[Union[str, GlobalAttrs.inputmode, Literal['none', 'text', 'tel', 'email', 'url', 'numeric', 'decimal', 'search']]] = None,
        is_: Optional[Union[str, GlobalAttrs.is_]] = None,
        itemid: Optional[Union[str, GlobalAttrs.itemid]] = None,
        itemprop: Optional[Union[str, GlobalAttrs.itemprop]] = None,
        itemref: Optional[Union[str, GlobalAttrs.itemref]] = None,
        itemscope: Optional[Union[str, GlobalAttrs.itemscope, bool]] = None,
        itemtype: Optional[Union[str, GlobalAttrs.itemtype]] = None,
        lang: Optional[Union[str, GlobalAttrs.lang]] = None,
        nonce: Optional[Union[str, GlobalAttrs.nonce]] = None,
        popover: Optional[Union[str, GlobalAttrs.popover, Literal['auto', 'manual']]] = None,
        slot: Optional[Union[str, GlobalAttrs.slot]] = None,
        spellcheck: Optional[Union[str, GlobalAttrs.spellcheck, Literal['true', 'false', '']]] = None,
        style: Optional[Union[str, GlobalAttrs.style]] = None,
        tabindex: Optional[Union[str, GlobalAttrs.tabindex, int]] = None,
        title: Optional[Union[str, GlobalAttrs.title]] = None,
        translate: Optional[Union[str, GlobalAttrs.translate, Literal['yes', 'no']]] = None,
        writingsuggestions: Optional[Union[str, GlobalAttrs.writingsuggestions, Literal['true', 'false', '']]] = None,
        children: Optional[list] = None
    ) -> None:
        """
        Initialize 'q' (Quotation) element.  
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/q

        :param attrs: A list or dictionary of attributes for the element
        :param id: The element's ID
        :param class_: Classes to which the element belongs
            | Set of space-separated tokens
        :param cite: Link to the source of the quotation or more information about the edit
            | Valid URL potentially surrounded by spaces
        :param accesskey: Keyboard shortcut to activate or focus element
            | Ordered set of unique space-separated tokens, none of which are identical to another, each consisting of one code point in length
        :param autocapitalize: Recommended autocapitalization behavior (for supported input methods)
        :param autocorrect: Recommended autocorrection behavior (for supported input methods)
        :param autofocus: Automatically focus the element when the page is loaded
        :param contenteditable: Whether the element is editable
        :param dir: The text directionality of the element
        :param draggable: Whether the element is draggable
        :param enterkeyhint: Hint for selecting an enter key action
        :param hidden: Whether the element is relevant
        :param inert: Whether the element is inert.
        :param inputmode: Hint for selecting an input modality
        :param is_: Creates a customized built-in element
            | Valid custom element name of a defined customized built-in element
        :param itemid: Global identifier for a microdata item
            | Valid URL potentially surrounded by spaces
        :param itemprop: Property names of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs, defined property names, or text*
        :param itemref: Referenced elements
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param itemscope: Introduces a microdata item
        :param itemtype: Item types of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs*
        :param lang: Language of the element
            | Valid BCP 47 language tag or the empty string
        :param nonce: Cryptographic nonce used in Content Security Policy checks [CSP]
        :param popover: Makes the element a popover element
        :param slot: The element's desired slot
        :param spellcheck: Whether the element is to have its spelling and grammar checked
        :param style: Presentational and formatting instructions
            | CSS declarations*
        :param tabindex: Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation
        :param title: Advisory information for the element
        :param translate: Whether the element is to be translated when the page is localized
        :param writingsuggestions: Whether the element can offer writing suggestions or not.
        """ #fmt: skip
        super().__init__(
            "q",
            void_element=False,
            attrs=attrs,
            children=children
        )
        if not (id is None or id is False):
            self._process_attr("id", id)
        if not (class_ is None or class_ is False):
            self._process_attr("class", class_)
        if not (cite is None or cite is False):
            self._process_attr("cite", cite)
        if not (accesskey is None or accesskey is False):
            self._process_attr("accesskey", accesskey)
        if not (autocapitalize is None or autocapitalize is False):
            self._process_attr("autocapitalize", autocapitalize)
        if not (autocorrect is None or autocorrect is False):
            self._process_attr("autocorrect", autocorrect)
        if not (autofocus is None or autofocus is False):
            self._process_attr("autofocus", autofocus)
        if not (contenteditable is None or contenteditable is False):
            self._process_attr("contenteditable", contenteditable)
        if not (dir is None or dir is False):
            self._process_attr("dir", dir)
        if not (draggable is None or draggable is False):
            self._process_attr("draggable", draggable)
        if not (enterkeyhint is None or enterkeyhint is False):
            self._process_attr("enterkeyhint", enterkeyhint)
        if not (hidden is None or hidden is False):
            self._process_attr("hidden", hidden)
        if not (inert is None or inert is False):
            self._process_attr("inert", inert)
        if not (inputmode is None or inputmode is False):
            self._process_attr("inputmode", inputmode)
        if not (is_ is None or is_ is False):
            self._process_attr("is", is_)
        if not (itemid is None or itemid is False):
            self._process_attr("itemid", itemid)
        if not (itemprop is None or itemprop is False):
            self._process_attr("itemprop", itemprop)
        if not (itemref is None or itemref is False):
            self._process_attr("itemref", itemref)
        if not (itemscope is None or itemscope is False):
            self._process_attr("itemscope", itemscope)
        if not (itemtype is None or itemtype is False):
            self._process_attr("itemtype", itemtype)
        if not (lang is None or lang is False):
            self._process_attr("lang", lang)
        if not (nonce is None or nonce is False):
            self._process_attr("nonce", nonce)
        if not (popover is None or popover is False):
            self._process_attr("popover", popover)
        if not (slot is None or slot is False):
            self._process_attr("slot", slot)
        if not (spellcheck is None or spellcheck is False):
            self._process_attr("spellcheck", spellcheck)
        if not (style is None or style is False):
            self._process_attr("style", style)
        if not (tabindex is None or tabindex is False):
            self._process_attr("tabindex", tabindex)
        if not (title is None or title is False):
            self._process_attr("title", title)
        if not (translate is None or translate is False):
            self._process_attr("translate", translate)
        if not (writingsuggestions is None or writingsuggestions is False):
            self._process_attr("writingsuggestions", writingsuggestions)


class rp(BaseElement, GlobalAttrs):
    """
    The 'rp' element.  
    Description: Parenthesis for ruby annotation text  
    Categories: none  
    Parents: ruby  
    Children: text  
    Interface: HTMLElement  
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/rp  
    """ # fmt: skip


    def __init__(
        self,
        attrs: Optional[Union[dict[str, Union[str, dict, list]], list[BaseAttribute]]] = None,
        id: Optional[Union[str, GlobalAttrs.id]] = None,
        class_: Optional[Union[str, GlobalAttrs.class_]] = None,
        accesskey: Optional[Union[str, GlobalAttrs.accesskey]] = None,
        autocapitalize: Optional[Union[str, GlobalAttrs.autocapitalize, Literal['on', 'off', 'none', 'sentences', 'words', 'characters']]] = None,
        autocorrect: Optional[Union[str, GlobalAttrs.autocorrect, Literal['on', 'off']]] = None,
        autofocus: Optional[Union[str, GlobalAttrs.autofocus, bool]] = None,
        contenteditable: Optional[Union[str, GlobalAttrs.contenteditable, Literal['true', 'plaintext-only', 'false']]] = None,
        dir: Optional[Union[str, GlobalAttrs.dir, Literal['ltr', 'rtl', 'auto']]] = None,
        draggable: Optional[Union[str, GlobalAttrs.draggable, Literal['true', 'false']]] = None,
        enterkeyhint: Optional[Union[str, GlobalAttrs.enterkeyhint, Literal['enter', 'done', 'go', 'next', 'previous', 'search', 'send']]] = None,
        hidden: Optional[Union[str, GlobalAttrs.hidden, Literal['until-found', 'hidden', '']]] = None,
        inert: Optional[Union[str, GlobalAttrs.inert, bool]] = None,
        inputmode: Optional[Union[str, GlobalAttrs.inputmode, Literal['none', 'text', 'tel', 'email', 'url', 'numeric', 'decimal', 'search']]] = None,
        is_: Optional[Union[str, GlobalAttrs.is_]] = None,
        itemid: Optional[Union[str, GlobalAttrs.itemid]] = None,
        itemprop: Optional[Union[str, GlobalAttrs.itemprop]] = None,
        itemref: Optional[Union[str, GlobalAttrs.itemref]] = None,
        itemscope: Optional[Union[str, GlobalAttrs.itemscope, bool]] = None,
        itemtype: Optional[Union[str, GlobalAttrs.itemtype]] = None,
        lang: Optional[Union[str, GlobalAttrs.lang]] = None,
        nonce: Optional[Union[str, GlobalAttrs.nonce]] = None,
        popover: Optional[Union[str, GlobalAttrs.popover, Literal['auto', 'manual']]] = None,
        slot: Optional[Union[str, GlobalAttrs.slot]] = None,
        spellcheck: Optional[Union[str, GlobalAttrs.spellcheck, Literal['true', 'false', '']]] = None,
        style: Optional[Union[str, GlobalAttrs.style]] = None,
        tabindex: Optional[Union[str, GlobalAttrs.tabindex, int]] = None,
        title: Optional[Union[str, GlobalAttrs.title]] = None,
        translate: Optional[Union[str, GlobalAttrs.translate, Literal['yes', 'no']]] = None,
        writingsuggestions: Optional[Union[str, GlobalAttrs.writingsuggestions, Literal['true', 'false', '']]] = None,
        children: Optional[list] = None
    ) -> None:
        """
        Initialize 'rp' (Parenthesis for ruby annotation text) element.  
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/rp

        :param attrs: A list or dictionary of attributes for the element
        :param id: The element's ID
        :param class_: Classes to which the element belongs
            | Set of space-separated tokens
        :param accesskey: Keyboard shortcut to activate or focus element
            | Ordered set of unique space-separated tokens, none of which are identical to another, each consisting of one code point in length
        :param autocapitalize: Recommended autocapitalization behavior (for supported input methods)
        :param autocorrect: Recommended autocorrection behavior (for supported input methods)
        :param autofocus: Automatically focus the element when the page is loaded
        :param contenteditable: Whether the element is editable
        :param dir: The text directionality of the element
        :param draggable: Whether the element is draggable
        :param enterkeyhint: Hint for selecting an enter key action
        :param hidden: Whether the element is relevant
        :param inert: Whether the element is inert.
        :param inputmode: Hint for selecting an input modality
        :param is_: Creates a customized built-in element
            | Valid custom element name of a defined customized built-in element
        :param itemid: Global identifier for a microdata item
            | Valid URL potentially surrounded by spaces
        :param itemprop: Property names of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs, defined property names, or text*
        :param itemref: Referenced elements
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param itemscope: Introduces a microdata item
        :param itemtype: Item types of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs*
        :param lang: Language of the element
            | Valid BCP 47 language tag or the empty string
        :param nonce: Cryptographic nonce used in Content Security Policy checks [CSP]
        :param popover: Makes the element a popover element
        :param slot: The element's desired slot
        :param spellcheck: Whether the element is to have its spelling and grammar checked
        :param style: Presentational and formatting instructions
            | CSS declarations*
        :param tabindex: Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation
        :param title: Advisory information for the element
        :param translate: Whether the element is to be translated when the page is localized
        :param writingsuggestions: Whether the element can offer writing suggestions or not.
        """ #fmt: skip
        super().__init__(
            "rp",
            void_element=False,
            attrs=attrs,
            children=children
        )
        if not (id is None or id is False):
            self._process_attr("id", id)
        if not (class_ is None or class_ is False):
            self._process_attr("class", class_)
        if not (accesskey is None or accesskey is False):
            self._process_attr("accesskey", accesskey)
        if not (autocapitalize is None or autocapitalize is False):
            self._process_attr("autocapitalize", autocapitalize)
        if not (autocorrect is None or autocorrect is False):
            self._process_attr("autocorrect", autocorrect)
        if not (autofocus is None or autofocus is False):
            self._process_attr("autofocus", autofocus)
        if not (contenteditable is None or contenteditable is False):
            self._process_attr("contenteditable", contenteditable)
        if not (dir is None or dir is False):
            self._process_attr("dir", dir)
        if not (draggable is None or draggable is False):
            self._process_attr("draggable", draggable)
        if not (enterkeyhint is None or enterkeyhint is False):
            self._process_attr("enterkeyhint", enterkeyhint)
        if not (hidden is None or hidden is False):
            self._process_attr("hidden", hidden)
        if not (inert is None or inert is False):
            self._process_attr("inert", inert)
        if not (inputmode is None or inputmode is False):
            self._process_attr("inputmode", inputmode)
        if not (is_ is None or is_ is False):
            self._process_attr("is", is_)
        if not (itemid is None or itemid is False):
            self._process_attr("itemid", itemid)
        if not (itemprop is None or itemprop is False):
            self._process_attr("itemprop", itemprop)
        if not (itemref is None or itemref is False):
            self._process_attr("itemref", itemref)
        if not (itemscope is None or itemscope is False):
            self._process_attr("itemscope", itemscope)
        if not (itemtype is None or itemtype is False):
            self._process_attr("itemtype", itemtype)
        if not (lang is None or lang is False):
            self._process_attr("lang", lang)
        if not (nonce is None or nonce is False):
            self._process_attr("nonce", nonce)
        if not (popover is None or popover is False):
            self._process_attr("popover", popover)
        if not (slot is None or slot is False):
            self._process_attr("slot", slot)
        if not (spellcheck is None or spellcheck is False):
            self._process_attr("spellcheck", spellcheck)
        if not (style is None or style is False):
            self._process_attr("style", style)
        if not (tabindex is None or tabindex is False):
            self._process_attr("tabindex", tabindex)
        if not (title is None or title is False):
            self._process_attr("title", title)
        if not (translate is None or translate is False):
            self._process_attr("translate", translate)
        if not (writingsuggestions is None or writingsuggestions is False):
            self._process_attr("writingsuggestions", writingsuggestions)


class rt(BaseElement, GlobalAttrs):
    """
    The 'rt' element.  
    Description: Ruby annotation text  
    Categories: none  
    Parents: ruby  
    Children: phrasing  
    Interface: HTMLElement  
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/rt  
    """ # fmt: skip


    def __init__(
        self,
        attrs: Optional[Union[dict[str, Union[str, dict, list]], list[BaseAttribute]]] = None,
        id: Optional[Union[str, GlobalAttrs.id]] = None,
        class_: Optional[Union[str, GlobalAttrs.class_]] = None,
        accesskey: Optional[Union[str, GlobalAttrs.accesskey]] = None,
        autocapitalize: Optional[Union[str, GlobalAttrs.autocapitalize, Literal['on', 'off', 'none', 'sentences', 'words', 'characters']]] = None,
        autocorrect: Optional[Union[str, GlobalAttrs.autocorrect, Literal['on', 'off']]] = None,
        autofocus: Optional[Union[str, GlobalAttrs.autofocus, bool]] = None,
        contenteditable: Optional[Union[str, GlobalAttrs.contenteditable, Literal['true', 'plaintext-only', 'false']]] = None,
        dir: Optional[Union[str, GlobalAttrs.dir, Literal['ltr', 'rtl', 'auto']]] = None,
        draggable: Optional[Union[str, GlobalAttrs.draggable, Literal['true', 'false']]] = None,
        enterkeyhint: Optional[Union[str, GlobalAttrs.enterkeyhint, Literal['enter', 'done', 'go', 'next', 'previous', 'search', 'send']]] = None,
        hidden: Optional[Union[str, GlobalAttrs.hidden, Literal['until-found', 'hidden', '']]] = None,
        inert: Optional[Union[str, GlobalAttrs.inert, bool]] = None,
        inputmode: Optional[Union[str, GlobalAttrs.inputmode, Literal['none', 'text', 'tel', 'email', 'url', 'numeric', 'decimal', 'search']]] = None,
        is_: Optional[Union[str, GlobalAttrs.is_]] = None,
        itemid: Optional[Union[str, GlobalAttrs.itemid]] = None,
        itemprop: Optional[Union[str, GlobalAttrs.itemprop]] = None,
        itemref: Optional[Union[str, GlobalAttrs.itemref]] = None,
        itemscope: Optional[Union[str, GlobalAttrs.itemscope, bool]] = None,
        itemtype: Optional[Union[str, GlobalAttrs.itemtype]] = None,
        lang: Optional[Union[str, GlobalAttrs.lang]] = None,
        nonce: Optional[Union[str, GlobalAttrs.nonce]] = None,
        popover: Optional[Union[str, GlobalAttrs.popover, Literal['auto', 'manual']]] = None,
        slot: Optional[Union[str, GlobalAttrs.slot]] = None,
        spellcheck: Optional[Union[str, GlobalAttrs.spellcheck, Literal['true', 'false', '']]] = None,
        style: Optional[Union[str, GlobalAttrs.style]] = None,
        tabindex: Optional[Union[str, GlobalAttrs.tabindex, int]] = None,
        title: Optional[Union[str, GlobalAttrs.title]] = None,
        translate: Optional[Union[str, GlobalAttrs.translate, Literal['yes', 'no']]] = None,
        writingsuggestions: Optional[Union[str, GlobalAttrs.writingsuggestions, Literal['true', 'false', '']]] = None,
        children: Optional[list] = None
    ) -> None:
        """
        Initialize 'rt' (Ruby annotation text) element.  
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/rt

        :param attrs: A list or dictionary of attributes for the element
        :param id: The element's ID
        :param class_: Classes to which the element belongs
            | Set of space-separated tokens
        :param accesskey: Keyboard shortcut to activate or focus element
            | Ordered set of unique space-separated tokens, none of which are identical to another, each consisting of one code point in length
        :param autocapitalize: Recommended autocapitalization behavior (for supported input methods)
        :param autocorrect: Recommended autocorrection behavior (for supported input methods)
        :param autofocus: Automatically focus the element when the page is loaded
        :param contenteditable: Whether the element is editable
        :param dir: The text directionality of the element
        :param draggable: Whether the element is draggable
        :param enterkeyhint: Hint for selecting an enter key action
        :param hidden: Whether the element is relevant
        :param inert: Whether the element is inert.
        :param inputmode: Hint for selecting an input modality
        :param is_: Creates a customized built-in element
            | Valid custom element name of a defined customized built-in element
        :param itemid: Global identifier for a microdata item
            | Valid URL potentially surrounded by spaces
        :param itemprop: Property names of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs, defined property names, or text*
        :param itemref: Referenced elements
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param itemscope: Introduces a microdata item
        :param itemtype: Item types of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs*
        :param lang: Language of the element
            | Valid BCP 47 language tag or the empty string
        :param nonce: Cryptographic nonce used in Content Security Policy checks [CSP]
        :param popover: Makes the element a popover element
        :param slot: The element's desired slot
        :param spellcheck: Whether the element is to have its spelling and grammar checked
        :param style: Presentational and formatting instructions
            | CSS declarations*
        :param tabindex: Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation
        :param title: Advisory information for the element
        :param translate: Whether the element is to be translated when the page is localized
        :param writingsuggestions: Whether the element can offer writing suggestions or not.
        """ #fmt: skip
        super().__init__(
            "rt",
            void_element=False,
            attrs=attrs,
            children=children
        )
        if not (id is None or id is False):
            self._process_attr("id", id)
        if not (class_ is None or class_ is False):
            self._process_attr("class", class_)
        if not (accesskey is None or accesskey is False):
            self._process_attr("accesskey", accesskey)
        if not (autocapitalize is None or autocapitalize is False):
            self._process_attr("autocapitalize", autocapitalize)
        if not (autocorrect is None or autocorrect is False):
            self._process_attr("autocorrect", autocorrect)
        if not (autofocus is None or autofocus is False):
            self._process_attr("autofocus", autofocus)
        if not (contenteditable is None or contenteditable is False):
            self._process_attr("contenteditable", contenteditable)
        if not (dir is None or dir is False):
            self._process_attr("dir", dir)
        if not (draggable is None or draggable is False):
            self._process_attr("draggable", draggable)
        if not (enterkeyhint is None or enterkeyhint is False):
            self._process_attr("enterkeyhint", enterkeyhint)
        if not (hidden is None or hidden is False):
            self._process_attr("hidden", hidden)
        if not (inert is None or inert is False):
            self._process_attr("inert", inert)
        if not (inputmode is None or inputmode is False):
            self._process_attr("inputmode", inputmode)
        if not (is_ is None or is_ is False):
            self._process_attr("is", is_)
        if not (itemid is None or itemid is False):
            self._process_attr("itemid", itemid)
        if not (itemprop is None or itemprop is False):
            self._process_attr("itemprop", itemprop)
        if not (itemref is None or itemref is False):
            self._process_attr("itemref", itemref)
        if not (itemscope is None or itemscope is False):
            self._process_attr("itemscope", itemscope)
        if not (itemtype is None or itemtype is False):
            self._process_attr("itemtype", itemtype)
        if not (lang is None or lang is False):
            self._process_attr("lang", lang)
        if not (nonce is None or nonce is False):
            self._process_attr("nonce", nonce)
        if not (popover is None or popover is False):
            self._process_attr("popover", popover)
        if not (slot is None or slot is False):
            self._process_attr("slot", slot)
        if not (spellcheck is None or spellcheck is False):
            self._process_attr("spellcheck", spellcheck)
        if not (style is None or style is False):
            self._process_attr("style", style)
        if not (tabindex is None or tabindex is False):
            self._process_attr("tabindex", tabindex)
        if not (title is None or title is False):
            self._process_attr("title", title)
        if not (translate is None or translate is False):
            self._process_attr("translate", translate)
        if not (writingsuggestions is None or writingsuggestions is False):
            self._process_attr("writingsuggestions", writingsuggestions)


class ruby(BaseElement, GlobalAttrs):
    """
    The 'ruby' element.  
    Description: Ruby annotation(s)  
    Categories: flow phrasing palpable  
    Parents: phrasing  
    Children: phrasing rt rp*  
    Interface: HTMLElement  
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ruby  
    """ # fmt: skip


    def __init__(
        self,
        attrs: Optional[Union[dict[str, Union[str, dict, list]], list[BaseAttribute]]] = None,
        id: Optional[Union[str, GlobalAttrs.id]] = None,
        class_: Optional[Union[str, GlobalAttrs.class_]] = None,
        accesskey: Optional[Union[str, GlobalAttrs.accesskey]] = None,
        autocapitalize: Optional[Union[str, GlobalAttrs.autocapitalize, Literal['on', 'off', 'none', 'sentences', 'words', 'characters']]] = None,
        autocorrect: Optional[Union[str, GlobalAttrs.autocorrect, Literal['on', 'off']]] = None,
        autofocus: Optional[Union[str, GlobalAttrs.autofocus, bool]] = None,
        contenteditable: Optional[Union[str, GlobalAttrs.contenteditable, Literal['true', 'plaintext-only', 'false']]] = None,
        dir: Optional[Union[str, GlobalAttrs.dir, Literal['ltr', 'rtl', 'auto']]] = None,
        draggable: Optional[Union[str, GlobalAttrs.draggable, Literal['true', 'false']]] = None,
        enterkeyhint: Optional[Union[str, GlobalAttrs.enterkeyhint, Literal['enter', 'done', 'go', 'next', 'previous', 'search', 'send']]] = None,
        hidden: Optional[Union[str, GlobalAttrs.hidden, Literal['until-found', 'hidden', '']]] = None,
        inert: Optional[Union[str, GlobalAttrs.inert, bool]] = None,
        inputmode: Optional[Union[str, GlobalAttrs.inputmode, Literal['none', 'text', 'tel', 'email', 'url', 'numeric', 'decimal', 'search']]] = None,
        is_: Optional[Union[str, GlobalAttrs.is_]] = None,
        itemid: Optional[Union[str, GlobalAttrs.itemid]] = None,
        itemprop: Optional[Union[str, GlobalAttrs.itemprop]] = None,
        itemref: Optional[Union[str, GlobalAttrs.itemref]] = None,
        itemscope: Optional[Union[str, GlobalAttrs.itemscope, bool]] = None,
        itemtype: Optional[Union[str, GlobalAttrs.itemtype]] = None,
        lang: Optional[Union[str, GlobalAttrs.lang]] = None,
        nonce: Optional[Union[str, GlobalAttrs.nonce]] = None,
        popover: Optional[Union[str, GlobalAttrs.popover, Literal['auto', 'manual']]] = None,
        slot: Optional[Union[str, GlobalAttrs.slot]] = None,
        spellcheck: Optional[Union[str, GlobalAttrs.spellcheck, Literal['true', 'false', '']]] = None,
        style: Optional[Union[str, GlobalAttrs.style]] = None,
        tabindex: Optional[Union[str, GlobalAttrs.tabindex, int]] = None,
        title: Optional[Union[str, GlobalAttrs.title]] = None,
        translate: Optional[Union[str, GlobalAttrs.translate, Literal['yes', 'no']]] = None,
        writingsuggestions: Optional[Union[str, GlobalAttrs.writingsuggestions, Literal['true', 'false', '']]] = None,
        children: Optional[list] = None
    ) -> None:
        """
        Initialize 'ruby' (Ruby annotation(s)) element.  
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ruby

        :param attrs: A list or dictionary of attributes for the element
        :param id: The element's ID
        :param class_: Classes to which the element belongs
            | Set of space-separated tokens
        :param accesskey: Keyboard shortcut to activate or focus element
            | Ordered set of unique space-separated tokens, none of which are identical to another, each consisting of one code point in length
        :param autocapitalize: Recommended autocapitalization behavior (for supported input methods)
        :param autocorrect: Recommended autocorrection behavior (for supported input methods)
        :param autofocus: Automatically focus the element when the page is loaded
        :param contenteditable: Whether the element is editable
        :param dir: The text directionality of the element
        :param draggable: Whether the element is draggable
        :param enterkeyhint: Hint for selecting an enter key action
        :param hidden: Whether the element is relevant
        :param inert: Whether the element is inert.
        :param inputmode: Hint for selecting an input modality
        :param is_: Creates a customized built-in element
            | Valid custom element name of a defined customized built-in element
        :param itemid: Global identifier for a microdata item
            | Valid URL potentially surrounded by spaces
        :param itemprop: Property names of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs, defined property names, or text*
        :param itemref: Referenced elements
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param itemscope: Introduces a microdata item
        :param itemtype: Item types of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs*
        :param lang: Language of the element
            | Valid BCP 47 language tag or the empty string
        :param nonce: Cryptographic nonce used in Content Security Policy checks [CSP]
        :param popover: Makes the element a popover element
        :param slot: The element's desired slot
        :param spellcheck: Whether the element is to have its spelling and grammar checked
        :param style: Presentational and formatting instructions
            | CSS declarations*
        :param tabindex: Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation
        :param title: Advisory information for the element
        :param translate: Whether the element is to be translated when the page is localized
        :param writingsuggestions: Whether the element can offer writing suggestions or not.
        """ #fmt: skip
        super().__init__(
            "ruby",
            void_element=False,
            attrs=attrs,
            children=children
        )
        if not (id is None or id is False):
            self._process_attr("id", id)
        if not (class_ is None or class_ is False):
            self._process_attr("class", class_)
        if not (accesskey is None or accesskey is False):
            self._process_attr("accesskey", accesskey)
        if not (autocapitalize is None or autocapitalize is False):
            self._process_attr("autocapitalize", autocapitalize)
        if not (autocorrect is None or autocorrect is False):
            self._process_attr("autocorrect", autocorrect)
        if not (autofocus is None or autofocus is False):
            self._process_attr("autofocus", autofocus)
        if not (contenteditable is None or contenteditable is False):
            self._process_attr("contenteditable", contenteditable)
        if not (dir is None or dir is False):
            self._process_attr("dir", dir)
        if not (draggable is None or draggable is False):
            self._process_attr("draggable", draggable)
        if not (enterkeyhint is None or enterkeyhint is False):
            self._process_attr("enterkeyhint", enterkeyhint)
        if not (hidden is None or hidden is False):
            self._process_attr("hidden", hidden)
        if not (inert is None or inert is False):
            self._process_attr("inert", inert)
        if not (inputmode is None or inputmode is False):
            self._process_attr("inputmode", inputmode)
        if not (is_ is None or is_ is False):
            self._process_attr("is", is_)
        if not (itemid is None or itemid is False):
            self._process_attr("itemid", itemid)
        if not (itemprop is None or itemprop is False):
            self._process_attr("itemprop", itemprop)
        if not (itemref is None or itemref is False):
            self._process_attr("itemref", itemref)
        if not (itemscope is None or itemscope is False):
            self._process_attr("itemscope", itemscope)
        if not (itemtype is None or itemtype is False):
            self._process_attr("itemtype", itemtype)
        if not (lang is None or lang is False):
            self._process_attr("lang", lang)
        if not (nonce is None or nonce is False):
            self._process_attr("nonce", nonce)
        if not (popover is None or popover is False):
            self._process_attr("popover", popover)
        if not (slot is None or slot is False):
            self._process_attr("slot", slot)
        if not (spellcheck is None or spellcheck is False):
            self._process_attr("spellcheck", spellcheck)
        if not (style is None or style is False):
            self._process_attr("style", style)
        if not (tabindex is None or tabindex is False):
            self._process_attr("tabindex", tabindex)
        if not (title is None or title is False):
            self._process_attr("title", title)
        if not (translate is None or translate is False):
            self._process_attr("translate", translate)
        if not (writingsuggestions is None or writingsuggestions is False):
            self._process_attr("writingsuggestions", writingsuggestions)


class s(BaseElement, GlobalAttrs):
    """
    The 's' element.  
    Description: Inaccurate text  
    Categories: flow phrasing palpable  
    Parents: phrasing  
    Children: phrasing  
    Interface: HTMLElement  
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/s  
    """ # fmt: skip


    def __init__(
        self,
        attrs: Optional[Union[dict[str, Union[str, dict, list]], list[BaseAttribute]]] = None,
        id: Optional[Union[str, GlobalAttrs.id]] = None,
        class_: Optional[Union[str, GlobalAttrs.class_]] = None,
        accesskey: Optional[Union[str, GlobalAttrs.accesskey]] = None,
        autocapitalize: Optional[Union[str, GlobalAttrs.autocapitalize, Literal['on', 'off', 'none', 'sentences', 'words', 'characters']]] = None,
        autocorrect: Optional[Union[str, GlobalAttrs.autocorrect, Literal['on', 'off']]] = None,
        autofocus: Optional[Union[str, GlobalAttrs.autofocus, bool]] = None,
        contenteditable: Optional[Union[str, GlobalAttrs.contenteditable, Literal['true', 'plaintext-only', 'false']]] = None,
        dir: Optional[Union[str, GlobalAttrs.dir, Literal['ltr', 'rtl', 'auto']]] = None,
        draggable: Optional[Union[str, GlobalAttrs.draggable, Literal['true', 'false']]] = None,
        enterkeyhint: Optional[Union[str, GlobalAttrs.enterkeyhint, Literal['enter', 'done', 'go', 'next', 'previous', 'search', 'send']]] = None,
        hidden: Optional[Union[str, GlobalAttrs.hidden, Literal['until-found', 'hidden', '']]] = None,
        inert: Optional[Union[str, GlobalAttrs.inert, bool]] = None,
        inputmode: Optional[Union[str, GlobalAttrs.inputmode, Literal['none', 'text', 'tel', 'email', 'url', 'numeric', 'decimal', 'search']]] = None,
        is_: Optional[Union[str, GlobalAttrs.is_]] = None,
        itemid: Optional[Union[str, GlobalAttrs.itemid]] = None,
        itemprop: Optional[Union[str, GlobalAttrs.itemprop]] = None,
        itemref: Optional[Union[str, GlobalAttrs.itemref]] = None,
        itemscope: Optional[Union[str, GlobalAttrs.itemscope, bool]] = None,
        itemtype: Optional[Union[str, GlobalAttrs.itemtype]] = None,
        lang: Optional[Union[str, GlobalAttrs.lang]] = None,
        nonce: Optional[Union[str, GlobalAttrs.nonce]] = None,
        popover: Optional[Union[str, GlobalAttrs.popover, Literal['auto', 'manual']]] = None,
        slot: Optional[Union[str, GlobalAttrs.slot]] = None,
        spellcheck: Optional[Union[str, GlobalAttrs.spellcheck, Literal['true', 'false', '']]] = None,
        style: Optional[Union[str, GlobalAttrs.style]] = None,
        tabindex: Optional[Union[str, GlobalAttrs.tabindex, int]] = None,
        title: Optional[Union[str, GlobalAttrs.title]] = None,
        translate: Optional[Union[str, GlobalAttrs.translate, Literal['yes', 'no']]] = None,
        writingsuggestions: Optional[Union[str, GlobalAttrs.writingsuggestions, Literal['true', 'false', '']]] = None,
        children: Optional[list] = None
    ) -> None:
        """
        Initialize 's' (Inaccurate text) element.  
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/s

        :param attrs: A list or dictionary of attributes for the element
        :param id: The element's ID
        :param class_: Classes to which the element belongs
            | Set of space-separated tokens
        :param accesskey: Keyboard shortcut to activate or focus element
            | Ordered set of unique space-separated tokens, none of which are identical to another, each consisting of one code point in length
        :param autocapitalize: Recommended autocapitalization behavior (for supported input methods)
        :param autocorrect: Recommended autocorrection behavior (for supported input methods)
        :param autofocus: Automatically focus the element when the page is loaded
        :param contenteditable: Whether the element is editable
        :param dir: The text directionality of the element
        :param draggable: Whether the element is draggable
        :param enterkeyhint: Hint for selecting an enter key action
        :param hidden: Whether the element is relevant
        :param inert: Whether the element is inert.
        :param inputmode: Hint for selecting an input modality
        :param is_: Creates a customized built-in element
            | Valid custom element name of a defined customized built-in element
        :param itemid: Global identifier for a microdata item
            | Valid URL potentially surrounded by spaces
        :param itemprop: Property names of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs, defined property names, or text*
        :param itemref: Referenced elements
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param itemscope: Introduces a microdata item
        :param itemtype: Item types of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs*
        :param lang: Language of the element
            | Valid BCP 47 language tag or the empty string
        :param nonce: Cryptographic nonce used in Content Security Policy checks [CSP]
        :param popover: Makes the element a popover element
        :param slot: The element's desired slot
        :param spellcheck: Whether the element is to have its spelling and grammar checked
        :param style: Presentational and formatting instructions
            | CSS declarations*
        :param tabindex: Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation
        :param title: Advisory information for the element
        :param translate: Whether the element is to be translated when the page is localized
        :param writingsuggestions: Whether the element can offer writing suggestions or not.
        """ #fmt: skip
        super().__init__(
            "s",
            void_element=False,
            attrs=attrs,
            children=children
        )
        if not (id is None or id is False):
            self._process_attr("id", id)
        if not (class_ is None or class_ is False):
            self._process_attr("class", class_)
        if not (accesskey is None or accesskey is False):
            self._process_attr("accesskey", accesskey)
        if not (autocapitalize is None or autocapitalize is False):
            self._process_attr("autocapitalize", autocapitalize)
        if not (autocorrect is None or autocorrect is False):
            self._process_attr("autocorrect", autocorrect)
        if not (autofocus is None or autofocus is False):
            self._process_attr("autofocus", autofocus)
        if not (contenteditable is None or contenteditable is False):
            self._process_attr("contenteditable", contenteditable)
        if not (dir is None or dir is False):
            self._process_attr("dir", dir)
        if not (draggable is None or draggable is False):
            self._process_attr("draggable", draggable)
        if not (enterkeyhint is None or enterkeyhint is False):
            self._process_attr("enterkeyhint", enterkeyhint)
        if not (hidden is None or hidden is False):
            self._process_attr("hidden", hidden)
        if not (inert is None or inert is False):
            self._process_attr("inert", inert)
        if not (inputmode is None or inputmode is False):
            self._process_attr("inputmode", inputmode)
        if not (is_ is None or is_ is False):
            self._process_attr("is", is_)
        if not (itemid is None or itemid is False):
            self._process_attr("itemid", itemid)
        if not (itemprop is None or itemprop is False):
            self._process_attr("itemprop", itemprop)
        if not (itemref is None or itemref is False):
            self._process_attr("itemref", itemref)
        if not (itemscope is None or itemscope is False):
            self._process_attr("itemscope", itemscope)
        if not (itemtype is None or itemtype is False):
            self._process_attr("itemtype", itemtype)
        if not (lang is None or lang is False):
            self._process_attr("lang", lang)
        if not (nonce is None or nonce is False):
            self._process_attr("nonce", nonce)
        if not (popover is None or popover is False):
            self._process_attr("popover", popover)
        if not (slot is None or slot is False):
            self._process_attr("slot", slot)
        if not (spellcheck is None or spellcheck is False):
            self._process_attr("spellcheck", spellcheck)
        if not (style is None or style is False):
            self._process_attr("style", style)
        if not (tabindex is None or tabindex is False):
            self._process_attr("tabindex", tabindex)
        if not (title is None or title is False):
            self._process_attr("title", title)
        if not (translate is None or translate is False):
            self._process_attr("translate", translate)
        if not (writingsuggestions is None or writingsuggestions is False):
            self._process_attr("writingsuggestions", writingsuggestions)


class samp(BaseElement, GlobalAttrs):
    """
    The 'samp' element.  
    Description: Computer output  
    Categories: flow phrasing palpable  
    Parents: phrasing  
    Children: phrasing  
    Interface: HTMLElement  
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/samp  
    """ # fmt: skip


    def __init__(
        self,
        attrs: Optional[Union[dict[str, Union[str, dict, list]], list[BaseAttribute]]] = None,
        id: Optional[Union[str, GlobalAttrs.id]] = None,
        class_: Optional[Union[str, GlobalAttrs.class_]] = None,
        accesskey: Optional[Union[str, GlobalAttrs.accesskey]] = None,
        autocapitalize: Optional[Union[str, GlobalAttrs.autocapitalize, Literal['on', 'off', 'none', 'sentences', 'words', 'characters']]] = None,
        autocorrect: Optional[Union[str, GlobalAttrs.autocorrect, Literal['on', 'off']]] = None,
        autofocus: Optional[Union[str, GlobalAttrs.autofocus, bool]] = None,
        contenteditable: Optional[Union[str, GlobalAttrs.contenteditable, Literal['true', 'plaintext-only', 'false']]] = None,
        dir: Optional[Union[str, GlobalAttrs.dir, Literal['ltr', 'rtl', 'auto']]] = None,
        draggable: Optional[Union[str, GlobalAttrs.draggable, Literal['true', 'false']]] = None,
        enterkeyhint: Optional[Union[str, GlobalAttrs.enterkeyhint, Literal['enter', 'done', 'go', 'next', 'previous', 'search', 'send']]] = None,
        hidden: Optional[Union[str, GlobalAttrs.hidden, Literal['until-found', 'hidden', '']]] = None,
        inert: Optional[Union[str, GlobalAttrs.inert, bool]] = None,
        inputmode: Optional[Union[str, GlobalAttrs.inputmode, Literal['none', 'text', 'tel', 'email', 'url', 'numeric', 'decimal', 'search']]] = None,
        is_: Optional[Union[str, GlobalAttrs.is_]] = None,
        itemid: Optional[Union[str, GlobalAttrs.itemid]] = None,
        itemprop: Optional[Union[str, GlobalAttrs.itemprop]] = None,
        itemref: Optional[Union[str, GlobalAttrs.itemref]] = None,
        itemscope: Optional[Union[str, GlobalAttrs.itemscope, bool]] = None,
        itemtype: Optional[Union[str, GlobalAttrs.itemtype]] = None,
        lang: Optional[Union[str, GlobalAttrs.lang]] = None,
        nonce: Optional[Union[str, GlobalAttrs.nonce]] = None,
        popover: Optional[Union[str, GlobalAttrs.popover, Literal['auto', 'manual']]] = None,
        slot: Optional[Union[str, GlobalAttrs.slot]] = None,
        spellcheck: Optional[Union[str, GlobalAttrs.spellcheck, Literal['true', 'false', '']]] = None,
        style: Optional[Union[str, GlobalAttrs.style]] = None,
        tabindex: Optional[Union[str, GlobalAttrs.tabindex, int]] = None,
        title: Optional[Union[str, GlobalAttrs.title]] = None,
        translate: Optional[Union[str, GlobalAttrs.translate, Literal['yes', 'no']]] = None,
        writingsuggestions: Optional[Union[str, GlobalAttrs.writingsuggestions, Literal['true', 'false', '']]] = None,
        children: Optional[list] = None
    ) -> None:
        """
        Initialize 'samp' (Computer output) element.  
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/samp

        :param attrs: A list or dictionary of attributes for the element
        :param id: The element's ID
        :param class_: Classes to which the element belongs
            | Set of space-separated tokens
        :param accesskey: Keyboard shortcut to activate or focus element
            | Ordered set of unique space-separated tokens, none of which are identical to another, each consisting of one code point in length
        :param autocapitalize: Recommended autocapitalization behavior (for supported input methods)
        :param autocorrect: Recommended autocorrection behavior (for supported input methods)
        :param autofocus: Automatically focus the element when the page is loaded
        :param contenteditable: Whether the element is editable
        :param dir: The text directionality of the element
        :param draggable: Whether the element is draggable
        :param enterkeyhint: Hint for selecting an enter key action
        :param hidden: Whether the element is relevant
        :param inert: Whether the element is inert.
        :param inputmode: Hint for selecting an input modality
        :param is_: Creates a customized built-in element
            | Valid custom element name of a defined customized built-in element
        :param itemid: Global identifier for a microdata item
            | Valid URL potentially surrounded by spaces
        :param itemprop: Property names of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs, defined property names, or text*
        :param itemref: Referenced elements
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param itemscope: Introduces a microdata item
        :param itemtype: Item types of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs*
        :param lang: Language of the element
            | Valid BCP 47 language tag or the empty string
        :param nonce: Cryptographic nonce used in Content Security Policy checks [CSP]
        :param popover: Makes the element a popover element
        :param slot: The element's desired slot
        :param spellcheck: Whether the element is to have its spelling and grammar checked
        :param style: Presentational and formatting instructions
            | CSS declarations*
        :param tabindex: Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation
        :param title: Advisory information for the element
        :param translate: Whether the element is to be translated when the page is localized
        :param writingsuggestions: Whether the element can offer writing suggestions or not.
        """ #fmt: skip
        super().__init__(
            "samp",
            void_element=False,
            attrs=attrs,
            children=children
        )
        if not (id is None or id is False):
            self._process_attr("id", id)
        if not (class_ is None or class_ is False):
            self._process_attr("class", class_)
        if not (accesskey is None or accesskey is False):
            self._process_attr("accesskey", accesskey)
        if not (autocapitalize is None or autocapitalize is False):
            self._process_attr("autocapitalize", autocapitalize)
        if not (autocorrect is None or autocorrect is False):
            self._process_attr("autocorrect", autocorrect)
        if not (autofocus is None or autofocus is False):
            self._process_attr("autofocus", autofocus)
        if not (contenteditable is None or contenteditable is False):
            self._process_attr("contenteditable", contenteditable)
        if not (dir is None or dir is False):
            self._process_attr("dir", dir)
        if not (draggable is None or draggable is False):
            self._process_attr("draggable", draggable)
        if not (enterkeyhint is None or enterkeyhint is False):
            self._process_attr("enterkeyhint", enterkeyhint)
        if not (hidden is None or hidden is False):
            self._process_attr("hidden", hidden)
        if not (inert is None or inert is False):
            self._process_attr("inert", inert)
        if not (inputmode is None or inputmode is False):
            self._process_attr("inputmode", inputmode)
        if not (is_ is None or is_ is False):
            self._process_attr("is", is_)
        if not (itemid is None or itemid is False):
            self._process_attr("itemid", itemid)
        if not (itemprop is None or itemprop is False):
            self._process_attr("itemprop", itemprop)
        if not (itemref is None or itemref is False):
            self._process_attr("itemref", itemref)
        if not (itemscope is None or itemscope is False):
            self._process_attr("itemscope", itemscope)
        if not (itemtype is None or itemtype is False):
            self._process_attr("itemtype", itemtype)
        if not (lang is None or lang is False):
            self._process_attr("lang", lang)
        if not (nonce is None or nonce is False):
            self._process_attr("nonce", nonce)
        if not (popover is None or popover is False):
            self._process_attr("popover", popover)
        if not (slot is None or slot is False):
            self._process_attr("slot", slot)
        if not (spellcheck is None or spellcheck is False):
            self._process_attr("spellcheck", spellcheck)
        if not (style is None or style is False):
            self._process_attr("style", style)
        if not (tabindex is None or tabindex is False):
            self._process_attr("tabindex", tabindex)
        if not (title is None or title is False):
            self._process_attr("title", title)
        if not (translate is None or translate is False):
            self._process_attr("translate", translate)
        if not (writingsuggestions is None or writingsuggestions is False):
            self._process_attr("writingsuggestions", writingsuggestions)


class script(BaseElement, GlobalAttrs, ScriptAttrs):
    """
    The 'script' element.  
    Description: Embedded script  
    Categories: metadata flow phrasing script-supporting  
    Parents: head phrasing script-supporting  
    Children: script, data, or script documentation*  
    Interface: HTMLScriptElement  
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script  
    """ # fmt: skip


    def __init__(
        self,
        attrs: Optional[Union[dict[str, Union[str, dict, list]], list[BaseAttribute]]] = None,
        id: Optional[Union[str, GlobalAttrs.id]] = None,
        class_: Optional[Union[str, GlobalAttrs.class_]] = None,
        async_: Optional[Union[str, ScriptAttrs.async_, bool]] = None,
        blocking: Optional[Union[str, ScriptAttrs.blocking]] = None,
        crossorigin: Optional[Union[str, ScriptAttrs.crossorigin, Literal['anonymous', 'use-credentials']]] = None,
        defer: Optional[Union[str, ScriptAttrs.defer, bool]] = None,
        fetchpriority: Optional[Union[str, ScriptAttrs.fetchpriority, Literal['auto', 'high', 'low']]] = None,
        integrity: Optional[Union[str, ScriptAttrs.integrity]] = None,
        nomodule: Optional[Union[str, ScriptAttrs.nomodule, bool]] = None,
        referrerpolicy: Optional[Union[str, ScriptAttrs.referrerpolicy]] = None,
        src: Optional[Union[str, ScriptAttrs.src]] = None,
        type: Optional[Union[str, ScriptAttrs.type]] = None,
        accesskey: Optional[Union[str, GlobalAttrs.accesskey]] = None,
        autocapitalize: Optional[Union[str, GlobalAttrs.autocapitalize, Literal['on', 'off', 'none', 'sentences', 'words', 'characters']]] = None,
        autocorrect: Optional[Union[str, GlobalAttrs.autocorrect, Literal['on', 'off']]] = None,
        autofocus: Optional[Union[str, GlobalAttrs.autofocus, bool]] = None,
        contenteditable: Optional[Union[str, GlobalAttrs.contenteditable, Literal['true', 'plaintext-only', 'false']]] = None,
        dir: Optional[Union[str, GlobalAttrs.dir, Literal['ltr', 'rtl', 'auto']]] = None,
        draggable: Optional[Union[str, GlobalAttrs.draggable, Literal['true', 'false']]] = None,
        enterkeyhint: Optional[Union[str, GlobalAttrs.enterkeyhint, Literal['enter', 'done', 'go', 'next', 'previous', 'search', 'send']]] = None,
        hidden: Optional[Union[str, GlobalAttrs.hidden, Literal['until-found', 'hidden', '']]] = None,
        inert: Optional[Union[str, GlobalAttrs.inert, bool]] = None,
        inputmode: Optional[Union[str, GlobalAttrs.inputmode, Literal['none', 'text', 'tel', 'email', 'url', 'numeric', 'decimal', 'search']]] = None,
        is_: Optional[Union[str, GlobalAttrs.is_]] = None,
        itemid: Optional[Union[str, GlobalAttrs.itemid]] = None,
        itemprop: Optional[Union[str, GlobalAttrs.itemprop]] = None,
        itemref: Optional[Union[str, GlobalAttrs.itemref]] = None,
        itemscope: Optional[Union[str, GlobalAttrs.itemscope, bool]] = None,
        itemtype: Optional[Union[str, GlobalAttrs.itemtype]] = None,
        lang: Optional[Union[str, GlobalAttrs.lang]] = None,
        nonce: Optional[Union[str, GlobalAttrs.nonce]] = None,
        popover: Optional[Union[str, GlobalAttrs.popover, Literal['auto', 'manual']]] = None,
        slot: Optional[Union[str, GlobalAttrs.slot]] = None,
        spellcheck: Optional[Union[str, GlobalAttrs.spellcheck, Literal['true', 'false', '']]] = None,
        style: Optional[Union[str, GlobalAttrs.style]] = None,
        tabindex: Optional[Union[str, GlobalAttrs.tabindex, int]] = None,
        title: Optional[Union[str, GlobalAttrs.title]] = None,
        translate: Optional[Union[str, GlobalAttrs.translate, Literal['yes', 'no']]] = None,
        writingsuggestions: Optional[Union[str, GlobalAttrs.writingsuggestions, Literal['true', 'false', '']]] = None,
        children: Optional[list] = None
    ) -> None:
        """
        Initialize 'script' (Embedded script) element.  
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script

        :param attrs: A list or dictionary of attributes for the element
        :param id: The element's ID
        :param class_: Classes to which the element belongs
            | Set of space-separated tokens
        :param async_: Execute script when available, without blocking while fetching
        :param blocking: Whether the element is potentially render-blocking
            | Unordered set of unique space-separated tokens*
        :param crossorigin: How the element handles crossorigin requests
        :param defer: Defer script execution
        :param fetchpriority: Sets the priority for fetches initiated by the element
        :param integrity: Integrity metadata used in Subresource Integrity checks [SRI]
        :param nomodule: Prevents execution in user agents that support module scripts
        :param referrerpolicy: Referrer policy for fetches initiated by the element
            | Referrer policy
        :param src: Address of the resource
            | Valid non-empty URL potentially surrounded by spaces
        :param type: Type of script
            | "module"; a valid MIME type string that is not a JavaScript MIME type essence match
        :param accesskey: Keyboard shortcut to activate or focus element
            | Ordered set of unique space-separated tokens, none of which are identical to another, each consisting of one code point in length
        :param autocapitalize: Recommended autocapitalization behavior (for supported input methods)
        :param autocorrect: Recommended autocorrection behavior (for supported input methods)
        :param autofocus: Automatically focus the element when the page is loaded
        :param contenteditable: Whether the element is editable
        :param dir: The text directionality of the element
        :param draggable: Whether the element is draggable
        :param enterkeyhint: Hint for selecting an enter key action
        :param hidden: Whether the element is relevant
        :param inert: Whether the element is inert.
        :param inputmode: Hint for selecting an input modality
        :param is_: Creates a customized built-in element
            | Valid custom element name of a defined customized built-in element
        :param itemid: Global identifier for a microdata item
            | Valid URL potentially surrounded by spaces
        :param itemprop: Property names of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs, defined property names, or text*
        :param itemref: Referenced elements
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param itemscope: Introduces a microdata item
        :param itemtype: Item types of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs*
        :param lang: Language of the element
            | Valid BCP 47 language tag or the empty string
        :param nonce: Cryptographic nonce used in Content Security Policy checks [CSP]
        :param popover: Makes the element a popover element
        :param slot: The element's desired slot
        :param spellcheck: Whether the element is to have its spelling and grammar checked
        :param style: Presentational and formatting instructions
            | CSS declarations*
        :param tabindex: Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation
        :param title: Advisory information for the element
        :param translate: Whether the element is to be translated when the page is localized
        :param writingsuggestions: Whether the element can offer writing suggestions or not.
        """ #fmt: skip
        super().__init__(
            "script",
            void_element=False,
            attrs=attrs,
            children=children
        )
        if not (id is None or id is False):
            self._process_attr("id", id)
        if not (class_ is None or class_ is False):
            self._process_attr("class", class_)
        if not (async_ is None or async_ is False):
            self._process_attr("async", async_)
        if not (blocking is None or blocking is False):
            self._process_attr("blocking", blocking)
        if not (crossorigin is None or crossorigin is False):
            self._process_attr("crossorigin", crossorigin)
        if not (defer is None or defer is False):
            self._process_attr("defer", defer)
        if not (fetchpriority is None or fetchpriority is False):
            self._process_attr("fetchpriority", fetchpriority)
        if not (integrity is None or integrity is False):
            self._process_attr("integrity", integrity)
        if not (nomodule is None or nomodule is False):
            self._process_attr("nomodule", nomodule)
        if not (referrerpolicy is None or referrerpolicy is False):
            self._process_attr("referrerpolicy", referrerpolicy)
        if not (src is None or src is False):
            self._process_attr("src", src)
        if not (type is None or type is False):
            self._process_attr("type", type)
        if not (accesskey is None or accesskey is False):
            self._process_attr("accesskey", accesskey)
        if not (autocapitalize is None or autocapitalize is False):
            self._process_attr("autocapitalize", autocapitalize)
        if not (autocorrect is None or autocorrect is False):
            self._process_attr("autocorrect", autocorrect)
        if not (autofocus is None or autofocus is False):
            self._process_attr("autofocus", autofocus)
        if not (contenteditable is None or contenteditable is False):
            self._process_attr("contenteditable", contenteditable)
        if not (dir is None or dir is False):
            self._process_attr("dir", dir)
        if not (draggable is None or draggable is False):
            self._process_attr("draggable", draggable)
        if not (enterkeyhint is None or enterkeyhint is False):
            self._process_attr("enterkeyhint", enterkeyhint)
        if not (hidden is None or hidden is False):
            self._process_attr("hidden", hidden)
        if not (inert is None or inert is False):
            self._process_attr("inert", inert)
        if not (inputmode is None or inputmode is False):
            self._process_attr("inputmode", inputmode)
        if not (is_ is None or is_ is False):
            self._process_attr("is", is_)
        if not (itemid is None or itemid is False):
            self._process_attr("itemid", itemid)
        if not (itemprop is None or itemprop is False):
            self._process_attr("itemprop", itemprop)
        if not (itemref is None or itemref is False):
            self._process_attr("itemref", itemref)
        if not (itemscope is None or itemscope is False):
            self._process_attr("itemscope", itemscope)
        if not (itemtype is None or itemtype is False):
            self._process_attr("itemtype", itemtype)
        if not (lang is None or lang is False):
            self._process_attr("lang", lang)
        if not (nonce is None or nonce is False):
            self._process_attr("nonce", nonce)
        if not (popover is None or popover is False):
            self._process_attr("popover", popover)
        if not (slot is None or slot is False):
            self._process_attr("slot", slot)
        if not (spellcheck is None or spellcheck is False):
            self._process_attr("spellcheck", spellcheck)
        if not (style is None or style is False):
            self._process_attr("style", style)
        if not (tabindex is None or tabindex is False):
            self._process_attr("tabindex", tabindex)
        if not (title is None or title is False):
            self._process_attr("title", title)
        if not (translate is None or translate is False):
            self._process_attr("translate", translate)
        if not (writingsuggestions is None or writingsuggestions is False):
            self._process_attr("writingsuggestions", writingsuggestions)


class search(BaseElement, GlobalAttrs):
    """
    The 'search' element.  
    Description: Container for search controls  
    Categories: flow palpable  
    Parents: flow  
    Children: flow  
    Interface: HTMLElement  
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/search  
    """ # fmt: skip


    def __init__(
        self,
        attrs: Optional[Union[dict[str, Union[str, dict, list]], list[BaseAttribute]]] = None,
        id: Optional[Union[str, GlobalAttrs.id]] = None,
        class_: Optional[Union[str, GlobalAttrs.class_]] = None,
        accesskey: Optional[Union[str, GlobalAttrs.accesskey]] = None,
        autocapitalize: Optional[Union[str, GlobalAttrs.autocapitalize, Literal['on', 'off', 'none', 'sentences', 'words', 'characters']]] = None,
        autocorrect: Optional[Union[str, GlobalAttrs.autocorrect, Literal['on', 'off']]] = None,
        autofocus: Optional[Union[str, GlobalAttrs.autofocus, bool]] = None,
        contenteditable: Optional[Union[str, GlobalAttrs.contenteditable, Literal['true', 'plaintext-only', 'false']]] = None,
        dir: Optional[Union[str, GlobalAttrs.dir, Literal['ltr', 'rtl', 'auto']]] = None,
        draggable: Optional[Union[str, GlobalAttrs.draggable, Literal['true', 'false']]] = None,
        enterkeyhint: Optional[Union[str, GlobalAttrs.enterkeyhint, Literal['enter', 'done', 'go', 'next', 'previous', 'search', 'send']]] = None,
        hidden: Optional[Union[str, GlobalAttrs.hidden, Literal['until-found', 'hidden', '']]] = None,
        inert: Optional[Union[str, GlobalAttrs.inert, bool]] = None,
        inputmode: Optional[Union[str, GlobalAttrs.inputmode, Literal['none', 'text', 'tel', 'email', 'url', 'numeric', 'decimal', 'search']]] = None,
        is_: Optional[Union[str, GlobalAttrs.is_]] = None,
        itemid: Optional[Union[str, GlobalAttrs.itemid]] = None,
        itemprop: Optional[Union[str, GlobalAttrs.itemprop]] = None,
        itemref: Optional[Union[str, GlobalAttrs.itemref]] = None,
        itemscope: Optional[Union[str, GlobalAttrs.itemscope, bool]] = None,
        itemtype: Optional[Union[str, GlobalAttrs.itemtype]] = None,
        lang: Optional[Union[str, GlobalAttrs.lang]] = None,
        nonce: Optional[Union[str, GlobalAttrs.nonce]] = None,
        popover: Optional[Union[str, GlobalAttrs.popover, Literal['auto', 'manual']]] = None,
        slot: Optional[Union[str, GlobalAttrs.slot]] = None,
        spellcheck: Optional[Union[str, GlobalAttrs.spellcheck, Literal['true', 'false', '']]] = None,
        style: Optional[Union[str, GlobalAttrs.style]] = None,
        tabindex: Optional[Union[str, GlobalAttrs.tabindex, int]] = None,
        title: Optional[Union[str, GlobalAttrs.title]] = None,
        translate: Optional[Union[str, GlobalAttrs.translate, Literal['yes', 'no']]] = None,
        writingsuggestions: Optional[Union[str, GlobalAttrs.writingsuggestions, Literal['true', 'false', '']]] = None,
        children: Optional[list] = None
    ) -> None:
        """
        Initialize 'search' (Container for search controls) element.  
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/search

        :param attrs: A list or dictionary of attributes for the element
        :param id: The element's ID
        :param class_: Classes to which the element belongs
            | Set of space-separated tokens
        :param accesskey: Keyboard shortcut to activate or focus element
            | Ordered set of unique space-separated tokens, none of which are identical to another, each consisting of one code point in length
        :param autocapitalize: Recommended autocapitalization behavior (for supported input methods)
        :param autocorrect: Recommended autocorrection behavior (for supported input methods)
        :param autofocus: Automatically focus the element when the page is loaded
        :param contenteditable: Whether the element is editable
        :param dir: The text directionality of the element
        :param draggable: Whether the element is draggable
        :param enterkeyhint: Hint for selecting an enter key action
        :param hidden: Whether the element is relevant
        :param inert: Whether the element is inert.
        :param inputmode: Hint for selecting an input modality
        :param is_: Creates a customized built-in element
            | Valid custom element name of a defined customized built-in element
        :param itemid: Global identifier for a microdata item
            | Valid URL potentially surrounded by spaces
        :param itemprop: Property names of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs, defined property names, or text*
        :param itemref: Referenced elements
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param itemscope: Introduces a microdata item
        :param itemtype: Item types of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs*
        :param lang: Language of the element
            | Valid BCP 47 language tag or the empty string
        :param nonce: Cryptographic nonce used in Content Security Policy checks [CSP]
        :param popover: Makes the element a popover element
        :param slot: The element's desired slot
        :param spellcheck: Whether the element is to have its spelling and grammar checked
        :param style: Presentational and formatting instructions
            | CSS declarations*
        :param tabindex: Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation
        :param title: Advisory information for the element
        :param translate: Whether the element is to be translated when the page is localized
        :param writingsuggestions: Whether the element can offer writing suggestions or not.
        """ #fmt: skip
        super().__init__(
            "search",
            void_element=False,
            attrs=attrs,
            children=children
        )
        if not (id is None or id is False):
            self._process_attr("id", id)
        if not (class_ is None or class_ is False):
            self._process_attr("class", class_)
        if not (accesskey is None or accesskey is False):
            self._process_attr("accesskey", accesskey)
        if not (autocapitalize is None or autocapitalize is False):
            self._process_attr("autocapitalize", autocapitalize)
        if not (autocorrect is None or autocorrect is False):
            self._process_attr("autocorrect", autocorrect)
        if not (autofocus is None or autofocus is False):
            self._process_attr("autofocus", autofocus)
        if not (contenteditable is None or contenteditable is False):
            self._process_attr("contenteditable", contenteditable)
        if not (dir is None or dir is False):
            self._process_attr("dir", dir)
        if not (draggable is None or draggable is False):
            self._process_attr("draggable", draggable)
        if not (enterkeyhint is None or enterkeyhint is False):
            self._process_attr("enterkeyhint", enterkeyhint)
        if not (hidden is None or hidden is False):
            self._process_attr("hidden", hidden)
        if not (inert is None or inert is False):
            self._process_attr("inert", inert)
        if not (inputmode is None or inputmode is False):
            self._process_attr("inputmode", inputmode)
        if not (is_ is None or is_ is False):
            self._process_attr("is", is_)
        if not (itemid is None or itemid is False):
            self._process_attr("itemid", itemid)
        if not (itemprop is None or itemprop is False):
            self._process_attr("itemprop", itemprop)
        if not (itemref is None or itemref is False):
            self._process_attr("itemref", itemref)
        if not (itemscope is None or itemscope is False):
            self._process_attr("itemscope", itemscope)
        if not (itemtype is None or itemtype is False):
            self._process_attr("itemtype", itemtype)
        if not (lang is None or lang is False):
            self._process_attr("lang", lang)
        if not (nonce is None or nonce is False):
            self._process_attr("nonce", nonce)
        if not (popover is None or popover is False):
            self._process_attr("popover", popover)
        if not (slot is None or slot is False):
            self._process_attr("slot", slot)
        if not (spellcheck is None or spellcheck is False):
            self._process_attr("spellcheck", spellcheck)
        if not (style is None or style is False):
            self._process_attr("style", style)
        if not (tabindex is None or tabindex is False):
            self._process_attr("tabindex", tabindex)
        if not (title is None or title is False):
            self._process_attr("title", title)
        if not (translate is None or translate is False):
            self._process_attr("translate", translate)
        if not (writingsuggestions is None or writingsuggestions is False):
            self._process_attr("writingsuggestions", writingsuggestions)


class section(BaseElement, GlobalAttrs):
    """
    The 'section' element.  
    Description: Generic document or application section  
    Categories: flow sectioning palpable  
    Parents: flow  
    Children: flow  
    Interface: HTMLElement  
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/section  
    """ # fmt: skip


    def __init__(
        self,
        attrs: Optional[Union[dict[str, Union[str, dict, list]], list[BaseAttribute]]] = None,
        id: Optional[Union[str, GlobalAttrs.id]] = None,
        class_: Optional[Union[str, GlobalAttrs.class_]] = None,
        accesskey: Optional[Union[str, GlobalAttrs.accesskey]] = None,
        autocapitalize: Optional[Union[str, GlobalAttrs.autocapitalize, Literal['on', 'off', 'none', 'sentences', 'words', 'characters']]] = None,
        autocorrect: Optional[Union[str, GlobalAttrs.autocorrect, Literal['on', 'off']]] = None,
        autofocus: Optional[Union[str, GlobalAttrs.autofocus, bool]] = None,
        contenteditable: Optional[Union[str, GlobalAttrs.contenteditable, Literal['true', 'plaintext-only', 'false']]] = None,
        dir: Optional[Union[str, GlobalAttrs.dir, Literal['ltr', 'rtl', 'auto']]] = None,
        draggable: Optional[Union[str, GlobalAttrs.draggable, Literal['true', 'false']]] = None,
        enterkeyhint: Optional[Union[str, GlobalAttrs.enterkeyhint, Literal['enter', 'done', 'go', 'next', 'previous', 'search', 'send']]] = None,
        hidden: Optional[Union[str, GlobalAttrs.hidden, Literal['until-found', 'hidden', '']]] = None,
        inert: Optional[Union[str, GlobalAttrs.inert, bool]] = None,
        inputmode: Optional[Union[str, GlobalAttrs.inputmode, Literal['none', 'text', 'tel', 'email', 'url', 'numeric', 'decimal', 'search']]] = None,
        is_: Optional[Union[str, GlobalAttrs.is_]] = None,
        itemid: Optional[Union[str, GlobalAttrs.itemid]] = None,
        itemprop: Optional[Union[str, GlobalAttrs.itemprop]] = None,
        itemref: Optional[Union[str, GlobalAttrs.itemref]] = None,
        itemscope: Optional[Union[str, GlobalAttrs.itemscope, bool]] = None,
        itemtype: Optional[Union[str, GlobalAttrs.itemtype]] = None,
        lang: Optional[Union[str, GlobalAttrs.lang]] = None,
        nonce: Optional[Union[str, GlobalAttrs.nonce]] = None,
        popover: Optional[Union[str, GlobalAttrs.popover, Literal['auto', 'manual']]] = None,
        slot: Optional[Union[str, GlobalAttrs.slot]] = None,
        spellcheck: Optional[Union[str, GlobalAttrs.spellcheck, Literal['true', 'false', '']]] = None,
        style: Optional[Union[str, GlobalAttrs.style]] = None,
        tabindex: Optional[Union[str, GlobalAttrs.tabindex, int]] = None,
        title: Optional[Union[str, GlobalAttrs.title]] = None,
        translate: Optional[Union[str, GlobalAttrs.translate, Literal['yes', 'no']]] = None,
        writingsuggestions: Optional[Union[str, GlobalAttrs.writingsuggestions, Literal['true', 'false', '']]] = None,
        children: Optional[list] = None
    ) -> None:
        """
        Initialize 'section' (Generic document or application section) element.  
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/section

        :param attrs: A list or dictionary of attributes for the element
        :param id: The element's ID
        :param class_: Classes to which the element belongs
            | Set of space-separated tokens
        :param accesskey: Keyboard shortcut to activate or focus element
            | Ordered set of unique space-separated tokens, none of which are identical to another, each consisting of one code point in length
        :param autocapitalize: Recommended autocapitalization behavior (for supported input methods)
        :param autocorrect: Recommended autocorrection behavior (for supported input methods)
        :param autofocus: Automatically focus the element when the page is loaded
        :param contenteditable: Whether the element is editable
        :param dir: The text directionality of the element
        :param draggable: Whether the element is draggable
        :param enterkeyhint: Hint for selecting an enter key action
        :param hidden: Whether the element is relevant
        :param inert: Whether the element is inert.
        :param inputmode: Hint for selecting an input modality
        :param is_: Creates a customized built-in element
            | Valid custom element name of a defined customized built-in element
        :param itemid: Global identifier for a microdata item
            | Valid URL potentially surrounded by spaces
        :param itemprop: Property names of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs, defined property names, or text*
        :param itemref: Referenced elements
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param itemscope: Introduces a microdata item
        :param itemtype: Item types of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs*
        :param lang: Language of the element
            | Valid BCP 47 language tag or the empty string
        :param nonce: Cryptographic nonce used in Content Security Policy checks [CSP]
        :param popover: Makes the element a popover element
        :param slot: The element's desired slot
        :param spellcheck: Whether the element is to have its spelling and grammar checked
        :param style: Presentational and formatting instructions
            | CSS declarations*
        :param tabindex: Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation
        :param title: Advisory information for the element
        :param translate: Whether the element is to be translated when the page is localized
        :param writingsuggestions: Whether the element can offer writing suggestions or not.
        """ #fmt: skip
        super().__init__(
            "section",
            void_element=False,
            attrs=attrs,
            children=children
        )
        if not (id is None or id is False):
            self._process_attr("id", id)
        if not (class_ is None or class_ is False):
            self._process_attr("class", class_)
        if not (accesskey is None or accesskey is False):
            self._process_attr("accesskey", accesskey)
        if not (autocapitalize is None or autocapitalize is False):
            self._process_attr("autocapitalize", autocapitalize)
        if not (autocorrect is None or autocorrect is False):
            self._process_attr("autocorrect", autocorrect)
        if not (autofocus is None or autofocus is False):
            self._process_attr("autofocus", autofocus)
        if not (contenteditable is None or contenteditable is False):
            self._process_attr("contenteditable", contenteditable)
        if not (dir is None or dir is False):
            self._process_attr("dir", dir)
        if not (draggable is None or draggable is False):
            self._process_attr("draggable", draggable)
        if not (enterkeyhint is None or enterkeyhint is False):
            self._process_attr("enterkeyhint", enterkeyhint)
        if not (hidden is None or hidden is False):
            self._process_attr("hidden", hidden)
        if not (inert is None or inert is False):
            self._process_attr("inert", inert)
        if not (inputmode is None or inputmode is False):
            self._process_attr("inputmode", inputmode)
        if not (is_ is None or is_ is False):
            self._process_attr("is", is_)
        if not (itemid is None or itemid is False):
            self._process_attr("itemid", itemid)
        if not (itemprop is None or itemprop is False):
            self._process_attr("itemprop", itemprop)
        if not (itemref is None or itemref is False):
            self._process_attr("itemref", itemref)
        if not (itemscope is None or itemscope is False):
            self._process_attr("itemscope", itemscope)
        if not (itemtype is None or itemtype is False):
            self._process_attr("itemtype", itemtype)
        if not (lang is None or lang is False):
            self._process_attr("lang", lang)
        if not (nonce is None or nonce is False):
            self._process_attr("nonce", nonce)
        if not (popover is None or popover is False):
            self._process_attr("popover", popover)
        if not (slot is None or slot is False):
            self._process_attr("slot", slot)
        if not (spellcheck is None or spellcheck is False):
            self._process_attr("spellcheck", spellcheck)
        if not (style is None or style is False):
            self._process_attr("style", style)
        if not (tabindex is None or tabindex is False):
            self._process_attr("tabindex", tabindex)
        if not (title is None or title is False):
            self._process_attr("title", title)
        if not (translate is None or translate is False):
            self._process_attr("translate", translate)
        if not (writingsuggestions is None or writingsuggestions is False):
            self._process_attr("writingsuggestions", writingsuggestions)


class select(BaseElement, GlobalAttrs, SelectAttrs):
    """
    The 'select' element.  
    Description: List box control  
    Categories: flow phrasing interactive listed labelable submittable resettable form-associated palpable  
    Parents: phrasing  
    Children: option optgroup script-supporting elements  
    Interface: HTMLSelectElement  
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select  
    """ # fmt: skip


    def __init__(
        self,
        attrs: Optional[Union[dict[str, Union[str, dict, list]], list[BaseAttribute]]] = None,
        id: Optional[Union[str, GlobalAttrs.id]] = None,
        class_: Optional[Union[str, GlobalAttrs.class_]] = None,
        autocomplete: Optional[Union[str, SelectAttrs.autocomplete]] = None,
        disabled: Optional[Union[str, SelectAttrs.disabled, bool]] = None,
        form: Optional[Union[str, SelectAttrs.form]] = None,
        multiple: Optional[Union[str, SelectAttrs.multiple, bool]] = None,
        name: Optional[Union[str, SelectAttrs.name]] = None,
        required: Optional[Union[str, SelectAttrs.required, bool]] = None,
        size: Optional[Union[str, SelectAttrs.size]] = None,
        accesskey: Optional[Union[str, GlobalAttrs.accesskey]] = None,
        autocapitalize: Optional[Union[str, GlobalAttrs.autocapitalize, Literal['on', 'off', 'none', 'sentences', 'words', 'characters']]] = None,
        autocorrect: Optional[Union[str, GlobalAttrs.autocorrect, Literal['on', 'off']]] = None,
        autofocus: Optional[Union[str, GlobalAttrs.autofocus, bool]] = None,
        contenteditable: Optional[Union[str, GlobalAttrs.contenteditable, Literal['true', 'plaintext-only', 'false']]] = None,
        dir: Optional[Union[str, GlobalAttrs.dir, Literal['ltr', 'rtl', 'auto']]] = None,
        draggable: Optional[Union[str, GlobalAttrs.draggable, Literal['true', 'false']]] = None,
        enterkeyhint: Optional[Union[str, GlobalAttrs.enterkeyhint, Literal['enter', 'done', 'go', 'next', 'previous', 'search', 'send']]] = None,
        hidden: Optional[Union[str, GlobalAttrs.hidden, Literal['until-found', 'hidden', '']]] = None,
        inert: Optional[Union[str, GlobalAttrs.inert, bool]] = None,
        inputmode: Optional[Union[str, GlobalAttrs.inputmode, Literal['none', 'text', 'tel', 'email', 'url', 'numeric', 'decimal', 'search']]] = None,
        is_: Optional[Union[str, GlobalAttrs.is_]] = None,
        itemid: Optional[Union[str, GlobalAttrs.itemid]] = None,
        itemprop: Optional[Union[str, GlobalAttrs.itemprop]] = None,
        itemref: Optional[Union[str, GlobalAttrs.itemref]] = None,
        itemscope: Optional[Union[str, GlobalAttrs.itemscope, bool]] = None,
        itemtype: Optional[Union[str, GlobalAttrs.itemtype]] = None,
        lang: Optional[Union[str, GlobalAttrs.lang]] = None,
        nonce: Optional[Union[str, GlobalAttrs.nonce]] = None,
        popover: Optional[Union[str, GlobalAttrs.popover, Literal['auto', 'manual']]] = None,
        slot: Optional[Union[str, GlobalAttrs.slot]] = None,
        spellcheck: Optional[Union[str, GlobalAttrs.spellcheck, Literal['true', 'false', '']]] = None,
        style: Optional[Union[str, GlobalAttrs.style]] = None,
        tabindex: Optional[Union[str, GlobalAttrs.tabindex, int]] = None,
        title: Optional[Union[str, GlobalAttrs.title]] = None,
        translate: Optional[Union[str, GlobalAttrs.translate, Literal['yes', 'no']]] = None,
        writingsuggestions: Optional[Union[str, GlobalAttrs.writingsuggestions, Literal['true', 'false', '']]] = None,
        children: Optional[list] = None
    ) -> None:
        """
        Initialize 'select' (List box control) element.  
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select

        :param attrs: A list or dictionary of attributes for the element
        :param id: The element's ID
        :param class_: Classes to which the element belongs
            | Set of space-separated tokens
        :param autocomplete: Hint for form autofill feature
            | Autofill field name and related tokens*
        :param disabled: Whether the form control is disabled
        :param form: Associates the element with a form element
            | ID*
        :param multiple: Whether to allow multiple values
        :param name: Name of the element to use for form submission and in the form.elements API
        :param required: Whether the control is required for form submission
        :param size: Size of the control
            | Valid non-negative integer greater than zero
        :param accesskey: Keyboard shortcut to activate or focus element
            | Ordered set of unique space-separated tokens, none of which are identical to another, each consisting of one code point in length
        :param autocapitalize: Recommended autocapitalization behavior (for supported input methods)
        :param autocorrect: Recommended autocorrection behavior (for supported input methods)
        :param autofocus: Automatically focus the element when the page is loaded
        :param contenteditable: Whether the element is editable
        :param dir: The text directionality of the element
        :param draggable: Whether the element is draggable
        :param enterkeyhint: Hint for selecting an enter key action
        :param hidden: Whether the element is relevant
        :param inert: Whether the element is inert.
        :param inputmode: Hint for selecting an input modality
        :param is_: Creates a customized built-in element
            | Valid custom element name of a defined customized built-in element
        :param itemid: Global identifier for a microdata item
            | Valid URL potentially surrounded by spaces
        :param itemprop: Property names of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs, defined property names, or text*
        :param itemref: Referenced elements
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param itemscope: Introduces a microdata item
        :param itemtype: Item types of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs*
        :param lang: Language of the element
            | Valid BCP 47 language tag or the empty string
        :param nonce: Cryptographic nonce used in Content Security Policy checks [CSP]
        :param popover: Makes the element a popover element
        :param slot: The element's desired slot
        :param spellcheck: Whether the element is to have its spelling and grammar checked
        :param style: Presentational and formatting instructions
            | CSS declarations*
        :param tabindex: Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation
        :param title: Advisory information for the element
        :param translate: Whether the element is to be translated when the page is localized
        :param writingsuggestions: Whether the element can offer writing suggestions or not.
        """ #fmt: skip
        super().__init__(
            "select",
            void_element=False,
            attrs=attrs,
            children=children
        )
        if not (id is None or id is False):
            self._process_attr("id", id)
        if not (class_ is None or class_ is False):
            self._process_attr("class", class_)
        if not (autocomplete is None or autocomplete is False):
            self._process_attr("autocomplete", autocomplete)
        if not (disabled is None or disabled is False):
            self._process_attr("disabled", disabled)
        if not (form is None or form is False):
            self._process_attr("form", form)
        if not (multiple is None or multiple is False):
            self._process_attr("multiple", multiple)
        if not (name is None or name is False):
            self._process_attr("name", name)
        if not (required is None or required is False):
            self._process_attr("required", required)
        if not (size is None or size is False):
            self._process_attr("size", size)
        if not (accesskey is None or accesskey is False):
            self._process_attr("accesskey", accesskey)
        if not (autocapitalize is None or autocapitalize is False):
            self._process_attr("autocapitalize", autocapitalize)
        if not (autocorrect is None or autocorrect is False):
            self._process_attr("autocorrect", autocorrect)
        if not (autofocus is None or autofocus is False):
            self._process_attr("autofocus", autofocus)
        if not (contenteditable is None or contenteditable is False):
            self._process_attr("contenteditable", contenteditable)
        if not (dir is None or dir is False):
            self._process_attr("dir", dir)
        if not (draggable is None or draggable is False):
            self._process_attr("draggable", draggable)
        if not (enterkeyhint is None or enterkeyhint is False):
            self._process_attr("enterkeyhint", enterkeyhint)
        if not (hidden is None or hidden is False):
            self._process_attr("hidden", hidden)
        if not (inert is None or inert is False):
            self._process_attr("inert", inert)
        if not (inputmode is None or inputmode is False):
            self._process_attr("inputmode", inputmode)
        if not (is_ is None or is_ is False):
            self._process_attr("is", is_)
        if not (itemid is None or itemid is False):
            self._process_attr("itemid", itemid)
        if not (itemprop is None or itemprop is False):
            self._process_attr("itemprop", itemprop)
        if not (itemref is None or itemref is False):
            self._process_attr("itemref", itemref)
        if not (itemscope is None or itemscope is False):
            self._process_attr("itemscope", itemscope)
        if not (itemtype is None or itemtype is False):
            self._process_attr("itemtype", itemtype)
        if not (lang is None or lang is False):
            self._process_attr("lang", lang)
        if not (nonce is None or nonce is False):
            self._process_attr("nonce", nonce)
        if not (popover is None or popover is False):
            self._process_attr("popover", popover)
        if not (slot is None or slot is False):
            self._process_attr("slot", slot)
        if not (spellcheck is None or spellcheck is False):
            self._process_attr("spellcheck", spellcheck)
        if not (style is None or style is False):
            self._process_attr("style", style)
        if not (tabindex is None or tabindex is False):
            self._process_attr("tabindex", tabindex)
        if not (title is None or title is False):
            self._process_attr("title", title)
        if not (translate is None or translate is False):
            self._process_attr("translate", translate)
        if not (writingsuggestions is None or writingsuggestions is False):
            self._process_attr("writingsuggestions", writingsuggestions)


class slot(BaseElement, GlobalAttrs, SlotAttrs):
    """
    The 'slot' element.  
    Description: Shadow tree slot  
    Categories: flow phrasing  
    Parents: phrasing  
    Children: transparent  
    Interface: HTMLSlotElement  
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/slot  
    """ # fmt: skip


    def __init__(
        self,
        attrs: Optional[Union[dict[str, Union[str, dict, list]], list[BaseAttribute]]] = None,
        id: Optional[Union[str, GlobalAttrs.id]] = None,
        class_: Optional[Union[str, GlobalAttrs.class_]] = None,
        name: Optional[Union[str, SlotAttrs.name]] = None,
        accesskey: Optional[Union[str, GlobalAttrs.accesskey]] = None,
        autocapitalize: Optional[Union[str, GlobalAttrs.autocapitalize, Literal['on', 'off', 'none', 'sentences', 'words', 'characters']]] = None,
        autocorrect: Optional[Union[str, GlobalAttrs.autocorrect, Literal['on', 'off']]] = None,
        autofocus: Optional[Union[str, GlobalAttrs.autofocus, bool]] = None,
        contenteditable: Optional[Union[str, GlobalAttrs.contenteditable, Literal['true', 'plaintext-only', 'false']]] = None,
        dir: Optional[Union[str, GlobalAttrs.dir, Literal['ltr', 'rtl', 'auto']]] = None,
        draggable: Optional[Union[str, GlobalAttrs.draggable, Literal['true', 'false']]] = None,
        enterkeyhint: Optional[Union[str, GlobalAttrs.enterkeyhint, Literal['enter', 'done', 'go', 'next', 'previous', 'search', 'send']]] = None,
        hidden: Optional[Union[str, GlobalAttrs.hidden, Literal['until-found', 'hidden', '']]] = None,
        inert: Optional[Union[str, GlobalAttrs.inert, bool]] = None,
        inputmode: Optional[Union[str, GlobalAttrs.inputmode, Literal['none', 'text', 'tel', 'email', 'url', 'numeric', 'decimal', 'search']]] = None,
        is_: Optional[Union[str, GlobalAttrs.is_]] = None,
        itemid: Optional[Union[str, GlobalAttrs.itemid]] = None,
        itemprop: Optional[Union[str, GlobalAttrs.itemprop]] = None,
        itemref: Optional[Union[str, GlobalAttrs.itemref]] = None,
        itemscope: Optional[Union[str, GlobalAttrs.itemscope, bool]] = None,
        itemtype: Optional[Union[str, GlobalAttrs.itemtype]] = None,
        lang: Optional[Union[str, GlobalAttrs.lang]] = None,
        nonce: Optional[Union[str, GlobalAttrs.nonce]] = None,
        popover: Optional[Union[str, GlobalAttrs.popover, Literal['auto', 'manual']]] = None,
        slot: Optional[Union[str, GlobalAttrs.slot]] = None,
        spellcheck: Optional[Union[str, GlobalAttrs.spellcheck, Literal['true', 'false', '']]] = None,
        style: Optional[Union[str, GlobalAttrs.style]] = None,
        tabindex: Optional[Union[str, GlobalAttrs.tabindex, int]] = None,
        title: Optional[Union[str, GlobalAttrs.title]] = None,
        translate: Optional[Union[str, GlobalAttrs.translate, Literal['yes', 'no']]] = None,
        writingsuggestions: Optional[Union[str, GlobalAttrs.writingsuggestions, Literal['true', 'false', '']]] = None,
        children: Optional[list] = None
    ) -> None:
        """
        Initialize 'slot' (Shadow tree slot) element.  
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/slot

        :param attrs: A list or dictionary of attributes for the element
        :param id: The element's ID
        :param class_: Classes to which the element belongs
            | Set of space-separated tokens
        :param name: Name of shadow tree slot
        :param accesskey: Keyboard shortcut to activate or focus element
            | Ordered set of unique space-separated tokens, none of which are identical to another, each consisting of one code point in length
        :param autocapitalize: Recommended autocapitalization behavior (for supported input methods)
        :param autocorrect: Recommended autocorrection behavior (for supported input methods)
        :param autofocus: Automatically focus the element when the page is loaded
        :param contenteditable: Whether the element is editable
        :param dir: The text directionality of the element
        :param draggable: Whether the element is draggable
        :param enterkeyhint: Hint for selecting an enter key action
        :param hidden: Whether the element is relevant
        :param inert: Whether the element is inert.
        :param inputmode: Hint for selecting an input modality
        :param is_: Creates a customized built-in element
            | Valid custom element name of a defined customized built-in element
        :param itemid: Global identifier for a microdata item
            | Valid URL potentially surrounded by spaces
        :param itemprop: Property names of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs, defined property names, or text*
        :param itemref: Referenced elements
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param itemscope: Introduces a microdata item
        :param itemtype: Item types of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs*
        :param lang: Language of the element
            | Valid BCP 47 language tag or the empty string
        :param nonce: Cryptographic nonce used in Content Security Policy checks [CSP]
        :param popover: Makes the element a popover element
        :param slot: The element's desired slot
        :param spellcheck: Whether the element is to have its spelling and grammar checked
        :param style: Presentational and formatting instructions
            | CSS declarations*
        :param tabindex: Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation
        :param title: Advisory information for the element
        :param translate: Whether the element is to be translated when the page is localized
        :param writingsuggestions: Whether the element can offer writing suggestions or not.
        """ #fmt: skip
        super().__init__(
            "slot",
            void_element=False,
            attrs=attrs,
            children=children
        )
        if not (id is None or id is False):
            self._process_attr("id", id)
        if not (class_ is None or class_ is False):
            self._process_attr("class", class_)
        if not (name is None or name is False):
            self._process_attr("name", name)
        if not (accesskey is None or accesskey is False):
            self._process_attr("accesskey", accesskey)
        if not (autocapitalize is None or autocapitalize is False):
            self._process_attr("autocapitalize", autocapitalize)
        if not (autocorrect is None or autocorrect is False):
            self._process_attr("autocorrect", autocorrect)
        if not (autofocus is None or autofocus is False):
            self._process_attr("autofocus", autofocus)
        if not (contenteditable is None or contenteditable is False):
            self._process_attr("contenteditable", contenteditable)
        if not (dir is None or dir is False):
            self._process_attr("dir", dir)
        if not (draggable is None or draggable is False):
            self._process_attr("draggable", draggable)
        if not (enterkeyhint is None or enterkeyhint is False):
            self._process_attr("enterkeyhint", enterkeyhint)
        if not (hidden is None or hidden is False):
            self._process_attr("hidden", hidden)
        if not (inert is None or inert is False):
            self._process_attr("inert", inert)
        if not (inputmode is None or inputmode is False):
            self._process_attr("inputmode", inputmode)
        if not (is_ is None or is_ is False):
            self._process_attr("is", is_)
        if not (itemid is None or itemid is False):
            self._process_attr("itemid", itemid)
        if not (itemprop is None or itemprop is False):
            self._process_attr("itemprop", itemprop)
        if not (itemref is None or itemref is False):
            self._process_attr("itemref", itemref)
        if not (itemscope is None or itemscope is False):
            self._process_attr("itemscope", itemscope)
        if not (itemtype is None or itemtype is False):
            self._process_attr("itemtype", itemtype)
        if not (lang is None or lang is False):
            self._process_attr("lang", lang)
        if not (nonce is None or nonce is False):
            self._process_attr("nonce", nonce)
        if not (popover is None or popover is False):
            self._process_attr("popover", popover)
        if not (slot is None or slot is False):
            self._process_attr("slot", slot)
        if not (spellcheck is None or spellcheck is False):
            self._process_attr("spellcheck", spellcheck)
        if not (style is None or style is False):
            self._process_attr("style", style)
        if not (tabindex is None or tabindex is False):
            self._process_attr("tabindex", tabindex)
        if not (title is None or title is False):
            self._process_attr("title", title)
        if not (translate is None or translate is False):
            self._process_attr("translate", translate)
        if not (writingsuggestions is None or writingsuggestions is False):
            self._process_attr("writingsuggestions", writingsuggestions)


class small(BaseElement, GlobalAttrs):
    """
    The 'small' element.  
    Description: Side comment  
    Categories: flow phrasing palpable  
    Parents: phrasing  
    Children: phrasing  
    Interface: HTMLElement  
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/small  
    """ # fmt: skip


    def __init__(
        self,
        attrs: Optional[Union[dict[str, Union[str, dict, list]], list[BaseAttribute]]] = None,
        id: Optional[Union[str, GlobalAttrs.id]] = None,
        class_: Optional[Union[str, GlobalAttrs.class_]] = None,
        accesskey: Optional[Union[str, GlobalAttrs.accesskey]] = None,
        autocapitalize: Optional[Union[str, GlobalAttrs.autocapitalize, Literal['on', 'off', 'none', 'sentences', 'words', 'characters']]] = None,
        autocorrect: Optional[Union[str, GlobalAttrs.autocorrect, Literal['on', 'off']]] = None,
        autofocus: Optional[Union[str, GlobalAttrs.autofocus, bool]] = None,
        contenteditable: Optional[Union[str, GlobalAttrs.contenteditable, Literal['true', 'plaintext-only', 'false']]] = None,
        dir: Optional[Union[str, GlobalAttrs.dir, Literal['ltr', 'rtl', 'auto']]] = None,
        draggable: Optional[Union[str, GlobalAttrs.draggable, Literal['true', 'false']]] = None,
        enterkeyhint: Optional[Union[str, GlobalAttrs.enterkeyhint, Literal['enter', 'done', 'go', 'next', 'previous', 'search', 'send']]] = None,
        hidden: Optional[Union[str, GlobalAttrs.hidden, Literal['until-found', 'hidden', '']]] = None,
        inert: Optional[Union[str, GlobalAttrs.inert, bool]] = None,
        inputmode: Optional[Union[str, GlobalAttrs.inputmode, Literal['none', 'text', 'tel', 'email', 'url', 'numeric', 'decimal', 'search']]] = None,
        is_: Optional[Union[str, GlobalAttrs.is_]] = None,
        itemid: Optional[Union[str, GlobalAttrs.itemid]] = None,
        itemprop: Optional[Union[str, GlobalAttrs.itemprop]] = None,
        itemref: Optional[Union[str, GlobalAttrs.itemref]] = None,
        itemscope: Optional[Union[str, GlobalAttrs.itemscope, bool]] = None,
        itemtype: Optional[Union[str, GlobalAttrs.itemtype]] = None,
        lang: Optional[Union[str, GlobalAttrs.lang]] = None,
        nonce: Optional[Union[str, GlobalAttrs.nonce]] = None,
        popover: Optional[Union[str, GlobalAttrs.popover, Literal['auto', 'manual']]] = None,
        slot: Optional[Union[str, GlobalAttrs.slot]] = None,
        spellcheck: Optional[Union[str, GlobalAttrs.spellcheck, Literal['true', 'false', '']]] = None,
        style: Optional[Union[str, GlobalAttrs.style]] = None,
        tabindex: Optional[Union[str, GlobalAttrs.tabindex, int]] = None,
        title: Optional[Union[str, GlobalAttrs.title]] = None,
        translate: Optional[Union[str, GlobalAttrs.translate, Literal['yes', 'no']]] = None,
        writingsuggestions: Optional[Union[str, GlobalAttrs.writingsuggestions, Literal['true', 'false', '']]] = None,
        children: Optional[list] = None
    ) -> None:
        """
        Initialize 'small' (Side comment) element.  
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/small

        :param attrs: A list or dictionary of attributes for the element
        :param id: The element's ID
        :param class_: Classes to which the element belongs
            | Set of space-separated tokens
        :param accesskey: Keyboard shortcut to activate or focus element
            | Ordered set of unique space-separated tokens, none of which are identical to another, each consisting of one code point in length
        :param autocapitalize: Recommended autocapitalization behavior (for supported input methods)
        :param autocorrect: Recommended autocorrection behavior (for supported input methods)
        :param autofocus: Automatically focus the element when the page is loaded
        :param contenteditable: Whether the element is editable
        :param dir: The text directionality of the element
        :param draggable: Whether the element is draggable
        :param enterkeyhint: Hint for selecting an enter key action
        :param hidden: Whether the element is relevant
        :param inert: Whether the element is inert.
        :param inputmode: Hint for selecting an input modality
        :param is_: Creates a customized built-in element
            | Valid custom element name of a defined customized built-in element
        :param itemid: Global identifier for a microdata item
            | Valid URL potentially surrounded by spaces
        :param itemprop: Property names of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs, defined property names, or text*
        :param itemref: Referenced elements
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param itemscope: Introduces a microdata item
        :param itemtype: Item types of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs*
        :param lang: Language of the element
            | Valid BCP 47 language tag or the empty string
        :param nonce: Cryptographic nonce used in Content Security Policy checks [CSP]
        :param popover: Makes the element a popover element
        :param slot: The element's desired slot
        :param spellcheck: Whether the element is to have its spelling and grammar checked
        :param style: Presentational and formatting instructions
            | CSS declarations*
        :param tabindex: Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation
        :param title: Advisory information for the element
        :param translate: Whether the element is to be translated when the page is localized
        :param writingsuggestions: Whether the element can offer writing suggestions or not.
        """ #fmt: skip
        super().__init__(
            "small",
            void_element=False,
            attrs=attrs,
            children=children
        )
        if not (id is None or id is False):
            self._process_attr("id", id)
        if not (class_ is None or class_ is False):
            self._process_attr("class", class_)
        if not (accesskey is None or accesskey is False):
            self._process_attr("accesskey", accesskey)
        if not (autocapitalize is None or autocapitalize is False):
            self._process_attr("autocapitalize", autocapitalize)
        if not (autocorrect is None or autocorrect is False):
            self._process_attr("autocorrect", autocorrect)
        if not (autofocus is None or autofocus is False):
            self._process_attr("autofocus", autofocus)
        if not (contenteditable is None or contenteditable is False):
            self._process_attr("contenteditable", contenteditable)
        if not (dir is None or dir is False):
            self._process_attr("dir", dir)
        if not (draggable is None or draggable is False):
            self._process_attr("draggable", draggable)
        if not (enterkeyhint is None or enterkeyhint is False):
            self._process_attr("enterkeyhint", enterkeyhint)
        if not (hidden is None or hidden is False):
            self._process_attr("hidden", hidden)
        if not (inert is None or inert is False):
            self._process_attr("inert", inert)
        if not (inputmode is None or inputmode is False):
            self._process_attr("inputmode", inputmode)
        if not (is_ is None or is_ is False):
            self._process_attr("is", is_)
        if not (itemid is None or itemid is False):
            self._process_attr("itemid", itemid)
        if not (itemprop is None or itemprop is False):
            self._process_attr("itemprop", itemprop)
        if not (itemref is None or itemref is False):
            self._process_attr("itemref", itemref)
        if not (itemscope is None or itemscope is False):
            self._process_attr("itemscope", itemscope)
        if not (itemtype is None or itemtype is False):
            self._process_attr("itemtype", itemtype)
        if not (lang is None or lang is False):
            self._process_attr("lang", lang)
        if not (nonce is None or nonce is False):
            self._process_attr("nonce", nonce)
        if not (popover is None or popover is False):
            self._process_attr("popover", popover)
        if not (slot is None or slot is False):
            self._process_attr("slot", slot)
        if not (spellcheck is None or spellcheck is False):
            self._process_attr("spellcheck", spellcheck)
        if not (style is None or style is False):
            self._process_attr("style", style)
        if not (tabindex is None or tabindex is False):
            self._process_attr("tabindex", tabindex)
        if not (title is None or title is False):
            self._process_attr("title", title)
        if not (translate is None or translate is False):
            self._process_attr("translate", translate)
        if not (writingsuggestions is None or writingsuggestions is False):
            self._process_attr("writingsuggestions", writingsuggestions)


class source(BaseElement, GlobalAttrs, SourceAttrs):
    """
    The 'source' element.  
    Description: Image source for img or media source for video or audio  
    Categories: none  
    Parents: picture video audio  
    Children: empty  
    Interface: HTMLSourceElement  
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/source  
    """ # fmt: skip


    def __init__(
        self,
        attrs: Optional[Union[dict[str, Union[str, dict, list]], list[BaseAttribute]]] = None,
        id: Optional[Union[str, GlobalAttrs.id]] = None,
        class_: Optional[Union[str, GlobalAttrs.class_]] = None,
        height: Optional[Union[str, SourceAttrs.height, int]] = None,
        media: Optional[Union[str, SourceAttrs.media]] = None,
        sizes: Optional[Union[str, SourceAttrs.sizes]] = None,
        src: Optional[Union[str, SourceAttrs.src]] = None,
        srcset: Optional[Union[str, SourceAttrs.srcset]] = None,
        type: Optional[Union[str, SourceAttrs.type]] = None,
        width: Optional[Union[str, SourceAttrs.width, int]] = None,
        accesskey: Optional[Union[str, GlobalAttrs.accesskey]] = None,
        autocapitalize: Optional[Union[str, GlobalAttrs.autocapitalize, Literal['on', 'off', 'none', 'sentences', 'words', 'characters']]] = None,
        autocorrect: Optional[Union[str, GlobalAttrs.autocorrect, Literal['on', 'off']]] = None,
        autofocus: Optional[Union[str, GlobalAttrs.autofocus, bool]] = None,
        contenteditable: Optional[Union[str, GlobalAttrs.contenteditable, Literal['true', 'plaintext-only', 'false']]] = None,
        dir: Optional[Union[str, GlobalAttrs.dir, Literal['ltr', 'rtl', 'auto']]] = None,
        draggable: Optional[Union[str, GlobalAttrs.draggable, Literal['true', 'false']]] = None,
        enterkeyhint: Optional[Union[str, GlobalAttrs.enterkeyhint, Literal['enter', 'done', 'go', 'next', 'previous', 'search', 'send']]] = None,
        hidden: Optional[Union[str, GlobalAttrs.hidden, Literal['until-found', 'hidden', '']]] = None,
        inert: Optional[Union[str, GlobalAttrs.inert, bool]] = None,
        inputmode: Optional[Union[str, GlobalAttrs.inputmode, Literal['none', 'text', 'tel', 'email', 'url', 'numeric', 'decimal', 'search']]] = None,
        is_: Optional[Union[str, GlobalAttrs.is_]] = None,
        itemid: Optional[Union[str, GlobalAttrs.itemid]] = None,
        itemprop: Optional[Union[str, GlobalAttrs.itemprop]] = None,
        itemref: Optional[Union[str, GlobalAttrs.itemref]] = None,
        itemscope: Optional[Union[str, GlobalAttrs.itemscope, bool]] = None,
        itemtype: Optional[Union[str, GlobalAttrs.itemtype]] = None,
        lang: Optional[Union[str, GlobalAttrs.lang]] = None,
        nonce: Optional[Union[str, GlobalAttrs.nonce]] = None,
        popover: Optional[Union[str, GlobalAttrs.popover, Literal['auto', 'manual']]] = None,
        slot: Optional[Union[str, GlobalAttrs.slot]] = None,
        spellcheck: Optional[Union[str, GlobalAttrs.spellcheck, Literal['true', 'false', '']]] = None,
        style: Optional[Union[str, GlobalAttrs.style]] = None,
        tabindex: Optional[Union[str, GlobalAttrs.tabindex, int]] = None,
        title: Optional[Union[str, GlobalAttrs.title]] = None,
        translate: Optional[Union[str, GlobalAttrs.translate, Literal['yes', 'no']]] = None,
        writingsuggestions: Optional[Union[str, GlobalAttrs.writingsuggestions, Literal['true', 'false', '']]] = None,
        children: Optional[list] = None
    ) -> None:
        """
        Initialize 'source' (Image source for img or media source for video or audio) element.  
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/source

        :param attrs: A list or dictionary of attributes for the element
        :param id: The element's ID
        :param class_: Classes to which the element belongs
            | Set of space-separated tokens
        :param height: Vertical dimension
        :param media: Applicable media
            | Valid media query list
        :param sizes: Image sizes for different page layouts
            | Valid source size list
        :param src: Address of the resource
            | Valid non-empty URL potentially surrounded by spaces
        :param srcset: Images to use in different situations, e.g., high-resolution displays, small monitors, etc.
            | Comma-separated list of image candidate strings
        :param type: Type of embedded resource
            | Valid MIME type string
        :param width: Horizontal dimension
        :param accesskey: Keyboard shortcut to activate or focus element
            | Ordered set of unique space-separated tokens, none of which are identical to another, each consisting of one code point in length
        :param autocapitalize: Recommended autocapitalization behavior (for supported input methods)
        :param autocorrect: Recommended autocorrection behavior (for supported input methods)
        :param autofocus: Automatically focus the element when the page is loaded
        :param contenteditable: Whether the element is editable
        :param dir: The text directionality of the element
        :param draggable: Whether the element is draggable
        :param enterkeyhint: Hint for selecting an enter key action
        :param hidden: Whether the element is relevant
        :param inert: Whether the element is inert.
        :param inputmode: Hint for selecting an input modality
        :param is_: Creates a customized built-in element
            | Valid custom element name of a defined customized built-in element
        :param itemid: Global identifier for a microdata item
            | Valid URL potentially surrounded by spaces
        :param itemprop: Property names of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs, defined property names, or text*
        :param itemref: Referenced elements
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param itemscope: Introduces a microdata item
        :param itemtype: Item types of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs*
        :param lang: Language of the element
            | Valid BCP 47 language tag or the empty string
        :param nonce: Cryptographic nonce used in Content Security Policy checks [CSP]
        :param popover: Makes the element a popover element
        :param slot: The element's desired slot
        :param spellcheck: Whether the element is to have its spelling and grammar checked
        :param style: Presentational and formatting instructions
            | CSS declarations*
        :param tabindex: Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation
        :param title: Advisory information for the element
        :param translate: Whether the element is to be translated when the page is localized
        :param writingsuggestions: Whether the element can offer writing suggestions or not.
        """ #fmt: skip
        super().__init__(
            "source",
            void_element=True,
            attrs=attrs,
            children=children
        )
        if not (id is None or id is False):
            self._process_attr("id", id)
        if not (class_ is None or class_ is False):
            self._process_attr("class", class_)
        if not (height is None or height is False):
            self._process_attr("height", height)
        if not (media is None or media is False):
            self._process_attr("media", media)
        if not (sizes is None or sizes is False):
            self._process_attr("sizes", sizes)
        if not (src is None or src is False):
            self._process_attr("src", src)
        if not (srcset is None or srcset is False):
            self._process_attr("srcset", srcset)
        if not (type is None or type is False):
            self._process_attr("type", type)
        if not (width is None or width is False):
            self._process_attr("width", width)
        if not (accesskey is None or accesskey is False):
            self._process_attr("accesskey", accesskey)
        if not (autocapitalize is None or autocapitalize is False):
            self._process_attr("autocapitalize", autocapitalize)
        if not (autocorrect is None or autocorrect is False):
            self._process_attr("autocorrect", autocorrect)
        if not (autofocus is None or autofocus is False):
            self._process_attr("autofocus", autofocus)
        if not (contenteditable is None or contenteditable is False):
            self._process_attr("contenteditable", contenteditable)
        if not (dir is None or dir is False):
            self._process_attr("dir", dir)
        if not (draggable is None or draggable is False):
            self._process_attr("draggable", draggable)
        if not (enterkeyhint is None or enterkeyhint is False):
            self._process_attr("enterkeyhint", enterkeyhint)
        if not (hidden is None or hidden is False):
            self._process_attr("hidden", hidden)
        if not (inert is None or inert is False):
            self._process_attr("inert", inert)
        if not (inputmode is None or inputmode is False):
            self._process_attr("inputmode", inputmode)
        if not (is_ is None or is_ is False):
            self._process_attr("is", is_)
        if not (itemid is None or itemid is False):
            self._process_attr("itemid", itemid)
        if not (itemprop is None or itemprop is False):
            self._process_attr("itemprop", itemprop)
        if not (itemref is None or itemref is False):
            self._process_attr("itemref", itemref)
        if not (itemscope is None or itemscope is False):
            self._process_attr("itemscope", itemscope)
        if not (itemtype is None or itemtype is False):
            self._process_attr("itemtype", itemtype)
        if not (lang is None or lang is False):
            self._process_attr("lang", lang)
        if not (nonce is None or nonce is False):
            self._process_attr("nonce", nonce)
        if not (popover is None or popover is False):
            self._process_attr("popover", popover)
        if not (slot is None or slot is False):
            self._process_attr("slot", slot)
        if not (spellcheck is None or spellcheck is False):
            self._process_attr("spellcheck", spellcheck)
        if not (style is None or style is False):
            self._process_attr("style", style)
        if not (tabindex is None or tabindex is False):
            self._process_attr("tabindex", tabindex)
        if not (title is None or title is False):
            self._process_attr("title", title)
        if not (translate is None or translate is False):
            self._process_attr("translate", translate)
        if not (writingsuggestions is None or writingsuggestions is False):
            self._process_attr("writingsuggestions", writingsuggestions)


class span(BaseElement, GlobalAttrs):
    """
    The 'span' element.  
    Description: Generic phrasing container  
    Categories: flow phrasing palpable  
    Parents: phrasing  
    Children: phrasing  
    Interface: HTMLSpanElement  
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/span  
    """ # fmt: skip


    def __init__(
        self,
        attrs: Optional[Union[dict[str, Union[str, dict, list]], list[BaseAttribute]]] = None,
        id: Optional[Union[str, GlobalAttrs.id]] = None,
        class_: Optional[Union[str, GlobalAttrs.class_]] = None,
        accesskey: Optional[Union[str, GlobalAttrs.accesskey]] = None,
        autocapitalize: Optional[Union[str, GlobalAttrs.autocapitalize, Literal['on', 'off', 'none', 'sentences', 'words', 'characters']]] = None,
        autocorrect: Optional[Union[str, GlobalAttrs.autocorrect, Literal['on', 'off']]] = None,
        autofocus: Optional[Union[str, GlobalAttrs.autofocus, bool]] = None,
        contenteditable: Optional[Union[str, GlobalAttrs.contenteditable, Literal['true', 'plaintext-only', 'false']]] = None,
        dir: Optional[Union[str, GlobalAttrs.dir, Literal['ltr', 'rtl', 'auto']]] = None,
        draggable: Optional[Union[str, GlobalAttrs.draggable, Literal['true', 'false']]] = None,
        enterkeyhint: Optional[Union[str, GlobalAttrs.enterkeyhint, Literal['enter', 'done', 'go', 'next', 'previous', 'search', 'send']]] = None,
        hidden: Optional[Union[str, GlobalAttrs.hidden, Literal['until-found', 'hidden', '']]] = None,
        inert: Optional[Union[str, GlobalAttrs.inert, bool]] = None,
        inputmode: Optional[Union[str, GlobalAttrs.inputmode, Literal['none', 'text', 'tel', 'email', 'url', 'numeric', 'decimal', 'search']]] = None,
        is_: Optional[Union[str, GlobalAttrs.is_]] = None,
        itemid: Optional[Union[str, GlobalAttrs.itemid]] = None,
        itemprop: Optional[Union[str, GlobalAttrs.itemprop]] = None,
        itemref: Optional[Union[str, GlobalAttrs.itemref]] = None,
        itemscope: Optional[Union[str, GlobalAttrs.itemscope, bool]] = None,
        itemtype: Optional[Union[str, GlobalAttrs.itemtype]] = None,
        lang: Optional[Union[str, GlobalAttrs.lang]] = None,
        nonce: Optional[Union[str, GlobalAttrs.nonce]] = None,
        popover: Optional[Union[str, GlobalAttrs.popover, Literal['auto', 'manual']]] = None,
        slot: Optional[Union[str, GlobalAttrs.slot]] = None,
        spellcheck: Optional[Union[str, GlobalAttrs.spellcheck, Literal['true', 'false', '']]] = None,
        style: Optional[Union[str, GlobalAttrs.style]] = None,
        tabindex: Optional[Union[str, GlobalAttrs.tabindex, int]] = None,
        title: Optional[Union[str, GlobalAttrs.title]] = None,
        translate: Optional[Union[str, GlobalAttrs.translate, Literal['yes', 'no']]] = None,
        writingsuggestions: Optional[Union[str, GlobalAttrs.writingsuggestions, Literal['true', 'false', '']]] = None,
        children: Optional[list] = None
    ) -> None:
        """
        Initialize 'span' (Generic phrasing container) element.  
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/span

        :param attrs: A list or dictionary of attributes for the element
        :param id: The element's ID
        :param class_: Classes to which the element belongs
            | Set of space-separated tokens
        :param accesskey: Keyboard shortcut to activate or focus element
            | Ordered set of unique space-separated tokens, none of which are identical to another, each consisting of one code point in length
        :param autocapitalize: Recommended autocapitalization behavior (for supported input methods)
        :param autocorrect: Recommended autocorrection behavior (for supported input methods)
        :param autofocus: Automatically focus the element when the page is loaded
        :param contenteditable: Whether the element is editable
        :param dir: The text directionality of the element
        :param draggable: Whether the element is draggable
        :param enterkeyhint: Hint for selecting an enter key action
        :param hidden: Whether the element is relevant
        :param inert: Whether the element is inert.
        :param inputmode: Hint for selecting an input modality
        :param is_: Creates a customized built-in element
            | Valid custom element name of a defined customized built-in element
        :param itemid: Global identifier for a microdata item
            | Valid URL potentially surrounded by spaces
        :param itemprop: Property names of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs, defined property names, or text*
        :param itemref: Referenced elements
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param itemscope: Introduces a microdata item
        :param itemtype: Item types of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs*
        :param lang: Language of the element
            | Valid BCP 47 language tag or the empty string
        :param nonce: Cryptographic nonce used in Content Security Policy checks [CSP]
        :param popover: Makes the element a popover element
        :param slot: The element's desired slot
        :param spellcheck: Whether the element is to have its spelling and grammar checked
        :param style: Presentational and formatting instructions
            | CSS declarations*
        :param tabindex: Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation
        :param title: Advisory information for the element
        :param translate: Whether the element is to be translated when the page is localized
        :param writingsuggestions: Whether the element can offer writing suggestions or not.
        """ #fmt: skip
        super().__init__(
            "span",
            void_element=False,
            attrs=attrs,
            children=children
        )
        if not (id is None or id is False):
            self._process_attr("id", id)
        if not (class_ is None or class_ is False):
            self._process_attr("class", class_)
        if not (accesskey is None or accesskey is False):
            self._process_attr("accesskey", accesskey)
        if not (autocapitalize is None or autocapitalize is False):
            self._process_attr("autocapitalize", autocapitalize)
        if not (autocorrect is None or autocorrect is False):
            self._process_attr("autocorrect", autocorrect)
        if not (autofocus is None or autofocus is False):
            self._process_attr("autofocus", autofocus)
        if not (contenteditable is None or contenteditable is False):
            self._process_attr("contenteditable", contenteditable)
        if not (dir is None or dir is False):
            self._process_attr("dir", dir)
        if not (draggable is None or draggable is False):
            self._process_attr("draggable", draggable)
        if not (enterkeyhint is None or enterkeyhint is False):
            self._process_attr("enterkeyhint", enterkeyhint)
        if not (hidden is None or hidden is False):
            self._process_attr("hidden", hidden)
        if not (inert is None or inert is False):
            self._process_attr("inert", inert)
        if not (inputmode is None or inputmode is False):
            self._process_attr("inputmode", inputmode)
        if not (is_ is None or is_ is False):
            self._process_attr("is", is_)
        if not (itemid is None or itemid is False):
            self._process_attr("itemid", itemid)
        if not (itemprop is None or itemprop is False):
            self._process_attr("itemprop", itemprop)
        if not (itemref is None or itemref is False):
            self._process_attr("itemref", itemref)
        if not (itemscope is None or itemscope is False):
            self._process_attr("itemscope", itemscope)
        if not (itemtype is None or itemtype is False):
            self._process_attr("itemtype", itemtype)
        if not (lang is None or lang is False):
            self._process_attr("lang", lang)
        if not (nonce is None or nonce is False):
            self._process_attr("nonce", nonce)
        if not (popover is None or popover is False):
            self._process_attr("popover", popover)
        if not (slot is None or slot is False):
            self._process_attr("slot", slot)
        if not (spellcheck is None or spellcheck is False):
            self._process_attr("spellcheck", spellcheck)
        if not (style is None or style is False):
            self._process_attr("style", style)
        if not (tabindex is None or tabindex is False):
            self._process_attr("tabindex", tabindex)
        if not (title is None or title is False):
            self._process_attr("title", title)
        if not (translate is None or translate is False):
            self._process_attr("translate", translate)
        if not (writingsuggestions is None or writingsuggestions is False):
            self._process_attr("writingsuggestions", writingsuggestions)


class strong(BaseElement, GlobalAttrs):
    """
    The 'strong' element.  
    Description: Importance  
    Categories: flow phrasing palpable  
    Parents: phrasing  
    Children: phrasing  
    Interface: HTMLElement  
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/strong  
    """ # fmt: skip


    def __init__(
        self,
        attrs: Optional[Union[dict[str, Union[str, dict, list]], list[BaseAttribute]]] = None,
        id: Optional[Union[str, GlobalAttrs.id]] = None,
        class_: Optional[Union[str, GlobalAttrs.class_]] = None,
        accesskey: Optional[Union[str, GlobalAttrs.accesskey]] = None,
        autocapitalize: Optional[Union[str, GlobalAttrs.autocapitalize, Literal['on', 'off', 'none', 'sentences', 'words', 'characters']]] = None,
        autocorrect: Optional[Union[str, GlobalAttrs.autocorrect, Literal['on', 'off']]] = None,
        autofocus: Optional[Union[str, GlobalAttrs.autofocus, bool]] = None,
        contenteditable: Optional[Union[str, GlobalAttrs.contenteditable, Literal['true', 'plaintext-only', 'false']]] = None,
        dir: Optional[Union[str, GlobalAttrs.dir, Literal['ltr', 'rtl', 'auto']]] = None,
        draggable: Optional[Union[str, GlobalAttrs.draggable, Literal['true', 'false']]] = None,
        enterkeyhint: Optional[Union[str, GlobalAttrs.enterkeyhint, Literal['enter', 'done', 'go', 'next', 'previous', 'search', 'send']]] = None,
        hidden: Optional[Union[str, GlobalAttrs.hidden, Literal['until-found', 'hidden', '']]] = None,
        inert: Optional[Union[str, GlobalAttrs.inert, bool]] = None,
        inputmode: Optional[Union[str, GlobalAttrs.inputmode, Literal['none', 'text', 'tel', 'email', 'url', 'numeric', 'decimal', 'search']]] = None,
        is_: Optional[Union[str, GlobalAttrs.is_]] = None,
        itemid: Optional[Union[str, GlobalAttrs.itemid]] = None,
        itemprop: Optional[Union[str, GlobalAttrs.itemprop]] = None,
        itemref: Optional[Union[str, GlobalAttrs.itemref]] = None,
        itemscope: Optional[Union[str, GlobalAttrs.itemscope, bool]] = None,
        itemtype: Optional[Union[str, GlobalAttrs.itemtype]] = None,
        lang: Optional[Union[str, GlobalAttrs.lang]] = None,
        nonce: Optional[Union[str, GlobalAttrs.nonce]] = None,
        popover: Optional[Union[str, GlobalAttrs.popover, Literal['auto', 'manual']]] = None,
        slot: Optional[Union[str, GlobalAttrs.slot]] = None,
        spellcheck: Optional[Union[str, GlobalAttrs.spellcheck, Literal['true', 'false', '']]] = None,
        style: Optional[Union[str, GlobalAttrs.style]] = None,
        tabindex: Optional[Union[str, GlobalAttrs.tabindex, int]] = None,
        title: Optional[Union[str, GlobalAttrs.title]] = None,
        translate: Optional[Union[str, GlobalAttrs.translate, Literal['yes', 'no']]] = None,
        writingsuggestions: Optional[Union[str, GlobalAttrs.writingsuggestions, Literal['true', 'false', '']]] = None,
        children: Optional[list] = None
    ) -> None:
        """
        Initialize 'strong' (Importance) element.  
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/strong

        :param attrs: A list or dictionary of attributes for the element
        :param id: The element's ID
        :param class_: Classes to which the element belongs
            | Set of space-separated tokens
        :param accesskey: Keyboard shortcut to activate or focus element
            | Ordered set of unique space-separated tokens, none of which are identical to another, each consisting of one code point in length
        :param autocapitalize: Recommended autocapitalization behavior (for supported input methods)
        :param autocorrect: Recommended autocorrection behavior (for supported input methods)
        :param autofocus: Automatically focus the element when the page is loaded
        :param contenteditable: Whether the element is editable
        :param dir: The text directionality of the element
        :param draggable: Whether the element is draggable
        :param enterkeyhint: Hint for selecting an enter key action
        :param hidden: Whether the element is relevant
        :param inert: Whether the element is inert.
        :param inputmode: Hint for selecting an input modality
        :param is_: Creates a customized built-in element
            | Valid custom element name of a defined customized built-in element
        :param itemid: Global identifier for a microdata item
            | Valid URL potentially surrounded by spaces
        :param itemprop: Property names of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs, defined property names, or text*
        :param itemref: Referenced elements
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param itemscope: Introduces a microdata item
        :param itemtype: Item types of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs*
        :param lang: Language of the element
            | Valid BCP 47 language tag or the empty string
        :param nonce: Cryptographic nonce used in Content Security Policy checks [CSP]
        :param popover: Makes the element a popover element
        :param slot: The element's desired slot
        :param spellcheck: Whether the element is to have its spelling and grammar checked
        :param style: Presentational and formatting instructions
            | CSS declarations*
        :param tabindex: Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation
        :param title: Advisory information for the element
        :param translate: Whether the element is to be translated when the page is localized
        :param writingsuggestions: Whether the element can offer writing suggestions or not.
        """ #fmt: skip
        super().__init__(
            "strong",
            void_element=False,
            attrs=attrs,
            children=children
        )
        if not (id is None or id is False):
            self._process_attr("id", id)
        if not (class_ is None or class_ is False):
            self._process_attr("class", class_)
        if not (accesskey is None or accesskey is False):
            self._process_attr("accesskey", accesskey)
        if not (autocapitalize is None or autocapitalize is False):
            self._process_attr("autocapitalize", autocapitalize)
        if not (autocorrect is None or autocorrect is False):
            self._process_attr("autocorrect", autocorrect)
        if not (autofocus is None or autofocus is False):
            self._process_attr("autofocus", autofocus)
        if not (contenteditable is None or contenteditable is False):
            self._process_attr("contenteditable", contenteditable)
        if not (dir is None or dir is False):
            self._process_attr("dir", dir)
        if not (draggable is None or draggable is False):
            self._process_attr("draggable", draggable)
        if not (enterkeyhint is None or enterkeyhint is False):
            self._process_attr("enterkeyhint", enterkeyhint)
        if not (hidden is None or hidden is False):
            self._process_attr("hidden", hidden)
        if not (inert is None or inert is False):
            self._process_attr("inert", inert)
        if not (inputmode is None or inputmode is False):
            self._process_attr("inputmode", inputmode)
        if not (is_ is None or is_ is False):
            self._process_attr("is", is_)
        if not (itemid is None or itemid is False):
            self._process_attr("itemid", itemid)
        if not (itemprop is None or itemprop is False):
            self._process_attr("itemprop", itemprop)
        if not (itemref is None or itemref is False):
            self._process_attr("itemref", itemref)
        if not (itemscope is None or itemscope is False):
            self._process_attr("itemscope", itemscope)
        if not (itemtype is None or itemtype is False):
            self._process_attr("itemtype", itemtype)
        if not (lang is None or lang is False):
            self._process_attr("lang", lang)
        if not (nonce is None or nonce is False):
            self._process_attr("nonce", nonce)
        if not (popover is None or popover is False):
            self._process_attr("popover", popover)
        if not (slot is None or slot is False):
            self._process_attr("slot", slot)
        if not (spellcheck is None or spellcheck is False):
            self._process_attr("spellcheck", spellcheck)
        if not (style is None or style is False):
            self._process_attr("style", style)
        if not (tabindex is None or tabindex is False):
            self._process_attr("tabindex", tabindex)
        if not (title is None or title is False):
            self._process_attr("title", title)
        if not (translate is None or translate is False):
            self._process_attr("translate", translate)
        if not (writingsuggestions is None or writingsuggestions is False):
            self._process_attr("writingsuggestions", writingsuggestions)


class style(BaseElement, GlobalAttrs, StyleAttrs): # type: ignore[misc]
    """
    The 'style' element.  
    Description: Embedded styling information  
    Categories: metadata  
    Parents: head noscript*  
    Children: text*  
    Interface: HTMLStyleElement  
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/style  
    """ # fmt: skip


    def __init__(
        self,
        attrs: Optional[Union[dict[str, Union[str, dict, list]], list[BaseAttribute]]] = None,
        id: Optional[Union[str, GlobalAttrs.id]] = None,
        class_: Optional[Union[str, GlobalAttrs.class_]] = None,
        blocking: Optional[Union[str, StyleAttrs.blocking]] = None,
        media: Optional[Union[str, StyleAttrs.media]] = None,
        title: Optional[Union[str, StyleAttrs.title]] = None,
        accesskey: Optional[Union[str, GlobalAttrs.accesskey]] = None,
        autocapitalize: Optional[Union[str, GlobalAttrs.autocapitalize, Literal['on', 'off', 'none', 'sentences', 'words', 'characters']]] = None,
        autocorrect: Optional[Union[str, GlobalAttrs.autocorrect, Literal['on', 'off']]] = None,
        autofocus: Optional[Union[str, GlobalAttrs.autofocus, bool]] = None,
        contenteditable: Optional[Union[str, GlobalAttrs.contenteditable, Literal['true', 'plaintext-only', 'false']]] = None,
        dir: Optional[Union[str, GlobalAttrs.dir, Literal['ltr', 'rtl', 'auto']]] = None,
        draggable: Optional[Union[str, GlobalAttrs.draggable, Literal['true', 'false']]] = None,
        enterkeyhint: Optional[Union[str, GlobalAttrs.enterkeyhint, Literal['enter', 'done', 'go', 'next', 'previous', 'search', 'send']]] = None,
        hidden: Optional[Union[str, GlobalAttrs.hidden, Literal['until-found', 'hidden', '']]] = None,
        inert: Optional[Union[str, GlobalAttrs.inert, bool]] = None,
        inputmode: Optional[Union[str, GlobalAttrs.inputmode, Literal['none', 'text', 'tel', 'email', 'url', 'numeric', 'decimal', 'search']]] = None,
        is_: Optional[Union[str, GlobalAttrs.is_]] = None,
        itemid: Optional[Union[str, GlobalAttrs.itemid]] = None,
        itemprop: Optional[Union[str, GlobalAttrs.itemprop]] = None,
        itemref: Optional[Union[str, GlobalAttrs.itemref]] = None,
        itemscope: Optional[Union[str, GlobalAttrs.itemscope, bool]] = None,
        itemtype: Optional[Union[str, GlobalAttrs.itemtype]] = None,
        lang: Optional[Union[str, GlobalAttrs.lang]] = None,
        nonce: Optional[Union[str, GlobalAttrs.nonce]] = None,
        popover: Optional[Union[str, GlobalAttrs.popover, Literal['auto', 'manual']]] = None,
        slot: Optional[Union[str, GlobalAttrs.slot]] = None,
        spellcheck: Optional[Union[str, GlobalAttrs.spellcheck, Literal['true', 'false', '']]] = None,
        style: Optional[Union[str, GlobalAttrs.style]] = None,
        tabindex: Optional[Union[str, GlobalAttrs.tabindex, int]] = None,
        translate: Optional[Union[str, GlobalAttrs.translate, Literal['yes', 'no']]] = None,
        writingsuggestions: Optional[Union[str, GlobalAttrs.writingsuggestions, Literal['true', 'false', '']]] = None,
        children: Optional[list] = None
    ) -> None:
        """
        Initialize 'style' (Embedded styling information) element.  
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/style

        :param attrs: A list or dictionary of attributes for the element
        :param id: The element's ID
        :param class_: Classes to which the element belongs
            | Set of space-separated tokens
        :param blocking: Whether the element is potentially render-blocking
            | Unordered set of unique space-separated tokens*
        :param media: Applicable media
            | Valid media query list
        :param title: CSS style sheet set name
        :param accesskey: Keyboard shortcut to activate or focus element
            | Ordered set of unique space-separated tokens, none of which are identical to another, each consisting of one code point in length
        :param autocapitalize: Recommended autocapitalization behavior (for supported input methods)
        :param autocorrect: Recommended autocorrection behavior (for supported input methods)
        :param autofocus: Automatically focus the element when the page is loaded
        :param contenteditable: Whether the element is editable
        :param dir: The text directionality of the element
        :param draggable: Whether the element is draggable
        :param enterkeyhint: Hint for selecting an enter key action
        :param hidden: Whether the element is relevant
        :param inert: Whether the element is inert.
        :param inputmode: Hint for selecting an input modality
        :param is_: Creates a customized built-in element
            | Valid custom element name of a defined customized built-in element
        :param itemid: Global identifier for a microdata item
            | Valid URL potentially surrounded by spaces
        :param itemprop: Property names of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs, defined property names, or text*
        :param itemref: Referenced elements
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param itemscope: Introduces a microdata item
        :param itemtype: Item types of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs*
        :param lang: Language of the element
            | Valid BCP 47 language tag or the empty string
        :param nonce: Cryptographic nonce used in Content Security Policy checks [CSP]
        :param popover: Makes the element a popover element
        :param slot: The element's desired slot
        :param spellcheck: Whether the element is to have its spelling and grammar checked
        :param style: Presentational and formatting instructions
            | CSS declarations*
        :param tabindex: Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation
        :param translate: Whether the element is to be translated when the page is localized
        :param writingsuggestions: Whether the element can offer writing suggestions or not.
        """ #fmt: skip
        super().__init__(
            "style",
            void_element=False,
            attrs=attrs,
            children=children
        )
        if not (id is None or id is False):
            self._process_attr("id", id)
        if not (class_ is None or class_ is False):
            self._process_attr("class", class_)
        if not (blocking is None or blocking is False):
            self._process_attr("blocking", blocking)
        if not (media is None or media is False):
            self._process_attr("media", media)
        if not (title is None or title is False):
            self._process_attr("title", title)
        if not (accesskey is None or accesskey is False):
            self._process_attr("accesskey", accesskey)
        if not (autocapitalize is None or autocapitalize is False):
            self._process_attr("autocapitalize", autocapitalize)
        if not (autocorrect is None or autocorrect is False):
            self._process_attr("autocorrect", autocorrect)
        if not (autofocus is None or autofocus is False):
            self._process_attr("autofocus", autofocus)
        if not (contenteditable is None or contenteditable is False):
            self._process_attr("contenteditable", contenteditable)
        if not (dir is None or dir is False):
            self._process_attr("dir", dir)
        if not (draggable is None or draggable is False):
            self._process_attr("draggable", draggable)
        if not (enterkeyhint is None or enterkeyhint is False):
            self._process_attr("enterkeyhint", enterkeyhint)
        if not (hidden is None or hidden is False):
            self._process_attr("hidden", hidden)
        if not (inert is None or inert is False):
            self._process_attr("inert", inert)
        if not (inputmode is None or inputmode is False):
            self._process_attr("inputmode", inputmode)
        if not (is_ is None or is_ is False):
            self._process_attr("is", is_)
        if not (itemid is None or itemid is False):
            self._process_attr("itemid", itemid)
        if not (itemprop is None or itemprop is False):
            self._process_attr("itemprop", itemprop)
        if not (itemref is None or itemref is False):
            self._process_attr("itemref", itemref)
        if not (itemscope is None or itemscope is False):
            self._process_attr("itemscope", itemscope)
        if not (itemtype is None or itemtype is False):
            self._process_attr("itemtype", itemtype)
        if not (lang is None or lang is False):
            self._process_attr("lang", lang)
        if not (nonce is None or nonce is False):
            self._process_attr("nonce", nonce)
        if not (popover is None or popover is False):
            self._process_attr("popover", popover)
        if not (slot is None or slot is False):
            self._process_attr("slot", slot)
        if not (spellcheck is None or spellcheck is False):
            self._process_attr("spellcheck", spellcheck)
        if not (style is None or style is False):
            self._process_attr("style", style)
        if not (tabindex is None or tabindex is False):
            self._process_attr("tabindex", tabindex)
        if not (translate is None or translate is False):
            self._process_attr("translate", translate)
        if not (writingsuggestions is None or writingsuggestions is False):
            self._process_attr("writingsuggestions", writingsuggestions)


class sub(BaseElement, GlobalAttrs):
    """
    The 'sub' element.  
    Description: Subscript  
    Categories: flow phrasing palpable  
    Parents: phrasing  
    Children: phrasing  
    Interface: HTMLElement  
    Documentation: None  
    """ # fmt: skip


    def __init__(
        self,
        attrs: Optional[Union[dict[str, Union[str, dict, list]], list[BaseAttribute]]] = None,
        id: Optional[Union[str, GlobalAttrs.id]] = None,
        class_: Optional[Union[str, GlobalAttrs.class_]] = None,
        accesskey: Optional[Union[str, GlobalAttrs.accesskey]] = None,
        autocapitalize: Optional[Union[str, GlobalAttrs.autocapitalize, Literal['on', 'off', 'none', 'sentences', 'words', 'characters']]] = None,
        autocorrect: Optional[Union[str, GlobalAttrs.autocorrect, Literal['on', 'off']]] = None,
        autofocus: Optional[Union[str, GlobalAttrs.autofocus, bool]] = None,
        contenteditable: Optional[Union[str, GlobalAttrs.contenteditable, Literal['true', 'plaintext-only', 'false']]] = None,
        dir: Optional[Union[str, GlobalAttrs.dir, Literal['ltr', 'rtl', 'auto']]] = None,
        draggable: Optional[Union[str, GlobalAttrs.draggable, Literal['true', 'false']]] = None,
        enterkeyhint: Optional[Union[str, GlobalAttrs.enterkeyhint, Literal['enter', 'done', 'go', 'next', 'previous', 'search', 'send']]] = None,
        hidden: Optional[Union[str, GlobalAttrs.hidden, Literal['until-found', 'hidden', '']]] = None,
        inert: Optional[Union[str, GlobalAttrs.inert, bool]] = None,
        inputmode: Optional[Union[str, GlobalAttrs.inputmode, Literal['none', 'text', 'tel', 'email', 'url', 'numeric', 'decimal', 'search']]] = None,
        is_: Optional[Union[str, GlobalAttrs.is_]] = None,
        itemid: Optional[Union[str, GlobalAttrs.itemid]] = None,
        itemprop: Optional[Union[str, GlobalAttrs.itemprop]] = None,
        itemref: Optional[Union[str, GlobalAttrs.itemref]] = None,
        itemscope: Optional[Union[str, GlobalAttrs.itemscope, bool]] = None,
        itemtype: Optional[Union[str, GlobalAttrs.itemtype]] = None,
        lang: Optional[Union[str, GlobalAttrs.lang]] = None,
        nonce: Optional[Union[str, GlobalAttrs.nonce]] = None,
        popover: Optional[Union[str, GlobalAttrs.popover, Literal['auto', 'manual']]] = None,
        slot: Optional[Union[str, GlobalAttrs.slot]] = None,
        spellcheck: Optional[Union[str, GlobalAttrs.spellcheck, Literal['true', 'false', '']]] = None,
        style: Optional[Union[str, GlobalAttrs.style]] = None,
        tabindex: Optional[Union[str, GlobalAttrs.tabindex, int]] = None,
        title: Optional[Union[str, GlobalAttrs.title]] = None,
        translate: Optional[Union[str, GlobalAttrs.translate, Literal['yes', 'no']]] = None,
        writingsuggestions: Optional[Union[str, GlobalAttrs.writingsuggestions, Literal['true', 'false', '']]] = None,
        children: Optional[list] = None
    ) -> None:
        """
        Initialize 'sub' (Subscript) element.  
        Documentation: None

        :param attrs: A list or dictionary of attributes for the element
        :param id: The element's ID
        :param class_: Classes to which the element belongs
            | Set of space-separated tokens
        :param accesskey: Keyboard shortcut to activate or focus element
            | Ordered set of unique space-separated tokens, none of which are identical to another, each consisting of one code point in length
        :param autocapitalize: Recommended autocapitalization behavior (for supported input methods)
        :param autocorrect: Recommended autocorrection behavior (for supported input methods)
        :param autofocus: Automatically focus the element when the page is loaded
        :param contenteditable: Whether the element is editable
        :param dir: The text directionality of the element
        :param draggable: Whether the element is draggable
        :param enterkeyhint: Hint for selecting an enter key action
        :param hidden: Whether the element is relevant
        :param inert: Whether the element is inert.
        :param inputmode: Hint for selecting an input modality
        :param is_: Creates a customized built-in element
            | Valid custom element name of a defined customized built-in element
        :param itemid: Global identifier for a microdata item
            | Valid URL potentially surrounded by spaces
        :param itemprop: Property names of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs, defined property names, or text*
        :param itemref: Referenced elements
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param itemscope: Introduces a microdata item
        :param itemtype: Item types of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs*
        :param lang: Language of the element
            | Valid BCP 47 language tag or the empty string
        :param nonce: Cryptographic nonce used in Content Security Policy checks [CSP]
        :param popover: Makes the element a popover element
        :param slot: The element's desired slot
        :param spellcheck: Whether the element is to have its spelling and grammar checked
        :param style: Presentational and formatting instructions
            | CSS declarations*
        :param tabindex: Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation
        :param title: Advisory information for the element
        :param translate: Whether the element is to be translated when the page is localized
        :param writingsuggestions: Whether the element can offer writing suggestions or not.
        """ #fmt: skip
        super().__init__(
            "sub",
            void_element=False,
            attrs=attrs,
            children=children
        )
        if not (id is None or id is False):
            self._process_attr("id", id)
        if not (class_ is None or class_ is False):
            self._process_attr("class", class_)
        if not (accesskey is None or accesskey is False):
            self._process_attr("accesskey", accesskey)
        if not (autocapitalize is None or autocapitalize is False):
            self._process_attr("autocapitalize", autocapitalize)
        if not (autocorrect is None or autocorrect is False):
            self._process_attr("autocorrect", autocorrect)
        if not (autofocus is None or autofocus is False):
            self._process_attr("autofocus", autofocus)
        if not (contenteditable is None or contenteditable is False):
            self._process_attr("contenteditable", contenteditable)
        if not (dir is None or dir is False):
            self._process_attr("dir", dir)
        if not (draggable is None or draggable is False):
            self._process_attr("draggable", draggable)
        if not (enterkeyhint is None or enterkeyhint is False):
            self._process_attr("enterkeyhint", enterkeyhint)
        if not (hidden is None or hidden is False):
            self._process_attr("hidden", hidden)
        if not (inert is None or inert is False):
            self._process_attr("inert", inert)
        if not (inputmode is None or inputmode is False):
            self._process_attr("inputmode", inputmode)
        if not (is_ is None or is_ is False):
            self._process_attr("is", is_)
        if not (itemid is None or itemid is False):
            self._process_attr("itemid", itemid)
        if not (itemprop is None or itemprop is False):
            self._process_attr("itemprop", itemprop)
        if not (itemref is None or itemref is False):
            self._process_attr("itemref", itemref)
        if not (itemscope is None or itemscope is False):
            self._process_attr("itemscope", itemscope)
        if not (itemtype is None or itemtype is False):
            self._process_attr("itemtype", itemtype)
        if not (lang is None or lang is False):
            self._process_attr("lang", lang)
        if not (nonce is None or nonce is False):
            self._process_attr("nonce", nonce)
        if not (popover is None or popover is False):
            self._process_attr("popover", popover)
        if not (slot is None or slot is False):
            self._process_attr("slot", slot)
        if not (spellcheck is None or spellcheck is False):
            self._process_attr("spellcheck", spellcheck)
        if not (style is None or style is False):
            self._process_attr("style", style)
        if not (tabindex is None or tabindex is False):
            self._process_attr("tabindex", tabindex)
        if not (title is None or title is False):
            self._process_attr("title", title)
        if not (translate is None or translate is False):
            self._process_attr("translate", translate)
        if not (writingsuggestions is None or writingsuggestions is False):
            self._process_attr("writingsuggestions", writingsuggestions)


class summary(BaseElement, GlobalAttrs):
    """
    The 'summary' element.  
    Description: Caption for details  
    Categories: none  
    Parents: details  
    Children: phrasing heading content  
    Interface: HTMLElement  
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/summary  
    """ # fmt: skip


    def __init__(
        self,
        attrs: Optional[Union[dict[str, Union[str, dict, list]], list[BaseAttribute]]] = None,
        id: Optional[Union[str, GlobalAttrs.id]] = None,
        class_: Optional[Union[str, GlobalAttrs.class_]] = None,
        accesskey: Optional[Union[str, GlobalAttrs.accesskey]] = None,
        autocapitalize: Optional[Union[str, GlobalAttrs.autocapitalize, Literal['on', 'off', 'none', 'sentences', 'words', 'characters']]] = None,
        autocorrect: Optional[Union[str, GlobalAttrs.autocorrect, Literal['on', 'off']]] = None,
        autofocus: Optional[Union[str, GlobalAttrs.autofocus, bool]] = None,
        contenteditable: Optional[Union[str, GlobalAttrs.contenteditable, Literal['true', 'plaintext-only', 'false']]] = None,
        dir: Optional[Union[str, GlobalAttrs.dir, Literal['ltr', 'rtl', 'auto']]] = None,
        draggable: Optional[Union[str, GlobalAttrs.draggable, Literal['true', 'false']]] = None,
        enterkeyhint: Optional[Union[str, GlobalAttrs.enterkeyhint, Literal['enter', 'done', 'go', 'next', 'previous', 'search', 'send']]] = None,
        hidden: Optional[Union[str, GlobalAttrs.hidden, Literal['until-found', 'hidden', '']]] = None,
        inert: Optional[Union[str, GlobalAttrs.inert, bool]] = None,
        inputmode: Optional[Union[str, GlobalAttrs.inputmode, Literal['none', 'text', 'tel', 'email', 'url', 'numeric', 'decimal', 'search']]] = None,
        is_: Optional[Union[str, GlobalAttrs.is_]] = None,
        itemid: Optional[Union[str, GlobalAttrs.itemid]] = None,
        itemprop: Optional[Union[str, GlobalAttrs.itemprop]] = None,
        itemref: Optional[Union[str, GlobalAttrs.itemref]] = None,
        itemscope: Optional[Union[str, GlobalAttrs.itemscope, bool]] = None,
        itemtype: Optional[Union[str, GlobalAttrs.itemtype]] = None,
        lang: Optional[Union[str, GlobalAttrs.lang]] = None,
        nonce: Optional[Union[str, GlobalAttrs.nonce]] = None,
        popover: Optional[Union[str, GlobalAttrs.popover, Literal['auto', 'manual']]] = None,
        slot: Optional[Union[str, GlobalAttrs.slot]] = None,
        spellcheck: Optional[Union[str, GlobalAttrs.spellcheck, Literal['true', 'false', '']]] = None,
        style: Optional[Union[str, GlobalAttrs.style]] = None,
        tabindex: Optional[Union[str, GlobalAttrs.tabindex, int]] = None,
        title: Optional[Union[str, GlobalAttrs.title]] = None,
        translate: Optional[Union[str, GlobalAttrs.translate, Literal['yes', 'no']]] = None,
        writingsuggestions: Optional[Union[str, GlobalAttrs.writingsuggestions, Literal['true', 'false', '']]] = None,
        children: Optional[list] = None
    ) -> None:
        """
        Initialize 'summary' (Caption for details) element.  
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/summary

        :param attrs: A list or dictionary of attributes for the element
        :param id: The element's ID
        :param class_: Classes to which the element belongs
            | Set of space-separated tokens
        :param accesskey: Keyboard shortcut to activate or focus element
            | Ordered set of unique space-separated tokens, none of which are identical to another, each consisting of one code point in length
        :param autocapitalize: Recommended autocapitalization behavior (for supported input methods)
        :param autocorrect: Recommended autocorrection behavior (for supported input methods)
        :param autofocus: Automatically focus the element when the page is loaded
        :param contenteditable: Whether the element is editable
        :param dir: The text directionality of the element
        :param draggable: Whether the element is draggable
        :param enterkeyhint: Hint for selecting an enter key action
        :param hidden: Whether the element is relevant
        :param inert: Whether the element is inert.
        :param inputmode: Hint for selecting an input modality
        :param is_: Creates a customized built-in element
            | Valid custom element name of a defined customized built-in element
        :param itemid: Global identifier for a microdata item
            | Valid URL potentially surrounded by spaces
        :param itemprop: Property names of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs, defined property names, or text*
        :param itemref: Referenced elements
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param itemscope: Introduces a microdata item
        :param itemtype: Item types of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs*
        :param lang: Language of the element
            | Valid BCP 47 language tag or the empty string
        :param nonce: Cryptographic nonce used in Content Security Policy checks [CSP]
        :param popover: Makes the element a popover element
        :param slot: The element's desired slot
        :param spellcheck: Whether the element is to have its spelling and grammar checked
        :param style: Presentational and formatting instructions
            | CSS declarations*
        :param tabindex: Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation
        :param title: Advisory information for the element
        :param translate: Whether the element is to be translated when the page is localized
        :param writingsuggestions: Whether the element can offer writing suggestions or not.
        """ #fmt: skip
        super().__init__(
            "summary",
            void_element=False,
            attrs=attrs,
            children=children
        )
        if not (id is None or id is False):
            self._process_attr("id", id)
        if not (class_ is None or class_ is False):
            self._process_attr("class", class_)
        if not (accesskey is None or accesskey is False):
            self._process_attr("accesskey", accesskey)
        if not (autocapitalize is None or autocapitalize is False):
            self._process_attr("autocapitalize", autocapitalize)
        if not (autocorrect is None or autocorrect is False):
            self._process_attr("autocorrect", autocorrect)
        if not (autofocus is None or autofocus is False):
            self._process_attr("autofocus", autofocus)
        if not (contenteditable is None or contenteditable is False):
            self._process_attr("contenteditable", contenteditable)
        if not (dir is None or dir is False):
            self._process_attr("dir", dir)
        if not (draggable is None or draggable is False):
            self._process_attr("draggable", draggable)
        if not (enterkeyhint is None or enterkeyhint is False):
            self._process_attr("enterkeyhint", enterkeyhint)
        if not (hidden is None or hidden is False):
            self._process_attr("hidden", hidden)
        if not (inert is None or inert is False):
            self._process_attr("inert", inert)
        if not (inputmode is None or inputmode is False):
            self._process_attr("inputmode", inputmode)
        if not (is_ is None or is_ is False):
            self._process_attr("is", is_)
        if not (itemid is None or itemid is False):
            self._process_attr("itemid", itemid)
        if not (itemprop is None or itemprop is False):
            self._process_attr("itemprop", itemprop)
        if not (itemref is None or itemref is False):
            self._process_attr("itemref", itemref)
        if not (itemscope is None or itemscope is False):
            self._process_attr("itemscope", itemscope)
        if not (itemtype is None or itemtype is False):
            self._process_attr("itemtype", itemtype)
        if not (lang is None or lang is False):
            self._process_attr("lang", lang)
        if not (nonce is None or nonce is False):
            self._process_attr("nonce", nonce)
        if not (popover is None or popover is False):
            self._process_attr("popover", popover)
        if not (slot is None or slot is False):
            self._process_attr("slot", slot)
        if not (spellcheck is None or spellcheck is False):
            self._process_attr("spellcheck", spellcheck)
        if not (style is None or style is False):
            self._process_attr("style", style)
        if not (tabindex is None or tabindex is False):
            self._process_attr("tabindex", tabindex)
        if not (title is None or title is False):
            self._process_attr("title", title)
        if not (translate is None or translate is False):
            self._process_attr("translate", translate)
        if not (writingsuggestions is None or writingsuggestions is False):
            self._process_attr("writingsuggestions", writingsuggestions)


class sup(BaseElement, GlobalAttrs):
    """
    The 'sup' element.  
    Description: Superscript  
    Categories: flow phrasing palpable  
    Parents: phrasing  
    Children: phrasing  
    Interface: HTMLElement  
    Documentation: None  
    """ # fmt: skip


    def __init__(
        self,
        attrs: Optional[Union[dict[str, Union[str, dict, list]], list[BaseAttribute]]] = None,
        id: Optional[Union[str, GlobalAttrs.id]] = None,
        class_: Optional[Union[str, GlobalAttrs.class_]] = None,
        accesskey: Optional[Union[str, GlobalAttrs.accesskey]] = None,
        autocapitalize: Optional[Union[str, GlobalAttrs.autocapitalize, Literal['on', 'off', 'none', 'sentences', 'words', 'characters']]] = None,
        autocorrect: Optional[Union[str, GlobalAttrs.autocorrect, Literal['on', 'off']]] = None,
        autofocus: Optional[Union[str, GlobalAttrs.autofocus, bool]] = None,
        contenteditable: Optional[Union[str, GlobalAttrs.contenteditable, Literal['true', 'plaintext-only', 'false']]] = None,
        dir: Optional[Union[str, GlobalAttrs.dir, Literal['ltr', 'rtl', 'auto']]] = None,
        draggable: Optional[Union[str, GlobalAttrs.draggable, Literal['true', 'false']]] = None,
        enterkeyhint: Optional[Union[str, GlobalAttrs.enterkeyhint, Literal['enter', 'done', 'go', 'next', 'previous', 'search', 'send']]] = None,
        hidden: Optional[Union[str, GlobalAttrs.hidden, Literal['until-found', 'hidden', '']]] = None,
        inert: Optional[Union[str, GlobalAttrs.inert, bool]] = None,
        inputmode: Optional[Union[str, GlobalAttrs.inputmode, Literal['none', 'text', 'tel', 'email', 'url', 'numeric', 'decimal', 'search']]] = None,
        is_: Optional[Union[str, GlobalAttrs.is_]] = None,
        itemid: Optional[Union[str, GlobalAttrs.itemid]] = None,
        itemprop: Optional[Union[str, GlobalAttrs.itemprop]] = None,
        itemref: Optional[Union[str, GlobalAttrs.itemref]] = None,
        itemscope: Optional[Union[str, GlobalAttrs.itemscope, bool]] = None,
        itemtype: Optional[Union[str, GlobalAttrs.itemtype]] = None,
        lang: Optional[Union[str, GlobalAttrs.lang]] = None,
        nonce: Optional[Union[str, GlobalAttrs.nonce]] = None,
        popover: Optional[Union[str, GlobalAttrs.popover, Literal['auto', 'manual']]] = None,
        slot: Optional[Union[str, GlobalAttrs.slot]] = None,
        spellcheck: Optional[Union[str, GlobalAttrs.spellcheck, Literal['true', 'false', '']]] = None,
        style: Optional[Union[str, GlobalAttrs.style]] = None,
        tabindex: Optional[Union[str, GlobalAttrs.tabindex, int]] = None,
        title: Optional[Union[str, GlobalAttrs.title]] = None,
        translate: Optional[Union[str, GlobalAttrs.translate, Literal['yes', 'no']]] = None,
        writingsuggestions: Optional[Union[str, GlobalAttrs.writingsuggestions, Literal['true', 'false', '']]] = None,
        children: Optional[list] = None
    ) -> None:
        """
        Initialize 'sup' (Superscript) element.  
        Documentation: None

        :param attrs: A list or dictionary of attributes for the element
        :param id: The element's ID
        :param class_: Classes to which the element belongs
            | Set of space-separated tokens
        :param accesskey: Keyboard shortcut to activate or focus element
            | Ordered set of unique space-separated tokens, none of which are identical to another, each consisting of one code point in length
        :param autocapitalize: Recommended autocapitalization behavior (for supported input methods)
        :param autocorrect: Recommended autocorrection behavior (for supported input methods)
        :param autofocus: Automatically focus the element when the page is loaded
        :param contenteditable: Whether the element is editable
        :param dir: The text directionality of the element
        :param draggable: Whether the element is draggable
        :param enterkeyhint: Hint for selecting an enter key action
        :param hidden: Whether the element is relevant
        :param inert: Whether the element is inert.
        :param inputmode: Hint for selecting an input modality
        :param is_: Creates a customized built-in element
            | Valid custom element name of a defined customized built-in element
        :param itemid: Global identifier for a microdata item
            | Valid URL potentially surrounded by spaces
        :param itemprop: Property names of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs, defined property names, or text*
        :param itemref: Referenced elements
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param itemscope: Introduces a microdata item
        :param itemtype: Item types of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs*
        :param lang: Language of the element
            | Valid BCP 47 language tag or the empty string
        :param nonce: Cryptographic nonce used in Content Security Policy checks [CSP]
        :param popover: Makes the element a popover element
        :param slot: The element's desired slot
        :param spellcheck: Whether the element is to have its spelling and grammar checked
        :param style: Presentational and formatting instructions
            | CSS declarations*
        :param tabindex: Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation
        :param title: Advisory information for the element
        :param translate: Whether the element is to be translated when the page is localized
        :param writingsuggestions: Whether the element can offer writing suggestions or not.
        """ #fmt: skip
        super().__init__(
            "sup",
            void_element=False,
            attrs=attrs,
            children=children
        )
        if not (id is None or id is False):
            self._process_attr("id", id)
        if not (class_ is None or class_ is False):
            self._process_attr("class", class_)
        if not (accesskey is None or accesskey is False):
            self._process_attr("accesskey", accesskey)
        if not (autocapitalize is None or autocapitalize is False):
            self._process_attr("autocapitalize", autocapitalize)
        if not (autocorrect is None or autocorrect is False):
            self._process_attr("autocorrect", autocorrect)
        if not (autofocus is None or autofocus is False):
            self._process_attr("autofocus", autofocus)
        if not (contenteditable is None or contenteditable is False):
            self._process_attr("contenteditable", contenteditable)
        if not (dir is None or dir is False):
            self._process_attr("dir", dir)
        if not (draggable is None or draggable is False):
            self._process_attr("draggable", draggable)
        if not (enterkeyhint is None or enterkeyhint is False):
            self._process_attr("enterkeyhint", enterkeyhint)
        if not (hidden is None or hidden is False):
            self._process_attr("hidden", hidden)
        if not (inert is None or inert is False):
            self._process_attr("inert", inert)
        if not (inputmode is None or inputmode is False):
            self._process_attr("inputmode", inputmode)
        if not (is_ is None or is_ is False):
            self._process_attr("is", is_)
        if not (itemid is None or itemid is False):
            self._process_attr("itemid", itemid)
        if not (itemprop is None or itemprop is False):
            self._process_attr("itemprop", itemprop)
        if not (itemref is None or itemref is False):
            self._process_attr("itemref", itemref)
        if not (itemscope is None or itemscope is False):
            self._process_attr("itemscope", itemscope)
        if not (itemtype is None or itemtype is False):
            self._process_attr("itemtype", itemtype)
        if not (lang is None or lang is False):
            self._process_attr("lang", lang)
        if not (nonce is None or nonce is False):
            self._process_attr("nonce", nonce)
        if not (popover is None or popover is False):
            self._process_attr("popover", popover)
        if not (slot is None or slot is False):
            self._process_attr("slot", slot)
        if not (spellcheck is None or spellcheck is False):
            self._process_attr("spellcheck", spellcheck)
        if not (style is None or style is False):
            self._process_attr("style", style)
        if not (tabindex is None or tabindex is False):
            self._process_attr("tabindex", tabindex)
        if not (title is None or title is False):
            self._process_attr("title", title)
        if not (translate is None or translate is False):
            self._process_attr("translate", translate)
        if not (writingsuggestions is None or writingsuggestions is False):
            self._process_attr("writingsuggestions", writingsuggestions)


class svg(BaseElement, GlobalAttrs):
    """
    The 'svg' element.  
    Description: SVG root  
    Categories: flow phrasing embedded palpable  
    Parents: phrasing  
    Children: per [SVG]  
    Interface: SVGSVGElement  
    Documentation: None  
    """ # fmt: skip


    def __init__(
        self,
        attrs: Optional[Union[dict[str, Union[str, dict, list]], list[BaseAttribute]]] = None,
        id: Optional[Union[str, GlobalAttrs.id]] = None,
        class_: Optional[Union[str, GlobalAttrs.class_]] = None,
        accesskey: Optional[Union[str, GlobalAttrs.accesskey]] = None,
        autocapitalize: Optional[Union[str, GlobalAttrs.autocapitalize, Literal['on', 'off', 'none', 'sentences', 'words', 'characters']]] = None,
        autocorrect: Optional[Union[str, GlobalAttrs.autocorrect, Literal['on', 'off']]] = None,
        autofocus: Optional[Union[str, GlobalAttrs.autofocus, bool]] = None,
        contenteditable: Optional[Union[str, GlobalAttrs.contenteditable, Literal['true', 'plaintext-only', 'false']]] = None,
        dir: Optional[Union[str, GlobalAttrs.dir, Literal['ltr', 'rtl', 'auto']]] = None,
        draggable: Optional[Union[str, GlobalAttrs.draggable, Literal['true', 'false']]] = None,
        enterkeyhint: Optional[Union[str, GlobalAttrs.enterkeyhint, Literal['enter', 'done', 'go', 'next', 'previous', 'search', 'send']]] = None,
        hidden: Optional[Union[str, GlobalAttrs.hidden, Literal['until-found', 'hidden', '']]] = None,
        inert: Optional[Union[str, GlobalAttrs.inert, bool]] = None,
        inputmode: Optional[Union[str, GlobalAttrs.inputmode, Literal['none', 'text', 'tel', 'email', 'url', 'numeric', 'decimal', 'search']]] = None,
        is_: Optional[Union[str, GlobalAttrs.is_]] = None,
        itemid: Optional[Union[str, GlobalAttrs.itemid]] = None,
        itemprop: Optional[Union[str, GlobalAttrs.itemprop]] = None,
        itemref: Optional[Union[str, GlobalAttrs.itemref]] = None,
        itemscope: Optional[Union[str, GlobalAttrs.itemscope, bool]] = None,
        itemtype: Optional[Union[str, GlobalAttrs.itemtype]] = None,
        lang: Optional[Union[str, GlobalAttrs.lang]] = None,
        nonce: Optional[Union[str, GlobalAttrs.nonce]] = None,
        popover: Optional[Union[str, GlobalAttrs.popover, Literal['auto', 'manual']]] = None,
        slot: Optional[Union[str, GlobalAttrs.slot]] = None,
        spellcheck: Optional[Union[str, GlobalAttrs.spellcheck, Literal['true', 'false', '']]] = None,
        style: Optional[Union[str, GlobalAttrs.style]] = None,
        tabindex: Optional[Union[str, GlobalAttrs.tabindex, int]] = None,
        title: Optional[Union[str, GlobalAttrs.title]] = None,
        translate: Optional[Union[str, GlobalAttrs.translate, Literal['yes', 'no']]] = None,
        writingsuggestions: Optional[Union[str, GlobalAttrs.writingsuggestions, Literal['true', 'false', '']]] = None,
        children: Optional[list] = None
    ) -> None:
        """
        Initialize 'svg' (SVG root) element.  
        Documentation: None

        :param attrs: A list or dictionary of attributes for the element
        :param id: The element's ID
        :param class_: Classes to which the element belongs
            | Set of space-separated tokens
        :param accesskey: Keyboard shortcut to activate or focus element
            | Ordered set of unique space-separated tokens, none of which are identical to another, each consisting of one code point in length
        :param autocapitalize: Recommended autocapitalization behavior (for supported input methods)
        :param autocorrect: Recommended autocorrection behavior (for supported input methods)
        :param autofocus: Automatically focus the element when the page is loaded
        :param contenteditable: Whether the element is editable
        :param dir: The text directionality of the element
        :param draggable: Whether the element is draggable
        :param enterkeyhint: Hint for selecting an enter key action
        :param hidden: Whether the element is relevant
        :param inert: Whether the element is inert.
        :param inputmode: Hint for selecting an input modality
        :param is_: Creates a customized built-in element
            | Valid custom element name of a defined customized built-in element
        :param itemid: Global identifier for a microdata item
            | Valid URL potentially surrounded by spaces
        :param itemprop: Property names of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs, defined property names, or text*
        :param itemref: Referenced elements
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param itemscope: Introduces a microdata item
        :param itemtype: Item types of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs*
        :param lang: Language of the element
            | Valid BCP 47 language tag or the empty string
        :param nonce: Cryptographic nonce used in Content Security Policy checks [CSP]
        :param popover: Makes the element a popover element
        :param slot: The element's desired slot
        :param spellcheck: Whether the element is to have its spelling and grammar checked
        :param style: Presentational and formatting instructions
            | CSS declarations*
        :param tabindex: Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation
        :param title: Advisory information for the element
        :param translate: Whether the element is to be translated when the page is localized
        :param writingsuggestions: Whether the element can offer writing suggestions or not.
        """ #fmt: skip
        super().__init__(
            "svg",
            void_element=False,
            attrs=attrs,
            children=children
        )
        if not (id is None or id is False):
            self._process_attr("id", id)
        if not (class_ is None or class_ is False):
            self._process_attr("class", class_)
        if not (accesskey is None or accesskey is False):
            self._process_attr("accesskey", accesskey)
        if not (autocapitalize is None or autocapitalize is False):
            self._process_attr("autocapitalize", autocapitalize)
        if not (autocorrect is None or autocorrect is False):
            self._process_attr("autocorrect", autocorrect)
        if not (autofocus is None or autofocus is False):
            self._process_attr("autofocus", autofocus)
        if not (contenteditable is None or contenteditable is False):
            self._process_attr("contenteditable", contenteditable)
        if not (dir is None or dir is False):
            self._process_attr("dir", dir)
        if not (draggable is None or draggable is False):
            self._process_attr("draggable", draggable)
        if not (enterkeyhint is None or enterkeyhint is False):
            self._process_attr("enterkeyhint", enterkeyhint)
        if not (hidden is None or hidden is False):
            self._process_attr("hidden", hidden)
        if not (inert is None or inert is False):
            self._process_attr("inert", inert)
        if not (inputmode is None or inputmode is False):
            self._process_attr("inputmode", inputmode)
        if not (is_ is None or is_ is False):
            self._process_attr("is", is_)
        if not (itemid is None or itemid is False):
            self._process_attr("itemid", itemid)
        if not (itemprop is None or itemprop is False):
            self._process_attr("itemprop", itemprop)
        if not (itemref is None or itemref is False):
            self._process_attr("itemref", itemref)
        if not (itemscope is None or itemscope is False):
            self._process_attr("itemscope", itemscope)
        if not (itemtype is None or itemtype is False):
            self._process_attr("itemtype", itemtype)
        if not (lang is None or lang is False):
            self._process_attr("lang", lang)
        if not (nonce is None or nonce is False):
            self._process_attr("nonce", nonce)
        if not (popover is None or popover is False):
            self._process_attr("popover", popover)
        if not (slot is None or slot is False):
            self._process_attr("slot", slot)
        if not (spellcheck is None or spellcheck is False):
            self._process_attr("spellcheck", spellcheck)
        if not (style is None or style is False):
            self._process_attr("style", style)
        if not (tabindex is None or tabindex is False):
            self._process_attr("tabindex", tabindex)
        if not (title is None or title is False):
            self._process_attr("title", title)
        if not (translate is None or translate is False):
            self._process_attr("translate", translate)
        if not (writingsuggestions is None or writingsuggestions is False):
            self._process_attr("writingsuggestions", writingsuggestions)


class table(BaseElement, GlobalAttrs):
    """
    The 'table' element.  
    Description: Table  
    Categories: flow palpable  
    Parents: flow  
    Children: caption* colgroup* thead* tbody* tfoot* tr* script-supporting elements  
    Interface: HTMLTableElement  
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/table  
    """ # fmt: skip


    def __init__(
        self,
        attrs: Optional[Union[dict[str, Union[str, dict, list]], list[BaseAttribute]]] = None,
        id: Optional[Union[str, GlobalAttrs.id]] = None,
        class_: Optional[Union[str, GlobalAttrs.class_]] = None,
        accesskey: Optional[Union[str, GlobalAttrs.accesskey]] = None,
        autocapitalize: Optional[Union[str, GlobalAttrs.autocapitalize, Literal['on', 'off', 'none', 'sentences', 'words', 'characters']]] = None,
        autocorrect: Optional[Union[str, GlobalAttrs.autocorrect, Literal['on', 'off']]] = None,
        autofocus: Optional[Union[str, GlobalAttrs.autofocus, bool]] = None,
        contenteditable: Optional[Union[str, GlobalAttrs.contenteditable, Literal['true', 'plaintext-only', 'false']]] = None,
        dir: Optional[Union[str, GlobalAttrs.dir, Literal['ltr', 'rtl', 'auto']]] = None,
        draggable: Optional[Union[str, GlobalAttrs.draggable, Literal['true', 'false']]] = None,
        enterkeyhint: Optional[Union[str, GlobalAttrs.enterkeyhint, Literal['enter', 'done', 'go', 'next', 'previous', 'search', 'send']]] = None,
        hidden: Optional[Union[str, GlobalAttrs.hidden, Literal['until-found', 'hidden', '']]] = None,
        inert: Optional[Union[str, GlobalAttrs.inert, bool]] = None,
        inputmode: Optional[Union[str, GlobalAttrs.inputmode, Literal['none', 'text', 'tel', 'email', 'url', 'numeric', 'decimal', 'search']]] = None,
        is_: Optional[Union[str, GlobalAttrs.is_]] = None,
        itemid: Optional[Union[str, GlobalAttrs.itemid]] = None,
        itemprop: Optional[Union[str, GlobalAttrs.itemprop]] = None,
        itemref: Optional[Union[str, GlobalAttrs.itemref]] = None,
        itemscope: Optional[Union[str, GlobalAttrs.itemscope, bool]] = None,
        itemtype: Optional[Union[str, GlobalAttrs.itemtype]] = None,
        lang: Optional[Union[str, GlobalAttrs.lang]] = None,
        nonce: Optional[Union[str, GlobalAttrs.nonce]] = None,
        popover: Optional[Union[str, GlobalAttrs.popover, Literal['auto', 'manual']]] = None,
        slot: Optional[Union[str, GlobalAttrs.slot]] = None,
        spellcheck: Optional[Union[str, GlobalAttrs.spellcheck, Literal['true', 'false', '']]] = None,
        style: Optional[Union[str, GlobalAttrs.style]] = None,
        tabindex: Optional[Union[str, GlobalAttrs.tabindex, int]] = None,
        title: Optional[Union[str, GlobalAttrs.title]] = None,
        translate: Optional[Union[str, GlobalAttrs.translate, Literal['yes', 'no']]] = None,
        writingsuggestions: Optional[Union[str, GlobalAttrs.writingsuggestions, Literal['true', 'false', '']]] = None,
        children: Optional[list] = None
    ) -> None:
        """
        Initialize 'table' (Table) element.  
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/table

        :param attrs: A list or dictionary of attributes for the element
        :param id: The element's ID
        :param class_: Classes to which the element belongs
            | Set of space-separated tokens
        :param accesskey: Keyboard shortcut to activate or focus element
            | Ordered set of unique space-separated tokens, none of which are identical to another, each consisting of one code point in length
        :param autocapitalize: Recommended autocapitalization behavior (for supported input methods)
        :param autocorrect: Recommended autocorrection behavior (for supported input methods)
        :param autofocus: Automatically focus the element when the page is loaded
        :param contenteditable: Whether the element is editable
        :param dir: The text directionality of the element
        :param draggable: Whether the element is draggable
        :param enterkeyhint: Hint for selecting an enter key action
        :param hidden: Whether the element is relevant
        :param inert: Whether the element is inert.
        :param inputmode: Hint for selecting an input modality
        :param is_: Creates a customized built-in element
            | Valid custom element name of a defined customized built-in element
        :param itemid: Global identifier for a microdata item
            | Valid URL potentially surrounded by spaces
        :param itemprop: Property names of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs, defined property names, or text*
        :param itemref: Referenced elements
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param itemscope: Introduces a microdata item
        :param itemtype: Item types of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs*
        :param lang: Language of the element
            | Valid BCP 47 language tag or the empty string
        :param nonce: Cryptographic nonce used in Content Security Policy checks [CSP]
        :param popover: Makes the element a popover element
        :param slot: The element's desired slot
        :param spellcheck: Whether the element is to have its spelling and grammar checked
        :param style: Presentational and formatting instructions
            | CSS declarations*
        :param tabindex: Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation
        :param title: Advisory information for the element
        :param translate: Whether the element is to be translated when the page is localized
        :param writingsuggestions: Whether the element can offer writing suggestions or not.
        """ #fmt: skip
        super().__init__(
            "table",
            void_element=False,
            attrs=attrs,
            children=children
        )
        if not (id is None or id is False):
            self._process_attr("id", id)
        if not (class_ is None or class_ is False):
            self._process_attr("class", class_)
        if not (accesskey is None or accesskey is False):
            self._process_attr("accesskey", accesskey)
        if not (autocapitalize is None or autocapitalize is False):
            self._process_attr("autocapitalize", autocapitalize)
        if not (autocorrect is None or autocorrect is False):
            self._process_attr("autocorrect", autocorrect)
        if not (autofocus is None or autofocus is False):
            self._process_attr("autofocus", autofocus)
        if not (contenteditable is None or contenteditable is False):
            self._process_attr("contenteditable", contenteditable)
        if not (dir is None or dir is False):
            self._process_attr("dir", dir)
        if not (draggable is None or draggable is False):
            self._process_attr("draggable", draggable)
        if not (enterkeyhint is None or enterkeyhint is False):
            self._process_attr("enterkeyhint", enterkeyhint)
        if not (hidden is None or hidden is False):
            self._process_attr("hidden", hidden)
        if not (inert is None or inert is False):
            self._process_attr("inert", inert)
        if not (inputmode is None or inputmode is False):
            self._process_attr("inputmode", inputmode)
        if not (is_ is None or is_ is False):
            self._process_attr("is", is_)
        if not (itemid is None or itemid is False):
            self._process_attr("itemid", itemid)
        if not (itemprop is None or itemprop is False):
            self._process_attr("itemprop", itemprop)
        if not (itemref is None or itemref is False):
            self._process_attr("itemref", itemref)
        if not (itemscope is None or itemscope is False):
            self._process_attr("itemscope", itemscope)
        if not (itemtype is None or itemtype is False):
            self._process_attr("itemtype", itemtype)
        if not (lang is None or lang is False):
            self._process_attr("lang", lang)
        if not (nonce is None or nonce is False):
            self._process_attr("nonce", nonce)
        if not (popover is None or popover is False):
            self._process_attr("popover", popover)
        if not (slot is None or slot is False):
            self._process_attr("slot", slot)
        if not (spellcheck is None or spellcheck is False):
            self._process_attr("spellcheck", spellcheck)
        if not (style is None or style is False):
            self._process_attr("style", style)
        if not (tabindex is None or tabindex is False):
            self._process_attr("tabindex", tabindex)
        if not (title is None or title is False):
            self._process_attr("title", title)
        if not (translate is None or translate is False):
            self._process_attr("translate", translate)
        if not (writingsuggestions is None or writingsuggestions is False):
            self._process_attr("writingsuggestions", writingsuggestions)


class tbody(BaseElement, GlobalAttrs):
    """
    The 'tbody' element.  
    Description: Group of rows in a table  
    Categories: none  
    Parents: table  
    Children: tr script-supporting elements  
    Interface: HTMLTableSectionElement  
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tbody  
    """ # fmt: skip


    def __init__(
        self,
        attrs: Optional[Union[dict[str, Union[str, dict, list]], list[BaseAttribute]]] = None,
        id: Optional[Union[str, GlobalAttrs.id]] = None,
        class_: Optional[Union[str, GlobalAttrs.class_]] = None,
        accesskey: Optional[Union[str, GlobalAttrs.accesskey]] = None,
        autocapitalize: Optional[Union[str, GlobalAttrs.autocapitalize, Literal['on', 'off', 'none', 'sentences', 'words', 'characters']]] = None,
        autocorrect: Optional[Union[str, GlobalAttrs.autocorrect, Literal['on', 'off']]] = None,
        autofocus: Optional[Union[str, GlobalAttrs.autofocus, bool]] = None,
        contenteditable: Optional[Union[str, GlobalAttrs.contenteditable, Literal['true', 'plaintext-only', 'false']]] = None,
        dir: Optional[Union[str, GlobalAttrs.dir, Literal['ltr', 'rtl', 'auto']]] = None,
        draggable: Optional[Union[str, GlobalAttrs.draggable, Literal['true', 'false']]] = None,
        enterkeyhint: Optional[Union[str, GlobalAttrs.enterkeyhint, Literal['enter', 'done', 'go', 'next', 'previous', 'search', 'send']]] = None,
        hidden: Optional[Union[str, GlobalAttrs.hidden, Literal['until-found', 'hidden', '']]] = None,
        inert: Optional[Union[str, GlobalAttrs.inert, bool]] = None,
        inputmode: Optional[Union[str, GlobalAttrs.inputmode, Literal['none', 'text', 'tel', 'email', 'url', 'numeric', 'decimal', 'search']]] = None,
        is_: Optional[Union[str, GlobalAttrs.is_]] = None,
        itemid: Optional[Union[str, GlobalAttrs.itemid]] = None,
        itemprop: Optional[Union[str, GlobalAttrs.itemprop]] = None,
        itemref: Optional[Union[str, GlobalAttrs.itemref]] = None,
        itemscope: Optional[Union[str, GlobalAttrs.itemscope, bool]] = None,
        itemtype: Optional[Union[str, GlobalAttrs.itemtype]] = None,
        lang: Optional[Union[str, GlobalAttrs.lang]] = None,
        nonce: Optional[Union[str, GlobalAttrs.nonce]] = None,
        popover: Optional[Union[str, GlobalAttrs.popover, Literal['auto', 'manual']]] = None,
        slot: Optional[Union[str, GlobalAttrs.slot]] = None,
        spellcheck: Optional[Union[str, GlobalAttrs.spellcheck, Literal['true', 'false', '']]] = None,
        style: Optional[Union[str, GlobalAttrs.style]] = None,
        tabindex: Optional[Union[str, GlobalAttrs.tabindex, int]] = None,
        title: Optional[Union[str, GlobalAttrs.title]] = None,
        translate: Optional[Union[str, GlobalAttrs.translate, Literal['yes', 'no']]] = None,
        writingsuggestions: Optional[Union[str, GlobalAttrs.writingsuggestions, Literal['true', 'false', '']]] = None,
        children: Optional[list] = None
    ) -> None:
        """
        Initialize 'tbody' (Group of rows in a table) element.  
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tbody

        :param attrs: A list or dictionary of attributes for the element
        :param id: The element's ID
        :param class_: Classes to which the element belongs
            | Set of space-separated tokens
        :param accesskey: Keyboard shortcut to activate or focus element
            | Ordered set of unique space-separated tokens, none of which are identical to another, each consisting of one code point in length
        :param autocapitalize: Recommended autocapitalization behavior (for supported input methods)
        :param autocorrect: Recommended autocorrection behavior (for supported input methods)
        :param autofocus: Automatically focus the element when the page is loaded
        :param contenteditable: Whether the element is editable
        :param dir: The text directionality of the element
        :param draggable: Whether the element is draggable
        :param enterkeyhint: Hint for selecting an enter key action
        :param hidden: Whether the element is relevant
        :param inert: Whether the element is inert.
        :param inputmode: Hint for selecting an input modality
        :param is_: Creates a customized built-in element
            | Valid custom element name of a defined customized built-in element
        :param itemid: Global identifier for a microdata item
            | Valid URL potentially surrounded by spaces
        :param itemprop: Property names of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs, defined property names, or text*
        :param itemref: Referenced elements
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param itemscope: Introduces a microdata item
        :param itemtype: Item types of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs*
        :param lang: Language of the element
            | Valid BCP 47 language tag or the empty string
        :param nonce: Cryptographic nonce used in Content Security Policy checks [CSP]
        :param popover: Makes the element a popover element
        :param slot: The element's desired slot
        :param spellcheck: Whether the element is to have its spelling and grammar checked
        :param style: Presentational and formatting instructions
            | CSS declarations*
        :param tabindex: Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation
        :param title: Advisory information for the element
        :param translate: Whether the element is to be translated when the page is localized
        :param writingsuggestions: Whether the element can offer writing suggestions or not.
        """ #fmt: skip
        super().__init__(
            "tbody",
            void_element=False,
            attrs=attrs,
            children=children
        )
        if not (id is None or id is False):
            self._process_attr("id", id)
        if not (class_ is None or class_ is False):
            self._process_attr("class", class_)
        if not (accesskey is None or accesskey is False):
            self._process_attr("accesskey", accesskey)
        if not (autocapitalize is None or autocapitalize is False):
            self._process_attr("autocapitalize", autocapitalize)
        if not (autocorrect is None or autocorrect is False):
            self._process_attr("autocorrect", autocorrect)
        if not (autofocus is None or autofocus is False):
            self._process_attr("autofocus", autofocus)
        if not (contenteditable is None or contenteditable is False):
            self._process_attr("contenteditable", contenteditable)
        if not (dir is None or dir is False):
            self._process_attr("dir", dir)
        if not (draggable is None or draggable is False):
            self._process_attr("draggable", draggable)
        if not (enterkeyhint is None or enterkeyhint is False):
            self._process_attr("enterkeyhint", enterkeyhint)
        if not (hidden is None or hidden is False):
            self._process_attr("hidden", hidden)
        if not (inert is None or inert is False):
            self._process_attr("inert", inert)
        if not (inputmode is None or inputmode is False):
            self._process_attr("inputmode", inputmode)
        if not (is_ is None or is_ is False):
            self._process_attr("is", is_)
        if not (itemid is None or itemid is False):
            self._process_attr("itemid", itemid)
        if not (itemprop is None or itemprop is False):
            self._process_attr("itemprop", itemprop)
        if not (itemref is None or itemref is False):
            self._process_attr("itemref", itemref)
        if not (itemscope is None or itemscope is False):
            self._process_attr("itemscope", itemscope)
        if not (itemtype is None or itemtype is False):
            self._process_attr("itemtype", itemtype)
        if not (lang is None or lang is False):
            self._process_attr("lang", lang)
        if not (nonce is None or nonce is False):
            self._process_attr("nonce", nonce)
        if not (popover is None or popover is False):
            self._process_attr("popover", popover)
        if not (slot is None or slot is False):
            self._process_attr("slot", slot)
        if not (spellcheck is None or spellcheck is False):
            self._process_attr("spellcheck", spellcheck)
        if not (style is None or style is False):
            self._process_attr("style", style)
        if not (tabindex is None or tabindex is False):
            self._process_attr("tabindex", tabindex)
        if not (title is None or title is False):
            self._process_attr("title", title)
        if not (translate is None or translate is False):
            self._process_attr("translate", translate)
        if not (writingsuggestions is None or writingsuggestions is False):
            self._process_attr("writingsuggestions", writingsuggestions)


class td(BaseElement, GlobalAttrs, TdAttrs):
    """
    The 'td' element.  
    Description: Table cell  
    Categories: none  
    Parents: tr  
    Children: flow  
    Interface: HTMLTableCellElement  
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/td  
    """ # fmt: skip


    def __init__(
        self,
        attrs: Optional[Union[dict[str, Union[str, dict, list]], list[BaseAttribute]]] = None,
        id: Optional[Union[str, GlobalAttrs.id]] = None,
        class_: Optional[Union[str, GlobalAttrs.class_]] = None,
        colspan: Optional[Union[str, TdAttrs.colspan]] = None,
        headers: Optional[Union[str, TdAttrs.headers]] = None,
        rowspan: Optional[Union[str, TdAttrs.rowspan, int]] = None,
        accesskey: Optional[Union[str, GlobalAttrs.accesskey]] = None,
        autocapitalize: Optional[Union[str, GlobalAttrs.autocapitalize, Literal['on', 'off', 'none', 'sentences', 'words', 'characters']]] = None,
        autocorrect: Optional[Union[str, GlobalAttrs.autocorrect, Literal['on', 'off']]] = None,
        autofocus: Optional[Union[str, GlobalAttrs.autofocus, bool]] = None,
        contenteditable: Optional[Union[str, GlobalAttrs.contenteditable, Literal['true', 'plaintext-only', 'false']]] = None,
        dir: Optional[Union[str, GlobalAttrs.dir, Literal['ltr', 'rtl', 'auto']]] = None,
        draggable: Optional[Union[str, GlobalAttrs.draggable, Literal['true', 'false']]] = None,
        enterkeyhint: Optional[Union[str, GlobalAttrs.enterkeyhint, Literal['enter', 'done', 'go', 'next', 'previous', 'search', 'send']]] = None,
        hidden: Optional[Union[str, GlobalAttrs.hidden, Literal['until-found', 'hidden', '']]] = None,
        inert: Optional[Union[str, GlobalAttrs.inert, bool]] = None,
        inputmode: Optional[Union[str, GlobalAttrs.inputmode, Literal['none', 'text', 'tel', 'email', 'url', 'numeric', 'decimal', 'search']]] = None,
        is_: Optional[Union[str, GlobalAttrs.is_]] = None,
        itemid: Optional[Union[str, GlobalAttrs.itemid]] = None,
        itemprop: Optional[Union[str, GlobalAttrs.itemprop]] = None,
        itemref: Optional[Union[str, GlobalAttrs.itemref]] = None,
        itemscope: Optional[Union[str, GlobalAttrs.itemscope, bool]] = None,
        itemtype: Optional[Union[str, GlobalAttrs.itemtype]] = None,
        lang: Optional[Union[str, GlobalAttrs.lang]] = None,
        nonce: Optional[Union[str, GlobalAttrs.nonce]] = None,
        popover: Optional[Union[str, GlobalAttrs.popover, Literal['auto', 'manual']]] = None,
        slot: Optional[Union[str, GlobalAttrs.slot]] = None,
        spellcheck: Optional[Union[str, GlobalAttrs.spellcheck, Literal['true', 'false', '']]] = None,
        style: Optional[Union[str, GlobalAttrs.style]] = None,
        tabindex: Optional[Union[str, GlobalAttrs.tabindex, int]] = None,
        title: Optional[Union[str, GlobalAttrs.title]] = None,
        translate: Optional[Union[str, GlobalAttrs.translate, Literal['yes', 'no']]] = None,
        writingsuggestions: Optional[Union[str, GlobalAttrs.writingsuggestions, Literal['true', 'false', '']]] = None,
        children: Optional[list] = None
    ) -> None:
        """
        Initialize 'td' (Table cell) element.  
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/td

        :param attrs: A list or dictionary of attributes for the element
        :param id: The element's ID
        :param class_: Classes to which the element belongs
            | Set of space-separated tokens
        :param colspan: Number of columns that the cell is to span
            | Valid non-negative integer greater than zero
        :param headers: The header cells for this cell
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param rowspan: Number of rows that the cell is to span
        :param accesskey: Keyboard shortcut to activate or focus element
            | Ordered set of unique space-separated tokens, none of which are identical to another, each consisting of one code point in length
        :param autocapitalize: Recommended autocapitalization behavior (for supported input methods)
        :param autocorrect: Recommended autocorrection behavior (for supported input methods)
        :param autofocus: Automatically focus the element when the page is loaded
        :param contenteditable: Whether the element is editable
        :param dir: The text directionality of the element
        :param draggable: Whether the element is draggable
        :param enterkeyhint: Hint for selecting an enter key action
        :param hidden: Whether the element is relevant
        :param inert: Whether the element is inert.
        :param inputmode: Hint for selecting an input modality
        :param is_: Creates a customized built-in element
            | Valid custom element name of a defined customized built-in element
        :param itemid: Global identifier for a microdata item
            | Valid URL potentially surrounded by spaces
        :param itemprop: Property names of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs, defined property names, or text*
        :param itemref: Referenced elements
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param itemscope: Introduces a microdata item
        :param itemtype: Item types of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs*
        :param lang: Language of the element
            | Valid BCP 47 language tag or the empty string
        :param nonce: Cryptographic nonce used in Content Security Policy checks [CSP]
        :param popover: Makes the element a popover element
        :param slot: The element's desired slot
        :param spellcheck: Whether the element is to have its spelling and grammar checked
        :param style: Presentational and formatting instructions
            | CSS declarations*
        :param tabindex: Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation
        :param title: Advisory information for the element
        :param translate: Whether the element is to be translated when the page is localized
        :param writingsuggestions: Whether the element can offer writing suggestions or not.
        """ #fmt: skip
        super().__init__(
            "td",
            void_element=False,
            attrs=attrs,
            children=children
        )
        if not (id is None or id is False):
            self._process_attr("id", id)
        if not (class_ is None or class_ is False):
            self._process_attr("class", class_)
        if not (colspan is None or colspan is False):
            self._process_attr("colspan", colspan)
        if not (headers is None or headers is False):
            self._process_attr("headers", headers)
        if not (rowspan is None or rowspan is False):
            self._process_attr("rowspan", rowspan)
        if not (accesskey is None or accesskey is False):
            self._process_attr("accesskey", accesskey)
        if not (autocapitalize is None or autocapitalize is False):
            self._process_attr("autocapitalize", autocapitalize)
        if not (autocorrect is None or autocorrect is False):
            self._process_attr("autocorrect", autocorrect)
        if not (autofocus is None or autofocus is False):
            self._process_attr("autofocus", autofocus)
        if not (contenteditable is None or contenteditable is False):
            self._process_attr("contenteditable", contenteditable)
        if not (dir is None or dir is False):
            self._process_attr("dir", dir)
        if not (draggable is None or draggable is False):
            self._process_attr("draggable", draggable)
        if not (enterkeyhint is None or enterkeyhint is False):
            self._process_attr("enterkeyhint", enterkeyhint)
        if not (hidden is None or hidden is False):
            self._process_attr("hidden", hidden)
        if not (inert is None or inert is False):
            self._process_attr("inert", inert)
        if not (inputmode is None or inputmode is False):
            self._process_attr("inputmode", inputmode)
        if not (is_ is None or is_ is False):
            self._process_attr("is", is_)
        if not (itemid is None or itemid is False):
            self._process_attr("itemid", itemid)
        if not (itemprop is None or itemprop is False):
            self._process_attr("itemprop", itemprop)
        if not (itemref is None or itemref is False):
            self._process_attr("itemref", itemref)
        if not (itemscope is None or itemscope is False):
            self._process_attr("itemscope", itemscope)
        if not (itemtype is None or itemtype is False):
            self._process_attr("itemtype", itemtype)
        if not (lang is None or lang is False):
            self._process_attr("lang", lang)
        if not (nonce is None or nonce is False):
            self._process_attr("nonce", nonce)
        if not (popover is None or popover is False):
            self._process_attr("popover", popover)
        if not (slot is None or slot is False):
            self._process_attr("slot", slot)
        if not (spellcheck is None or spellcheck is False):
            self._process_attr("spellcheck", spellcheck)
        if not (style is None or style is False):
            self._process_attr("style", style)
        if not (tabindex is None or tabindex is False):
            self._process_attr("tabindex", tabindex)
        if not (title is None or title is False):
            self._process_attr("title", title)
        if not (translate is None or translate is False):
            self._process_attr("translate", translate)
        if not (writingsuggestions is None or writingsuggestions is False):
            self._process_attr("writingsuggestions", writingsuggestions)


class template(BaseElement, GlobalAttrs, TemplateAttrs):
    """
    The 'template' element.  
    Description: Template  
    Categories: metadata flow phrasing script-supporting  
    Parents: metadata phrasing script-supporting colgroup*  
    Children: empty  
    Interface: HTMLTemplateElement  
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/template  
    """ # fmt: skip


    def __init__(
        self,
        attrs: Optional[Union[dict[str, Union[str, dict, list]], list[BaseAttribute]]] = None,
        id: Optional[Union[str, GlobalAttrs.id]] = None,
        class_: Optional[Union[str, GlobalAttrs.class_]] = None,
        shadowrootclonable: Optional[Union[str, TemplateAttrs.shadowrootclonable, bool]] = None,
        shadowrootdelegatesfocus: Optional[Union[str, TemplateAttrs.shadowrootdelegatesfocus, bool]] = None,
        shadowrootmode: Optional[Union[str, TemplateAttrs.shadowrootmode, Literal['open', 'closed']]] = None,
        shadowrootserializable: Optional[Union[str, TemplateAttrs.shadowrootserializable, bool]] = None,
        accesskey: Optional[Union[str, GlobalAttrs.accesskey]] = None,
        autocapitalize: Optional[Union[str, GlobalAttrs.autocapitalize, Literal['on', 'off', 'none', 'sentences', 'words', 'characters']]] = None,
        autocorrect: Optional[Union[str, GlobalAttrs.autocorrect, Literal['on', 'off']]] = None,
        autofocus: Optional[Union[str, GlobalAttrs.autofocus, bool]] = None,
        contenteditable: Optional[Union[str, GlobalAttrs.contenteditable, Literal['true', 'plaintext-only', 'false']]] = None,
        dir: Optional[Union[str, GlobalAttrs.dir, Literal['ltr', 'rtl', 'auto']]] = None,
        draggable: Optional[Union[str, GlobalAttrs.draggable, Literal['true', 'false']]] = None,
        enterkeyhint: Optional[Union[str, GlobalAttrs.enterkeyhint, Literal['enter', 'done', 'go', 'next', 'previous', 'search', 'send']]] = None,
        hidden: Optional[Union[str, GlobalAttrs.hidden, Literal['until-found', 'hidden', '']]] = None,
        inert: Optional[Union[str, GlobalAttrs.inert, bool]] = None,
        inputmode: Optional[Union[str, GlobalAttrs.inputmode, Literal['none', 'text', 'tel', 'email', 'url', 'numeric', 'decimal', 'search']]] = None,
        is_: Optional[Union[str, GlobalAttrs.is_]] = None,
        itemid: Optional[Union[str, GlobalAttrs.itemid]] = None,
        itemprop: Optional[Union[str, GlobalAttrs.itemprop]] = None,
        itemref: Optional[Union[str, GlobalAttrs.itemref]] = None,
        itemscope: Optional[Union[str, GlobalAttrs.itemscope, bool]] = None,
        itemtype: Optional[Union[str, GlobalAttrs.itemtype]] = None,
        lang: Optional[Union[str, GlobalAttrs.lang]] = None,
        nonce: Optional[Union[str, GlobalAttrs.nonce]] = None,
        popover: Optional[Union[str, GlobalAttrs.popover, Literal['auto', 'manual']]] = None,
        slot: Optional[Union[str, GlobalAttrs.slot]] = None,
        spellcheck: Optional[Union[str, GlobalAttrs.spellcheck, Literal['true', 'false', '']]] = None,
        style: Optional[Union[str, GlobalAttrs.style]] = None,
        tabindex: Optional[Union[str, GlobalAttrs.tabindex, int]] = None,
        title: Optional[Union[str, GlobalAttrs.title]] = None,
        translate: Optional[Union[str, GlobalAttrs.translate, Literal['yes', 'no']]] = None,
        writingsuggestions: Optional[Union[str, GlobalAttrs.writingsuggestions, Literal['true', 'false', '']]] = None,
        children: Optional[list] = None
    ) -> None:
        """
        Initialize 'template' (Template) element.  
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/template

        :param attrs: A list or dictionary of attributes for the element
        :param id: The element's ID
        :param class_: Classes to which the element belongs
            | Set of space-separated tokens
        :param shadowrootclonable: Sets clonable on a declarative shadow root
        :param shadowrootdelegatesfocus: Sets delegates focus on a declarative shadow root
        :param shadowrootmode: Enables streaming declarative shadow roots
        :param shadowrootserializable: Sets serializable on a declarative shadow root
        :param accesskey: Keyboard shortcut to activate or focus element
            | Ordered set of unique space-separated tokens, none of which are identical to another, each consisting of one code point in length
        :param autocapitalize: Recommended autocapitalization behavior (for supported input methods)
        :param autocorrect: Recommended autocorrection behavior (for supported input methods)
        :param autofocus: Automatically focus the element when the page is loaded
        :param contenteditable: Whether the element is editable
        :param dir: The text directionality of the element
        :param draggable: Whether the element is draggable
        :param enterkeyhint: Hint for selecting an enter key action
        :param hidden: Whether the element is relevant
        :param inert: Whether the element is inert.
        :param inputmode: Hint for selecting an input modality
        :param is_: Creates a customized built-in element
            | Valid custom element name of a defined customized built-in element
        :param itemid: Global identifier for a microdata item
            | Valid URL potentially surrounded by spaces
        :param itemprop: Property names of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs, defined property names, or text*
        :param itemref: Referenced elements
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param itemscope: Introduces a microdata item
        :param itemtype: Item types of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs*
        :param lang: Language of the element
            | Valid BCP 47 language tag or the empty string
        :param nonce: Cryptographic nonce used in Content Security Policy checks [CSP]
        :param popover: Makes the element a popover element
        :param slot: The element's desired slot
        :param spellcheck: Whether the element is to have its spelling and grammar checked
        :param style: Presentational and formatting instructions
            | CSS declarations*
        :param tabindex: Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation
        :param title: Advisory information for the element
        :param translate: Whether the element is to be translated when the page is localized
        :param writingsuggestions: Whether the element can offer writing suggestions or not.
        """ #fmt: skip
        super().__init__(
            "template",
            void_element=True,
            attrs=attrs,
            children=children
        )
        if not (id is None or id is False):
            self._process_attr("id", id)
        if not (class_ is None or class_ is False):
            self._process_attr("class", class_)
        if not (shadowrootclonable is None or shadowrootclonable is False):
            self._process_attr("shadowrootclonable", shadowrootclonable)
        if not (shadowrootdelegatesfocus is None or shadowrootdelegatesfocus is False):
            self._process_attr("shadowrootdelegatesfocus", shadowrootdelegatesfocus)
        if not (shadowrootmode is None or shadowrootmode is False):
            self._process_attr("shadowrootmode", shadowrootmode)
        if not (shadowrootserializable is None or shadowrootserializable is False):
            self._process_attr("shadowrootserializable", shadowrootserializable)
        if not (accesskey is None or accesskey is False):
            self._process_attr("accesskey", accesskey)
        if not (autocapitalize is None or autocapitalize is False):
            self._process_attr("autocapitalize", autocapitalize)
        if not (autocorrect is None or autocorrect is False):
            self._process_attr("autocorrect", autocorrect)
        if not (autofocus is None or autofocus is False):
            self._process_attr("autofocus", autofocus)
        if not (contenteditable is None or contenteditable is False):
            self._process_attr("contenteditable", contenteditable)
        if not (dir is None or dir is False):
            self._process_attr("dir", dir)
        if not (draggable is None or draggable is False):
            self._process_attr("draggable", draggable)
        if not (enterkeyhint is None or enterkeyhint is False):
            self._process_attr("enterkeyhint", enterkeyhint)
        if not (hidden is None or hidden is False):
            self._process_attr("hidden", hidden)
        if not (inert is None or inert is False):
            self._process_attr("inert", inert)
        if not (inputmode is None or inputmode is False):
            self._process_attr("inputmode", inputmode)
        if not (is_ is None or is_ is False):
            self._process_attr("is", is_)
        if not (itemid is None or itemid is False):
            self._process_attr("itemid", itemid)
        if not (itemprop is None or itemprop is False):
            self._process_attr("itemprop", itemprop)
        if not (itemref is None or itemref is False):
            self._process_attr("itemref", itemref)
        if not (itemscope is None or itemscope is False):
            self._process_attr("itemscope", itemscope)
        if not (itemtype is None or itemtype is False):
            self._process_attr("itemtype", itemtype)
        if not (lang is None or lang is False):
            self._process_attr("lang", lang)
        if not (nonce is None or nonce is False):
            self._process_attr("nonce", nonce)
        if not (popover is None or popover is False):
            self._process_attr("popover", popover)
        if not (slot is None or slot is False):
            self._process_attr("slot", slot)
        if not (spellcheck is None or spellcheck is False):
            self._process_attr("spellcheck", spellcheck)
        if not (style is None or style is False):
            self._process_attr("style", style)
        if not (tabindex is None or tabindex is False):
            self._process_attr("tabindex", tabindex)
        if not (title is None or title is False):
            self._process_attr("title", title)
        if not (translate is None or translate is False):
            self._process_attr("translate", translate)
        if not (writingsuggestions is None or writingsuggestions is False):
            self._process_attr("writingsuggestions", writingsuggestions)


class textarea(BaseElement, GlobalAttrs, TextareaAttrs):
    """
    The 'textarea' element.  
    Description: Multiline text controls  
    Categories: flow phrasing interactive listed labelable submittable resettable form-associated palpable  
    Parents: phrasing  
    Children: text  
    Interface: HTMLTextAreaElement  
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea  
    """ # fmt: skip


    def __init__(
        self,
        attrs: Optional[Union[dict[str, Union[str, dict, list]], list[BaseAttribute]]] = None,
        id: Optional[Union[str, GlobalAttrs.id]] = None,
        class_: Optional[Union[str, GlobalAttrs.class_]] = None,
        autocomplete: Optional[Union[str, TextareaAttrs.autocomplete]] = None,
        cols: Optional[Union[str, TextareaAttrs.cols]] = None,
        dirname: Optional[Union[str, TextareaAttrs.dirname]] = None,
        disabled: Optional[Union[str, TextareaAttrs.disabled, bool]] = None,
        form: Optional[Union[str, TextareaAttrs.form]] = None,
        maxlength: Optional[Union[str, TextareaAttrs.maxlength, int]] = None,
        minlength: Optional[Union[str, TextareaAttrs.minlength, int]] = None,
        name: Optional[Union[str, TextareaAttrs.name]] = None,
        placeholder: Optional[Union[str, TextareaAttrs.placeholder]] = None,
        readonly: Optional[Union[str, TextareaAttrs.readonly, bool]] = None,
        required: Optional[Union[str, TextareaAttrs.required, bool]] = None,
        rows: Optional[Union[str, TextareaAttrs.rows]] = None,
        wrap: Optional[Union[str, TextareaAttrs.wrap, Literal['soft', 'hard']]] = None,
        accesskey: Optional[Union[str, GlobalAttrs.accesskey]] = None,
        autocapitalize: Optional[Union[str, GlobalAttrs.autocapitalize, Literal['on', 'off', 'none', 'sentences', 'words', 'characters']]] = None,
        autocorrect: Optional[Union[str, GlobalAttrs.autocorrect, Literal['on', 'off']]] = None,
        autofocus: Optional[Union[str, GlobalAttrs.autofocus, bool]] = None,
        contenteditable: Optional[Union[str, GlobalAttrs.contenteditable, Literal['true', 'plaintext-only', 'false']]] = None,
        dir: Optional[Union[str, GlobalAttrs.dir, Literal['ltr', 'rtl', 'auto']]] = None,
        draggable: Optional[Union[str, GlobalAttrs.draggable, Literal['true', 'false']]] = None,
        enterkeyhint: Optional[Union[str, GlobalAttrs.enterkeyhint, Literal['enter', 'done', 'go', 'next', 'previous', 'search', 'send']]] = None,
        hidden: Optional[Union[str, GlobalAttrs.hidden, Literal['until-found', 'hidden', '']]] = None,
        inert: Optional[Union[str, GlobalAttrs.inert, bool]] = None,
        inputmode: Optional[Union[str, GlobalAttrs.inputmode, Literal['none', 'text', 'tel', 'email', 'url', 'numeric', 'decimal', 'search']]] = None,
        is_: Optional[Union[str, GlobalAttrs.is_]] = None,
        itemid: Optional[Union[str, GlobalAttrs.itemid]] = None,
        itemprop: Optional[Union[str, GlobalAttrs.itemprop]] = None,
        itemref: Optional[Union[str, GlobalAttrs.itemref]] = None,
        itemscope: Optional[Union[str, GlobalAttrs.itemscope, bool]] = None,
        itemtype: Optional[Union[str, GlobalAttrs.itemtype]] = None,
        lang: Optional[Union[str, GlobalAttrs.lang]] = None,
        nonce: Optional[Union[str, GlobalAttrs.nonce]] = None,
        popover: Optional[Union[str, GlobalAttrs.popover, Literal['auto', 'manual']]] = None,
        slot: Optional[Union[str, GlobalAttrs.slot]] = None,
        spellcheck: Optional[Union[str, GlobalAttrs.spellcheck, Literal['true', 'false', '']]] = None,
        style: Optional[Union[str, GlobalAttrs.style]] = None,
        tabindex: Optional[Union[str, GlobalAttrs.tabindex, int]] = None,
        title: Optional[Union[str, GlobalAttrs.title]] = None,
        translate: Optional[Union[str, GlobalAttrs.translate, Literal['yes', 'no']]] = None,
        writingsuggestions: Optional[Union[str, GlobalAttrs.writingsuggestions, Literal['true', 'false', '']]] = None,
        children: Optional[list] = None
    ) -> None:
        """
        Initialize 'textarea' (Multiline text controls) element.  
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea

        :param attrs: A list or dictionary of attributes for the element
        :param id: The element's ID
        :param class_: Classes to which the element belongs
            | Set of space-separated tokens
        :param autocomplete: Hint for form autofill feature
            | Autofill field name and related tokens*
        :param cols: Maximum number of characters per line
            | Valid non-negative integer greater than zero
        :param dirname: Name of form control to use for sending the element's directionality in form submission
        :param disabled: Whether the form control is disabled
        :param form: Associates the element with a form element
            | ID*
        :param maxlength: Maximum length of value
        :param minlength: Minimum length of value
        :param name: Name of the element to use for form submission and in the form.elements API
        :param placeholder: User-visible label to be placed within the form control
        :param readonly: Whether to allow the value to be edited by the user
        :param required: Whether the control is required for form submission
        :param rows: Number of lines to show
            | Valid non-negative integer greater than zero
        :param wrap: How the value of the form control is to be wrapped for form submission
        :param accesskey: Keyboard shortcut to activate or focus element
            | Ordered set of unique space-separated tokens, none of which are identical to another, each consisting of one code point in length
        :param autocapitalize: Recommended autocapitalization behavior (for supported input methods)
        :param autocorrect: Recommended autocorrection behavior (for supported input methods)
        :param autofocus: Automatically focus the element when the page is loaded
        :param contenteditable: Whether the element is editable
        :param dir: The text directionality of the element
        :param draggable: Whether the element is draggable
        :param enterkeyhint: Hint for selecting an enter key action
        :param hidden: Whether the element is relevant
        :param inert: Whether the element is inert.
        :param inputmode: Hint for selecting an input modality
        :param is_: Creates a customized built-in element
            | Valid custom element name of a defined customized built-in element
        :param itemid: Global identifier for a microdata item
            | Valid URL potentially surrounded by spaces
        :param itemprop: Property names of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs, defined property names, or text*
        :param itemref: Referenced elements
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param itemscope: Introduces a microdata item
        :param itemtype: Item types of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs*
        :param lang: Language of the element
            | Valid BCP 47 language tag or the empty string
        :param nonce: Cryptographic nonce used in Content Security Policy checks [CSP]
        :param popover: Makes the element a popover element
        :param slot: The element's desired slot
        :param spellcheck: Whether the element is to have its spelling and grammar checked
        :param style: Presentational and formatting instructions
            | CSS declarations*
        :param tabindex: Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation
        :param title: Advisory information for the element
        :param translate: Whether the element is to be translated when the page is localized
        :param writingsuggestions: Whether the element can offer writing suggestions or not.
        """ #fmt: skip
        super().__init__(
            "textarea",
            void_element=False,
            attrs=attrs,
            children=children
        )
        if not (id is None or id is False):
            self._process_attr("id", id)
        if not (class_ is None or class_ is False):
            self._process_attr("class", class_)
        if not (autocomplete is None or autocomplete is False):
            self._process_attr("autocomplete", autocomplete)
        if not (cols is None or cols is False):
            self._process_attr("cols", cols)
        if not (dirname is None or dirname is False):
            self._process_attr("dirname", dirname)
        if not (disabled is None or disabled is False):
            self._process_attr("disabled", disabled)
        if not (form is None or form is False):
            self._process_attr("form", form)
        if not (maxlength is None or maxlength is False):
            self._process_attr("maxlength", maxlength)
        if not (minlength is None or minlength is False):
            self._process_attr("minlength", minlength)
        if not (name is None or name is False):
            self._process_attr("name", name)
        if not (placeholder is None or placeholder is False):
            self._process_attr("placeholder", placeholder)
        if not (readonly is None or readonly is False):
            self._process_attr("readonly", readonly)
        if not (required is None or required is False):
            self._process_attr("required", required)
        if not (rows is None or rows is False):
            self._process_attr("rows", rows)
        if not (wrap is None or wrap is False):
            self._process_attr("wrap", wrap)
        if not (accesskey is None or accesskey is False):
            self._process_attr("accesskey", accesskey)
        if not (autocapitalize is None or autocapitalize is False):
            self._process_attr("autocapitalize", autocapitalize)
        if not (autocorrect is None or autocorrect is False):
            self._process_attr("autocorrect", autocorrect)
        if not (autofocus is None or autofocus is False):
            self._process_attr("autofocus", autofocus)
        if not (contenteditable is None or contenteditable is False):
            self._process_attr("contenteditable", contenteditable)
        if not (dir is None or dir is False):
            self._process_attr("dir", dir)
        if not (draggable is None or draggable is False):
            self._process_attr("draggable", draggable)
        if not (enterkeyhint is None or enterkeyhint is False):
            self._process_attr("enterkeyhint", enterkeyhint)
        if not (hidden is None or hidden is False):
            self._process_attr("hidden", hidden)
        if not (inert is None or inert is False):
            self._process_attr("inert", inert)
        if not (inputmode is None or inputmode is False):
            self._process_attr("inputmode", inputmode)
        if not (is_ is None or is_ is False):
            self._process_attr("is", is_)
        if not (itemid is None or itemid is False):
            self._process_attr("itemid", itemid)
        if not (itemprop is None or itemprop is False):
            self._process_attr("itemprop", itemprop)
        if not (itemref is None or itemref is False):
            self._process_attr("itemref", itemref)
        if not (itemscope is None or itemscope is False):
            self._process_attr("itemscope", itemscope)
        if not (itemtype is None or itemtype is False):
            self._process_attr("itemtype", itemtype)
        if not (lang is None or lang is False):
            self._process_attr("lang", lang)
        if not (nonce is None or nonce is False):
            self._process_attr("nonce", nonce)
        if not (popover is None or popover is False):
            self._process_attr("popover", popover)
        if not (slot is None or slot is False):
            self._process_attr("slot", slot)
        if not (spellcheck is None or spellcheck is False):
            self._process_attr("spellcheck", spellcheck)
        if not (style is None or style is False):
            self._process_attr("style", style)
        if not (tabindex is None or tabindex is False):
            self._process_attr("tabindex", tabindex)
        if not (title is None or title is False):
            self._process_attr("title", title)
        if not (translate is None or translate is False):
            self._process_attr("translate", translate)
        if not (writingsuggestions is None or writingsuggestions is False):
            self._process_attr("writingsuggestions", writingsuggestions)


class tfoot(BaseElement, GlobalAttrs):
    """
    The 'tfoot' element.  
    Description: Group of footer rows in a table  
    Categories: none  
    Parents: table  
    Children: tr script-supporting elements  
    Interface: HTMLTableSectionElement  
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tfoot  
    """ # fmt: skip


    def __init__(
        self,
        attrs: Optional[Union[dict[str, Union[str, dict, list]], list[BaseAttribute]]] = None,
        id: Optional[Union[str, GlobalAttrs.id]] = None,
        class_: Optional[Union[str, GlobalAttrs.class_]] = None,
        accesskey: Optional[Union[str, GlobalAttrs.accesskey]] = None,
        autocapitalize: Optional[Union[str, GlobalAttrs.autocapitalize, Literal['on', 'off', 'none', 'sentences', 'words', 'characters']]] = None,
        autocorrect: Optional[Union[str, GlobalAttrs.autocorrect, Literal['on', 'off']]] = None,
        autofocus: Optional[Union[str, GlobalAttrs.autofocus, bool]] = None,
        contenteditable: Optional[Union[str, GlobalAttrs.contenteditable, Literal['true', 'plaintext-only', 'false']]] = None,
        dir: Optional[Union[str, GlobalAttrs.dir, Literal['ltr', 'rtl', 'auto']]] = None,
        draggable: Optional[Union[str, GlobalAttrs.draggable, Literal['true', 'false']]] = None,
        enterkeyhint: Optional[Union[str, GlobalAttrs.enterkeyhint, Literal['enter', 'done', 'go', 'next', 'previous', 'search', 'send']]] = None,
        hidden: Optional[Union[str, GlobalAttrs.hidden, Literal['until-found', 'hidden', '']]] = None,
        inert: Optional[Union[str, GlobalAttrs.inert, bool]] = None,
        inputmode: Optional[Union[str, GlobalAttrs.inputmode, Literal['none', 'text', 'tel', 'email', 'url', 'numeric', 'decimal', 'search']]] = None,
        is_: Optional[Union[str, GlobalAttrs.is_]] = None,
        itemid: Optional[Union[str, GlobalAttrs.itemid]] = None,
        itemprop: Optional[Union[str, GlobalAttrs.itemprop]] = None,
        itemref: Optional[Union[str, GlobalAttrs.itemref]] = None,
        itemscope: Optional[Union[str, GlobalAttrs.itemscope, bool]] = None,
        itemtype: Optional[Union[str, GlobalAttrs.itemtype]] = None,
        lang: Optional[Union[str, GlobalAttrs.lang]] = None,
        nonce: Optional[Union[str, GlobalAttrs.nonce]] = None,
        popover: Optional[Union[str, GlobalAttrs.popover, Literal['auto', 'manual']]] = None,
        slot: Optional[Union[str, GlobalAttrs.slot]] = None,
        spellcheck: Optional[Union[str, GlobalAttrs.spellcheck, Literal['true', 'false', '']]] = None,
        style: Optional[Union[str, GlobalAttrs.style]] = None,
        tabindex: Optional[Union[str, GlobalAttrs.tabindex, int]] = None,
        title: Optional[Union[str, GlobalAttrs.title]] = None,
        translate: Optional[Union[str, GlobalAttrs.translate, Literal['yes', 'no']]] = None,
        writingsuggestions: Optional[Union[str, GlobalAttrs.writingsuggestions, Literal['true', 'false', '']]] = None,
        children: Optional[list] = None
    ) -> None:
        """
        Initialize 'tfoot' (Group of footer rows in a table) element.  
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tfoot

        :param attrs: A list or dictionary of attributes for the element
        :param id: The element's ID
        :param class_: Classes to which the element belongs
            | Set of space-separated tokens
        :param accesskey: Keyboard shortcut to activate or focus element
            | Ordered set of unique space-separated tokens, none of which are identical to another, each consisting of one code point in length
        :param autocapitalize: Recommended autocapitalization behavior (for supported input methods)
        :param autocorrect: Recommended autocorrection behavior (for supported input methods)
        :param autofocus: Automatically focus the element when the page is loaded
        :param contenteditable: Whether the element is editable
        :param dir: The text directionality of the element
        :param draggable: Whether the element is draggable
        :param enterkeyhint: Hint for selecting an enter key action
        :param hidden: Whether the element is relevant
        :param inert: Whether the element is inert.
        :param inputmode: Hint for selecting an input modality
        :param is_: Creates a customized built-in element
            | Valid custom element name of a defined customized built-in element
        :param itemid: Global identifier for a microdata item
            | Valid URL potentially surrounded by spaces
        :param itemprop: Property names of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs, defined property names, or text*
        :param itemref: Referenced elements
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param itemscope: Introduces a microdata item
        :param itemtype: Item types of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs*
        :param lang: Language of the element
            | Valid BCP 47 language tag or the empty string
        :param nonce: Cryptographic nonce used in Content Security Policy checks [CSP]
        :param popover: Makes the element a popover element
        :param slot: The element's desired slot
        :param spellcheck: Whether the element is to have its spelling and grammar checked
        :param style: Presentational and formatting instructions
            | CSS declarations*
        :param tabindex: Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation
        :param title: Advisory information for the element
        :param translate: Whether the element is to be translated when the page is localized
        :param writingsuggestions: Whether the element can offer writing suggestions or not.
        """ #fmt: skip
        super().__init__(
            "tfoot",
            void_element=False,
            attrs=attrs,
            children=children
        )
        if not (id is None or id is False):
            self._process_attr("id", id)
        if not (class_ is None or class_ is False):
            self._process_attr("class", class_)
        if not (accesskey is None or accesskey is False):
            self._process_attr("accesskey", accesskey)
        if not (autocapitalize is None or autocapitalize is False):
            self._process_attr("autocapitalize", autocapitalize)
        if not (autocorrect is None or autocorrect is False):
            self._process_attr("autocorrect", autocorrect)
        if not (autofocus is None or autofocus is False):
            self._process_attr("autofocus", autofocus)
        if not (contenteditable is None or contenteditable is False):
            self._process_attr("contenteditable", contenteditable)
        if not (dir is None or dir is False):
            self._process_attr("dir", dir)
        if not (draggable is None or draggable is False):
            self._process_attr("draggable", draggable)
        if not (enterkeyhint is None or enterkeyhint is False):
            self._process_attr("enterkeyhint", enterkeyhint)
        if not (hidden is None or hidden is False):
            self._process_attr("hidden", hidden)
        if not (inert is None or inert is False):
            self._process_attr("inert", inert)
        if not (inputmode is None or inputmode is False):
            self._process_attr("inputmode", inputmode)
        if not (is_ is None or is_ is False):
            self._process_attr("is", is_)
        if not (itemid is None or itemid is False):
            self._process_attr("itemid", itemid)
        if not (itemprop is None or itemprop is False):
            self._process_attr("itemprop", itemprop)
        if not (itemref is None or itemref is False):
            self._process_attr("itemref", itemref)
        if not (itemscope is None or itemscope is False):
            self._process_attr("itemscope", itemscope)
        if not (itemtype is None or itemtype is False):
            self._process_attr("itemtype", itemtype)
        if not (lang is None or lang is False):
            self._process_attr("lang", lang)
        if not (nonce is None or nonce is False):
            self._process_attr("nonce", nonce)
        if not (popover is None or popover is False):
            self._process_attr("popover", popover)
        if not (slot is None or slot is False):
            self._process_attr("slot", slot)
        if not (spellcheck is None or spellcheck is False):
            self._process_attr("spellcheck", spellcheck)
        if not (style is None or style is False):
            self._process_attr("style", style)
        if not (tabindex is None or tabindex is False):
            self._process_attr("tabindex", tabindex)
        if not (title is None or title is False):
            self._process_attr("title", title)
        if not (translate is None or translate is False):
            self._process_attr("translate", translate)
        if not (writingsuggestions is None or writingsuggestions is False):
            self._process_attr("writingsuggestions", writingsuggestions)


class th(BaseElement, GlobalAttrs, ThAttrs):
    """
    The 'th' element.  
    Description: Table header cell  
    Categories: interactive*  
    Parents: tr  
    Children: flow*  
    Interface: HTMLTableCellElement  
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/th  
    """ # fmt: skip


    def __init__(
        self,
        attrs: Optional[Union[dict[str, Union[str, dict, list]], list[BaseAttribute]]] = None,
        id: Optional[Union[str, GlobalAttrs.id]] = None,
        class_: Optional[Union[str, GlobalAttrs.class_]] = None,
        abbr: Optional[Union[str, ThAttrs.abbr]] = None,
        colspan: Optional[Union[str, ThAttrs.colspan]] = None,
        headers: Optional[Union[str, ThAttrs.headers]] = None,
        rowspan: Optional[Union[str, ThAttrs.rowspan, int]] = None,
        scope: Optional[Union[str, ThAttrs.scope, Literal['row', 'col', 'rowgroup', 'colgroup']]] = None,
        accesskey: Optional[Union[str, GlobalAttrs.accesskey]] = None,
        autocapitalize: Optional[Union[str, GlobalAttrs.autocapitalize, Literal['on', 'off', 'none', 'sentences', 'words', 'characters']]] = None,
        autocorrect: Optional[Union[str, GlobalAttrs.autocorrect, Literal['on', 'off']]] = None,
        autofocus: Optional[Union[str, GlobalAttrs.autofocus, bool]] = None,
        contenteditable: Optional[Union[str, GlobalAttrs.contenteditable, Literal['true', 'plaintext-only', 'false']]] = None,
        dir: Optional[Union[str, GlobalAttrs.dir, Literal['ltr', 'rtl', 'auto']]] = None,
        draggable: Optional[Union[str, GlobalAttrs.draggable, Literal['true', 'false']]] = None,
        enterkeyhint: Optional[Union[str, GlobalAttrs.enterkeyhint, Literal['enter', 'done', 'go', 'next', 'previous', 'search', 'send']]] = None,
        hidden: Optional[Union[str, GlobalAttrs.hidden, Literal['until-found', 'hidden', '']]] = None,
        inert: Optional[Union[str, GlobalAttrs.inert, bool]] = None,
        inputmode: Optional[Union[str, GlobalAttrs.inputmode, Literal['none', 'text', 'tel', 'email', 'url', 'numeric', 'decimal', 'search']]] = None,
        is_: Optional[Union[str, GlobalAttrs.is_]] = None,
        itemid: Optional[Union[str, GlobalAttrs.itemid]] = None,
        itemprop: Optional[Union[str, GlobalAttrs.itemprop]] = None,
        itemref: Optional[Union[str, GlobalAttrs.itemref]] = None,
        itemscope: Optional[Union[str, GlobalAttrs.itemscope, bool]] = None,
        itemtype: Optional[Union[str, GlobalAttrs.itemtype]] = None,
        lang: Optional[Union[str, GlobalAttrs.lang]] = None,
        nonce: Optional[Union[str, GlobalAttrs.nonce]] = None,
        popover: Optional[Union[str, GlobalAttrs.popover, Literal['auto', 'manual']]] = None,
        slot: Optional[Union[str, GlobalAttrs.slot]] = None,
        spellcheck: Optional[Union[str, GlobalAttrs.spellcheck, Literal['true', 'false', '']]] = None,
        style: Optional[Union[str, GlobalAttrs.style]] = None,
        tabindex: Optional[Union[str, GlobalAttrs.tabindex, int]] = None,
        title: Optional[Union[str, GlobalAttrs.title]] = None,
        translate: Optional[Union[str, GlobalAttrs.translate, Literal['yes', 'no']]] = None,
        writingsuggestions: Optional[Union[str, GlobalAttrs.writingsuggestions, Literal['true', 'false', '']]] = None,
        children: Optional[list] = None
    ) -> None:
        """
        Initialize 'th' (Table header cell) element.  
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/th

        :param attrs: A list or dictionary of attributes for the element
        :param id: The element's ID
        :param class_: Classes to which the element belongs
            | Set of space-separated tokens
        :param abbr: Alternative label to use for the header cell when referencing the cell in other contexts
        :param colspan: Number of columns that the cell is to span
            | Valid non-negative integer greater than zero
        :param headers: The header cells for this cell
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param rowspan: Number of rows that the cell is to span
        :param scope: Specifies which cells the header cell applies to
        :param accesskey: Keyboard shortcut to activate or focus element
            | Ordered set of unique space-separated tokens, none of which are identical to another, each consisting of one code point in length
        :param autocapitalize: Recommended autocapitalization behavior (for supported input methods)
        :param autocorrect: Recommended autocorrection behavior (for supported input methods)
        :param autofocus: Automatically focus the element when the page is loaded
        :param contenteditable: Whether the element is editable
        :param dir: The text directionality of the element
        :param draggable: Whether the element is draggable
        :param enterkeyhint: Hint for selecting an enter key action
        :param hidden: Whether the element is relevant
        :param inert: Whether the element is inert.
        :param inputmode: Hint for selecting an input modality
        :param is_: Creates a customized built-in element
            | Valid custom element name of a defined customized built-in element
        :param itemid: Global identifier for a microdata item
            | Valid URL potentially surrounded by spaces
        :param itemprop: Property names of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs, defined property names, or text*
        :param itemref: Referenced elements
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param itemscope: Introduces a microdata item
        :param itemtype: Item types of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs*
        :param lang: Language of the element
            | Valid BCP 47 language tag or the empty string
        :param nonce: Cryptographic nonce used in Content Security Policy checks [CSP]
        :param popover: Makes the element a popover element
        :param slot: The element's desired slot
        :param spellcheck: Whether the element is to have its spelling and grammar checked
        :param style: Presentational and formatting instructions
            | CSS declarations*
        :param tabindex: Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation
        :param title: Advisory information for the element
        :param translate: Whether the element is to be translated when the page is localized
        :param writingsuggestions: Whether the element can offer writing suggestions or not.
        """ #fmt: skip
        super().__init__(
            "th",
            void_element=False,
            attrs=attrs,
            children=children
        )
        if not (id is None or id is False):
            self._process_attr("id", id)
        if not (class_ is None or class_ is False):
            self._process_attr("class", class_)
        if not (abbr is None or abbr is False):
            self._process_attr("abbr", abbr)
        if not (colspan is None or colspan is False):
            self._process_attr("colspan", colspan)
        if not (headers is None or headers is False):
            self._process_attr("headers", headers)
        if not (rowspan is None or rowspan is False):
            self._process_attr("rowspan", rowspan)
        if not (scope is None or scope is False):
            self._process_attr("scope", scope)
        if not (accesskey is None or accesskey is False):
            self._process_attr("accesskey", accesskey)
        if not (autocapitalize is None or autocapitalize is False):
            self._process_attr("autocapitalize", autocapitalize)
        if not (autocorrect is None or autocorrect is False):
            self._process_attr("autocorrect", autocorrect)
        if not (autofocus is None or autofocus is False):
            self._process_attr("autofocus", autofocus)
        if not (contenteditable is None or contenteditable is False):
            self._process_attr("contenteditable", contenteditable)
        if not (dir is None or dir is False):
            self._process_attr("dir", dir)
        if not (draggable is None or draggable is False):
            self._process_attr("draggable", draggable)
        if not (enterkeyhint is None or enterkeyhint is False):
            self._process_attr("enterkeyhint", enterkeyhint)
        if not (hidden is None or hidden is False):
            self._process_attr("hidden", hidden)
        if not (inert is None or inert is False):
            self._process_attr("inert", inert)
        if not (inputmode is None or inputmode is False):
            self._process_attr("inputmode", inputmode)
        if not (is_ is None or is_ is False):
            self._process_attr("is", is_)
        if not (itemid is None or itemid is False):
            self._process_attr("itemid", itemid)
        if not (itemprop is None or itemprop is False):
            self._process_attr("itemprop", itemprop)
        if not (itemref is None or itemref is False):
            self._process_attr("itemref", itemref)
        if not (itemscope is None or itemscope is False):
            self._process_attr("itemscope", itemscope)
        if not (itemtype is None or itemtype is False):
            self._process_attr("itemtype", itemtype)
        if not (lang is None or lang is False):
            self._process_attr("lang", lang)
        if not (nonce is None or nonce is False):
            self._process_attr("nonce", nonce)
        if not (popover is None or popover is False):
            self._process_attr("popover", popover)
        if not (slot is None or slot is False):
            self._process_attr("slot", slot)
        if not (spellcheck is None or spellcheck is False):
            self._process_attr("spellcheck", spellcheck)
        if not (style is None or style is False):
            self._process_attr("style", style)
        if not (tabindex is None or tabindex is False):
            self._process_attr("tabindex", tabindex)
        if not (title is None or title is False):
            self._process_attr("title", title)
        if not (translate is None or translate is False):
            self._process_attr("translate", translate)
        if not (writingsuggestions is None or writingsuggestions is False):
            self._process_attr("writingsuggestions", writingsuggestions)


class thead(BaseElement, GlobalAttrs):
    """
    The 'thead' element.  
    Description: Group of heading rows in a table  
    Categories: none  
    Parents: table  
    Children: tr script-supporting elements  
    Interface: HTMLTableSectionElement  
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/thead  
    """ # fmt: skip


    def __init__(
        self,
        attrs: Optional[Union[dict[str, Union[str, dict, list]], list[BaseAttribute]]] = None,
        id: Optional[Union[str, GlobalAttrs.id]] = None,
        class_: Optional[Union[str, GlobalAttrs.class_]] = None,
        accesskey: Optional[Union[str, GlobalAttrs.accesskey]] = None,
        autocapitalize: Optional[Union[str, GlobalAttrs.autocapitalize, Literal['on', 'off', 'none', 'sentences', 'words', 'characters']]] = None,
        autocorrect: Optional[Union[str, GlobalAttrs.autocorrect, Literal['on', 'off']]] = None,
        autofocus: Optional[Union[str, GlobalAttrs.autofocus, bool]] = None,
        contenteditable: Optional[Union[str, GlobalAttrs.contenteditable, Literal['true', 'plaintext-only', 'false']]] = None,
        dir: Optional[Union[str, GlobalAttrs.dir, Literal['ltr', 'rtl', 'auto']]] = None,
        draggable: Optional[Union[str, GlobalAttrs.draggable, Literal['true', 'false']]] = None,
        enterkeyhint: Optional[Union[str, GlobalAttrs.enterkeyhint, Literal['enter', 'done', 'go', 'next', 'previous', 'search', 'send']]] = None,
        hidden: Optional[Union[str, GlobalAttrs.hidden, Literal['until-found', 'hidden', '']]] = None,
        inert: Optional[Union[str, GlobalAttrs.inert, bool]] = None,
        inputmode: Optional[Union[str, GlobalAttrs.inputmode, Literal['none', 'text', 'tel', 'email', 'url', 'numeric', 'decimal', 'search']]] = None,
        is_: Optional[Union[str, GlobalAttrs.is_]] = None,
        itemid: Optional[Union[str, GlobalAttrs.itemid]] = None,
        itemprop: Optional[Union[str, GlobalAttrs.itemprop]] = None,
        itemref: Optional[Union[str, GlobalAttrs.itemref]] = None,
        itemscope: Optional[Union[str, GlobalAttrs.itemscope, bool]] = None,
        itemtype: Optional[Union[str, GlobalAttrs.itemtype]] = None,
        lang: Optional[Union[str, GlobalAttrs.lang]] = None,
        nonce: Optional[Union[str, GlobalAttrs.nonce]] = None,
        popover: Optional[Union[str, GlobalAttrs.popover, Literal['auto', 'manual']]] = None,
        slot: Optional[Union[str, GlobalAttrs.slot]] = None,
        spellcheck: Optional[Union[str, GlobalAttrs.spellcheck, Literal['true', 'false', '']]] = None,
        style: Optional[Union[str, GlobalAttrs.style]] = None,
        tabindex: Optional[Union[str, GlobalAttrs.tabindex, int]] = None,
        title: Optional[Union[str, GlobalAttrs.title]] = None,
        translate: Optional[Union[str, GlobalAttrs.translate, Literal['yes', 'no']]] = None,
        writingsuggestions: Optional[Union[str, GlobalAttrs.writingsuggestions, Literal['true', 'false', '']]] = None,
        children: Optional[list] = None
    ) -> None:
        """
        Initialize 'thead' (Group of heading rows in a table) element.  
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/thead

        :param attrs: A list or dictionary of attributes for the element
        :param id: The element's ID
        :param class_: Classes to which the element belongs
            | Set of space-separated tokens
        :param accesskey: Keyboard shortcut to activate or focus element
            | Ordered set of unique space-separated tokens, none of which are identical to another, each consisting of one code point in length
        :param autocapitalize: Recommended autocapitalization behavior (for supported input methods)
        :param autocorrect: Recommended autocorrection behavior (for supported input methods)
        :param autofocus: Automatically focus the element when the page is loaded
        :param contenteditable: Whether the element is editable
        :param dir: The text directionality of the element
        :param draggable: Whether the element is draggable
        :param enterkeyhint: Hint for selecting an enter key action
        :param hidden: Whether the element is relevant
        :param inert: Whether the element is inert.
        :param inputmode: Hint for selecting an input modality
        :param is_: Creates a customized built-in element
            | Valid custom element name of a defined customized built-in element
        :param itemid: Global identifier for a microdata item
            | Valid URL potentially surrounded by spaces
        :param itemprop: Property names of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs, defined property names, or text*
        :param itemref: Referenced elements
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param itemscope: Introduces a microdata item
        :param itemtype: Item types of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs*
        :param lang: Language of the element
            | Valid BCP 47 language tag or the empty string
        :param nonce: Cryptographic nonce used in Content Security Policy checks [CSP]
        :param popover: Makes the element a popover element
        :param slot: The element's desired slot
        :param spellcheck: Whether the element is to have its spelling and grammar checked
        :param style: Presentational and formatting instructions
            | CSS declarations*
        :param tabindex: Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation
        :param title: Advisory information for the element
        :param translate: Whether the element is to be translated when the page is localized
        :param writingsuggestions: Whether the element can offer writing suggestions or not.
        """ #fmt: skip
        super().__init__(
            "thead",
            void_element=False,
            attrs=attrs,
            children=children
        )
        if not (id is None or id is False):
            self._process_attr("id", id)
        if not (class_ is None or class_ is False):
            self._process_attr("class", class_)
        if not (accesskey is None or accesskey is False):
            self._process_attr("accesskey", accesskey)
        if not (autocapitalize is None or autocapitalize is False):
            self._process_attr("autocapitalize", autocapitalize)
        if not (autocorrect is None or autocorrect is False):
            self._process_attr("autocorrect", autocorrect)
        if not (autofocus is None or autofocus is False):
            self._process_attr("autofocus", autofocus)
        if not (contenteditable is None or contenteditable is False):
            self._process_attr("contenteditable", contenteditable)
        if not (dir is None or dir is False):
            self._process_attr("dir", dir)
        if not (draggable is None or draggable is False):
            self._process_attr("draggable", draggable)
        if not (enterkeyhint is None or enterkeyhint is False):
            self._process_attr("enterkeyhint", enterkeyhint)
        if not (hidden is None or hidden is False):
            self._process_attr("hidden", hidden)
        if not (inert is None or inert is False):
            self._process_attr("inert", inert)
        if not (inputmode is None or inputmode is False):
            self._process_attr("inputmode", inputmode)
        if not (is_ is None or is_ is False):
            self._process_attr("is", is_)
        if not (itemid is None or itemid is False):
            self._process_attr("itemid", itemid)
        if not (itemprop is None or itemprop is False):
            self._process_attr("itemprop", itemprop)
        if not (itemref is None or itemref is False):
            self._process_attr("itemref", itemref)
        if not (itemscope is None or itemscope is False):
            self._process_attr("itemscope", itemscope)
        if not (itemtype is None or itemtype is False):
            self._process_attr("itemtype", itemtype)
        if not (lang is None or lang is False):
            self._process_attr("lang", lang)
        if not (nonce is None or nonce is False):
            self._process_attr("nonce", nonce)
        if not (popover is None or popover is False):
            self._process_attr("popover", popover)
        if not (slot is None or slot is False):
            self._process_attr("slot", slot)
        if not (spellcheck is None or spellcheck is False):
            self._process_attr("spellcheck", spellcheck)
        if not (style is None or style is False):
            self._process_attr("style", style)
        if not (tabindex is None or tabindex is False):
            self._process_attr("tabindex", tabindex)
        if not (title is None or title is False):
            self._process_attr("title", title)
        if not (translate is None or translate is False):
            self._process_attr("translate", translate)
        if not (writingsuggestions is None or writingsuggestions is False):
            self._process_attr("writingsuggestions", writingsuggestions)


class time(BaseElement, GlobalAttrs, TimeAttrs):
    """
    The 'time' element.  
    Description: Machine-readable equivalent of date- or time-related data  
    Categories: flow phrasing palpable  
    Parents: phrasing  
    Children: phrasing  
    Interface: HTMLTimeElement  
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/time  
    """ # fmt: skip


    def __init__(
        self,
        attrs: Optional[Union[dict[str, Union[str, dict, list]], list[BaseAttribute]]] = None,
        id: Optional[Union[str, GlobalAttrs.id]] = None,
        class_: Optional[Union[str, GlobalAttrs.class_]] = None,
        datetime: Optional[Union[str, TimeAttrs.datetime]] = None,
        accesskey: Optional[Union[str, GlobalAttrs.accesskey]] = None,
        autocapitalize: Optional[Union[str, GlobalAttrs.autocapitalize, Literal['on', 'off', 'none', 'sentences', 'words', 'characters']]] = None,
        autocorrect: Optional[Union[str, GlobalAttrs.autocorrect, Literal['on', 'off']]] = None,
        autofocus: Optional[Union[str, GlobalAttrs.autofocus, bool]] = None,
        contenteditable: Optional[Union[str, GlobalAttrs.contenteditable, Literal['true', 'plaintext-only', 'false']]] = None,
        dir: Optional[Union[str, GlobalAttrs.dir, Literal['ltr', 'rtl', 'auto']]] = None,
        draggable: Optional[Union[str, GlobalAttrs.draggable, Literal['true', 'false']]] = None,
        enterkeyhint: Optional[Union[str, GlobalAttrs.enterkeyhint, Literal['enter', 'done', 'go', 'next', 'previous', 'search', 'send']]] = None,
        hidden: Optional[Union[str, GlobalAttrs.hidden, Literal['until-found', 'hidden', '']]] = None,
        inert: Optional[Union[str, GlobalAttrs.inert, bool]] = None,
        inputmode: Optional[Union[str, GlobalAttrs.inputmode, Literal['none', 'text', 'tel', 'email', 'url', 'numeric', 'decimal', 'search']]] = None,
        is_: Optional[Union[str, GlobalAttrs.is_]] = None,
        itemid: Optional[Union[str, GlobalAttrs.itemid]] = None,
        itemprop: Optional[Union[str, GlobalAttrs.itemprop]] = None,
        itemref: Optional[Union[str, GlobalAttrs.itemref]] = None,
        itemscope: Optional[Union[str, GlobalAttrs.itemscope, bool]] = None,
        itemtype: Optional[Union[str, GlobalAttrs.itemtype]] = None,
        lang: Optional[Union[str, GlobalAttrs.lang]] = None,
        nonce: Optional[Union[str, GlobalAttrs.nonce]] = None,
        popover: Optional[Union[str, GlobalAttrs.popover, Literal['auto', 'manual']]] = None,
        slot: Optional[Union[str, GlobalAttrs.slot]] = None,
        spellcheck: Optional[Union[str, GlobalAttrs.spellcheck, Literal['true', 'false', '']]] = None,
        style: Optional[Union[str, GlobalAttrs.style]] = None,
        tabindex: Optional[Union[str, GlobalAttrs.tabindex, int]] = None,
        title: Optional[Union[str, GlobalAttrs.title]] = None,
        translate: Optional[Union[str, GlobalAttrs.translate, Literal['yes', 'no']]] = None,
        writingsuggestions: Optional[Union[str, GlobalAttrs.writingsuggestions, Literal['true', 'false', '']]] = None,
        children: Optional[list] = None
    ) -> None:
        """
        Initialize 'time' (Machine-readable equivalent of date- or time-related data) element.  
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/time

        :param attrs: A list or dictionary of attributes for the element
        :param id: The element's ID
        :param class_: Classes to which the element belongs
            | Set of space-separated tokens
        :param datetime: Machine-readable value
            | Valid month string, valid date string, valid yearless date string, valid time string, valid local date and time string, valid time-zone offset string, valid global date and time string, valid week string, valid non-negative integer, or valid duration string
        :param accesskey: Keyboard shortcut to activate or focus element
            | Ordered set of unique space-separated tokens, none of which are identical to another, each consisting of one code point in length
        :param autocapitalize: Recommended autocapitalization behavior (for supported input methods)
        :param autocorrect: Recommended autocorrection behavior (for supported input methods)
        :param autofocus: Automatically focus the element when the page is loaded
        :param contenteditable: Whether the element is editable
        :param dir: The text directionality of the element
        :param draggable: Whether the element is draggable
        :param enterkeyhint: Hint for selecting an enter key action
        :param hidden: Whether the element is relevant
        :param inert: Whether the element is inert.
        :param inputmode: Hint for selecting an input modality
        :param is_: Creates a customized built-in element
            | Valid custom element name of a defined customized built-in element
        :param itemid: Global identifier for a microdata item
            | Valid URL potentially surrounded by spaces
        :param itemprop: Property names of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs, defined property names, or text*
        :param itemref: Referenced elements
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param itemscope: Introduces a microdata item
        :param itemtype: Item types of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs*
        :param lang: Language of the element
            | Valid BCP 47 language tag or the empty string
        :param nonce: Cryptographic nonce used in Content Security Policy checks [CSP]
        :param popover: Makes the element a popover element
        :param slot: The element's desired slot
        :param spellcheck: Whether the element is to have its spelling and grammar checked
        :param style: Presentational and formatting instructions
            | CSS declarations*
        :param tabindex: Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation
        :param title: Advisory information for the element
        :param translate: Whether the element is to be translated when the page is localized
        :param writingsuggestions: Whether the element can offer writing suggestions or not.
        """ #fmt: skip
        super().__init__(
            "time",
            void_element=False,
            attrs=attrs,
            children=children
        )
        if not (id is None or id is False):
            self._process_attr("id", id)
        if not (class_ is None or class_ is False):
            self._process_attr("class", class_)
        if not (datetime is None or datetime is False):
            self._process_attr("datetime", datetime)
        if not (accesskey is None or accesskey is False):
            self._process_attr("accesskey", accesskey)
        if not (autocapitalize is None or autocapitalize is False):
            self._process_attr("autocapitalize", autocapitalize)
        if not (autocorrect is None or autocorrect is False):
            self._process_attr("autocorrect", autocorrect)
        if not (autofocus is None or autofocus is False):
            self._process_attr("autofocus", autofocus)
        if not (contenteditable is None or contenteditable is False):
            self._process_attr("contenteditable", contenteditable)
        if not (dir is None or dir is False):
            self._process_attr("dir", dir)
        if not (draggable is None or draggable is False):
            self._process_attr("draggable", draggable)
        if not (enterkeyhint is None or enterkeyhint is False):
            self._process_attr("enterkeyhint", enterkeyhint)
        if not (hidden is None or hidden is False):
            self._process_attr("hidden", hidden)
        if not (inert is None or inert is False):
            self._process_attr("inert", inert)
        if not (inputmode is None or inputmode is False):
            self._process_attr("inputmode", inputmode)
        if not (is_ is None or is_ is False):
            self._process_attr("is", is_)
        if not (itemid is None or itemid is False):
            self._process_attr("itemid", itemid)
        if not (itemprop is None or itemprop is False):
            self._process_attr("itemprop", itemprop)
        if not (itemref is None or itemref is False):
            self._process_attr("itemref", itemref)
        if not (itemscope is None or itemscope is False):
            self._process_attr("itemscope", itemscope)
        if not (itemtype is None or itemtype is False):
            self._process_attr("itemtype", itemtype)
        if not (lang is None or lang is False):
            self._process_attr("lang", lang)
        if not (nonce is None or nonce is False):
            self._process_attr("nonce", nonce)
        if not (popover is None or popover is False):
            self._process_attr("popover", popover)
        if not (slot is None or slot is False):
            self._process_attr("slot", slot)
        if not (spellcheck is None or spellcheck is False):
            self._process_attr("spellcheck", spellcheck)
        if not (style is None or style is False):
            self._process_attr("style", style)
        if not (tabindex is None or tabindex is False):
            self._process_attr("tabindex", tabindex)
        if not (title is None or title is False):
            self._process_attr("title", title)
        if not (translate is None or translate is False):
            self._process_attr("translate", translate)
        if not (writingsuggestions is None or writingsuggestions is False):
            self._process_attr("writingsuggestions", writingsuggestions)


class title(BaseElement, GlobalAttrs):
    """
    The 'title' element.  
    Description: Document title  
    Categories: metadata  
    Parents: head  
    Children: text*  
    Interface: HTMLTitleElement  
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/title  
    """ # fmt: skip


    def __init__(
        self,
        attrs: Optional[Union[dict[str, Union[str, dict, list]], list[BaseAttribute]]] = None,
        id: Optional[Union[str, GlobalAttrs.id]] = None,
        class_: Optional[Union[str, GlobalAttrs.class_]] = None,
        accesskey: Optional[Union[str, GlobalAttrs.accesskey]] = None,
        autocapitalize: Optional[Union[str, GlobalAttrs.autocapitalize, Literal['on', 'off', 'none', 'sentences', 'words', 'characters']]] = None,
        autocorrect: Optional[Union[str, GlobalAttrs.autocorrect, Literal['on', 'off']]] = None,
        autofocus: Optional[Union[str, GlobalAttrs.autofocus, bool]] = None,
        contenteditable: Optional[Union[str, GlobalAttrs.contenteditable, Literal['true', 'plaintext-only', 'false']]] = None,
        dir: Optional[Union[str, GlobalAttrs.dir, Literal['ltr', 'rtl', 'auto']]] = None,
        draggable: Optional[Union[str, GlobalAttrs.draggable, Literal['true', 'false']]] = None,
        enterkeyhint: Optional[Union[str, GlobalAttrs.enterkeyhint, Literal['enter', 'done', 'go', 'next', 'previous', 'search', 'send']]] = None,
        hidden: Optional[Union[str, GlobalAttrs.hidden, Literal['until-found', 'hidden', '']]] = None,
        inert: Optional[Union[str, GlobalAttrs.inert, bool]] = None,
        inputmode: Optional[Union[str, GlobalAttrs.inputmode, Literal['none', 'text', 'tel', 'email', 'url', 'numeric', 'decimal', 'search']]] = None,
        is_: Optional[Union[str, GlobalAttrs.is_]] = None,
        itemid: Optional[Union[str, GlobalAttrs.itemid]] = None,
        itemprop: Optional[Union[str, GlobalAttrs.itemprop]] = None,
        itemref: Optional[Union[str, GlobalAttrs.itemref]] = None,
        itemscope: Optional[Union[str, GlobalAttrs.itemscope, bool]] = None,
        itemtype: Optional[Union[str, GlobalAttrs.itemtype]] = None,
        lang: Optional[Union[str, GlobalAttrs.lang]] = None,
        nonce: Optional[Union[str, GlobalAttrs.nonce]] = None,
        popover: Optional[Union[str, GlobalAttrs.popover, Literal['auto', 'manual']]] = None,
        slot: Optional[Union[str, GlobalAttrs.slot]] = None,
        spellcheck: Optional[Union[str, GlobalAttrs.spellcheck, Literal['true', 'false', '']]] = None,
        style: Optional[Union[str, GlobalAttrs.style]] = None,
        tabindex: Optional[Union[str, GlobalAttrs.tabindex, int]] = None,
        title: Optional[Union[str, GlobalAttrs.title]] = None,
        translate: Optional[Union[str, GlobalAttrs.translate, Literal['yes', 'no']]] = None,
        writingsuggestions: Optional[Union[str, GlobalAttrs.writingsuggestions, Literal['true', 'false', '']]] = None,
        children: Optional[list] = None
    ) -> None:
        """
        Initialize 'title' (Document title) element.  
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/title

        :param attrs: A list or dictionary of attributes for the element
        :param id: The element's ID
        :param class_: Classes to which the element belongs
            | Set of space-separated tokens
        :param accesskey: Keyboard shortcut to activate or focus element
            | Ordered set of unique space-separated tokens, none of which are identical to another, each consisting of one code point in length
        :param autocapitalize: Recommended autocapitalization behavior (for supported input methods)
        :param autocorrect: Recommended autocorrection behavior (for supported input methods)
        :param autofocus: Automatically focus the element when the page is loaded
        :param contenteditable: Whether the element is editable
        :param dir: The text directionality of the element
        :param draggable: Whether the element is draggable
        :param enterkeyhint: Hint for selecting an enter key action
        :param hidden: Whether the element is relevant
        :param inert: Whether the element is inert.
        :param inputmode: Hint for selecting an input modality
        :param is_: Creates a customized built-in element
            | Valid custom element name of a defined customized built-in element
        :param itemid: Global identifier for a microdata item
            | Valid URL potentially surrounded by spaces
        :param itemprop: Property names of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs, defined property names, or text*
        :param itemref: Referenced elements
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param itemscope: Introduces a microdata item
        :param itemtype: Item types of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs*
        :param lang: Language of the element
            | Valid BCP 47 language tag or the empty string
        :param nonce: Cryptographic nonce used in Content Security Policy checks [CSP]
        :param popover: Makes the element a popover element
        :param slot: The element's desired slot
        :param spellcheck: Whether the element is to have its spelling and grammar checked
        :param style: Presentational and formatting instructions
            | CSS declarations*
        :param tabindex: Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation
        :param title: Advisory information for the element
        :param translate: Whether the element is to be translated when the page is localized
        :param writingsuggestions: Whether the element can offer writing suggestions or not.
        """ #fmt: skip
        super().__init__(
            "title",
            void_element=False,
            attrs=attrs,
            children=children
        )
        if not (id is None or id is False):
            self._process_attr("id", id)
        if not (class_ is None or class_ is False):
            self._process_attr("class", class_)
        if not (accesskey is None or accesskey is False):
            self._process_attr("accesskey", accesskey)
        if not (autocapitalize is None or autocapitalize is False):
            self._process_attr("autocapitalize", autocapitalize)
        if not (autocorrect is None or autocorrect is False):
            self._process_attr("autocorrect", autocorrect)
        if not (autofocus is None or autofocus is False):
            self._process_attr("autofocus", autofocus)
        if not (contenteditable is None or contenteditable is False):
            self._process_attr("contenteditable", contenteditable)
        if not (dir is None or dir is False):
            self._process_attr("dir", dir)
        if not (draggable is None or draggable is False):
            self._process_attr("draggable", draggable)
        if not (enterkeyhint is None or enterkeyhint is False):
            self._process_attr("enterkeyhint", enterkeyhint)
        if not (hidden is None or hidden is False):
            self._process_attr("hidden", hidden)
        if not (inert is None or inert is False):
            self._process_attr("inert", inert)
        if not (inputmode is None or inputmode is False):
            self._process_attr("inputmode", inputmode)
        if not (is_ is None or is_ is False):
            self._process_attr("is", is_)
        if not (itemid is None or itemid is False):
            self._process_attr("itemid", itemid)
        if not (itemprop is None or itemprop is False):
            self._process_attr("itemprop", itemprop)
        if not (itemref is None or itemref is False):
            self._process_attr("itemref", itemref)
        if not (itemscope is None or itemscope is False):
            self._process_attr("itemscope", itemscope)
        if not (itemtype is None or itemtype is False):
            self._process_attr("itemtype", itemtype)
        if not (lang is None or lang is False):
            self._process_attr("lang", lang)
        if not (nonce is None or nonce is False):
            self._process_attr("nonce", nonce)
        if not (popover is None or popover is False):
            self._process_attr("popover", popover)
        if not (slot is None or slot is False):
            self._process_attr("slot", slot)
        if not (spellcheck is None or spellcheck is False):
            self._process_attr("spellcheck", spellcheck)
        if not (style is None or style is False):
            self._process_attr("style", style)
        if not (tabindex is None or tabindex is False):
            self._process_attr("tabindex", tabindex)
        if not (title is None or title is False):
            self._process_attr("title", title)
        if not (translate is None or translate is False):
            self._process_attr("translate", translate)
        if not (writingsuggestions is None or writingsuggestions is False):
            self._process_attr("writingsuggestions", writingsuggestions)


class tr(BaseElement, GlobalAttrs):
    """
    The 'tr' element.  
    Description: Table row  
    Categories: none  
    Parents: table thead tbody tfoot  
    Children: th* td script-supporting elements  
    Interface: HTMLTableRowElement  
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tr  
    """ # fmt: skip


    def __init__(
        self,
        attrs: Optional[Union[dict[str, Union[str, dict, list]], list[BaseAttribute]]] = None,
        id: Optional[Union[str, GlobalAttrs.id]] = None,
        class_: Optional[Union[str, GlobalAttrs.class_]] = None,
        accesskey: Optional[Union[str, GlobalAttrs.accesskey]] = None,
        autocapitalize: Optional[Union[str, GlobalAttrs.autocapitalize, Literal['on', 'off', 'none', 'sentences', 'words', 'characters']]] = None,
        autocorrect: Optional[Union[str, GlobalAttrs.autocorrect, Literal['on', 'off']]] = None,
        autofocus: Optional[Union[str, GlobalAttrs.autofocus, bool]] = None,
        contenteditable: Optional[Union[str, GlobalAttrs.contenteditable, Literal['true', 'plaintext-only', 'false']]] = None,
        dir: Optional[Union[str, GlobalAttrs.dir, Literal['ltr', 'rtl', 'auto']]] = None,
        draggable: Optional[Union[str, GlobalAttrs.draggable, Literal['true', 'false']]] = None,
        enterkeyhint: Optional[Union[str, GlobalAttrs.enterkeyhint, Literal['enter', 'done', 'go', 'next', 'previous', 'search', 'send']]] = None,
        hidden: Optional[Union[str, GlobalAttrs.hidden, Literal['until-found', 'hidden', '']]] = None,
        inert: Optional[Union[str, GlobalAttrs.inert, bool]] = None,
        inputmode: Optional[Union[str, GlobalAttrs.inputmode, Literal['none', 'text', 'tel', 'email', 'url', 'numeric', 'decimal', 'search']]] = None,
        is_: Optional[Union[str, GlobalAttrs.is_]] = None,
        itemid: Optional[Union[str, GlobalAttrs.itemid]] = None,
        itemprop: Optional[Union[str, GlobalAttrs.itemprop]] = None,
        itemref: Optional[Union[str, GlobalAttrs.itemref]] = None,
        itemscope: Optional[Union[str, GlobalAttrs.itemscope, bool]] = None,
        itemtype: Optional[Union[str, GlobalAttrs.itemtype]] = None,
        lang: Optional[Union[str, GlobalAttrs.lang]] = None,
        nonce: Optional[Union[str, GlobalAttrs.nonce]] = None,
        popover: Optional[Union[str, GlobalAttrs.popover, Literal['auto', 'manual']]] = None,
        slot: Optional[Union[str, GlobalAttrs.slot]] = None,
        spellcheck: Optional[Union[str, GlobalAttrs.spellcheck, Literal['true', 'false', '']]] = None,
        style: Optional[Union[str, GlobalAttrs.style]] = None,
        tabindex: Optional[Union[str, GlobalAttrs.tabindex, int]] = None,
        title: Optional[Union[str, GlobalAttrs.title]] = None,
        translate: Optional[Union[str, GlobalAttrs.translate, Literal['yes', 'no']]] = None,
        writingsuggestions: Optional[Union[str, GlobalAttrs.writingsuggestions, Literal['true', 'false', '']]] = None,
        children: Optional[list] = None
    ) -> None:
        """
        Initialize 'tr' (Table row) element.  
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tr

        :param attrs: A list or dictionary of attributes for the element
        :param id: The element's ID
        :param class_: Classes to which the element belongs
            | Set of space-separated tokens
        :param accesskey: Keyboard shortcut to activate or focus element
            | Ordered set of unique space-separated tokens, none of which are identical to another, each consisting of one code point in length
        :param autocapitalize: Recommended autocapitalization behavior (for supported input methods)
        :param autocorrect: Recommended autocorrection behavior (for supported input methods)
        :param autofocus: Automatically focus the element when the page is loaded
        :param contenteditable: Whether the element is editable
        :param dir: The text directionality of the element
        :param draggable: Whether the element is draggable
        :param enterkeyhint: Hint for selecting an enter key action
        :param hidden: Whether the element is relevant
        :param inert: Whether the element is inert.
        :param inputmode: Hint for selecting an input modality
        :param is_: Creates a customized built-in element
            | Valid custom element name of a defined customized built-in element
        :param itemid: Global identifier for a microdata item
            | Valid URL potentially surrounded by spaces
        :param itemprop: Property names of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs, defined property names, or text*
        :param itemref: Referenced elements
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param itemscope: Introduces a microdata item
        :param itemtype: Item types of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs*
        :param lang: Language of the element
            | Valid BCP 47 language tag or the empty string
        :param nonce: Cryptographic nonce used in Content Security Policy checks [CSP]
        :param popover: Makes the element a popover element
        :param slot: The element's desired slot
        :param spellcheck: Whether the element is to have its spelling and grammar checked
        :param style: Presentational and formatting instructions
            | CSS declarations*
        :param tabindex: Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation
        :param title: Advisory information for the element
        :param translate: Whether the element is to be translated when the page is localized
        :param writingsuggestions: Whether the element can offer writing suggestions or not.
        """ #fmt: skip
        super().__init__(
            "tr",
            void_element=False,
            attrs=attrs,
            children=children
        )
        if not (id is None or id is False):
            self._process_attr("id", id)
        if not (class_ is None or class_ is False):
            self._process_attr("class", class_)
        if not (accesskey is None or accesskey is False):
            self._process_attr("accesskey", accesskey)
        if not (autocapitalize is None or autocapitalize is False):
            self._process_attr("autocapitalize", autocapitalize)
        if not (autocorrect is None or autocorrect is False):
            self._process_attr("autocorrect", autocorrect)
        if not (autofocus is None or autofocus is False):
            self._process_attr("autofocus", autofocus)
        if not (contenteditable is None or contenteditable is False):
            self._process_attr("contenteditable", contenteditable)
        if not (dir is None or dir is False):
            self._process_attr("dir", dir)
        if not (draggable is None or draggable is False):
            self._process_attr("draggable", draggable)
        if not (enterkeyhint is None or enterkeyhint is False):
            self._process_attr("enterkeyhint", enterkeyhint)
        if not (hidden is None or hidden is False):
            self._process_attr("hidden", hidden)
        if not (inert is None or inert is False):
            self._process_attr("inert", inert)
        if not (inputmode is None or inputmode is False):
            self._process_attr("inputmode", inputmode)
        if not (is_ is None or is_ is False):
            self._process_attr("is", is_)
        if not (itemid is None or itemid is False):
            self._process_attr("itemid", itemid)
        if not (itemprop is None or itemprop is False):
            self._process_attr("itemprop", itemprop)
        if not (itemref is None or itemref is False):
            self._process_attr("itemref", itemref)
        if not (itemscope is None or itemscope is False):
            self._process_attr("itemscope", itemscope)
        if not (itemtype is None or itemtype is False):
            self._process_attr("itemtype", itemtype)
        if not (lang is None or lang is False):
            self._process_attr("lang", lang)
        if not (nonce is None or nonce is False):
            self._process_attr("nonce", nonce)
        if not (popover is None or popover is False):
            self._process_attr("popover", popover)
        if not (slot is None or slot is False):
            self._process_attr("slot", slot)
        if not (spellcheck is None or spellcheck is False):
            self._process_attr("spellcheck", spellcheck)
        if not (style is None or style is False):
            self._process_attr("style", style)
        if not (tabindex is None or tabindex is False):
            self._process_attr("tabindex", tabindex)
        if not (title is None or title is False):
            self._process_attr("title", title)
        if not (translate is None or translate is False):
            self._process_attr("translate", translate)
        if not (writingsuggestions is None or writingsuggestions is False):
            self._process_attr("writingsuggestions", writingsuggestions)


class track(BaseElement, GlobalAttrs, TrackAttrs):
    """
    The 'track' element.  
    Description: Timed text track  
    Categories: none  
    Parents: audio video  
    Children: empty  
    Interface: HTMLTrackElement  
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/track  
    """ # fmt: skip


    def __init__(
        self,
        attrs: Optional[Union[dict[str, Union[str, dict, list]], list[BaseAttribute]]] = None,
        id: Optional[Union[str, GlobalAttrs.id]] = None,
        class_: Optional[Union[str, GlobalAttrs.class_]] = None,
        default: Optional[Union[str, TrackAttrs.default, bool]] = None,
        kind: Optional[Union[str, TrackAttrs.kind, Literal['subtitles', 'captions', 'descriptions', 'chapters', 'metadata']]] = None,
        label: Optional[Union[str, TrackAttrs.label]] = None,
        src: Optional[Union[str, TrackAttrs.src]] = None,
        srclang: Optional[Union[str, TrackAttrs.srclang]] = None,
        accesskey: Optional[Union[str, GlobalAttrs.accesskey]] = None,
        autocapitalize: Optional[Union[str, GlobalAttrs.autocapitalize, Literal['on', 'off', 'none', 'sentences', 'words', 'characters']]] = None,
        autocorrect: Optional[Union[str, GlobalAttrs.autocorrect, Literal['on', 'off']]] = None,
        autofocus: Optional[Union[str, GlobalAttrs.autofocus, bool]] = None,
        contenteditable: Optional[Union[str, GlobalAttrs.contenteditable, Literal['true', 'plaintext-only', 'false']]] = None,
        dir: Optional[Union[str, GlobalAttrs.dir, Literal['ltr', 'rtl', 'auto']]] = None,
        draggable: Optional[Union[str, GlobalAttrs.draggable, Literal['true', 'false']]] = None,
        enterkeyhint: Optional[Union[str, GlobalAttrs.enterkeyhint, Literal['enter', 'done', 'go', 'next', 'previous', 'search', 'send']]] = None,
        hidden: Optional[Union[str, GlobalAttrs.hidden, Literal['until-found', 'hidden', '']]] = None,
        inert: Optional[Union[str, GlobalAttrs.inert, bool]] = None,
        inputmode: Optional[Union[str, GlobalAttrs.inputmode, Literal['none', 'text', 'tel', 'email', 'url', 'numeric', 'decimal', 'search']]] = None,
        is_: Optional[Union[str, GlobalAttrs.is_]] = None,
        itemid: Optional[Union[str, GlobalAttrs.itemid]] = None,
        itemprop: Optional[Union[str, GlobalAttrs.itemprop]] = None,
        itemref: Optional[Union[str, GlobalAttrs.itemref]] = None,
        itemscope: Optional[Union[str, GlobalAttrs.itemscope, bool]] = None,
        itemtype: Optional[Union[str, GlobalAttrs.itemtype]] = None,
        lang: Optional[Union[str, GlobalAttrs.lang]] = None,
        nonce: Optional[Union[str, GlobalAttrs.nonce]] = None,
        popover: Optional[Union[str, GlobalAttrs.popover, Literal['auto', 'manual']]] = None,
        slot: Optional[Union[str, GlobalAttrs.slot]] = None,
        spellcheck: Optional[Union[str, GlobalAttrs.spellcheck, Literal['true', 'false', '']]] = None,
        style: Optional[Union[str, GlobalAttrs.style]] = None,
        tabindex: Optional[Union[str, GlobalAttrs.tabindex, int]] = None,
        title: Optional[Union[str, GlobalAttrs.title]] = None,
        translate: Optional[Union[str, GlobalAttrs.translate, Literal['yes', 'no']]] = None,
        writingsuggestions: Optional[Union[str, GlobalAttrs.writingsuggestions, Literal['true', 'false', '']]] = None,
        children: Optional[list] = None
    ) -> None:
        """
        Initialize 'track' (Timed text track) element.  
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/track

        :param attrs: A list or dictionary of attributes for the element
        :param id: The element's ID
        :param class_: Classes to which the element belongs
            | Set of space-separated tokens
        :param default: Enable the track if no other text track is more suitable
        :param kind: The type of text track
        :param label: User-visible label
        :param src: Address of the resource
            | Valid non-empty URL potentially surrounded by spaces
        :param srclang: Language of the text track
            | Valid BCP 47 language tag
        :param accesskey: Keyboard shortcut to activate or focus element
            | Ordered set of unique space-separated tokens, none of which are identical to another, each consisting of one code point in length
        :param autocapitalize: Recommended autocapitalization behavior (for supported input methods)
        :param autocorrect: Recommended autocorrection behavior (for supported input methods)
        :param autofocus: Automatically focus the element when the page is loaded
        :param contenteditable: Whether the element is editable
        :param dir: The text directionality of the element
        :param draggable: Whether the element is draggable
        :param enterkeyhint: Hint for selecting an enter key action
        :param hidden: Whether the element is relevant
        :param inert: Whether the element is inert.
        :param inputmode: Hint for selecting an input modality
        :param is_: Creates a customized built-in element
            | Valid custom element name of a defined customized built-in element
        :param itemid: Global identifier for a microdata item
            | Valid URL potentially surrounded by spaces
        :param itemprop: Property names of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs, defined property names, or text*
        :param itemref: Referenced elements
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param itemscope: Introduces a microdata item
        :param itemtype: Item types of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs*
        :param lang: Language of the element
            | Valid BCP 47 language tag or the empty string
        :param nonce: Cryptographic nonce used in Content Security Policy checks [CSP]
        :param popover: Makes the element a popover element
        :param slot: The element's desired slot
        :param spellcheck: Whether the element is to have its spelling and grammar checked
        :param style: Presentational and formatting instructions
            | CSS declarations*
        :param tabindex: Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation
        :param title: Advisory information for the element
        :param translate: Whether the element is to be translated when the page is localized
        :param writingsuggestions: Whether the element can offer writing suggestions or not.
        """ #fmt: skip
        super().__init__(
            "track",
            void_element=True,
            attrs=attrs,
            children=children
        )
        if not (id is None or id is False):
            self._process_attr("id", id)
        if not (class_ is None or class_ is False):
            self._process_attr("class", class_)
        if not (default is None or default is False):
            self._process_attr("default", default)
        if not (kind is None or kind is False):
            self._process_attr("kind", kind)
        if not (label is None or label is False):
            self._process_attr("label", label)
        if not (src is None or src is False):
            self._process_attr("src", src)
        if not (srclang is None or srclang is False):
            self._process_attr("srclang", srclang)
        if not (accesskey is None or accesskey is False):
            self._process_attr("accesskey", accesskey)
        if not (autocapitalize is None or autocapitalize is False):
            self._process_attr("autocapitalize", autocapitalize)
        if not (autocorrect is None or autocorrect is False):
            self._process_attr("autocorrect", autocorrect)
        if not (autofocus is None or autofocus is False):
            self._process_attr("autofocus", autofocus)
        if not (contenteditable is None or contenteditable is False):
            self._process_attr("contenteditable", contenteditable)
        if not (dir is None or dir is False):
            self._process_attr("dir", dir)
        if not (draggable is None or draggable is False):
            self._process_attr("draggable", draggable)
        if not (enterkeyhint is None or enterkeyhint is False):
            self._process_attr("enterkeyhint", enterkeyhint)
        if not (hidden is None or hidden is False):
            self._process_attr("hidden", hidden)
        if not (inert is None or inert is False):
            self._process_attr("inert", inert)
        if not (inputmode is None or inputmode is False):
            self._process_attr("inputmode", inputmode)
        if not (is_ is None or is_ is False):
            self._process_attr("is", is_)
        if not (itemid is None or itemid is False):
            self._process_attr("itemid", itemid)
        if not (itemprop is None or itemprop is False):
            self._process_attr("itemprop", itemprop)
        if not (itemref is None or itemref is False):
            self._process_attr("itemref", itemref)
        if not (itemscope is None or itemscope is False):
            self._process_attr("itemscope", itemscope)
        if not (itemtype is None or itemtype is False):
            self._process_attr("itemtype", itemtype)
        if not (lang is None or lang is False):
            self._process_attr("lang", lang)
        if not (nonce is None or nonce is False):
            self._process_attr("nonce", nonce)
        if not (popover is None or popover is False):
            self._process_attr("popover", popover)
        if not (slot is None or slot is False):
            self._process_attr("slot", slot)
        if not (spellcheck is None or spellcheck is False):
            self._process_attr("spellcheck", spellcheck)
        if not (style is None or style is False):
            self._process_attr("style", style)
        if not (tabindex is None or tabindex is False):
            self._process_attr("tabindex", tabindex)
        if not (title is None or title is False):
            self._process_attr("title", title)
        if not (translate is None or translate is False):
            self._process_attr("translate", translate)
        if not (writingsuggestions is None or writingsuggestions is False):
            self._process_attr("writingsuggestions", writingsuggestions)


class u(BaseElement, GlobalAttrs):
    """
    The 'u' element.  
    Description: Unarticulated annotation  
    Categories: flow phrasing palpable  
    Parents: phrasing  
    Children: phrasing  
    Interface: HTMLElement  
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/u  
    """ # fmt: skip


    def __init__(
        self,
        attrs: Optional[Union[dict[str, Union[str, dict, list]], list[BaseAttribute]]] = None,
        id: Optional[Union[str, GlobalAttrs.id]] = None,
        class_: Optional[Union[str, GlobalAttrs.class_]] = None,
        accesskey: Optional[Union[str, GlobalAttrs.accesskey]] = None,
        autocapitalize: Optional[Union[str, GlobalAttrs.autocapitalize, Literal['on', 'off', 'none', 'sentences', 'words', 'characters']]] = None,
        autocorrect: Optional[Union[str, GlobalAttrs.autocorrect, Literal['on', 'off']]] = None,
        autofocus: Optional[Union[str, GlobalAttrs.autofocus, bool]] = None,
        contenteditable: Optional[Union[str, GlobalAttrs.contenteditable, Literal['true', 'plaintext-only', 'false']]] = None,
        dir: Optional[Union[str, GlobalAttrs.dir, Literal['ltr', 'rtl', 'auto']]] = None,
        draggable: Optional[Union[str, GlobalAttrs.draggable, Literal['true', 'false']]] = None,
        enterkeyhint: Optional[Union[str, GlobalAttrs.enterkeyhint, Literal['enter', 'done', 'go', 'next', 'previous', 'search', 'send']]] = None,
        hidden: Optional[Union[str, GlobalAttrs.hidden, Literal['until-found', 'hidden', '']]] = None,
        inert: Optional[Union[str, GlobalAttrs.inert, bool]] = None,
        inputmode: Optional[Union[str, GlobalAttrs.inputmode, Literal['none', 'text', 'tel', 'email', 'url', 'numeric', 'decimal', 'search']]] = None,
        is_: Optional[Union[str, GlobalAttrs.is_]] = None,
        itemid: Optional[Union[str, GlobalAttrs.itemid]] = None,
        itemprop: Optional[Union[str, GlobalAttrs.itemprop]] = None,
        itemref: Optional[Union[str, GlobalAttrs.itemref]] = None,
        itemscope: Optional[Union[str, GlobalAttrs.itemscope, bool]] = None,
        itemtype: Optional[Union[str, GlobalAttrs.itemtype]] = None,
        lang: Optional[Union[str, GlobalAttrs.lang]] = None,
        nonce: Optional[Union[str, GlobalAttrs.nonce]] = None,
        popover: Optional[Union[str, GlobalAttrs.popover, Literal['auto', 'manual']]] = None,
        slot: Optional[Union[str, GlobalAttrs.slot]] = None,
        spellcheck: Optional[Union[str, GlobalAttrs.spellcheck, Literal['true', 'false', '']]] = None,
        style: Optional[Union[str, GlobalAttrs.style]] = None,
        tabindex: Optional[Union[str, GlobalAttrs.tabindex, int]] = None,
        title: Optional[Union[str, GlobalAttrs.title]] = None,
        translate: Optional[Union[str, GlobalAttrs.translate, Literal['yes', 'no']]] = None,
        writingsuggestions: Optional[Union[str, GlobalAttrs.writingsuggestions, Literal['true', 'false', '']]] = None,
        children: Optional[list] = None
    ) -> None:
        """
        Initialize 'u' (Unarticulated annotation) element.  
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/u

        :param attrs: A list or dictionary of attributes for the element
        :param id: The element's ID
        :param class_: Classes to which the element belongs
            | Set of space-separated tokens
        :param accesskey: Keyboard shortcut to activate or focus element
            | Ordered set of unique space-separated tokens, none of which are identical to another, each consisting of one code point in length
        :param autocapitalize: Recommended autocapitalization behavior (for supported input methods)
        :param autocorrect: Recommended autocorrection behavior (for supported input methods)
        :param autofocus: Automatically focus the element when the page is loaded
        :param contenteditable: Whether the element is editable
        :param dir: The text directionality of the element
        :param draggable: Whether the element is draggable
        :param enterkeyhint: Hint for selecting an enter key action
        :param hidden: Whether the element is relevant
        :param inert: Whether the element is inert.
        :param inputmode: Hint for selecting an input modality
        :param is_: Creates a customized built-in element
            | Valid custom element name of a defined customized built-in element
        :param itemid: Global identifier for a microdata item
            | Valid URL potentially surrounded by spaces
        :param itemprop: Property names of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs, defined property names, or text*
        :param itemref: Referenced elements
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param itemscope: Introduces a microdata item
        :param itemtype: Item types of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs*
        :param lang: Language of the element
            | Valid BCP 47 language tag or the empty string
        :param nonce: Cryptographic nonce used in Content Security Policy checks [CSP]
        :param popover: Makes the element a popover element
        :param slot: The element's desired slot
        :param spellcheck: Whether the element is to have its spelling and grammar checked
        :param style: Presentational and formatting instructions
            | CSS declarations*
        :param tabindex: Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation
        :param title: Advisory information for the element
        :param translate: Whether the element is to be translated when the page is localized
        :param writingsuggestions: Whether the element can offer writing suggestions or not.
        """ #fmt: skip
        super().__init__(
            "u",
            void_element=False,
            attrs=attrs,
            children=children
        )
        if not (id is None or id is False):
            self._process_attr("id", id)
        if not (class_ is None or class_ is False):
            self._process_attr("class", class_)
        if not (accesskey is None or accesskey is False):
            self._process_attr("accesskey", accesskey)
        if not (autocapitalize is None or autocapitalize is False):
            self._process_attr("autocapitalize", autocapitalize)
        if not (autocorrect is None or autocorrect is False):
            self._process_attr("autocorrect", autocorrect)
        if not (autofocus is None or autofocus is False):
            self._process_attr("autofocus", autofocus)
        if not (contenteditable is None or contenteditable is False):
            self._process_attr("contenteditable", contenteditable)
        if not (dir is None or dir is False):
            self._process_attr("dir", dir)
        if not (draggable is None or draggable is False):
            self._process_attr("draggable", draggable)
        if not (enterkeyhint is None or enterkeyhint is False):
            self._process_attr("enterkeyhint", enterkeyhint)
        if not (hidden is None or hidden is False):
            self._process_attr("hidden", hidden)
        if not (inert is None or inert is False):
            self._process_attr("inert", inert)
        if not (inputmode is None or inputmode is False):
            self._process_attr("inputmode", inputmode)
        if not (is_ is None or is_ is False):
            self._process_attr("is", is_)
        if not (itemid is None or itemid is False):
            self._process_attr("itemid", itemid)
        if not (itemprop is None or itemprop is False):
            self._process_attr("itemprop", itemprop)
        if not (itemref is None or itemref is False):
            self._process_attr("itemref", itemref)
        if not (itemscope is None or itemscope is False):
            self._process_attr("itemscope", itemscope)
        if not (itemtype is None or itemtype is False):
            self._process_attr("itemtype", itemtype)
        if not (lang is None or lang is False):
            self._process_attr("lang", lang)
        if not (nonce is None or nonce is False):
            self._process_attr("nonce", nonce)
        if not (popover is None or popover is False):
            self._process_attr("popover", popover)
        if not (slot is None or slot is False):
            self._process_attr("slot", slot)
        if not (spellcheck is None or spellcheck is False):
            self._process_attr("spellcheck", spellcheck)
        if not (style is None or style is False):
            self._process_attr("style", style)
        if not (tabindex is None or tabindex is False):
            self._process_attr("tabindex", tabindex)
        if not (title is None or title is False):
            self._process_attr("title", title)
        if not (translate is None or translate is False):
            self._process_attr("translate", translate)
        if not (writingsuggestions is None or writingsuggestions is False):
            self._process_attr("writingsuggestions", writingsuggestions)


class ul(BaseElement, GlobalAttrs):
    """
    The 'ul' element.  
    Description: List  
    Categories: flow palpable*  
    Parents: flow  
    Children: li script-supporting elements  
    Interface: HTMLUListElement  
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ul  
    """ # fmt: skip


    def __init__(
        self,
        attrs: Optional[Union[dict[str, Union[str, dict, list]], list[BaseAttribute]]] = None,
        id: Optional[Union[str, GlobalAttrs.id]] = None,
        class_: Optional[Union[str, GlobalAttrs.class_]] = None,
        accesskey: Optional[Union[str, GlobalAttrs.accesskey]] = None,
        autocapitalize: Optional[Union[str, GlobalAttrs.autocapitalize, Literal['on', 'off', 'none', 'sentences', 'words', 'characters']]] = None,
        autocorrect: Optional[Union[str, GlobalAttrs.autocorrect, Literal['on', 'off']]] = None,
        autofocus: Optional[Union[str, GlobalAttrs.autofocus, bool]] = None,
        contenteditable: Optional[Union[str, GlobalAttrs.contenteditable, Literal['true', 'plaintext-only', 'false']]] = None,
        dir: Optional[Union[str, GlobalAttrs.dir, Literal['ltr', 'rtl', 'auto']]] = None,
        draggable: Optional[Union[str, GlobalAttrs.draggable, Literal['true', 'false']]] = None,
        enterkeyhint: Optional[Union[str, GlobalAttrs.enterkeyhint, Literal['enter', 'done', 'go', 'next', 'previous', 'search', 'send']]] = None,
        hidden: Optional[Union[str, GlobalAttrs.hidden, Literal['until-found', 'hidden', '']]] = None,
        inert: Optional[Union[str, GlobalAttrs.inert, bool]] = None,
        inputmode: Optional[Union[str, GlobalAttrs.inputmode, Literal['none', 'text', 'tel', 'email', 'url', 'numeric', 'decimal', 'search']]] = None,
        is_: Optional[Union[str, GlobalAttrs.is_]] = None,
        itemid: Optional[Union[str, GlobalAttrs.itemid]] = None,
        itemprop: Optional[Union[str, GlobalAttrs.itemprop]] = None,
        itemref: Optional[Union[str, GlobalAttrs.itemref]] = None,
        itemscope: Optional[Union[str, GlobalAttrs.itemscope, bool]] = None,
        itemtype: Optional[Union[str, GlobalAttrs.itemtype]] = None,
        lang: Optional[Union[str, GlobalAttrs.lang]] = None,
        nonce: Optional[Union[str, GlobalAttrs.nonce]] = None,
        popover: Optional[Union[str, GlobalAttrs.popover, Literal['auto', 'manual']]] = None,
        slot: Optional[Union[str, GlobalAttrs.slot]] = None,
        spellcheck: Optional[Union[str, GlobalAttrs.spellcheck, Literal['true', 'false', '']]] = None,
        style: Optional[Union[str, GlobalAttrs.style]] = None,
        tabindex: Optional[Union[str, GlobalAttrs.tabindex, int]] = None,
        title: Optional[Union[str, GlobalAttrs.title]] = None,
        translate: Optional[Union[str, GlobalAttrs.translate, Literal['yes', 'no']]] = None,
        writingsuggestions: Optional[Union[str, GlobalAttrs.writingsuggestions, Literal['true', 'false', '']]] = None,
        children: Optional[list] = None
    ) -> None:
        """
        Initialize 'ul' (List) element.  
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ul

        :param attrs: A list or dictionary of attributes for the element
        :param id: The element's ID
        :param class_: Classes to which the element belongs
            | Set of space-separated tokens
        :param accesskey: Keyboard shortcut to activate or focus element
            | Ordered set of unique space-separated tokens, none of which are identical to another, each consisting of one code point in length
        :param autocapitalize: Recommended autocapitalization behavior (for supported input methods)
        :param autocorrect: Recommended autocorrection behavior (for supported input methods)
        :param autofocus: Automatically focus the element when the page is loaded
        :param contenteditable: Whether the element is editable
        :param dir: The text directionality of the element
        :param draggable: Whether the element is draggable
        :param enterkeyhint: Hint for selecting an enter key action
        :param hidden: Whether the element is relevant
        :param inert: Whether the element is inert.
        :param inputmode: Hint for selecting an input modality
        :param is_: Creates a customized built-in element
            | Valid custom element name of a defined customized built-in element
        :param itemid: Global identifier for a microdata item
            | Valid URL potentially surrounded by spaces
        :param itemprop: Property names of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs, defined property names, or text*
        :param itemref: Referenced elements
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param itemscope: Introduces a microdata item
        :param itemtype: Item types of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs*
        :param lang: Language of the element
            | Valid BCP 47 language tag or the empty string
        :param nonce: Cryptographic nonce used in Content Security Policy checks [CSP]
        :param popover: Makes the element a popover element
        :param slot: The element's desired slot
        :param spellcheck: Whether the element is to have its spelling and grammar checked
        :param style: Presentational and formatting instructions
            | CSS declarations*
        :param tabindex: Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation
        :param title: Advisory information for the element
        :param translate: Whether the element is to be translated when the page is localized
        :param writingsuggestions: Whether the element can offer writing suggestions or not.
        """ #fmt: skip
        super().__init__(
            "ul",
            void_element=False,
            attrs=attrs,
            children=children
        )
        if not (id is None or id is False):
            self._process_attr("id", id)
        if not (class_ is None or class_ is False):
            self._process_attr("class", class_)
        if not (accesskey is None or accesskey is False):
            self._process_attr("accesskey", accesskey)
        if not (autocapitalize is None or autocapitalize is False):
            self._process_attr("autocapitalize", autocapitalize)
        if not (autocorrect is None or autocorrect is False):
            self._process_attr("autocorrect", autocorrect)
        if not (autofocus is None or autofocus is False):
            self._process_attr("autofocus", autofocus)
        if not (contenteditable is None or contenteditable is False):
            self._process_attr("contenteditable", contenteditable)
        if not (dir is None or dir is False):
            self._process_attr("dir", dir)
        if not (draggable is None or draggable is False):
            self._process_attr("draggable", draggable)
        if not (enterkeyhint is None or enterkeyhint is False):
            self._process_attr("enterkeyhint", enterkeyhint)
        if not (hidden is None or hidden is False):
            self._process_attr("hidden", hidden)
        if not (inert is None or inert is False):
            self._process_attr("inert", inert)
        if not (inputmode is None or inputmode is False):
            self._process_attr("inputmode", inputmode)
        if not (is_ is None or is_ is False):
            self._process_attr("is", is_)
        if not (itemid is None or itemid is False):
            self._process_attr("itemid", itemid)
        if not (itemprop is None or itemprop is False):
            self._process_attr("itemprop", itemprop)
        if not (itemref is None or itemref is False):
            self._process_attr("itemref", itemref)
        if not (itemscope is None or itemscope is False):
            self._process_attr("itemscope", itemscope)
        if not (itemtype is None or itemtype is False):
            self._process_attr("itemtype", itemtype)
        if not (lang is None or lang is False):
            self._process_attr("lang", lang)
        if not (nonce is None or nonce is False):
            self._process_attr("nonce", nonce)
        if not (popover is None or popover is False):
            self._process_attr("popover", popover)
        if not (slot is None or slot is False):
            self._process_attr("slot", slot)
        if not (spellcheck is None or spellcheck is False):
            self._process_attr("spellcheck", spellcheck)
        if not (style is None or style is False):
            self._process_attr("style", style)
        if not (tabindex is None or tabindex is False):
            self._process_attr("tabindex", tabindex)
        if not (title is None or title is False):
            self._process_attr("title", title)
        if not (translate is None or translate is False):
            self._process_attr("translate", translate)
        if not (writingsuggestions is None or writingsuggestions is False):
            self._process_attr("writingsuggestions", writingsuggestions)


class var(BaseElement, GlobalAttrs):
    """
    The 'var' element.  
    Description: Variable  
    Categories: flow phrasing palpable  
    Parents: phrasing  
    Children: phrasing  
    Interface: HTMLElement  
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/var  
    """ # fmt: skip


    def __init__(
        self,
        attrs: Optional[Union[dict[str, Union[str, dict, list]], list[BaseAttribute]]] = None,
        id: Optional[Union[str, GlobalAttrs.id]] = None,
        class_: Optional[Union[str, GlobalAttrs.class_]] = None,
        accesskey: Optional[Union[str, GlobalAttrs.accesskey]] = None,
        autocapitalize: Optional[Union[str, GlobalAttrs.autocapitalize, Literal['on', 'off', 'none', 'sentences', 'words', 'characters']]] = None,
        autocorrect: Optional[Union[str, GlobalAttrs.autocorrect, Literal['on', 'off']]] = None,
        autofocus: Optional[Union[str, GlobalAttrs.autofocus, bool]] = None,
        contenteditable: Optional[Union[str, GlobalAttrs.contenteditable, Literal['true', 'plaintext-only', 'false']]] = None,
        dir: Optional[Union[str, GlobalAttrs.dir, Literal['ltr', 'rtl', 'auto']]] = None,
        draggable: Optional[Union[str, GlobalAttrs.draggable, Literal['true', 'false']]] = None,
        enterkeyhint: Optional[Union[str, GlobalAttrs.enterkeyhint, Literal['enter', 'done', 'go', 'next', 'previous', 'search', 'send']]] = None,
        hidden: Optional[Union[str, GlobalAttrs.hidden, Literal['until-found', 'hidden', '']]] = None,
        inert: Optional[Union[str, GlobalAttrs.inert, bool]] = None,
        inputmode: Optional[Union[str, GlobalAttrs.inputmode, Literal['none', 'text', 'tel', 'email', 'url', 'numeric', 'decimal', 'search']]] = None,
        is_: Optional[Union[str, GlobalAttrs.is_]] = None,
        itemid: Optional[Union[str, GlobalAttrs.itemid]] = None,
        itemprop: Optional[Union[str, GlobalAttrs.itemprop]] = None,
        itemref: Optional[Union[str, GlobalAttrs.itemref]] = None,
        itemscope: Optional[Union[str, GlobalAttrs.itemscope, bool]] = None,
        itemtype: Optional[Union[str, GlobalAttrs.itemtype]] = None,
        lang: Optional[Union[str, GlobalAttrs.lang]] = None,
        nonce: Optional[Union[str, GlobalAttrs.nonce]] = None,
        popover: Optional[Union[str, GlobalAttrs.popover, Literal['auto', 'manual']]] = None,
        slot: Optional[Union[str, GlobalAttrs.slot]] = None,
        spellcheck: Optional[Union[str, GlobalAttrs.spellcheck, Literal['true', 'false', '']]] = None,
        style: Optional[Union[str, GlobalAttrs.style]] = None,
        tabindex: Optional[Union[str, GlobalAttrs.tabindex, int]] = None,
        title: Optional[Union[str, GlobalAttrs.title]] = None,
        translate: Optional[Union[str, GlobalAttrs.translate, Literal['yes', 'no']]] = None,
        writingsuggestions: Optional[Union[str, GlobalAttrs.writingsuggestions, Literal['true', 'false', '']]] = None,
        children: Optional[list] = None
    ) -> None:
        """
        Initialize 'var' (Variable) element.  
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/var

        :param attrs: A list or dictionary of attributes for the element
        :param id: The element's ID
        :param class_: Classes to which the element belongs
            | Set of space-separated tokens
        :param accesskey: Keyboard shortcut to activate or focus element
            | Ordered set of unique space-separated tokens, none of which are identical to another, each consisting of one code point in length
        :param autocapitalize: Recommended autocapitalization behavior (for supported input methods)
        :param autocorrect: Recommended autocorrection behavior (for supported input methods)
        :param autofocus: Automatically focus the element when the page is loaded
        :param contenteditable: Whether the element is editable
        :param dir: The text directionality of the element
        :param draggable: Whether the element is draggable
        :param enterkeyhint: Hint for selecting an enter key action
        :param hidden: Whether the element is relevant
        :param inert: Whether the element is inert.
        :param inputmode: Hint for selecting an input modality
        :param is_: Creates a customized built-in element
            | Valid custom element name of a defined customized built-in element
        :param itemid: Global identifier for a microdata item
            | Valid URL potentially surrounded by spaces
        :param itemprop: Property names of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs, defined property names, or text*
        :param itemref: Referenced elements
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param itemscope: Introduces a microdata item
        :param itemtype: Item types of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs*
        :param lang: Language of the element
            | Valid BCP 47 language tag or the empty string
        :param nonce: Cryptographic nonce used in Content Security Policy checks [CSP]
        :param popover: Makes the element a popover element
        :param slot: The element's desired slot
        :param spellcheck: Whether the element is to have its spelling and grammar checked
        :param style: Presentational and formatting instructions
            | CSS declarations*
        :param tabindex: Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation
        :param title: Advisory information for the element
        :param translate: Whether the element is to be translated when the page is localized
        :param writingsuggestions: Whether the element can offer writing suggestions or not.
        """ #fmt: skip
        super().__init__(
            "var",
            void_element=False,
            attrs=attrs,
            children=children
        )
        if not (id is None or id is False):
            self._process_attr("id", id)
        if not (class_ is None or class_ is False):
            self._process_attr("class", class_)
        if not (accesskey is None or accesskey is False):
            self._process_attr("accesskey", accesskey)
        if not (autocapitalize is None or autocapitalize is False):
            self._process_attr("autocapitalize", autocapitalize)
        if not (autocorrect is None or autocorrect is False):
            self._process_attr("autocorrect", autocorrect)
        if not (autofocus is None or autofocus is False):
            self._process_attr("autofocus", autofocus)
        if not (contenteditable is None or contenteditable is False):
            self._process_attr("contenteditable", contenteditable)
        if not (dir is None or dir is False):
            self._process_attr("dir", dir)
        if not (draggable is None or draggable is False):
            self._process_attr("draggable", draggable)
        if not (enterkeyhint is None or enterkeyhint is False):
            self._process_attr("enterkeyhint", enterkeyhint)
        if not (hidden is None or hidden is False):
            self._process_attr("hidden", hidden)
        if not (inert is None or inert is False):
            self._process_attr("inert", inert)
        if not (inputmode is None or inputmode is False):
            self._process_attr("inputmode", inputmode)
        if not (is_ is None or is_ is False):
            self._process_attr("is", is_)
        if not (itemid is None or itemid is False):
            self._process_attr("itemid", itemid)
        if not (itemprop is None or itemprop is False):
            self._process_attr("itemprop", itemprop)
        if not (itemref is None or itemref is False):
            self._process_attr("itemref", itemref)
        if not (itemscope is None or itemscope is False):
            self._process_attr("itemscope", itemscope)
        if not (itemtype is None or itemtype is False):
            self._process_attr("itemtype", itemtype)
        if not (lang is None or lang is False):
            self._process_attr("lang", lang)
        if not (nonce is None or nonce is False):
            self._process_attr("nonce", nonce)
        if not (popover is None or popover is False):
            self._process_attr("popover", popover)
        if not (slot is None or slot is False):
            self._process_attr("slot", slot)
        if not (spellcheck is None or spellcheck is False):
            self._process_attr("spellcheck", spellcheck)
        if not (style is None or style is False):
            self._process_attr("style", style)
        if not (tabindex is None or tabindex is False):
            self._process_attr("tabindex", tabindex)
        if not (title is None or title is False):
            self._process_attr("title", title)
        if not (translate is None or translate is False):
            self._process_attr("translate", translate)
        if not (writingsuggestions is None or writingsuggestions is False):
            self._process_attr("writingsuggestions", writingsuggestions)


class video(BaseElement, GlobalAttrs, VideoAttrs):
    """
    The 'video' element.  
    Description: Video player  
    Categories: flow phrasing embedded interactive palpable  
    Parents: phrasing  
    Children: source* track* transparent*  
    Interface: HTMLVideoElement  
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video  
    """ # fmt: skip


    def __init__(
        self,
        attrs: Optional[Union[dict[str, Union[str, dict, list]], list[BaseAttribute]]] = None,
        id: Optional[Union[str, GlobalAttrs.id]] = None,
        class_: Optional[Union[str, GlobalAttrs.class_]] = None,
        autoplay: Optional[Union[str, VideoAttrs.autoplay, bool]] = None,
        controls: Optional[Union[str, VideoAttrs.controls, bool]] = None,
        crossorigin: Optional[Union[str, VideoAttrs.crossorigin, Literal['anonymous', 'use-credentials']]] = None,
        height: Optional[Union[str, VideoAttrs.height, int]] = None,
        loop: Optional[Union[str, VideoAttrs.loop, bool]] = None,
        muted: Optional[Union[str, VideoAttrs.muted, bool]] = None,
        playsinline: Optional[Union[str, VideoAttrs.playsinline, bool]] = None,
        poster: Optional[Union[str, VideoAttrs.poster]] = None,
        preload: Optional[Union[str, VideoAttrs.preload, Literal['none', 'metadata', 'auto']]] = None,
        src: Optional[Union[str, VideoAttrs.src]] = None,
        width: Optional[Union[str, VideoAttrs.width, int]] = None,
        accesskey: Optional[Union[str, GlobalAttrs.accesskey]] = None,
        autocapitalize: Optional[Union[str, GlobalAttrs.autocapitalize, Literal['on', 'off', 'none', 'sentences', 'words', 'characters']]] = None,
        autocorrect: Optional[Union[str, GlobalAttrs.autocorrect, Literal['on', 'off']]] = None,
        autofocus: Optional[Union[str, GlobalAttrs.autofocus, bool]] = None,
        contenteditable: Optional[Union[str, GlobalAttrs.contenteditable, Literal['true', 'plaintext-only', 'false']]] = None,
        dir: Optional[Union[str, GlobalAttrs.dir, Literal['ltr', 'rtl', 'auto']]] = None,
        draggable: Optional[Union[str, GlobalAttrs.draggable, Literal['true', 'false']]] = None,
        enterkeyhint: Optional[Union[str, GlobalAttrs.enterkeyhint, Literal['enter', 'done', 'go', 'next', 'previous', 'search', 'send']]] = None,
        hidden: Optional[Union[str, GlobalAttrs.hidden, Literal['until-found', 'hidden', '']]] = None,
        inert: Optional[Union[str, GlobalAttrs.inert, bool]] = None,
        inputmode: Optional[Union[str, GlobalAttrs.inputmode, Literal['none', 'text', 'tel', 'email', 'url', 'numeric', 'decimal', 'search']]] = None,
        is_: Optional[Union[str, GlobalAttrs.is_]] = None,
        itemid: Optional[Union[str, GlobalAttrs.itemid]] = None,
        itemprop: Optional[Union[str, GlobalAttrs.itemprop]] = None,
        itemref: Optional[Union[str, GlobalAttrs.itemref]] = None,
        itemscope: Optional[Union[str, GlobalAttrs.itemscope, bool]] = None,
        itemtype: Optional[Union[str, GlobalAttrs.itemtype]] = None,
        lang: Optional[Union[str, GlobalAttrs.lang]] = None,
        nonce: Optional[Union[str, GlobalAttrs.nonce]] = None,
        popover: Optional[Union[str, GlobalAttrs.popover, Literal['auto', 'manual']]] = None,
        slot: Optional[Union[str, GlobalAttrs.slot]] = None,
        spellcheck: Optional[Union[str, GlobalAttrs.spellcheck, Literal['true', 'false', '']]] = None,
        style: Optional[Union[str, GlobalAttrs.style]] = None,
        tabindex: Optional[Union[str, GlobalAttrs.tabindex, int]] = None,
        title: Optional[Union[str, GlobalAttrs.title]] = None,
        translate: Optional[Union[str, GlobalAttrs.translate, Literal['yes', 'no']]] = None,
        writingsuggestions: Optional[Union[str, GlobalAttrs.writingsuggestions, Literal['true', 'false', '']]] = None,
        children: Optional[list] = None
    ) -> None:
        """
        Initialize 'video' (Video player) element.  
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video

        :param attrs: A list or dictionary of attributes for the element
        :param id: The element's ID
        :param class_: Classes to which the element belongs
            | Set of space-separated tokens
        :param autoplay: Hint that the media resource can be started automatically when the page is loaded
        :param controls: Show user agent controls
        :param crossorigin: How the element handles crossorigin requests
        :param height: Vertical dimension
        :param loop: Whether to loop the media resource
        :param muted: Whether to mute the media resource by default
        :param playsinline: Encourage the user agent to display video content within the element's playback area
        :param poster: Poster frame to show prior to video playback
            | Valid non-empty URL potentially surrounded by spaces
        :param preload: Hints how much buffering the media resource will likely need
        :param src: Address of the resource
            | Valid non-empty URL potentially surrounded by spaces
        :param width: Horizontal dimension
        :param accesskey: Keyboard shortcut to activate or focus element
            | Ordered set of unique space-separated tokens, none of which are identical to another, each consisting of one code point in length
        :param autocapitalize: Recommended autocapitalization behavior (for supported input methods)
        :param autocorrect: Recommended autocorrection behavior (for supported input methods)
        :param autofocus: Automatically focus the element when the page is loaded
        :param contenteditable: Whether the element is editable
        :param dir: The text directionality of the element
        :param draggable: Whether the element is draggable
        :param enterkeyhint: Hint for selecting an enter key action
        :param hidden: Whether the element is relevant
        :param inert: Whether the element is inert.
        :param inputmode: Hint for selecting an input modality
        :param is_: Creates a customized built-in element
            | Valid custom element name of a defined customized built-in element
        :param itemid: Global identifier for a microdata item
            | Valid URL potentially surrounded by spaces
        :param itemprop: Property names of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs, defined property names, or text*
        :param itemref: Referenced elements
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param itemscope: Introduces a microdata item
        :param itemtype: Item types of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs*
        :param lang: Language of the element
            | Valid BCP 47 language tag or the empty string
        :param nonce: Cryptographic nonce used in Content Security Policy checks [CSP]
        :param popover: Makes the element a popover element
        :param slot: The element's desired slot
        :param spellcheck: Whether the element is to have its spelling and grammar checked
        :param style: Presentational and formatting instructions
            | CSS declarations*
        :param tabindex: Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation
        :param title: Advisory information for the element
        :param translate: Whether the element is to be translated when the page is localized
        :param writingsuggestions: Whether the element can offer writing suggestions or not.
        """ #fmt: skip
        super().__init__(
            "video",
            void_element=False,
            attrs=attrs,
            children=children
        )
        if not (id is None or id is False):
            self._process_attr("id", id)
        if not (class_ is None or class_ is False):
            self._process_attr("class", class_)
        if not (autoplay is None or autoplay is False):
            self._process_attr("autoplay", autoplay)
        if not (controls is None or controls is False):
            self._process_attr("controls", controls)
        if not (crossorigin is None or crossorigin is False):
            self._process_attr("crossorigin", crossorigin)
        if not (height is None or height is False):
            self._process_attr("height", height)
        if not (loop is None or loop is False):
            self._process_attr("loop", loop)
        if not (muted is None or muted is False):
            self._process_attr("muted", muted)
        if not (playsinline is None or playsinline is False):
            self._process_attr("playsinline", playsinline)
        if not (poster is None or poster is False):
            self._process_attr("poster", poster)
        if not (preload is None or preload is False):
            self._process_attr("preload", preload)
        if not (src is None or src is False):
            self._process_attr("src", src)
        if not (width is None or width is False):
            self._process_attr("width", width)
        if not (accesskey is None or accesskey is False):
            self._process_attr("accesskey", accesskey)
        if not (autocapitalize is None or autocapitalize is False):
            self._process_attr("autocapitalize", autocapitalize)
        if not (autocorrect is None or autocorrect is False):
            self._process_attr("autocorrect", autocorrect)
        if not (autofocus is None or autofocus is False):
            self._process_attr("autofocus", autofocus)
        if not (contenteditable is None or contenteditable is False):
            self._process_attr("contenteditable", contenteditable)
        if not (dir is None or dir is False):
            self._process_attr("dir", dir)
        if not (draggable is None or draggable is False):
            self._process_attr("draggable", draggable)
        if not (enterkeyhint is None or enterkeyhint is False):
            self._process_attr("enterkeyhint", enterkeyhint)
        if not (hidden is None or hidden is False):
            self._process_attr("hidden", hidden)
        if not (inert is None or inert is False):
            self._process_attr("inert", inert)
        if not (inputmode is None or inputmode is False):
            self._process_attr("inputmode", inputmode)
        if not (is_ is None or is_ is False):
            self._process_attr("is", is_)
        if not (itemid is None or itemid is False):
            self._process_attr("itemid", itemid)
        if not (itemprop is None or itemprop is False):
            self._process_attr("itemprop", itemprop)
        if not (itemref is None or itemref is False):
            self._process_attr("itemref", itemref)
        if not (itemscope is None or itemscope is False):
            self._process_attr("itemscope", itemscope)
        if not (itemtype is None or itemtype is False):
            self._process_attr("itemtype", itemtype)
        if not (lang is None or lang is False):
            self._process_attr("lang", lang)
        if not (nonce is None or nonce is False):
            self._process_attr("nonce", nonce)
        if not (popover is None or popover is False):
            self._process_attr("popover", popover)
        if not (slot is None or slot is False):
            self._process_attr("slot", slot)
        if not (spellcheck is None or spellcheck is False):
            self._process_attr("spellcheck", spellcheck)
        if not (style is None or style is False):
            self._process_attr("style", style)
        if not (tabindex is None or tabindex is False):
            self._process_attr("tabindex", tabindex)
        if not (title is None or title is False):
            self._process_attr("title", title)
        if not (translate is None or translate is False):
            self._process_attr("translate", translate)
        if not (writingsuggestions is None or writingsuggestions is False):
            self._process_attr("writingsuggestions", writingsuggestions)


class wbr(BaseElement, GlobalAttrs):
    """
    The 'wbr' element.  
    Description: Line breaking opportunity  
    Categories: flow phrasing  
    Parents: phrasing  
    Children: empty  
    Interface: HTMLElement  
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/wbr  
    """ # fmt: skip


    def __init__(
        self,
        attrs: Optional[Union[dict[str, Union[str, dict, list]], list[BaseAttribute]]] = None,
        id: Optional[Union[str, GlobalAttrs.id]] = None,
        class_: Optional[Union[str, GlobalAttrs.class_]] = None,
        accesskey: Optional[Union[str, GlobalAttrs.accesskey]] = None,
        autocapitalize: Optional[Union[str, GlobalAttrs.autocapitalize, Literal['on', 'off', 'none', 'sentences', 'words', 'characters']]] = None,
        autocorrect: Optional[Union[str, GlobalAttrs.autocorrect, Literal['on', 'off']]] = None,
        autofocus: Optional[Union[str, GlobalAttrs.autofocus, bool]] = None,
        contenteditable: Optional[Union[str, GlobalAttrs.contenteditable, Literal['true', 'plaintext-only', 'false']]] = None,
        dir: Optional[Union[str, GlobalAttrs.dir, Literal['ltr', 'rtl', 'auto']]] = None,
        draggable: Optional[Union[str, GlobalAttrs.draggable, Literal['true', 'false']]] = None,
        enterkeyhint: Optional[Union[str, GlobalAttrs.enterkeyhint, Literal['enter', 'done', 'go', 'next', 'previous', 'search', 'send']]] = None,
        hidden: Optional[Union[str, GlobalAttrs.hidden, Literal['until-found', 'hidden', '']]] = None,
        inert: Optional[Union[str, GlobalAttrs.inert, bool]] = None,
        inputmode: Optional[Union[str, GlobalAttrs.inputmode, Literal['none', 'text', 'tel', 'email', 'url', 'numeric', 'decimal', 'search']]] = None,
        is_: Optional[Union[str, GlobalAttrs.is_]] = None,
        itemid: Optional[Union[str, GlobalAttrs.itemid]] = None,
        itemprop: Optional[Union[str, GlobalAttrs.itemprop]] = None,
        itemref: Optional[Union[str, GlobalAttrs.itemref]] = None,
        itemscope: Optional[Union[str, GlobalAttrs.itemscope, bool]] = None,
        itemtype: Optional[Union[str, GlobalAttrs.itemtype]] = None,
        lang: Optional[Union[str, GlobalAttrs.lang]] = None,
        nonce: Optional[Union[str, GlobalAttrs.nonce]] = None,
        popover: Optional[Union[str, GlobalAttrs.popover, Literal['auto', 'manual']]] = None,
        slot: Optional[Union[str, GlobalAttrs.slot]] = None,
        spellcheck: Optional[Union[str, GlobalAttrs.spellcheck, Literal['true', 'false', '']]] = None,
        style: Optional[Union[str, GlobalAttrs.style]] = None,
        tabindex: Optional[Union[str, GlobalAttrs.tabindex, int]] = None,
        title: Optional[Union[str, GlobalAttrs.title]] = None,
        translate: Optional[Union[str, GlobalAttrs.translate, Literal['yes', 'no']]] = None,
        writingsuggestions: Optional[Union[str, GlobalAttrs.writingsuggestions, Literal['true', 'false', '']]] = None,
        children: Optional[list] = None
    ) -> None:
        """
        Initialize 'wbr' (Line breaking opportunity) element.  
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/wbr

        :param attrs: A list or dictionary of attributes for the element
        :param id: The element's ID
        :param class_: Classes to which the element belongs
            | Set of space-separated tokens
        :param accesskey: Keyboard shortcut to activate or focus element
            | Ordered set of unique space-separated tokens, none of which are identical to another, each consisting of one code point in length
        :param autocapitalize: Recommended autocapitalization behavior (for supported input methods)
        :param autocorrect: Recommended autocorrection behavior (for supported input methods)
        :param autofocus: Automatically focus the element when the page is loaded
        :param contenteditable: Whether the element is editable
        :param dir: The text directionality of the element
        :param draggable: Whether the element is draggable
        :param enterkeyhint: Hint for selecting an enter key action
        :param hidden: Whether the element is relevant
        :param inert: Whether the element is inert.
        :param inputmode: Hint for selecting an input modality
        :param is_: Creates a customized built-in element
            | Valid custom element name of a defined customized built-in element
        :param itemid: Global identifier for a microdata item
            | Valid URL potentially surrounded by spaces
        :param itemprop: Property names of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs, defined property names, or text*
        :param itemref: Referenced elements
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param itemscope: Introduces a microdata item
        :param itemtype: Item types of a microdata item
            | Unordered set of unique space-separated tokens consisting of valid absolute URLs*
        :param lang: Language of the element
            | Valid BCP 47 language tag or the empty string
        :param nonce: Cryptographic nonce used in Content Security Policy checks [CSP]
        :param popover: Makes the element a popover element
        :param slot: The element's desired slot
        :param spellcheck: Whether the element is to have its spelling and grammar checked
        :param style: Presentational and formatting instructions
            | CSS declarations*
        :param tabindex: Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation
        :param title: Advisory information for the element
        :param translate: Whether the element is to be translated when the page is localized
        :param writingsuggestions: Whether the element can offer writing suggestions or not.
        """ #fmt: skip
        super().__init__(
            "wbr",
            void_element=True,
            attrs=attrs,
            children=children
        )
        if not (id is None or id is False):
            self._process_attr("id", id)
        if not (class_ is None or class_ is False):
            self._process_attr("class", class_)
        if not (accesskey is None or accesskey is False):
            self._process_attr("accesskey", accesskey)
        if not (autocapitalize is None or autocapitalize is False):
            self._process_attr("autocapitalize", autocapitalize)
        if not (autocorrect is None or autocorrect is False):
            self._process_attr("autocorrect", autocorrect)
        if not (autofocus is None or autofocus is False):
            self._process_attr("autofocus", autofocus)
        if not (contenteditable is None or contenteditable is False):
            self._process_attr("contenteditable", contenteditable)
        if not (dir is None or dir is False):
            self._process_attr("dir", dir)
        if not (draggable is None or draggable is False):
            self._process_attr("draggable", draggable)
        if not (enterkeyhint is None or enterkeyhint is False):
            self._process_attr("enterkeyhint", enterkeyhint)
        if not (hidden is None or hidden is False):
            self._process_attr("hidden", hidden)
        if not (inert is None or inert is False):
            self._process_attr("inert", inert)
        if not (inputmode is None or inputmode is False):
            self._process_attr("inputmode", inputmode)
        if not (is_ is None or is_ is False):
            self._process_attr("is", is_)
        if not (itemid is None or itemid is False):
            self._process_attr("itemid", itemid)
        if not (itemprop is None or itemprop is False):
            self._process_attr("itemprop", itemprop)
        if not (itemref is None or itemref is False):
            self._process_attr("itemref", itemref)
        if not (itemscope is None or itemscope is False):
            self._process_attr("itemscope", itemscope)
        if not (itemtype is None or itemtype is False):
            self._process_attr("itemtype", itemtype)
        if not (lang is None or lang is False):
            self._process_attr("lang", lang)
        if not (nonce is None or nonce is False):
            self._process_attr("nonce", nonce)
        if not (popover is None or popover is False):
            self._process_attr("popover", popover)
        if not (slot is None or slot is False):
            self._process_attr("slot", slot)
        if not (spellcheck is None or spellcheck is False):
            self._process_attr("spellcheck", spellcheck)
        if not (style is None or style is False):
            self._process_attr("style", style)
        if not (tabindex is None or tabindex is False):
            self._process_attr("tabindex", tabindex)
        if not (title is None or title is False):
            self._process_attr("title", title)
        if not (translate is None or translate is False):
            self._process_attr("translate", translate)
        if not (writingsuggestions is None or writingsuggestions is False):
            self._process_attr("writingsuggestions", writingsuggestions)